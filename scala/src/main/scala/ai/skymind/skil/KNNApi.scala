/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ai.skymind.skil

import java.text.SimpleDateFormat

import ai.skymind.skil.model.Base64NDArrayBodyKNN
import ai.skymind.skil.model.NearestNeighborRequest
import ai.skymind.skil.model.NearestNeighborsResults
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class KNNApi(
  val defBasePath: String = "http://localhost:9008",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new KNNApiAsyncHelper(client, config)

  /**
   * Runs knn on the given index with the given k
   * Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param KnnName ID or name of the deployed knn 
   * @param Body  
   * @return NearestNeighborsResults
   */
  def knn(DeploymentName: String, VersionName: String, KnnName: String, Body: NearestNeighborRequest): Option[NearestNeighborsResults] = {
    val await = Try(Await.result(knnAsync(DeploymentName, VersionName, KnnName, Body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Runs knn on the given index with the given k asynchronously
   * Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param KnnName ID or name of the deployed knn 
   * @param Body  
   * @return Future(NearestNeighborsResults)
   */
  def knnAsync(DeploymentName: String, VersionName: String, KnnName: String, Body: NearestNeighborRequest): Future[NearestNeighborsResults] = {
      helper.knn(DeploymentName, VersionName, KnnName, Body)
  }

  /**
   * Run a k nearest neighbors search on a NEW data point
   * 
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param KnnName ID or name of the deployed knn 
   * @param Body The input NDArray 
   * @return NearestNeighborsResults
   */
  def knnnew(DeploymentName: String, VersionName: String, KnnName: String, Body: Base64NDArrayBodyKNN): Option[NearestNeighborsResults] = {
    val await = Try(Await.result(knnnewAsync(DeploymentName, VersionName, KnnName, Body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Run a k nearest neighbors search on a NEW data point asynchronously
   * 
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param KnnName ID or name of the deployed knn 
   * @param Body The input NDArray 
   * @return Future(NearestNeighborsResults)
   */
  def knnnewAsync(DeploymentName: String, VersionName: String, KnnName: String, Body: Base64NDArrayBodyKNN): Future[NearestNeighborsResults] = {
      helper.knnnew(DeploymentName, VersionName, KnnName, Body)
  }

}

class KNNApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def knn(DeploymentName: String,
    VersionName: String,
    KnnName: String,
    Body: NearestNeighborRequest)(implicit reader: ClientResponseReader[NearestNeighborsResults], writer: RequestWriter[NearestNeighborRequest]): Future[NearestNeighborsResults] = {
    // create path and map variables
    val path = (addFmt("/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn")
      replaceAll("\\{" + "deploymentName" + "\\}", DeploymentName.toString)
      replaceAll("\\{" + "versionName" + "\\}", VersionName.toString)
      replaceAll("\\{" + "knnName" + "\\}", KnnName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentName == null) throw new Exception("Missing required parameter 'DeploymentName' when calling KNNApi->knn")

    if (VersionName == null) throw new Exception("Missing required parameter 'VersionName' when calling KNNApi->knn")

    if (KnnName == null) throw new Exception("Missing required parameter 'KnnName' when calling KNNApi->knn")

    if (Body == null) throw new Exception("Missing required parameter 'Body' when calling KNNApi->knn")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(Body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def knnnew(DeploymentName: String,
    VersionName: String,
    KnnName: String,
    Body: Base64NDArrayBodyKNN)(implicit reader: ClientResponseReader[NearestNeighborsResults], writer: RequestWriter[Base64NDArrayBodyKNN]): Future[NearestNeighborsResults] = {
    // create path and map variables
    val path = (addFmt("/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew")
      replaceAll("\\{" + "deploymentName" + "\\}", DeploymentName.toString)
      replaceAll("\\{" + "versionName" + "\\}", VersionName.toString)
      replaceAll("\\{" + "knnName" + "\\}", KnnName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentName == null) throw new Exception("Missing required parameter 'DeploymentName' when calling KNNApi->knnnew")

    if (VersionName == null) throw new Exception("Missing required parameter 'VersionName' when calling KNNApi->knnnew")

    if (KnnName == null) throw new Exception("Missing required parameter 'KnnName' when calling KNNApi->knnnew")

    if (Body == null) throw new Exception("Missing required parameter 'Body' when calling KNNApi->knnnew")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(Body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
