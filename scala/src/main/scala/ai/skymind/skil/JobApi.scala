/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ai.skymind.skil

import java.text.SimpleDateFormat

import ai.skymind.skil.model.CreateJobRequest
import ai.skymind.skil.model.DownloadOutputFileRequest
import ai.skymind.skil.model.JobEntity
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class JobApi(
  val defBasePath: String = "http://localhost:9008",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new JobApiAsyncHelper(client, config)

  /**
   * Create a job
   * 
   *
   * @param JobIdOrType Job Type 
   * @param CreateJobRequest Create job request object 
   * @return JobEntity
   */
  def createJob(JobIdOrType: String, CreateJobRequest: CreateJobRequest): Option[JobEntity] = {
    val await = Try(Await.result(createJobAsync(JobIdOrType, CreateJobRequest), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a job asynchronously
   * 
   *
   * @param JobIdOrType Job Type 
   * @param CreateJobRequest Create job request object 
   * @return Future(JobEntity)
   */
  def createJobAsync(JobIdOrType: String, CreateJobRequest: CreateJobRequest): Future[JobEntity] = {
      helper.createJob(JobIdOrType, CreateJobRequest)
  }

  /**
   * Deletes a job given its ID
   * 
   *
   * @param JobIdOrType Job ID 
   * @return void
   */
  def deleteJobById(JobIdOrType: Long) = {
    val await = Try(Await.result(deleteJobByIdAsync(JobIdOrType), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Deletes a job given its ID asynchronously
   * 
   *
   * @param JobIdOrType Job ID 
   * @return Future(void)
   */
  def deleteJobByIdAsync(JobIdOrType: Long) = {
      helper.deleteJobById(JobIdOrType)
  }

  /**
   * Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
   * 
   *
   * @param JobId Job ID 
   * @param DownloadOutputFileRequest Download output file request object 
   * @return void
   */
  def downloadJobOutputFile(JobId: Long, DownloadOutputFileRequest: DownloadOutputFileRequest) = {
    val await = Try(Await.result(downloadJobOutputFileAsync(JobId, DownloadOutputFileRequest), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;. asynchronously
   * 
   *
   * @param JobId Job ID 
   * @param DownloadOutputFileRequest Download output file request object 
   * @return Future(void)
   */
  def downloadJobOutputFileAsync(JobId: Long, DownloadOutputFileRequest: DownloadOutputFileRequest) = {
      helper.downloadJobOutputFile(JobId, DownloadOutputFileRequest)
  }

  /**
   * Get a list of all available jobs
   * 
   *
   * @return List[JobEntity]
   */
  def getAllJobs(): Option[List[JobEntity]] = {
    val await = Try(Await.result(getAllJobsAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a list of all available jobs asynchronously
   * 
   *
   * @return Future(List[JobEntity])
   */
  def getAllJobsAsync(): Future[List[JobEntity]] = {
      helper.getAllJobs()
  }

  /**
   * Get a job by its ID
   * 
   *
   * @param JobIdOrType Job ID 
   * @return JobEntity
   */
  def getJobById(JobIdOrType: Long): Option[JobEntity] = {
    val await = Try(Await.result(getJobByIdAsync(JobIdOrType), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a job by its ID asynchronously
   * 
   *
   * @param JobIdOrType Job ID 
   * @return Future(JobEntity)
   */
  def getJobByIdAsync(JobIdOrType: Long): Future[JobEntity] = {
      helper.getJobById(JobIdOrType)
  }

  /**
   * Refresh the remote job status. Can be used for monitoring.
   * 
   *
   * @param JobId Job ID 
   * @return JobEntity
   */
  def refreshJobStatus(JobId: Long): Option[JobEntity] = {
    val await = Try(Await.result(refreshJobStatusAsync(JobId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Refresh the remote job status. Can be used for monitoring. asynchronously
   * 
   *
   * @param JobId Job ID 
   * @return Future(JobEntity)
   */
  def refreshJobStatusAsync(JobId: Long): Future[JobEntity] = {
      helper.refreshJobStatus(JobId)
  }

  /**
   * Start running an (already created) job on the remote resource
   * 
   *
   * @param JobId Job ID 
   * @return JobEntity
   */
  def runAJob(JobId: Long): Option[JobEntity] = {
    val await = Try(Await.result(runAJobAsync(JobId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Start running an (already created) job on the remote resource asynchronously
   * 
   *
   * @param JobId Job ID 
   * @return Future(JobEntity)
   */
  def runAJobAsync(JobId: Long): Future[JobEntity] = {
      helper.runAJob(JobId)
  }

}

class JobApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createJob(JobIdOrType: String,
    CreateJobRequest: CreateJobRequest)(implicit reader: ClientResponseReader[JobEntity], writer: RequestWriter[CreateJobRequest]): Future[JobEntity] = {
    // create path and map variables
    val path = (addFmt("/jobs/{jobIdOrType}")
      replaceAll("\\{" + "jobIdOrType" + "\\}", JobIdOrType.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (JobIdOrType == null) throw new Exception("Missing required parameter 'JobIdOrType' when calling JobApi->createJob")

    if (CreateJobRequest == null) throw new Exception("Missing required parameter 'CreateJobRequest' when calling JobApi->createJob")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(CreateJobRequest))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteJobById(JobIdOrType: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/jobs/{jobIdOrType}")
      replaceAll("\\{" + "jobIdOrType" + "\\}", JobIdOrType.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def downloadJobOutputFile(JobId: Long,
    DownloadOutputFileRequest: DownloadOutputFileRequest)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[DownloadOutputFileRequest]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/jobs/{jobId}/outputfile")
      replaceAll("\\{" + "jobId" + "\\}", JobId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DownloadOutputFileRequest == null) throw new Exception("Missing required parameter 'DownloadOutputFileRequest' when calling JobApi->downloadJobOutputFile")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(DownloadOutputFileRequest))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getAllJobs()(implicit reader: ClientResponseReader[List[JobEntity]]): Future[List[JobEntity]] = {
    // create path and map variables
    val path = (addFmt("/jobs"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getJobById(JobIdOrType: Long)(implicit reader: ClientResponseReader[JobEntity]): Future[JobEntity] = {
    // create path and map variables
    val path = (addFmt("/jobs/{jobIdOrType}")
      replaceAll("\\{" + "jobIdOrType" + "\\}", JobIdOrType.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def refreshJobStatus(JobId: Long)(implicit reader: ClientResponseReader[JobEntity]): Future[JobEntity] = {
    // create path and map variables
    val path = (addFmt("/jobs/{jobId}/refresh")
      replaceAll("\\{" + "jobId" + "\\}", JobId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def runAJob(JobId: Long)(implicit reader: ClientResponseReader[JobEntity]): Future[JobEntity] = {
    // create path and map variables
    val path = (addFmt("/jobs/{jobId}/run")
      replaceAll("\\{" + "jobId" + "\\}", JobId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
