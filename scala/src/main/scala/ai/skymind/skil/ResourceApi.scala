/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ai.skymind.skil

import java.text.SimpleDateFormat

import ai.skymind.skil.model.AddCredentialsRequest
import ai.skymind.skil.model.AddResourceRequest
import ai.skymind.skil.model.Resource
import ai.skymind.skil.model.ResourceCredentials
import ai.skymind.skil.model.ResourceGroup
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class ResourceApi(
  val defBasePath: String = "http://localhost:9008",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ResourceApiAsyncHelper(client, config)

  /**
   * Adds credentials
   * 
   *
   * @param AddCredentialsRequest Add credentials request object 
   * @return ResourceCredentials
   */
  def addCredentials(AddCredentialsRequest: AddCredentialsRequest): Option[ResourceCredentials] = {
    val await = Try(Await.result(addCredentialsAsync(AddCredentialsRequest), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Adds credentials asynchronously
   * 
   *
   * @param AddCredentialsRequest Add credentials request object 
   * @return Future(ResourceCredentials)
   */
  def addCredentialsAsync(AddCredentialsRequest: AddCredentialsRequest): Future[ResourceCredentials] = {
      helper.addCredentials(AddCredentialsRequest)
  }

  /**
   * Adds a resource
   * 
   *
   * @param AddResourceRequest The Add resource request object 
   * @return Any
   */
  def addResource(AddResourceRequest: AddResourceRequest): Option[Any] = {
    val await = Try(Await.result(addResourceAsync(AddResourceRequest), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Adds a resource asynchronously
   * 
   *
   * @param AddResourceRequest The Add resource request object 
   * @return Future(Any)
   */
  def addResourceAsync(AddResourceRequest: AddResourceRequest): Future[Any] = {
      helper.addResource(AddResourceRequest)
  }

  /**
   * Adds a resource group
   * 
   *
   * @param GroupName Name of the resource group 
   * @return ResourceGroup
   */
  def addResourceGroup(GroupName: String): Option[ResourceGroup] = {
    val await = Try(Await.result(addResourceGroupAsync(GroupName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Adds a resource group asynchronously
   * 
   *
   * @param GroupName Name of the resource group 
   * @return Future(ResourceGroup)
   */
  def addResourceGroupAsync(GroupName: String): Future[ResourceGroup] = {
      helper.addResourceGroup(GroupName)
  }

  /**
   * Adds a resource to a resource group
   * 
   *
   * @param ResourceGroupId ID of the resource group 
   * @param ResourceId ID of the resource 
   * @return void
   */
  def addResourceToGroup(ResourceGroupId: Long, ResourceId: Long) = {
    val await = Try(Await.result(addResourceToGroupAsync(ResourceGroupId, ResourceId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Adds a resource to a resource group asynchronously
   * 
   *
   * @param ResourceGroupId ID of the resource group 
   * @param ResourceId ID of the resource 
   * @return Future(void)
   */
  def addResourceToGroupAsync(ResourceGroupId: Long, ResourceId: Long) = {
      helper.addResourceToGroup(ResourceGroupId, ResourceId)
  }

  /**
   * Delete credentials given an ID
   * 
   *
   * @param CredentialId Credentials ID 
   * @return void
   */
  def deleteCredentialsById(CredentialId: Long) = {
    val await = Try(Await.result(deleteCredentialsByIdAsync(CredentialId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete credentials given an ID asynchronously
   * 
   *
   * @param CredentialId Credentials ID 
   * @return Future(void)
   */
  def deleteCredentialsByIdAsync(CredentialId: Long) = {
      helper.deleteCredentialsById(CredentialId)
  }

  /**
   * Delete the resource with the specified resource ID
   * 
   *
   * @param ResourceId ID of the resource 
   * @return Resource
   */
  def deleteResourceById(ResourceId: Long): Option[Resource] = {
    val await = Try(Await.result(deleteResourceByIdAsync(ResourceId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete the resource with the specified resource ID asynchronously
   * 
   *
   * @param ResourceId ID of the resource 
   * @return Future(Resource)
   */
  def deleteResourceByIdAsync(ResourceId: Long): Future[Resource] = {
      helper.deleteResourceById(ResourceId)
  }

  /**
   * Removes a resource from a resource group
   * 
   *
   * @param ResourceGroupId ID of the resource group 
   * @param ResourceId ID of the resource 
   * @return void
   */
  def deleteResourceFromGroup(ResourceGroupId: Long, ResourceId: Long) = {
    val await = Try(Await.result(deleteResourceFromGroupAsync(ResourceGroupId, ResourceId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Removes a resource from a resource group asynchronously
   * 
   *
   * @param ResourceGroupId ID of the resource group 
   * @param ResourceId ID of the resource 
   * @return Future(void)
   */
  def deleteResourceFromGroupAsync(ResourceGroupId: Long, ResourceId: Long) = {
      helper.deleteResourceFromGroup(ResourceGroupId, ResourceId)
  }

  /**
   * Delete the resource group with the specified resource group ID
   * 
   *
   * @param ResourceGroupId ID of the resource group 
   * @return ResourceGroup
   */
  def deleteResourceGroupById(ResourceGroupId: Long): Option[ResourceGroup] = {
    val await = Try(Await.result(deleteResourceGroupByIdAsync(ResourceGroupId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete the resource group with the specified resource group ID asynchronously
   * 
   *
   * @param ResourceGroupId ID of the resource group 
   * @return Future(ResourceGroup)
   */
  def deleteResourceGroupByIdAsync(ResourceGroupId: Long): Future[ResourceGroup] = {
      helper.deleteResourceGroupById(ResourceGroupId)
  }

  /**
   * Get credentials given an ID
   * 
   *
   * @param CredentialId Credentials ID 
   * @return ResourceCredentials
   */
  def getCredentialsById(CredentialId: Long): Option[ResourceCredentials] = {
    val await = Try(Await.result(getCredentialsByIdAsync(CredentialId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get credentials given an ID asynchronously
   * 
   *
   * @param CredentialId Credentials ID 
   * @return Future(ResourceCredentials)
   */
  def getCredentialsByIdAsync(CredentialId: Long): Future[ResourceCredentials] = {
      helper.getCredentialsById(CredentialId)
  }

  /**
   * Get the resource with the specified resource ID
   * 
   *
   * @param ResourceId ID of the resource 
   * @return Resource
   */
  def getResourceById(ResourceId: Long): Option[Resource] = {
    val await = Try(Await.result(getResourceByIdAsync(ResourceId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the resource with the specified resource ID asynchronously
   * 
   *
   * @param ResourceId ID of the resource 
   * @return Future(Resource)
   */
  def getResourceByIdAsync(ResourceId: Long): Future[Resource] = {
      helper.getResourceById(ResourceId)
  }

  /**
   * Get all the resources with the specified resource subtype
   * 
   *
   * @param ResourceSubType Subtype of the resource 
   * @return List[Resource]
   */
  def getResourceBySubType(ResourceSubType: String): Option[List[Resource]] = {
    val await = Try(Await.result(getResourceBySubTypeAsync(ResourceSubType), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get all the resources with the specified resource subtype asynchronously
   * 
   *
   * @param ResourceSubType Subtype of the resource 
   * @return Future(List[Resource])
   */
  def getResourceBySubTypeAsync(ResourceSubType: String): Future[List[Resource]] = {
      helper.getResourceBySubType(ResourceSubType)
  }

  /**
   * Get all the resources with the specified resource type
   * 
   *
   * @param ResourceType Type of the resource 
   * @return List[Resource]
   */
  def getResourceByType(ResourceType: String): Option[List[Resource]] = {
    val await = Try(Await.result(getResourceByTypeAsync(ResourceType), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get all the resources with the specified resource type asynchronously
   * 
   *
   * @param ResourceType Type of the resource 
   * @return Future(List[Resource])
   */
  def getResourceByTypeAsync(ResourceType: String): Future[List[Resource]] = {
      helper.getResourceByType(ResourceType)
  }

  /**
   * Get the resource details with the specified resource ID
   * Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
   *
   * @param ResourceId ID of the resource 
   * @return Any
   */
  def getResourceDetailsById(ResourceId: Long): Option[Any] = {
    val await = Try(Await.result(getResourceDetailsByIdAsync(ResourceId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the resource details with the specified resource ID asynchronously
   * Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
   *
   * @param ResourceId ID of the resource 
   * @return Future(Any)
   */
  def getResourceDetailsByIdAsync(ResourceId: Long): Future[Any] = {
      helper.getResourceDetailsById(ResourceId)
  }

  /**
   * Get the resource group with the specified resource group ID
   * 
   *
   * @param ResourceGroupId ID of the resource group 
   * @return ResourceGroup
   */
  def getResourceGroupById(ResourceGroupId: Long): Option[ResourceGroup] = {
    val await = Try(Await.result(getResourceGroupByIdAsync(ResourceGroupId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the resource group with the specified resource group ID asynchronously
   * 
   *
   * @param ResourceGroupId ID of the resource group 
   * @return Future(ResourceGroup)
   */
  def getResourceGroupByIdAsync(ResourceGroupId: Long): Future[ResourceGroup] = {
      helper.getResourceGroupById(ResourceGroupId)
  }

  /**
   * Get a list of all the resource groups
   * 
   *
   * @return List[ResourceGroup]
   */
  def getResourceGroups(): Option[List[ResourceGroup]] = {
    val await = Try(Await.result(getResourceGroupsAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a list of all the resource groups asynchronously
   * 
   *
   * @return Future(List[ResourceGroup])
   */
  def getResourceGroupsAsync(): Future[List[ResourceGroup]] = {
      helper.getResourceGroups()
  }

  /**
   * A list of all known/registered resources, of all types
   * 
   *
   * @return List[Resource]
   */
  def getResources(): Option[List[Resource]] = {
    val await = Try(Await.result(getResourcesAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * A list of all known/registered resources, of all types asynchronously
   * 
   *
   * @return Future(List[Resource])
   */
  def getResourcesAsync(): Future[List[Resource]] = {
      helper.getResources()
  }

  /**
   * Get all resources from a resource group
   * 
   *
   * @param ResourceGroupId ID of the resource group 
   * @return List[Resource]
   */
  def getResourcesFromGroup(ResourceGroupId: Long): Option[List[Resource]] = {
    val await = Try(Await.result(getResourcesFromGroupAsync(ResourceGroupId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get all resources from a resource group asynchronously
   * 
   *
   * @param ResourceGroupId ID of the resource group 
   * @return Future(List[Resource])
   */
  def getResourcesFromGroupAsync(ResourceGroupId: Long): Future[List[Resource]] = {
      helper.getResourcesFromGroup(ResourceGroupId)
  }

}

class ResourceApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def addCredentials(AddCredentialsRequest: AddCredentialsRequest)(implicit reader: ClientResponseReader[ResourceCredentials], writer: RequestWriter[AddCredentialsRequest]): Future[ResourceCredentials] = {
    // create path and map variables
    val path = (addFmt("/resources/credentials"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (AddCredentialsRequest == null) throw new Exception("Missing required parameter 'AddCredentialsRequest' when calling ResourceApi->addCredentials")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(AddCredentialsRequest))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def addResource(AddResourceRequest: AddResourceRequest)(implicit reader: ClientResponseReader[Any], writer: RequestWriter[AddResourceRequest]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/resources/add/resource"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (AddResourceRequest == null) throw new Exception("Missing required parameter 'AddResourceRequest' when calling ResourceApi->addResource")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(AddResourceRequest))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def addResourceGroup(GroupName: String)(implicit reader: ClientResponseReader[ResourceGroup], writer: RequestWriter[String]): Future[ResourceGroup] = {
    // create path and map variables
    val path = (addFmt("/resources/add/group"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (GroupName == null) throw new Exception("Missing required parameter 'GroupName' when calling ResourceApi->addResourceGroup")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(GroupName))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def addResourceToGroup(ResourceGroupId: Long,
    ResourceId: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}")
      replaceAll("\\{" + "resourceGroupId" + "\\}", ResourceGroupId.toString)
      replaceAll("\\{" + "resourceId" + "\\}", ResourceId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteCredentialsById(CredentialId: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/resources/credentials/{credentialId}")
      replaceAll("\\{" + "credentialId" + "\\}", CredentialId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteResourceById(ResourceId: Long)(implicit reader: ClientResponseReader[Resource]): Future[Resource] = {
    // create path and map variables
    val path = (addFmt("/resources/remove/resource/{resourceId}")
      replaceAll("\\{" + "resourceId" + "\\}", ResourceId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteResourceFromGroup(ResourceGroupId: Long,
    ResourceId: Long)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}")
      replaceAll("\\{" + "resourceGroupId" + "\\}", ResourceGroupId.toString)
      replaceAll("\\{" + "resourceId" + "\\}", ResourceId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteResourceGroupById(ResourceGroupId: Long)(implicit reader: ClientResponseReader[ResourceGroup]): Future[ResourceGroup] = {
    // create path and map variables
    val path = (addFmt("/resources/remove/group/{resourceGroupId}")
      replaceAll("\\{" + "resourceGroupId" + "\\}", ResourceGroupId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getCredentialsById(CredentialId: Long)(implicit reader: ClientResponseReader[ResourceCredentials]): Future[ResourceCredentials] = {
    // create path and map variables
    val path = (addFmt("/resources/credentials/{credentialId}")
      replaceAll("\\{" + "credentialId" + "\\}", CredentialId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getResourceById(ResourceId: Long)(implicit reader: ClientResponseReader[Resource]): Future[Resource] = {
    // create path and map variables
    val path = (addFmt("/resources/resource/{resourceId}")
      replaceAll("\\{" + "resourceId" + "\\}", ResourceId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getResourceBySubType(ResourceSubType: String)(implicit reader: ClientResponseReader[List[Resource]]): Future[List[Resource]] = {
    // create path and map variables
    val path = (addFmt("/resources/resources/subtype/{resourceSubType}")
      replaceAll("\\{" + "resourceSubType" + "\\}", ResourceSubType.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (ResourceSubType == null) throw new Exception("Missing required parameter 'ResourceSubType' when calling ResourceApi->getResourceBySubType")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getResourceByType(ResourceType: String)(implicit reader: ClientResponseReader[List[Resource]]): Future[List[Resource]] = {
    // create path and map variables
    val path = (addFmt("/resources/resources/type/{resourceType}")
      replaceAll("\\{" + "resourceType" + "\\}", ResourceType.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (ResourceType == null) throw new Exception("Missing required parameter 'ResourceType' when calling ResourceApi->getResourceByType")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getResourceDetailsById(ResourceId: Long)(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/resources/details/{resourceId}")
      replaceAll("\\{" + "resourceId" + "\\}", ResourceId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getResourceGroupById(ResourceGroupId: Long)(implicit reader: ClientResponseReader[ResourceGroup]): Future[ResourceGroup] = {
    // create path and map variables
    val path = (addFmt("/resources/group/{resourceGroupId}")
      replaceAll("\\{" + "resourceGroupId" + "\\}", ResourceGroupId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getResourceGroups()(implicit reader: ClientResponseReader[List[ResourceGroup]]): Future[List[ResourceGroup]] = {
    // create path and map variables
    val path = (addFmt("/resources/groups"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getResources()(implicit reader: ClientResponseReader[List[Resource]]): Future[List[Resource]] = {
    // create path and map variables
    val path = (addFmt("/resources/resources"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getResourcesFromGroup(ResourceGroupId: Long)(implicit reader: ClientResponseReader[List[Resource]]): Future[List[Resource]] = {
    // create path and map variables
    val path = (addFmt("/resources/group/{resourceGroupId}/resources")
      replaceAll("\\{" + "resourceGroupId" + "\\}", ResourceGroupId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
