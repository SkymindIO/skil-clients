/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ai.skymind.skil

import java.text.SimpleDateFormat

import ai.skymind.skil.model.ArrayByte
import ai.skymind.skil.model.Base64NDArrayBody
import ai.skymind.skil.model.BatchCSVRecord
import java.io.File
import ai.skymind.skil.model.SingleCSVRecord
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class TransformApi(
  val defBasePath: String = "http://localhost:9008",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new TransformApiAsyncHelper(client, config)

  /**
   * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
   * Takes a batch of SingleCSVRecord object and transforms it into the desired format
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param TransformName ID or name of the deployed transform 
   * @param BatchCSVRecord The input batch of record arrays (optional)
   * @return BatchCSVRecord
   */
  def transformCsv(DeploymentName: String, VersionName: String, TransformName: String, BatchCSVRecord: Option[BatchCSVRecord] = None): Option[BatchCSVRecord] = {
    val await = Try(Await.result(transformCsvAsync(DeploymentName, VersionName, TransformName, BatchCSVRecord), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord asynchronously
   * Takes a batch of SingleCSVRecord object and transforms it into the desired format
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param TransformName ID or name of the deployed transform 
   * @param BatchCSVRecord The input batch of record arrays (optional)
   * @return Future(BatchCSVRecord)
   */
  def transformCsvAsync(DeploymentName: String, VersionName: String, TransformName: String, BatchCSVRecord: Option[BatchCSVRecord] = None): Future[BatchCSVRecord] = {
      helper.transformCsv(DeploymentName, VersionName, TransformName, BatchCSVRecord)
  }

  /**
   * Takes a batch input arrays and transforms it
   * 
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param TransformName ID or name of the deployed transform 
   * @param BatchRecord The input batch of record arrays (optional)
   * @return Base64NDArrayBody
   */
  def transformarray(DeploymentName: String, VersionName: String, TransformName: String, BatchRecord: Option[Any] = None): Option[Base64NDArrayBody] = {
    val await = Try(Await.result(transformarrayAsync(DeploymentName, VersionName, TransformName, BatchRecord), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Takes a batch input arrays and transforms it asynchronously
   * 
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param TransformName ID or name of the deployed transform 
   * @param BatchRecord The input batch of record arrays (optional)
   * @return Future(Base64NDArrayBody)
   */
  def transformarrayAsync(DeploymentName: String, VersionName: String, TransformName: String, BatchRecord: Option[Any] = None): Future[Base64NDArrayBody] = {
      helper.transformarray(DeploymentName, VersionName, TransformName, BatchRecord)
  }

  /**
   * Takes multiple multipart image file to transform and returns Base64NDArrayBody
   * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param ImageTransformName ID or name of the deployed image transform 
   * @param Files The image files to upload 
   * @return Base64NDArrayBody
   */
  def transformimage(DeploymentName: String, VersionName: String, ImageTransformName: String, Files: List[Array[Byte]]): Option[Base64NDArrayBody] = {
    val await = Try(Await.result(transformimageAsync(DeploymentName, VersionName, ImageTransformName, Files), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Takes multiple multipart image file to transform and returns Base64NDArrayBody asynchronously
   * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param ImageTransformName ID or name of the deployed image transform 
   * @param Files The image files to upload 
   * @return Future(Base64NDArrayBody)
   */
  def transformimageAsync(DeploymentName: String, VersionName: String, ImageTransformName: String, Files: List[Array[Byte]]): Future[Base64NDArrayBody] = {
      helper.transformimage(DeploymentName, VersionName, ImageTransformName, Files)
  }

  /**
   * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
   * Takes a SingleCSVRecord object and transforms it into the desired format
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param TransformName ID or name of the deployed transform 
   * @param SingleCSVRecord The input record array (optional)
   * @return SingleCSVRecord
   */
  def transformincrementalCsv(DeploymentName: String, VersionName: String, TransformName: String, SingleCSVRecord: Option[SingleCSVRecord] = None): Option[SingleCSVRecord] = {
    val await = Try(Await.result(transformincrementalCsvAsync(DeploymentName, VersionName, TransformName, SingleCSVRecord), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord asynchronously
   * Takes a SingleCSVRecord object and transforms it into the desired format
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param TransformName ID or name of the deployed transform 
   * @param SingleCSVRecord The input record array (optional)
   * @return Future(SingleCSVRecord)
   */
  def transformincrementalCsvAsync(DeploymentName: String, VersionName: String, TransformName: String, SingleCSVRecord: Option[SingleCSVRecord] = None): Future[SingleCSVRecord] = {
      helper.transformincrementalCsv(DeploymentName, VersionName, TransformName, SingleCSVRecord)
  }

  /**
   * Same as /transformincremental but returns Base64NDArrayBody.
   * 
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param TransformName ID or name of the deployed transform 
   * @param SingleRecord The input record array (optional)
   * @return Base64NDArrayBody
   */
  def transformincrementalarray(DeploymentName: String, VersionName: String, TransformName: String, SingleRecord: Option[Any] = None): Option[Base64NDArrayBody] = {
    val await = Try(Await.result(transformincrementalarrayAsync(DeploymentName, VersionName, TransformName, SingleRecord), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Same as /transformincremental but returns Base64NDArrayBody. asynchronously
   * 
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param TransformName ID or name of the deployed transform 
   * @param SingleRecord The input record array (optional)
   * @return Future(Base64NDArrayBody)
   */
  def transformincrementalarrayAsync(DeploymentName: String, VersionName: String, TransformName: String, SingleRecord: Option[Any] = None): Future[Base64NDArrayBody] = {
      helper.transformincrementalarray(DeploymentName, VersionName, TransformName, SingleRecord)
  }

  /**
   * Takes a single multipart image file to transform and returns Base64NDArrayBody
   * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param ImageTransformName ID or name of the deployed image transform 
   * @param File The image file to upload 
   * @return Base64NDArrayBody
   */
  def transformincrementalimage(DeploymentName: String, VersionName: String, ImageTransformName: String, File: File): Option[Base64NDArrayBody] = {
    val await = Try(Await.result(transformincrementalimageAsync(DeploymentName, VersionName, ImageTransformName, File), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Takes a single multipart image file to transform and returns Base64NDArrayBody asynchronously
   * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param ImageTransformName ID or name of the deployed image transform 
   * @param File The image file to upload 
   * @return Future(Base64NDArrayBody)
   */
  def transformincrementalimageAsync(DeploymentName: String, VersionName: String, ImageTransformName: String, File: File): Future[Base64NDArrayBody] = {
      helper.transformincrementalimage(DeploymentName, VersionName, ImageTransformName, File)
  }

  /**
   * Gets the JSON string of the deployed transform process (CSV or Image)
   * 
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param TransformName ID or name of the deployed transform 
   * @return Any
   */
  def transformprocessGet(DeploymentName: String, VersionName: String, TransformName: String): Option[Any] = {
    val await = Try(Await.result(transformprocessGetAsync(DeploymentName, VersionName, TransformName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Gets the JSON string of the deployed transform process (CSV or Image) asynchronously
   * 
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param TransformName ID or name of the deployed transform 
   * @return Future(Any)
   */
  def transformprocessGetAsync(DeploymentName: String, VersionName: String, TransformName: String): Future[Any] = {
      helper.transformprocessGet(DeploymentName, VersionName, TransformName)
  }

  /**
   * Sets the deployed (CSV or Image) transform process through the provided JSON string
   * 
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param TransformName ID or name of the deployed transform 
   * @param TransformProcess The transform process to set (optional)
   * @return Any
   */
  def transformprocessPost(DeploymentName: String, VersionName: String, TransformName: String, TransformProcess: Option[Any] = None): Option[Any] = {
    val await = Try(Await.result(transformprocessPostAsync(DeploymentName, VersionName, TransformName, TransformProcess), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Sets the deployed (CSV or Image) transform process through the provided JSON string asynchronously
   * 
   *
   * @param DeploymentName Name of the deployment group 
   * @param VersionName Version name of the endpoint. The default value is \&quot;default\&quot; 
   * @param TransformName ID or name of the deployed transform 
   * @param TransformProcess The transform process to set (optional)
   * @return Future(Any)
   */
  def transformprocessPostAsync(DeploymentName: String, VersionName: String, TransformName: String, TransformProcess: Option[Any] = None): Future[Any] = {
      helper.transformprocessPost(DeploymentName, VersionName, TransformName, TransformProcess)
  }

}

class TransformApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def transformCsv(DeploymentName: String,
    VersionName: String,
    TransformName: String,
    BatchCSVRecord: Option[BatchCSVRecord] = None
    )(implicit reader: ClientResponseReader[BatchCSVRecord], writer: RequestWriter[Option[BatchCSVRecord]]): Future[BatchCSVRecord] = {
    // create path and map variables
    val path = (addFmt("/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform")
      replaceAll("\\{" + "deploymentName" + "\\}", DeploymentName.toString)
      replaceAll("\\{" + "versionName" + "\\}", VersionName.toString)
      replaceAll("\\{" + "transformName" + "\\}", TransformName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentName == null) throw new Exception("Missing required parameter 'DeploymentName' when calling TransformApi->transformCsv")

    if (VersionName == null) throw new Exception("Missing required parameter 'VersionName' when calling TransformApi->transformCsv")

    if (TransformName == null) throw new Exception("Missing required parameter 'TransformName' when calling TransformApi->transformCsv")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(BatchCSVRecord))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def transformarray(DeploymentName: String,
    VersionName: String,
    TransformName: String,
    BatchRecord: Option[Any] = None
    )(implicit reader: ClientResponseReader[Base64NDArrayBody], writer: RequestWriter[Option[Any]]): Future[Base64NDArrayBody] = {
    // create path and map variables
    val path = (addFmt("/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray")
      replaceAll("\\{" + "deploymentName" + "\\}", DeploymentName.toString)
      replaceAll("\\{" + "versionName" + "\\}", VersionName.toString)
      replaceAll("\\{" + "transformName" + "\\}", TransformName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentName == null) throw new Exception("Missing required parameter 'DeploymentName' when calling TransformApi->transformarray")

    if (VersionName == null) throw new Exception("Missing required parameter 'VersionName' when calling TransformApi->transformarray")

    if (TransformName == null) throw new Exception("Missing required parameter 'TransformName' when calling TransformApi->transformarray")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(BatchRecord))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def transformimage(DeploymentName: String,
    VersionName: String,
    ImageTransformName: String,
    Files: List[Array[Byte]])(implicit reader: ClientResponseReader[Base64NDArrayBody]): Future[Base64NDArrayBody] = {
    // create path and map variables
    val path = (addFmt("/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage")
      replaceAll("\\{" + "deploymentName" + "\\}", DeploymentName.toString)
      replaceAll("\\{" + "versionName" + "\\}", VersionName.toString)
      replaceAll("\\{" + "imageTransformName" + "\\}", ImageTransformName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentName == null) throw new Exception("Missing required parameter 'DeploymentName' when calling TransformApi->transformimage")

    if (VersionName == null) throw new Exception("Missing required parameter 'VersionName' when calling TransformApi->transformimage")

    if (ImageTransformName == null) throw new Exception("Missing required parameter 'ImageTransformName' when calling TransformApi->transformimage")

    if (Files == null) throw new Exception("Missing required parameter 'Files' when calling TransformApi->transformimage")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def transformincrementalCsv(DeploymentName: String,
    VersionName: String,
    TransformName: String,
    SingleCSVRecord: Option[SingleCSVRecord] = None
    )(implicit reader: ClientResponseReader[SingleCSVRecord], writer: RequestWriter[Option[SingleCSVRecord]]): Future[SingleCSVRecord] = {
    // create path and map variables
    val path = (addFmt("/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental")
      replaceAll("\\{" + "deploymentName" + "\\}", DeploymentName.toString)
      replaceAll("\\{" + "versionName" + "\\}", VersionName.toString)
      replaceAll("\\{" + "transformName" + "\\}", TransformName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentName == null) throw new Exception("Missing required parameter 'DeploymentName' when calling TransformApi->transformincrementalCsv")

    if (VersionName == null) throw new Exception("Missing required parameter 'VersionName' when calling TransformApi->transformincrementalCsv")

    if (TransformName == null) throw new Exception("Missing required parameter 'TransformName' when calling TransformApi->transformincrementalCsv")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(SingleCSVRecord))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def transformincrementalarray(DeploymentName: String,
    VersionName: String,
    TransformName: String,
    SingleRecord: Option[Any] = None
    )(implicit reader: ClientResponseReader[Base64NDArrayBody], writer: RequestWriter[Option[Any]]): Future[Base64NDArrayBody] = {
    // create path and map variables
    val path = (addFmt("/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray")
      replaceAll("\\{" + "deploymentName" + "\\}", DeploymentName.toString)
      replaceAll("\\{" + "versionName" + "\\}", VersionName.toString)
      replaceAll("\\{" + "transformName" + "\\}", TransformName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentName == null) throw new Exception("Missing required parameter 'DeploymentName' when calling TransformApi->transformincrementalarray")

    if (VersionName == null) throw new Exception("Missing required parameter 'VersionName' when calling TransformApi->transformincrementalarray")

    if (TransformName == null) throw new Exception("Missing required parameter 'TransformName' when calling TransformApi->transformincrementalarray")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(SingleRecord))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def transformincrementalimage(DeploymentName: String,
    VersionName: String,
    ImageTransformName: String,
    File: File)(implicit reader: ClientResponseReader[Base64NDArrayBody]): Future[Base64NDArrayBody] = {
    // create path and map variables
    val path = (addFmt("/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage")
      replaceAll("\\{" + "deploymentName" + "\\}", DeploymentName.toString)
      replaceAll("\\{" + "versionName" + "\\}", VersionName.toString)
      replaceAll("\\{" + "imageTransformName" + "\\}", ImageTransformName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentName == null) throw new Exception("Missing required parameter 'DeploymentName' when calling TransformApi->transformincrementalimage")

    if (VersionName == null) throw new Exception("Missing required parameter 'VersionName' when calling TransformApi->transformincrementalimage")

    if (ImageTransformName == null) throw new Exception("Missing required parameter 'ImageTransformName' when calling TransformApi->transformincrementalimage")

    if (File == null) throw new Exception("Missing required parameter 'File' when calling TransformApi->transformincrementalimage")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def transformprocessGet(DeploymentName: String,
    VersionName: String,
    TransformName: String)(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess")
      replaceAll("\\{" + "deploymentName" + "\\}", DeploymentName.toString)
      replaceAll("\\{" + "versionName" + "\\}", VersionName.toString)
      replaceAll("\\{" + "transformName" + "\\}", TransformName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentName == null) throw new Exception("Missing required parameter 'DeploymentName' when calling TransformApi->transformprocessGet")

    if (VersionName == null) throw new Exception("Missing required parameter 'VersionName' when calling TransformApi->transformprocessGet")

    if (TransformName == null) throw new Exception("Missing required parameter 'TransformName' when calling TransformApi->transformprocessGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def transformprocessPost(DeploymentName: String,
    VersionName: String,
    TransformName: String,
    TransformProcess: Option[Any] = None
    )(implicit reader: ClientResponseReader[Any], writer: RequestWriter[Option[Any]]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess")
      replaceAll("\\{" + "deploymentName" + "\\}", DeploymentName.toString)
      replaceAll("\\{" + "versionName" + "\\}", VersionName.toString)
      replaceAll("\\{" + "transformName" + "\\}", TransformName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentName == null) throw new Exception("Missing required parameter 'DeploymentName' when calling TransformApi->transformprocessPost")

    if (VersionName == null) throw new Exception("Missing required parameter 'VersionName' when calling TransformApi->transformprocessPost")

    if (TransformName == null) throw new Exception("Missing required parameter 'TransformName' when calling TransformApi->transformprocessPost")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(TransformProcess))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
