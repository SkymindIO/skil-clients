/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ai.skymind.skil

import java.text.SimpleDateFormat

import ai.skymind.skil.model.CreateDeploymentRequest
import ai.skymind.skil.model.DeploymentResponse
import ai.skymind.skil.model.ImportModelRequest
import ai.skymind.skil.model.InlineResponse200
import ai.skymind.skil.model.ModelEntity
import ai.skymind.skil.model.SetState
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class DeploymentApi(
  val defBasePath: String = "http://localhost:9008",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new DeploymentApiAsyncHelper(client, config)

  /**
   * Delete a model by deployment and model id
   * 
   *
   * @param DeploymentId ID deployment group 
   * @param ModelId the id of the deployed model 
   * @return InlineResponse200
   */
  def deleteModel(DeploymentId: String, ModelId: String): Option[InlineResponse200] = {
    val await = Try(Await.result(deleteModelAsync(DeploymentId, ModelId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a model by deployment and model id asynchronously
   * 
   *
   * @param DeploymentId ID deployment group 
   * @param ModelId the id of the deployed model 
   * @return Future(InlineResponse200)
   */
  def deleteModelAsync(DeploymentId: String, ModelId: String): Future[InlineResponse200] = {
      helper.deleteModel(DeploymentId, ModelId)
  }

  /**
   * Deploy a model in a deployment group.
   * 
   *
   * @param DeploymentId ID deployment group 
   * @param Body the model import request 
   * @return ModelEntity
   */
  def deployModel(DeploymentId: String, Body: ImportModelRequest): Option[ModelEntity] = {
    val await = Try(Await.result(deployModelAsync(DeploymentId, Body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Deploy a model in a deployment group. asynchronously
   * 
   *
   * @param DeploymentId ID deployment group 
   * @param Body the model import request 
   * @return Future(ModelEntity)
   */
  def deployModelAsync(DeploymentId: String, Body: ImportModelRequest): Future[ModelEntity] = {
      helper.deployModel(DeploymentId, Body)
  }

  /**
   * Create a new deployment group.
   * 
   *
   * @param Body the deployment request 
   * @return DeploymentResponse
   */
  def deploymentCreate(Body: CreateDeploymentRequest): Option[DeploymentResponse] = {
    val await = Try(Await.result(deploymentCreateAsync(Body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a new deployment group. asynchronously
   * 
   *
   * @param Body the deployment request 
   * @return Future(DeploymentResponse)
   */
  def deploymentCreateAsync(Body: CreateDeploymentRequest): Future[DeploymentResponse] = {
      helper.deploymentCreate(Body)
  }

  /**
   * Delete a deployment by id
   * 
   *
   * @param DeploymentId Id of the deployment group 
   * @return InlineResponse200
   */
  def deploymentDelete(DeploymentId: String): Option[InlineResponse200] = {
    val await = Try(Await.result(deploymentDeleteAsync(DeploymentId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a deployment by id asynchronously
   * 
   *
   * @param DeploymentId Id of the deployment group 
   * @return Future(InlineResponse200)
   */
  def deploymentDeleteAsync(DeploymentId: String): Future[InlineResponse200] = {
      helper.deploymentDelete(DeploymentId)
  }

  /**
   * Get a deployment details by id
   * 
   *
   * @param DeploymentId Id of the deployment group 
   * @return DeploymentResponse
   */
  def deploymentGet(DeploymentId: String): Option[DeploymentResponse] = {
    val await = Try(Await.result(deploymentGetAsync(DeploymentId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a deployment details by id asynchronously
   * 
   *
   * @param DeploymentId Id of the deployment group 
   * @return Future(DeploymentResponse)
   */
  def deploymentGetAsync(DeploymentId: String): Future[DeploymentResponse] = {
      helper.deploymentGet(DeploymentId)
  }

  /**
   * Get a list of deployments
   * 
   *
   * @return List[DeploymentResponse]
   */
  def deployments(): Option[List[DeploymentResponse]] = {
    val await = Try(Await.result(deploymentsAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a list of deployments asynchronously
   * 
   *
   * @return Future(List[DeploymentResponse])
   */
  def deploymentsAsync(): Future[List[DeploymentResponse]] = {
      helper.deployments()
  }

  /**
   * Modify the state (start/stop) of a deployed model
   * 
   *
   * @param DeploymentId ID deployment group 
   * @param ModelId the id of the deployed model 
   * @param Body the model state object 
   * @return ModelEntity
   */
  def modelStateChange(DeploymentId: String, ModelId: String, Body: SetState): Option[ModelEntity] = {
    val await = Try(Await.result(modelStateChangeAsync(DeploymentId, ModelId, Body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Modify the state (start/stop) of a deployed model asynchronously
   * 
   *
   * @param DeploymentId ID deployment group 
   * @param ModelId the id of the deployed model 
   * @param Body the model state object 
   * @return Future(ModelEntity)
   */
  def modelStateChangeAsync(DeploymentId: String, ModelId: String, Body: SetState): Future[ModelEntity] = {
      helper.modelStateChange(DeploymentId, ModelId, Body)
  }

  /**
   * Retrieve a list of all the deployed models given a deployment id
   * 
   *
   * @param DeploymentId ID deployment group 
   * @return List[ModelEntity]
   */
  def models(DeploymentId: String): Option[List[ModelEntity]] = {
    val await = Try(Await.result(modelsAsync(DeploymentId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Retrieve a list of all the deployed models given a deployment id asynchronously
   * 
   *
   * @param DeploymentId ID deployment group 
   * @return Future(List[ModelEntity])
   */
  def modelsAsync(DeploymentId: String): Future[List[ModelEntity]] = {
      helper.models(DeploymentId)
  }

  /**
   * Reimport a model to a previous deployed model in a deployment
   * 
   *
   * @param DeploymentId ID deployment group 
   * @param ModelId the id of the deployed model 
   * @param Body the deployment request 
   * @return ModelEntity
   */
  def reimportModel(DeploymentId: String, ModelId: String, Body: ImportModelRequest): Option[ModelEntity] = {
    val await = Try(Await.result(reimportModelAsync(DeploymentId, ModelId, Body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Reimport a model to a previous deployed model in a deployment asynchronously
   * 
   *
   * @param DeploymentId ID deployment group 
   * @param ModelId the id of the deployed model 
   * @param Body the deployment request 
   * @return Future(ModelEntity)
   */
  def reimportModelAsync(DeploymentId: String, ModelId: String, Body: ImportModelRequest): Future[ModelEntity] = {
      helper.reimportModel(DeploymentId, ModelId, Body)
  }

}

class DeploymentApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def deleteModel(DeploymentId: String,
    ModelId: String)(implicit reader: ClientResponseReader[InlineResponse200]): Future[InlineResponse200] = {
    // create path and map variables
    val path = (addFmt("/deployment/{deploymentId}/model/{modelId}")
      replaceAll("\\{" + "deploymentId" + "\\}", DeploymentId.toString)
      replaceAll("\\{" + "modelId" + "\\}", ModelId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentId == null) throw new Exception("Missing required parameter 'DeploymentId' when calling DeploymentApi->deleteModel")

    if (ModelId == null) throw new Exception("Missing required parameter 'ModelId' when calling DeploymentApi->deleteModel")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deployModel(DeploymentId: String,
    Body: ImportModelRequest)(implicit reader: ClientResponseReader[ModelEntity], writer: RequestWriter[ImportModelRequest]): Future[ModelEntity] = {
    // create path and map variables
    val path = (addFmt("/deployment/{deploymentId}/model")
      replaceAll("\\{" + "deploymentId" + "\\}", DeploymentId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentId == null) throw new Exception("Missing required parameter 'DeploymentId' when calling DeploymentApi->deployModel")

    if (Body == null) throw new Exception("Missing required parameter 'Body' when calling DeploymentApi->deployModel")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(Body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deploymentCreate(Body: CreateDeploymentRequest)(implicit reader: ClientResponseReader[DeploymentResponse], writer: RequestWriter[CreateDeploymentRequest]): Future[DeploymentResponse] = {
    // create path and map variables
    val path = (addFmt("/deployment"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (Body == null) throw new Exception("Missing required parameter 'Body' when calling DeploymentApi->deploymentCreate")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(Body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deploymentDelete(DeploymentId: String)(implicit reader: ClientResponseReader[InlineResponse200]): Future[InlineResponse200] = {
    // create path and map variables
    val path = (addFmt("/deployment/{deploymentId}")
      replaceAll("\\{" + "deploymentId" + "\\}", DeploymentId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentId == null) throw new Exception("Missing required parameter 'DeploymentId' when calling DeploymentApi->deploymentDelete")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deploymentGet(DeploymentId: String)(implicit reader: ClientResponseReader[DeploymentResponse]): Future[DeploymentResponse] = {
    // create path and map variables
    val path = (addFmt("/deployment/{deploymentId}")
      replaceAll("\\{" + "deploymentId" + "\\}", DeploymentId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentId == null) throw new Exception("Missing required parameter 'DeploymentId' when calling DeploymentApi->deploymentGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deployments()(implicit reader: ClientResponseReader[List[DeploymentResponse]]): Future[List[DeploymentResponse]] = {
    // create path and map variables
    val path = (addFmt("/deployments"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def modelStateChange(DeploymentId: String,
    ModelId: String,
    Body: SetState)(implicit reader: ClientResponseReader[ModelEntity], writer: RequestWriter[SetState]): Future[ModelEntity] = {
    // create path and map variables
    val path = (addFmt("/deployment/{deploymentId}/model/{modelId}/state")
      replaceAll("\\{" + "deploymentId" + "\\}", DeploymentId.toString)
      replaceAll("\\{" + "modelId" + "\\}", ModelId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentId == null) throw new Exception("Missing required parameter 'DeploymentId' when calling DeploymentApi->modelStateChange")

    if (ModelId == null) throw new Exception("Missing required parameter 'ModelId' when calling DeploymentApi->modelStateChange")

    if (Body == null) throw new Exception("Missing required parameter 'Body' when calling DeploymentApi->modelStateChange")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(Body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def models(DeploymentId: String)(implicit reader: ClientResponseReader[List[ModelEntity]]): Future[List[ModelEntity]] = {
    // create path and map variables
    val path = (addFmt("/deployment/{deploymentId}/models")
      replaceAll("\\{" + "deploymentId" + "\\}", DeploymentId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentId == null) throw new Exception("Missing required parameter 'DeploymentId' when calling DeploymentApi->models")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def reimportModel(DeploymentId: String,
    ModelId: String,
    Body: ImportModelRequest)(implicit reader: ClientResponseReader[ModelEntity], writer: RequestWriter[ImportModelRequest]): Future[ModelEntity] = {
    // create path and map variables
    val path = (addFmt("/deployment/{deploymentId}/model/{modelId}")
      replaceAll("\\{" + "deploymentId" + "\\}", DeploymentId.toString)
      replaceAll("\\{" + "modelId" + "\\}", ModelId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (DeploymentId == null) throw new Exception("Missing required parameter 'DeploymentId' when calling DeploymentApi->reimportModel")

    if (ModelId == null) throw new Exception("Missing required parameter 'ModelId' when calling DeploymentApi->reimportModel")

    if (Body == null) throw new Exception("Missing required parameter 'Body' when calling DeploymentApi->reimportModel")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(Body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
