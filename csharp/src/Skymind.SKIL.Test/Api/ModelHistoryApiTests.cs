/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Skymind.SKIL.Client;
using Skymind.SKIL.Api;
using Skymind.SKIL.Model;

namespace Skymind.SKIL.Test
{
    /// <summary>
    ///  Class for testing ModelHistoryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ModelHistoryApiTests
    {
        private ModelHistoryApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ModelHistoryApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ModelHistoryApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ModelHistoryApi
            //Assert.IsInstanceOfType(typeof(ModelHistoryApi), instance, "instance is a ModelHistoryApi");
        }

        
        /// <summary>
        /// Test AddEvaluationResult
        /// </summary>
        [Test]
        public void AddEvaluationResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //EvaluationResultsEntity evaluationResultsEntity = null;
            //var response = instance.AddEvaluationResult(modelHistoryServerId, evaluationResultsEntity);
            //Assert.IsInstanceOf<EvaluationResultsEntity> (response, "response is EvaluationResultsEntity");
        }
        
        /// <summary>
        /// Test AddExampleForBatch
        /// </summary>
        [Test]
        public void AddExampleForBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //AddExampleRequest addExampleRequest = null;
            //var response = instance.AddExampleForBatch(modelHistoryServerId, addExampleRequest);
            //Assert.IsInstanceOf<AddExampleRequest> (response, "response is AddExampleRequest");
        }
        
        /// <summary>
        /// Test AddExampleToMinibatch
        /// </summary>
        [Test]
        public void AddExampleToMinibatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //ExampleEntity exampleEntity = null;
            //var response = instance.AddExampleToMinibatch(modelHistoryServerId, exampleEntity);
            //Assert.IsInstanceOf<ExampleEntity> (response, "response is ExampleEntity");
        }
        
        /// <summary>
        /// Test AddExperiment
        /// </summary>
        [Test]
        public void AddExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //ExperimentEntity experimentEntity = null;
            //var response = instance.AddExperiment(modelHistoryServerId, experimentEntity);
            //Assert.IsInstanceOf<ExperimentEntity> (response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test AddMinibatch
        /// </summary>
        [Test]
        public void AddMinibatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //MinibatchEntity minibatchEntity = null;
            //var response = instance.AddMinibatch(modelHistoryServerId, minibatchEntity);
            //Assert.IsInstanceOf<MinibatchEntity> (response, "response is MinibatchEntity");
        }
        
        /// <summary>
        /// Test AddModelFeedback
        /// </summary>
        [Test]
        public void AddModelFeedbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //ModelFeedBackRequest modelFeedBackRequest = null;
            //var response = instance.AddModelFeedback(modelHistoryServerId, modelFeedBackRequest);
            //Assert.IsInstanceOf<ModelFeedBackRequest> (response, "response is ModelFeedBackRequest");
        }
        
        /// <summary>
        /// Test AddModelHistory
        /// </summary>
        [Test]
        public void AddModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //AddModelHistoryRequest addModelHistoryRequest = null;
            //var response = instance.AddModelHistory(modelHistoryServerId, addModelHistoryRequest);
            //Assert.IsInstanceOf<ModelHistoryEntity> (response, "response is ModelHistoryEntity");
        }
        
        /// <summary>
        /// Test AddModelInstance
        /// </summary>
        [Test]
        public void AddModelInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //ModelInstanceEntity modelInstanceEntity = null;
            //var response = instance.AddModelInstance(modelHistoryServerId, modelInstanceEntity);
            //Assert.IsInstanceOf<ModelInstanceEntity> (response, "response is ModelInstanceEntity");
        }
        
        /// <summary>
        /// Test AggregateModelResults
        /// </summary>
        [Test]
        public void AggregateModelResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //AggregatePrediction aggregatePrediction = null;
            //var response = instance.AggregateModelResults(modelHistoryServerId, aggregatePrediction);
            //Assert.IsInstanceOf<EvaluationResultsEntity> (response, "response is EvaluationResultsEntity");
        }
        
        /// <summary>
        /// Test CreateModelHistory
        /// </summary>
        [Test]
        public void CreateModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //ModelHistoryEntity modelHistoryEntity = null;
            //var response = instance.CreateModelHistory(modelHistoryServerId, modelHistoryEntity);
            //Assert.IsInstanceOf<ModelHistoryEntity> (response, "response is ModelHistoryEntity");
        }
        
        /// <summary>
        /// Test DeleteExperiment
        /// </summary>
        [Test]
        public void DeleteExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string experimentID = null;
            //var response = instance.DeleteExperiment(modelHistoryServerId, experimentID);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test DeleteModelHistory
        /// </summary>
        [Test]
        public void DeleteModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelHistoryID = null;
            //var response = instance.DeleteModelHistory(modelHistoryServerId, modelHistoryID);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test DeleteModelInstance
        /// </summary>
        [Test]
        public void DeleteModelInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelInstanceID = null;
            //instance.DeleteModelInstance(modelHistoryServerId, modelInstanceID);
            
        }
        
        /// <summary>
        /// Test GetBestModelAmongModelIds
        /// </summary>
        [Test]
        public void GetBestModelAmongModelIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //BestModel bestModel = null;
            //var response = instance.GetBestModelAmongModelIds(modelHistoryServerId, bestModel);
            //Assert.IsInstanceOf<ModelInstanceEntity> (response, "response is ModelInstanceEntity");
        }
        
        /// <summary>
        /// Test GetEvaluationForModelID
        /// </summary>
        [Test]
        public void GetEvaluationForModelIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelInstanceID = null;
            //var response = instance.GetEvaluationForModelID(modelHistoryServerId, modelInstanceID);
            //Assert.IsInstanceOf<List<EvaluationResultsEntity>> (response, "response is List<EvaluationResultsEntity>");
        }
        
        /// <summary>
        /// Test GetExamplesForMinibatch
        /// </summary>
        [Test]
        public void GetExamplesForMinibatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string minibatchId = null;
            //var response = instance.GetExamplesForMinibatch(modelHistoryServerId, minibatchId);
            //Assert.IsInstanceOf<List<ExampleEntity>> (response, "response is List<ExampleEntity>");
        }
        
        /// <summary>
        /// Test GetExperiment
        /// </summary>
        [Test]
        public void GetExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string experimentID = null;
            //var response = instance.GetExperiment(modelHistoryServerId, experimentID);
            //Assert.IsInstanceOf<ExperimentEntity> (response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test GetExperimentsForModelHistory
        /// </summary>
        [Test]
        public void GetExperimentsForModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelHistoryID = null;
            //var response = instance.GetExperimentsForModelHistory(modelHistoryServerId, modelHistoryID);
            //Assert.IsInstanceOf<ExperimentEntity> (response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test GetMinibatch
        /// </summary>
        [Test]
        public void GetMinibatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string minibatchId = null;
            //var response = instance.GetMinibatch(modelHistoryServerId, minibatchId);
            //Assert.IsInstanceOf<MinibatchEntity> (response, "response is MinibatchEntity");
        }
        
        /// <summary>
        /// Test GetModelHistory
        /// </summary>
        [Test]
        public void GetModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelHistoryID = null;
            //var response = instance.GetModelHistory(modelHistoryServerId, modelHistoryID);
            //Assert.IsInstanceOf<ModelHistoryEntity> (response, "response is ModelHistoryEntity");
        }
        
        /// <summary>
        /// Test GetModelInstance
        /// </summary>
        [Test]
        public void GetModelInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelInstanceID = null;
            //var response = instance.GetModelInstance(modelHistoryServerId, modelInstanceID);
            //Assert.IsInstanceOf<ModelInstanceEntity> (response, "response is ModelInstanceEntity");
        }
        
        /// <summary>
        /// Test GetModelsForExperiment
        /// </summary>
        [Test]
        public void GetModelsForExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string experimentID = null;
            //var response = instance.GetModelsForExperiment(modelHistoryServerId, experimentID);
            //Assert.IsInstanceOf<List<ModelInstanceEntity>> (response, "response is List<ModelInstanceEntity>");
        }
        
        /// <summary>
        /// Test ListAllExperiments
        /// </summary>
        [Test]
        public void ListAllExperimentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //var response = instance.ListAllExperiments(modelHistoryServerId);
            //Assert.IsInstanceOf<List<ExperimentEntity>> (response, "response is List<ExperimentEntity>");
        }
        
        /// <summary>
        /// Test UpdateBestModelForExperiment
        /// </summary>
        [Test]
        public void UpdateBestModelForExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //UpdateBestModel updateBestModel = null;
            //var response = instance.UpdateBestModelForExperiment(modelHistoryServerId, updateBestModel);
            //Assert.IsInstanceOf<ExperimentEntity> (response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test UpdateExperiment
        /// </summary>
        [Test]
        public void UpdateExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string experimentID = null;
            //ExperimentEntity experimentEntity = null;
            //var response = instance.UpdateExperiment(modelHistoryServerId, experimentID, experimentEntity);
            //Assert.IsInstanceOf<ExperimentEntity> (response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test UpdateModelHistory
        /// </summary>
        [Test]
        public void UpdateModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelHistoryID = null;
            //AddModelHistoryRequest updateModelHistoryRequest = null;
            //var response = instance.UpdateModelHistory(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest);
            //Assert.IsInstanceOf<ModelHistoryEntity> (response, "response is ModelHistoryEntity");
        }
        
    }

}
