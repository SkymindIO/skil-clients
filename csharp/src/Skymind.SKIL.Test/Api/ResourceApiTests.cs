/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Skymind.SKIL.Client;
using Skymind.SKIL.Api;
using Skymind.SKIL.Model;

namespace Skymind.SKIL.Test
{
    /// <summary>
    ///  Class for testing ResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ResourceApiTests
    {
        private ResourceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ResourceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ResourceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ResourceApi
            //Assert.IsInstanceOfType(typeof(ResourceApi), instance, "instance is a ResourceApi");
        }

        
        /// <summary>
        /// Test AddCredentials
        /// </summary>
        [Test]
        public void AddCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddCredentialsRequest addCredentialsRequest = null;
            //var response = instance.AddCredentials(addCredentialsRequest);
            //Assert.IsInstanceOf<ResourceCredentials> (response, "response is ResourceCredentials");
        }
        
        /// <summary>
        /// Test AddResource
        /// </summary>
        [Test]
        public void AddResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddResourceRequest addResourceRequest = null;
            //var response = instance.AddResource(addResourceRequest);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddResourceGroup
        /// </summary>
        [Test]
        public void AddResourceGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupName = null;
            //var response = instance.AddResourceGroup(groupName);
            //Assert.IsInstanceOf<ResourceGroup> (response, "response is ResourceGroup");
        }
        
        /// <summary>
        /// Test AddResourceToGroup
        /// </summary>
        [Test]
        public void AddResourceToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceGroupId = null;
            //long? resourceId = null;
            //instance.AddResourceToGroup(resourceGroupId, resourceId);
            
        }
        
        /// <summary>
        /// Test DeleteCredentialsById
        /// </summary>
        [Test]
        public void DeleteCredentialsByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? credentialId = null;
            //instance.DeleteCredentialsById(credentialId);
            
        }
        
        /// <summary>
        /// Test DeleteResourceById
        /// </summary>
        [Test]
        public void DeleteResourceByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceId = null;
            //var response = instance.DeleteResourceById(resourceId);
            //Assert.IsInstanceOf<Resource> (response, "response is Resource");
        }
        
        /// <summary>
        /// Test DeleteResourceFromGroup
        /// </summary>
        [Test]
        public void DeleteResourceFromGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceGroupId = null;
            //long? resourceId = null;
            //instance.DeleteResourceFromGroup(resourceGroupId, resourceId);
            
        }
        
        /// <summary>
        /// Test DeleteResourceGroupById
        /// </summary>
        [Test]
        public void DeleteResourceGroupByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceGroupId = null;
            //var response = instance.DeleteResourceGroupById(resourceGroupId);
            //Assert.IsInstanceOf<ResourceGroup> (response, "response is ResourceGroup");
        }
        
        /// <summary>
        /// Test GetCredentialsById
        /// </summary>
        [Test]
        public void GetCredentialsByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? credentialId = null;
            //var response = instance.GetCredentialsById(credentialId);
            //Assert.IsInstanceOf<ResourceCredentials> (response, "response is ResourceCredentials");
        }
        
        /// <summary>
        /// Test GetResourceById
        /// </summary>
        [Test]
        public void GetResourceByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceId = null;
            //var response = instance.GetResourceById(resourceId);
            //Assert.IsInstanceOf<Resource> (response, "response is Resource");
        }
        
        /// <summary>
        /// Test GetResourceBySubType
        /// </summary>
        [Test]
        public void GetResourceBySubTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string resourceSubType = null;
            //var response = instance.GetResourceBySubType(resourceSubType);
            //Assert.IsInstanceOf<List<Resource>> (response, "response is List<Resource>");
        }
        
        /// <summary>
        /// Test GetResourceByType
        /// </summary>
        [Test]
        public void GetResourceByTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string resourceType = null;
            //var response = instance.GetResourceByType(resourceType);
            //Assert.IsInstanceOf<List<Resource>> (response, "response is List<Resource>");
        }
        
        /// <summary>
        /// Test GetResourceDetailsById
        /// </summary>
        [Test]
        public void GetResourceDetailsByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceId = null;
            //var response = instance.GetResourceDetailsById(resourceId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetResourceGroupById
        /// </summary>
        [Test]
        public void GetResourceGroupByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceGroupId = null;
            //var response = instance.GetResourceGroupById(resourceGroupId);
            //Assert.IsInstanceOf<ResourceGroup> (response, "response is ResourceGroup");
        }
        
        /// <summary>
        /// Test GetResourceGroups
        /// </summary>
        [Test]
        public void GetResourceGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetResourceGroups();
            //Assert.IsInstanceOf<List<ResourceGroup>> (response, "response is List<ResourceGroup>");
        }
        
        /// <summary>
        /// Test GetResources
        /// </summary>
        [Test]
        public void GetResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetResources();
            //Assert.IsInstanceOf<List<Resource>> (response, "response is List<Resource>");
        }
        
        /// <summary>
        /// Test GetResourcesFromGroup
        /// </summary>
        [Test]
        public void GetResourcesFromGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceGroupId = null;
            //var response = instance.GetResourcesFromGroup(resourceGroupId);
            //Assert.IsInstanceOf<List<Resource>> (response, "response is List<Resource>");
        }
        
    }

}
