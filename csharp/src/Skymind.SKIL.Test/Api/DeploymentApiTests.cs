/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Skymind.SKIL.Client;
using Skymind.SKIL.Api;
using Skymind.SKIL.Model;

namespace Skymind.SKIL.Test
{
    /// <summary>
    ///  Class for testing DeploymentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DeploymentApiTests
    {
        private DeploymentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DeploymentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DeploymentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DeploymentApi
            //Assert.IsInstanceOfType(typeof(DeploymentApi), instance, "instance is a DeploymentApi");
        }

        
        /// <summary>
        /// Test DeleteModel
        /// </summary>
        [Test]
        public void DeleteModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string modelId = null;
            //var response = instance.DeleteModel(deploymentId, modelId);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test DeployModel
        /// </summary>
        [Test]
        public void DeployModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //ImportModelRequest body = null;
            //var response = instance.DeployModel(deploymentId, body);
            //Assert.IsInstanceOf<ModelEntity> (response, "response is ModelEntity");
        }
        
        /// <summary>
        /// Test DeploymentCreate
        /// </summary>
        [Test]
        public void DeploymentCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateDeploymentRequest body = null;
            //var response = instance.DeploymentCreate(body);
            //Assert.IsInstanceOf<DeploymentResponse> (response, "response is DeploymentResponse");
        }
        
        /// <summary>
        /// Test DeploymentDelete
        /// </summary>
        [Test]
        public void DeploymentDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //var response = instance.DeploymentDelete(deploymentId);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test DeploymentGet
        /// </summary>
        [Test]
        public void DeploymentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //var response = instance.DeploymentGet(deploymentId);
            //Assert.IsInstanceOf<DeploymentResponse> (response, "response is DeploymentResponse");
        }
        
        /// <summary>
        /// Test Deployments
        /// </summary>
        [Test]
        public void DeploymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Deployments();
            //Assert.IsInstanceOf<List<DeploymentResponse>> (response, "response is List<DeploymentResponse>");
        }
        
        /// <summary>
        /// Test ModelStateChange
        /// </summary>
        [Test]
        public void ModelStateChangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string modelId = null;
            //SetState body = null;
            //var response = instance.ModelStateChange(deploymentId, modelId, body);
            //Assert.IsInstanceOf<ModelEntity> (response, "response is ModelEntity");
        }
        
        /// <summary>
        /// Test Models
        /// </summary>
        [Test]
        public void ModelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //var response = instance.Models(deploymentId);
            //Assert.IsInstanceOf<List<ModelEntity>> (response, "response is List<ModelEntity>");
        }
        
        /// <summary>
        /// Test ReimportModel
        /// </summary>
        [Test]
        public void ReimportModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string modelId = null;
            //ImportModelRequest body = null;
            //var response = instance.ReimportModel(deploymentId, modelId, body);
            //Assert.IsInstanceOf<ModelEntity> (response, "response is ModelEntity");
        }
        
    }

}
