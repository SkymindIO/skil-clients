/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Skymind.SKIL.Client;
using Skymind.SKIL.Api;
using Skymind.SKIL.Model;

namespace Skymind.SKIL.Test
{
    /// <summary>
    ///  Class for testing InferenceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class InferenceApiTests
    {
        private InferenceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new InferenceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InferenceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InferenceApi
            //Assert.IsInstanceOfType(typeof(InferenceApi), instance, "instance is a InferenceApi");
        }

        
        /// <summary>
        /// Test Classify
        /// </summary>
        [Test]
        public void ClassifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Prediction body = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Classify(body, deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<ClassificationResult> (response, "response is ClassificationResult");
        }
        
        /// <summary>
        /// Test Classifyarray
        /// </summary>
        [Test]
        public void ClassifyarrayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Prediction body = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Classifyarray(body, deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<Base64NDArrayBody> (response, "response is Base64NDArrayBody");
        }
        
        /// <summary>
        /// Test Classifyimage
        /// </summary>
        [Test]
        public void ClassifyimageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //System.IO.Stream image = null;
            //var response = instance.Classifyimage(deploymentName, versionName, modelName, image);
            //Assert.IsInstanceOf<ClassificationResult> (response, "response is ClassificationResult");
        }
        
        /// <summary>
        /// Test Detectobjects
        /// </summary>
        [Test]
        public void DetectobjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? needsPreprocessing = null;
            //float? threshold = null;
            //System.IO.Stream file = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Detectobjects(id, needsPreprocessing, threshold, file, deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<DetectionResult> (response, "response is DetectionResult");
        }
        
        /// <summary>
        /// Test Jsonarray
        /// </summary>
        [Test]
        public void JsonarrayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Prediction body = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Jsonarray(body, deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<JsonArrayResponse> (response, "response is JsonArrayResponse");
        }
        
        /// <summary>
        /// Test Logfilepath
        /// </summary>
        [Test]
        public void LogfilepathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Logfilepath(deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test Logs
        /// </summary>
        [Test]
        public void LogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LogRequest body = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Logs(body, deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<LogBatch> (response, "response is LogBatch");
        }
        
        /// <summary>
        /// Test MetaGet
        /// </summary>
        [Test]
        public void MetaGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.MetaGet(deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<MetaData> (response, "response is MetaData");
        }
        
        /// <summary>
        /// Test MetaPost
        /// </summary>
        [Test]
        public void MetaPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MetaData body = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.MetaPost(body, deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<MetaData> (response, "response is MetaData");
        }
        
        /// <summary>
        /// Test Modelset
        /// </summary>
        [Test]
        public void ModelsetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //System.IO.Stream file = null;
            //var response = instance.Modelset(deploymentName, versionName, modelName, file);
            //Assert.IsInstanceOf<ModelStatus> (response, "response is ModelStatus");
        }
        
        /// <summary>
        /// Test Modelupdate
        /// </summary>
        [Test]
        public void ModelupdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Modelupdate(file, deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<ModelStatus> (response, "response is ModelStatus");
        }
        
        /// <summary>
        /// Test Multiclassify
        /// </summary>
        [Test]
        public void MulticlassifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Prediction body = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Multiclassify(body, deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<MultiClassClassificationResult> (response, "response is MultiClassClassificationResult");
        }
        
        /// <summary>
        /// Test Multipredict
        /// </summary>
        [Test]
        public void MultipredictTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MultiPredictRequest body = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Multipredict(body, deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<MultiPredictResponse> (response, "response is MultiPredictResponse");
        }
        
        /// <summary>
        /// Test Multipredictimage
        /// </summary>
        [Test]
        public void MultipredictimageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //string id = null;
            //bool? needsPreprocessing = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Multipredictimage(file, id, needsPreprocessing, deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<MultiPredictResponse> (response, "response is MultiPredictResponse");
        }
        
        /// <summary>
        /// Test Predict
        /// </summary>
        [Test]
        public void PredictTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Prediction body = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Predict(body, deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<Prediction> (response, "response is Prediction");
        }
        
        /// <summary>
        /// Test Predictimage
        /// </summary>
        [Test]
        public void PredictimageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //System.IO.Stream image = null;
            //var response = instance.Predictimage(deploymentName, versionName, modelName, image);
            //Assert.IsInstanceOf<Prediction> (response, "response is Prediction");
        }
        
        /// <summary>
        /// Test Predictwithpreprocess
        /// </summary>
        [Test]
        public void PredictwithpreprocessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Predictwithpreprocess(body, deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<Prediction> (response, "response is Prediction");
        }
        
        /// <summary>
        /// Test Predictwithpreprocessjson
        /// </summary>
        [Test]
        public void PredictwithpreprocessjsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Predictwithpreprocessjson(body, deploymentName, versionName, modelName);
            //Assert.IsInstanceOf<JsonArrayResponse> (response, "response is JsonArrayResponse");
        }
        
    }

}
