/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Skymind.SKIL.Client;
using Skymind.SKIL.Model;

namespace Skymind.SKIL.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModelHistoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds an evaluation result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>EvaluationResultsEntity</returns>
        EvaluationResultsEntity AddEvaluationResult (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity);

        /// <summary>
        /// Adds an evaluation result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>ApiResponse of EvaluationResultsEntity</returns>
        ApiResponse<EvaluationResultsEntity> AddEvaluationResultWithHttpInfo (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity);
        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>AddExampleRequest</returns>
        AddExampleRequest AddExampleForBatch (string modelHistoryServerId, AddExampleRequest addExampleRequest);

        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>ApiResponse of AddExampleRequest</returns>
        ApiResponse<AddExampleRequest> AddExampleForBatchWithHttpInfo (string modelHistoryServerId, AddExampleRequest addExampleRequest);
        /// <summary>
        /// Adds an example to a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>ExampleEntity</returns>
        ExampleEntity AddExampleToMinibatch (string modelHistoryServerId, ExampleEntity exampleEntity);

        /// <summary>
        /// Adds an example to a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>ApiResponse of ExampleEntity</returns>
        ApiResponse<ExampleEntity> AddExampleToMinibatchWithHttpInfo (string modelHistoryServerId, ExampleEntity exampleEntity);
        /// <summary>
        /// Add an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>ExperimentEntity</returns>
        ExperimentEntity AddExperiment (string modelHistoryServerId, ExperimentEntity experimentEntity);

        /// <summary>
        /// Add an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        ApiResponse<ExperimentEntity> AddExperimentWithHttpInfo (string modelHistoryServerId, ExperimentEntity experimentEntity);
        /// <summary>
        /// Adds a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>MinibatchEntity</returns>
        MinibatchEntity AddMinibatch (string modelHistoryServerId, MinibatchEntity minibatchEntity);

        /// <summary>
        /// Adds a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>ApiResponse of MinibatchEntity</returns>
        ApiResponse<MinibatchEntity> AddMinibatchWithHttpInfo (string modelHistoryServerId, MinibatchEntity minibatchEntity);
        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>ModelFeedBackRequest</returns>
        ModelFeedBackRequest AddModelFeedback (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest);

        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>ApiResponse of ModelFeedBackRequest</returns>
        ApiResponse<ModelFeedBackRequest> AddModelFeedbackWithHttpInfo (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest);
        /// <summary>
        /// Add a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>ModelHistoryEntity</returns>
        ModelHistoryEntity AddModelHistory (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest);

        /// <summary>
        /// Add a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        ApiResponse<ModelHistoryEntity> AddModelHistoryWithHttpInfo (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest);
        /// <summary>
        /// Adds a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>ModelInstanceEntity</returns>
        ModelInstanceEntity AddModelInstance (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity);

        /// <summary>
        /// Adds a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>ApiResponse of ModelInstanceEntity</returns>
        ApiResponse<ModelInstanceEntity> AddModelInstanceWithHttpInfo (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity);
        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>EvaluationResultsEntity</returns>
        EvaluationResultsEntity AggregateModelResults (string modelHistoryServerId, AggregatePrediction aggregatePrediction);

        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>ApiResponse of EvaluationResultsEntity</returns>
        ApiResponse<EvaluationResultsEntity> AggregateModelResultsWithHttpInfo (string modelHistoryServerId, AggregatePrediction aggregatePrediction);
        /// <summary>
        /// Creates model History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>ModelHistoryEntity</returns>
        ModelHistoryEntity CreateModelHistory (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity);

        /// <summary>
        /// Creates model History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        ApiResponse<ModelHistoryEntity> CreateModelHistoryWithHttpInfo (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity);
        /// <summary>
        /// Deletes an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 DeleteExperiment (string modelHistoryServerId, string experimentID);

        /// <summary>
        /// Deletes an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> DeleteExperimentWithHttpInfo (string modelHistoryServerId, string experimentID);
        /// <summary>
        /// Deletes a model history / workspace, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 DeleteModelHistory (string modelHistoryServerId, string modelHistoryID);

        /// <summary>
        /// Deletes a model history / workspace, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> DeleteModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID);
        /// <summary>
        /// Deletes a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns></returns>
        void DeleteModelInstance (string modelHistoryServerId, string modelInstanceID);

        /// <summary>
        /// Deletes a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteModelInstanceWithHttpInfo (string modelHistoryServerId, string modelInstanceID);
        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>ModelInstanceEntity</returns>
        ModelInstanceEntity GetBestModelAmongModelIds (string modelHistoryServerId, BestModel bestModel);

        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>ApiResponse of ModelInstanceEntity</returns>
        ApiResponse<ModelInstanceEntity> GetBestModelAmongModelIdsWithHttpInfo (string modelHistoryServerId, BestModel bestModel);
        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>List&lt;EvaluationResultsEntity&gt;</returns>
        List<EvaluationResultsEntity> GetEvaluationForModelID (string modelHistoryServerId, string modelInstanceID);

        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>ApiResponse of List&lt;EvaluationResultsEntity&gt;</returns>
        ApiResponse<List<EvaluationResultsEntity>> GetEvaluationForModelIDWithHttpInfo (string modelHistoryServerId, string modelInstanceID);
        /// <summary>
        /// Gets all the examples for a minibatch ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>List&lt;ExampleEntity&gt;</returns>
        List<ExampleEntity> GetExamplesForMinibatch (string modelHistoryServerId, string minibatchId);

        /// <summary>
        /// Gets all the examples for a minibatch ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>ApiResponse of List&lt;ExampleEntity&gt;</returns>
        ApiResponse<List<ExampleEntity>> GetExamplesForMinibatchWithHttpInfo (string modelHistoryServerId, string minibatchId);
        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>ExperimentEntity</returns>
        ExperimentEntity GetExperiment (string modelHistoryServerId, string experimentID);

        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        ApiResponse<ExperimentEntity> GetExperimentWithHttpInfo (string modelHistoryServerId, string experimentID);
        /// <summary>
        /// Obtain all experiments for a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>ExperimentEntity</returns>
        ExperimentEntity GetExperimentsForModelHistory (string modelHistoryServerId, string modelHistoryID);

        /// <summary>
        /// Obtain all experiments for a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        ApiResponse<ExperimentEntity> GetExperimentsForModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID);
        /// <summary>
        /// Gets a minibatch for the model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>MinibatchEntity</returns>
        MinibatchEntity GetMinibatch (string modelHistoryServerId, string minibatchId);

        /// <summary>
        /// Gets a minibatch for the model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>ApiResponse of MinibatchEntity</returns>
        ApiResponse<MinibatchEntity> GetMinibatchWithHttpInfo (string modelHistoryServerId, string minibatchId);
        /// <summary>
        /// Gets a model history, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>ModelHistoryEntity</returns>
        ModelHistoryEntity GetModelHistory (string modelHistoryServerId, string modelHistoryID);

        /// <summary>
        /// Gets a model history, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        ApiResponse<ModelHistoryEntity> GetModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID);
        /// <summary>
        /// Gets a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>ModelInstanceEntity</returns>
        ModelInstanceEntity GetModelInstance (string modelHistoryServerId, string modelInstanceID);

        /// <summary>
        /// Gets a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>ApiResponse of ModelInstanceEntity</returns>
        ApiResponse<ModelInstanceEntity> GetModelInstanceWithHttpInfo (string modelHistoryServerId, string modelInstanceID);
        /// <summary>
        /// Obtain a list of all the models for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>List&lt;ModelInstanceEntity&gt;</returns>
        List<ModelInstanceEntity> GetModelsForExperiment (string modelHistoryServerId, string experimentID);

        /// <summary>
        /// Obtain a list of all the models for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>ApiResponse of List&lt;ModelInstanceEntity&gt;</returns>
        ApiResponse<List<ModelInstanceEntity>> GetModelsForExperimentWithHttpInfo (string modelHistoryServerId, string experimentID);
        /// <summary>
        /// List all of the experiments in every model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>List&lt;ExperimentEntity&gt;</returns>
        List<ExperimentEntity> ListAllExperiments (string modelHistoryServerId);

        /// <summary>
        /// List all of the experiments in every model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>ApiResponse of List&lt;ExperimentEntity&gt;</returns>
        ApiResponse<List<ExperimentEntity>> ListAllExperimentsWithHttpInfo (string modelHistoryServerId);
        /// <summary>
        /// Updates the best model for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>ExperimentEntity</returns>
        ExperimentEntity UpdateBestModelForExperiment (string modelHistoryServerId, UpdateBestModel updateBestModel);

        /// <summary>
        /// Updates the best model for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        ApiResponse<ExperimentEntity> UpdateBestModelForExperimentWithHttpInfo (string modelHistoryServerId, UpdateBestModel updateBestModel);
        /// <summary>
        /// Updates an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>ExperimentEntity</returns>
        ExperimentEntity UpdateExperiment (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity);

        /// <summary>
        /// Updates an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        ApiResponse<ExperimentEntity> UpdateExperimentWithHttpInfo (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity);
        /// <summary>
        /// Update a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>ModelHistoryEntity</returns>
        ModelHistoryEntity UpdateModelHistory (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest);

        /// <summary>
        /// Update a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        ApiResponse<ModelHistoryEntity> UpdateModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds an evaluation result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>Task of EvaluationResultsEntity</returns>
        System.Threading.Tasks.Task<EvaluationResultsEntity> AddEvaluationResultAsync (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity);

        /// <summary>
        /// Adds an evaluation result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>Task of ApiResponse (EvaluationResultsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EvaluationResultsEntity>> AddEvaluationResultAsyncWithHttpInfo (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity);
        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>Task of AddExampleRequest</returns>
        System.Threading.Tasks.Task<AddExampleRequest> AddExampleForBatchAsync (string modelHistoryServerId, AddExampleRequest addExampleRequest);

        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>Task of ApiResponse (AddExampleRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddExampleRequest>> AddExampleForBatchAsyncWithHttpInfo (string modelHistoryServerId, AddExampleRequest addExampleRequest);
        /// <summary>
        /// Adds an example to a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>Task of ExampleEntity</returns>
        System.Threading.Tasks.Task<ExampleEntity> AddExampleToMinibatchAsync (string modelHistoryServerId, ExampleEntity exampleEntity);

        /// <summary>
        /// Adds an example to a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>Task of ApiResponse (ExampleEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExampleEntity>> AddExampleToMinibatchAsyncWithHttpInfo (string modelHistoryServerId, ExampleEntity exampleEntity);
        /// <summary>
        /// Add an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>Task of ExperimentEntity</returns>
        System.Threading.Tasks.Task<ExperimentEntity> AddExperimentAsync (string modelHistoryServerId, ExperimentEntity experimentEntity);

        /// <summary>
        /// Add an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> AddExperimentAsyncWithHttpInfo (string modelHistoryServerId, ExperimentEntity experimentEntity);
        /// <summary>
        /// Adds a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>Task of MinibatchEntity</returns>
        System.Threading.Tasks.Task<MinibatchEntity> AddMinibatchAsync (string modelHistoryServerId, MinibatchEntity minibatchEntity);

        /// <summary>
        /// Adds a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>Task of ApiResponse (MinibatchEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<MinibatchEntity>> AddMinibatchAsyncWithHttpInfo (string modelHistoryServerId, MinibatchEntity minibatchEntity);
        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>Task of ModelFeedBackRequest</returns>
        System.Threading.Tasks.Task<ModelFeedBackRequest> AddModelFeedbackAsync (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest);

        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>Task of ApiResponse (ModelFeedBackRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelFeedBackRequest>> AddModelFeedbackAsyncWithHttpInfo (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest);
        /// <summary>
        /// Add a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        System.Threading.Tasks.Task<ModelHistoryEntity> AddModelHistoryAsync (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest);

        /// <summary>
        /// Add a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> AddModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest);
        /// <summary>
        /// Adds a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of ModelInstanceEntity</returns>
        System.Threading.Tasks.Task<ModelInstanceEntity> AddModelInstanceAsync (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity);

        /// <summary>
        /// Adds a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of ApiResponse (ModelInstanceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelInstanceEntity>> AddModelInstanceAsyncWithHttpInfo (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity);
        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of EvaluationResultsEntity</returns>
        System.Threading.Tasks.Task<EvaluationResultsEntity> AggregateModelResultsAsync (string modelHistoryServerId, AggregatePrediction aggregatePrediction);

        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of ApiResponse (EvaluationResultsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EvaluationResultsEntity>> AggregateModelResultsAsyncWithHttpInfo (string modelHistoryServerId, AggregatePrediction aggregatePrediction);
        /// <summary>
        /// Creates model History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        System.Threading.Tasks.Task<ModelHistoryEntity> CreateModelHistoryAsync (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity);

        /// <summary>
        /// Creates model History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> CreateModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity);
        /// <summary>
        /// Deletes an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> DeleteExperimentAsync (string modelHistoryServerId, string experimentID);

        /// <summary>
        /// Deletes an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID);
        /// <summary>
        /// Deletes a model history / workspace, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> DeleteModelHistoryAsync (string modelHistoryServerId, string modelHistoryID);

        /// <summary>
        /// Deletes a model history / workspace, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID);
        /// <summary>
        /// Deletes a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteModelInstanceAsync (string modelHistoryServerId, string modelInstanceID);

        /// <summary>
        /// Deletes a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelInstanceAsyncWithHttpInfo (string modelHistoryServerId, string modelInstanceID);
        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>Task of ModelInstanceEntity</returns>
        System.Threading.Tasks.Task<ModelInstanceEntity> GetBestModelAmongModelIdsAsync (string modelHistoryServerId, BestModel bestModel);

        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>Task of ApiResponse (ModelInstanceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelInstanceEntity>> GetBestModelAmongModelIdsAsyncWithHttpInfo (string modelHistoryServerId, BestModel bestModel);
        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>Task of List&lt;EvaluationResultsEntity&gt;</returns>
        System.Threading.Tasks.Task<List<EvaluationResultsEntity>> GetEvaluationForModelIDAsync (string modelHistoryServerId, string modelInstanceID);

        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>Task of ApiResponse (List&lt;EvaluationResultsEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EvaluationResultsEntity>>> GetEvaluationForModelIDAsyncWithHttpInfo (string modelHistoryServerId, string modelInstanceID);
        /// <summary>
        /// Gets all the examples for a minibatch ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of List&lt;ExampleEntity&gt;</returns>
        System.Threading.Tasks.Task<List<ExampleEntity>> GetExamplesForMinibatchAsync (string modelHistoryServerId, string minibatchId);

        /// <summary>
        /// Gets all the examples for a minibatch ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of ApiResponse (List&lt;ExampleEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExampleEntity>>> GetExamplesForMinibatchAsyncWithHttpInfo (string modelHistoryServerId, string minibatchId);
        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>Task of ExperimentEntity</returns>
        System.Threading.Tasks.Task<ExperimentEntity> GetExperimentAsync (string modelHistoryServerId, string experimentID);

        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> GetExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID);
        /// <summary>
        /// Obtain all experiments for a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>Task of ExperimentEntity</returns>
        System.Threading.Tasks.Task<ExperimentEntity> GetExperimentsForModelHistoryAsync (string modelHistoryServerId, string modelHistoryID);

        /// <summary>
        /// Obtain all experiments for a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> GetExperimentsForModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID);
        /// <summary>
        /// Gets a minibatch for the model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of MinibatchEntity</returns>
        System.Threading.Tasks.Task<MinibatchEntity> GetMinibatchAsync (string modelHistoryServerId, string minibatchId);

        /// <summary>
        /// Gets a minibatch for the model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of ApiResponse (MinibatchEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<MinibatchEntity>> GetMinibatchAsyncWithHttpInfo (string modelHistoryServerId, string minibatchId);
        /// <summary>
        /// Gets a model history, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        System.Threading.Tasks.Task<ModelHistoryEntity> GetModelHistoryAsync (string modelHistoryServerId, string modelHistoryID);

        /// <summary>
        /// Gets a model history, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> GetModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID);
        /// <summary>
        /// Gets a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>Task of ModelInstanceEntity</returns>
        System.Threading.Tasks.Task<ModelInstanceEntity> GetModelInstanceAsync (string modelHistoryServerId, string modelInstanceID);

        /// <summary>
        /// Gets a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>Task of ApiResponse (ModelInstanceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelInstanceEntity>> GetModelInstanceAsyncWithHttpInfo (string modelHistoryServerId, string modelInstanceID);
        /// <summary>
        /// Obtain a list of all the models for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>Task of List&lt;ModelInstanceEntity&gt;</returns>
        System.Threading.Tasks.Task<List<ModelInstanceEntity>> GetModelsForExperimentAsync (string modelHistoryServerId, string experimentID);

        /// <summary>
        /// Obtain a list of all the models for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>Task of ApiResponse (List&lt;ModelInstanceEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelInstanceEntity>>> GetModelsForExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID);
        /// <summary>
        /// List all of the experiments in every model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>Task of List&lt;ExperimentEntity&gt;</returns>
        System.Threading.Tasks.Task<List<ExperimentEntity>> ListAllExperimentsAsync (string modelHistoryServerId);

        /// <summary>
        /// List all of the experiments in every model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>Task of ApiResponse (List&lt;ExperimentEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExperimentEntity>>> ListAllExperimentsAsyncWithHttpInfo (string modelHistoryServerId);
        /// <summary>
        /// Updates the best model for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>Task of ExperimentEntity</returns>
        System.Threading.Tasks.Task<ExperimentEntity> UpdateBestModelForExperimentAsync (string modelHistoryServerId, UpdateBestModel updateBestModel);

        /// <summary>
        /// Updates the best model for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> UpdateBestModelForExperimentAsyncWithHttpInfo (string modelHistoryServerId, UpdateBestModel updateBestModel);
        /// <summary>
        /// Updates an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>Task of ExperimentEntity</returns>
        System.Threading.Tasks.Task<ExperimentEntity> UpdateExperimentAsync (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity);

        /// <summary>
        /// Updates an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> UpdateExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity);
        /// <summary>
        /// Update a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        System.Threading.Tasks.Task<ModelHistoryEntity> UpdateModelHistoryAsync (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest);

        /// <summary>
        /// Update a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> UpdateModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModelHistoryApi : IModelHistoryApi
    {
        private Skymind.SKIL.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelHistoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModelHistoryApi(String basePath)
        {
            this.Configuration = new Skymind.SKIL.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Skymind.SKIL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelHistoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModelHistoryApi(Skymind.SKIL.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Skymind.SKIL.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Skymind.SKIL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Skymind.SKIL.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Skymind.SKIL.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds an evaluation result 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>EvaluationResultsEntity</returns>
        public EvaluationResultsEntity AddEvaluationResult (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity)
        {
             ApiResponse<EvaluationResultsEntity> localVarResponse = AddEvaluationResultWithHttpInfo(modelHistoryServerId, evaluationResultsEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an evaluation result 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>ApiResponse of EvaluationResultsEntity</returns>
        public ApiResponse< EvaluationResultsEntity > AddEvaluationResultWithHttpInfo (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddEvaluationResult");
            // verify the required parameter 'evaluationResultsEntity' is set
            if (evaluationResultsEntity == null)
                throw new ApiException(400, "Missing required parameter 'evaluationResultsEntity' when calling ModelHistoryApi->AddEvaluationResult");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (evaluationResultsEntity != null && evaluationResultsEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(evaluationResultsEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = evaluationResultsEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEvaluationResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EvaluationResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EvaluationResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EvaluationResultsEntity)));
        }

        /// <summary>
        /// Adds an evaluation result 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>Task of EvaluationResultsEntity</returns>
        public async System.Threading.Tasks.Task<EvaluationResultsEntity> AddEvaluationResultAsync (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity)
        {
             ApiResponse<EvaluationResultsEntity> localVarResponse = await AddEvaluationResultAsyncWithHttpInfo(modelHistoryServerId, evaluationResultsEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an evaluation result 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>Task of ApiResponse (EvaluationResultsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EvaluationResultsEntity>> AddEvaluationResultAsyncWithHttpInfo (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddEvaluationResult");
            // verify the required parameter 'evaluationResultsEntity' is set
            if (evaluationResultsEntity == null)
                throw new ApiException(400, "Missing required parameter 'evaluationResultsEntity' when calling ModelHistoryApi->AddEvaluationResult");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (evaluationResultsEntity != null && evaluationResultsEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(evaluationResultsEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = evaluationResultsEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEvaluationResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EvaluationResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EvaluationResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EvaluationResultsEntity)));
        }

        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>AddExampleRequest</returns>
        public AddExampleRequest AddExampleForBatch (string modelHistoryServerId, AddExampleRequest addExampleRequest)
        {
             ApiResponse<AddExampleRequest> localVarResponse = AddExampleForBatchWithHttpInfo(modelHistoryServerId, addExampleRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>ApiResponse of AddExampleRequest</returns>
        public ApiResponse< AddExampleRequest > AddExampleForBatchWithHttpInfo (string modelHistoryServerId, AddExampleRequest addExampleRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddExampleForBatch");
            // verify the required parameter 'addExampleRequest' is set
            if (addExampleRequest == null)
                throw new ApiException(400, "Missing required parameter 'addExampleRequest' when calling ModelHistoryApi->AddExampleForBatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/exampleForBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (addExampleRequest != null && addExampleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addExampleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addExampleRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExampleForBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddExampleRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddExampleRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddExampleRequest)));
        }

        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>Task of AddExampleRequest</returns>
        public async System.Threading.Tasks.Task<AddExampleRequest> AddExampleForBatchAsync (string modelHistoryServerId, AddExampleRequest addExampleRequest)
        {
             ApiResponse<AddExampleRequest> localVarResponse = await AddExampleForBatchAsyncWithHttpInfo(modelHistoryServerId, addExampleRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>Task of ApiResponse (AddExampleRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddExampleRequest>> AddExampleForBatchAsyncWithHttpInfo (string modelHistoryServerId, AddExampleRequest addExampleRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddExampleForBatch");
            // verify the required parameter 'addExampleRequest' is set
            if (addExampleRequest == null)
                throw new ApiException(400, "Missing required parameter 'addExampleRequest' when calling ModelHistoryApi->AddExampleForBatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/exampleForBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (addExampleRequest != null && addExampleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addExampleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addExampleRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExampleForBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddExampleRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddExampleRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddExampleRequest)));
        }

        /// <summary>
        /// Adds an example to a minibatch 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>ExampleEntity</returns>
        public ExampleEntity AddExampleToMinibatch (string modelHistoryServerId, ExampleEntity exampleEntity)
        {
             ApiResponse<ExampleEntity> localVarResponse = AddExampleToMinibatchWithHttpInfo(modelHistoryServerId, exampleEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an example to a minibatch 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>ApiResponse of ExampleEntity</returns>
        public ApiResponse< ExampleEntity > AddExampleToMinibatchWithHttpInfo (string modelHistoryServerId, ExampleEntity exampleEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddExampleToMinibatch");
            // verify the required parameter 'exampleEntity' is set
            if (exampleEntity == null)
                throw new ApiException(400, "Missing required parameter 'exampleEntity' when calling ModelHistoryApi->AddExampleToMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/example";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (exampleEntity != null && exampleEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exampleEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exampleEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExampleToMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExampleEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExampleEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExampleEntity)));
        }

        /// <summary>
        /// Adds an example to a minibatch 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>Task of ExampleEntity</returns>
        public async System.Threading.Tasks.Task<ExampleEntity> AddExampleToMinibatchAsync (string modelHistoryServerId, ExampleEntity exampleEntity)
        {
             ApiResponse<ExampleEntity> localVarResponse = await AddExampleToMinibatchAsyncWithHttpInfo(modelHistoryServerId, exampleEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an example to a minibatch 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>Task of ApiResponse (ExampleEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExampleEntity>> AddExampleToMinibatchAsyncWithHttpInfo (string modelHistoryServerId, ExampleEntity exampleEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddExampleToMinibatch");
            // verify the required parameter 'exampleEntity' is set
            if (exampleEntity == null)
                throw new ApiException(400, "Missing required parameter 'exampleEntity' when calling ModelHistoryApi->AddExampleToMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/example";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (exampleEntity != null && exampleEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exampleEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exampleEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExampleToMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExampleEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExampleEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExampleEntity)));
        }

        /// <summary>
        /// Add an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>ExperimentEntity</returns>
        public ExperimentEntity AddExperiment (string modelHistoryServerId, ExperimentEntity experimentEntity)
        {
             ApiResponse<ExperimentEntity> localVarResponse = AddExperimentWithHttpInfo(modelHistoryServerId, experimentEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        public ApiResponse< ExperimentEntity > AddExperimentWithHttpInfo (string modelHistoryServerId, ExperimentEntity experimentEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddExperiment");
            // verify the required parameter 'experimentEntity' is set
            if (experimentEntity == null)
                throw new ApiException(400, "Missing required parameter 'experimentEntity' when calling ModelHistoryApi->AddExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentEntity != null && experimentEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(experimentEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = experimentEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Add an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>Task of ExperimentEntity</returns>
        public async System.Threading.Tasks.Task<ExperimentEntity> AddExperimentAsync (string modelHistoryServerId, ExperimentEntity experimentEntity)
        {
             ApiResponse<ExperimentEntity> localVarResponse = await AddExperimentAsyncWithHttpInfo(modelHistoryServerId, experimentEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> AddExperimentAsyncWithHttpInfo (string modelHistoryServerId, ExperimentEntity experimentEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddExperiment");
            // verify the required parameter 'experimentEntity' is set
            if (experimentEntity == null)
                throw new ApiException(400, "Missing required parameter 'experimentEntity' when calling ModelHistoryApi->AddExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentEntity != null && experimentEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(experimentEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = experimentEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Adds a minibatch 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>MinibatchEntity</returns>
        public MinibatchEntity AddMinibatch (string modelHistoryServerId, MinibatchEntity minibatchEntity)
        {
             ApiResponse<MinibatchEntity> localVarResponse = AddMinibatchWithHttpInfo(modelHistoryServerId, minibatchEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a minibatch 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>ApiResponse of MinibatchEntity</returns>
        public ApiResponse< MinibatchEntity > AddMinibatchWithHttpInfo (string modelHistoryServerId, MinibatchEntity minibatchEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddMinibatch");
            // verify the required parameter 'minibatchEntity' is set
            if (minibatchEntity == null)
                throw new ApiException(400, "Missing required parameter 'minibatchEntity' when calling ModelHistoryApi->AddMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (minibatchEntity != null && minibatchEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(minibatchEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = minibatchEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MinibatchEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MinibatchEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MinibatchEntity)));
        }

        /// <summary>
        /// Adds a minibatch 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>Task of MinibatchEntity</returns>
        public async System.Threading.Tasks.Task<MinibatchEntity> AddMinibatchAsync (string modelHistoryServerId, MinibatchEntity minibatchEntity)
        {
             ApiResponse<MinibatchEntity> localVarResponse = await AddMinibatchAsyncWithHttpInfo(modelHistoryServerId, minibatchEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a minibatch 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>Task of ApiResponse (MinibatchEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MinibatchEntity>> AddMinibatchAsyncWithHttpInfo (string modelHistoryServerId, MinibatchEntity minibatchEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddMinibatch");
            // verify the required parameter 'minibatchEntity' is set
            if (minibatchEntity == null)
                throw new ApiException(400, "Missing required parameter 'minibatchEntity' when calling ModelHistoryApi->AddMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (minibatchEntity != null && minibatchEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(minibatchEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = minibatchEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MinibatchEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MinibatchEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MinibatchEntity)));
        }

        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>ModelFeedBackRequest</returns>
        public ModelFeedBackRequest AddModelFeedback (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest)
        {
             ApiResponse<ModelFeedBackRequest> localVarResponse = AddModelFeedbackWithHttpInfo(modelHistoryServerId, modelFeedBackRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>ApiResponse of ModelFeedBackRequest</returns>
        public ApiResponse< ModelFeedBackRequest > AddModelFeedbackWithHttpInfo (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddModelFeedback");
            // verify the required parameter 'modelFeedBackRequest' is set
            if (modelFeedBackRequest == null)
                throw new ApiException(400, "Missing required parameter 'modelFeedBackRequest' when calling ModelHistoryApi->AddModelFeedback");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelFeedBackRequest != null && modelFeedBackRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelFeedBackRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelFeedBackRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelFeedback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelFeedBackRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelFeedBackRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelFeedBackRequest)));
        }

        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>Task of ModelFeedBackRequest</returns>
        public async System.Threading.Tasks.Task<ModelFeedBackRequest> AddModelFeedbackAsync (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest)
        {
             ApiResponse<ModelFeedBackRequest> localVarResponse = await AddModelFeedbackAsyncWithHttpInfo(modelHistoryServerId, modelFeedBackRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>Task of ApiResponse (ModelFeedBackRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelFeedBackRequest>> AddModelFeedbackAsyncWithHttpInfo (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddModelFeedback");
            // verify the required parameter 'modelFeedBackRequest' is set
            if (modelFeedBackRequest == null)
                throw new ApiException(400, "Missing required parameter 'modelFeedBackRequest' when calling ModelHistoryApi->AddModelFeedback");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelFeedBackRequest != null && modelFeedBackRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelFeedBackRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelFeedBackRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelFeedback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelFeedBackRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelFeedBackRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelFeedBackRequest)));
        }

        /// <summary>
        /// Add a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>ModelHistoryEntity</returns>
        public ModelHistoryEntity AddModelHistory (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = AddModelHistoryWithHttpInfo(modelHistoryServerId, addModelHistoryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        public ApiResponse< ModelHistoryEntity > AddModelHistoryWithHttpInfo (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddModelHistory");
            // verify the required parameter 'addModelHistoryRequest' is set
            if (addModelHistoryRequest == null)
                throw new ApiException(400, "Missing required parameter 'addModelHistoryRequest' when calling ModelHistoryApi->AddModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/modelhistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (addModelHistoryRequest != null && addModelHistoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addModelHistoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addModelHistoryRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Add a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        public async System.Threading.Tasks.Task<ModelHistoryEntity> AddModelHistoryAsync (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = await AddModelHistoryAsyncWithHttpInfo(modelHistoryServerId, addModelHistoryRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> AddModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddModelHistory");
            // verify the required parameter 'addModelHistoryRequest' is set
            if (addModelHistoryRequest == null)
                throw new ApiException(400, "Missing required parameter 'addModelHistoryRequest' when calling ModelHistoryApi->AddModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/modelhistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (addModelHistoryRequest != null && addModelHistoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addModelHistoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addModelHistoryRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Adds a model 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>ModelInstanceEntity</returns>
        public ModelInstanceEntity AddModelInstance (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity)
        {
             ApiResponse<ModelInstanceEntity> localVarResponse = AddModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a model 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>ApiResponse of ModelInstanceEntity</returns>
        public ApiResponse< ModelInstanceEntity > AddModelInstanceWithHttpInfo (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddModelInstance");
            // verify the required parameter 'modelInstanceEntity' is set
            if (modelInstanceEntity == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceEntity' when calling ModelHistoryApi->AddModelInstance");

            var localVarPath = "/rpc/{modelHistoryServerId}/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceEntity != null && modelInstanceEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelInstanceEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelInstanceEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelInstanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelInstanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelInstanceEntity)));
        }

        /// <summary>
        /// Adds a model 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of ModelInstanceEntity</returns>
        public async System.Threading.Tasks.Task<ModelInstanceEntity> AddModelInstanceAsync (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity)
        {
             ApiResponse<ModelInstanceEntity> localVarResponse = await AddModelInstanceAsyncWithHttpInfo(modelHistoryServerId, modelInstanceEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a model 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of ApiResponse (ModelInstanceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelInstanceEntity>> AddModelInstanceAsyncWithHttpInfo (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AddModelInstance");
            // verify the required parameter 'modelInstanceEntity' is set
            if (modelInstanceEntity == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceEntity' when calling ModelHistoryApi->AddModelInstance");

            var localVarPath = "/rpc/{modelHistoryServerId}/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceEntity != null && modelInstanceEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelInstanceEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelInstanceEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelInstanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelInstanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelInstanceEntity)));
        }

        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>EvaluationResultsEntity</returns>
        public EvaluationResultsEntity AggregateModelResults (string modelHistoryServerId, AggregatePrediction aggregatePrediction)
        {
             ApiResponse<EvaluationResultsEntity> localVarResponse = AggregateModelResultsWithHttpInfo(modelHistoryServerId, aggregatePrediction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>ApiResponse of EvaluationResultsEntity</returns>
        public ApiResponse< EvaluationResultsEntity > AggregateModelResultsWithHttpInfo (string modelHistoryServerId, AggregatePrediction aggregatePrediction)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AggregateModelResults");
            // verify the required parameter 'aggregatePrediction' is set
            if (aggregatePrediction == null)
                throw new ApiException(400, "Missing required parameter 'aggregatePrediction' when calling ModelHistoryApi->AggregateModelResults");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/aggregateresults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (aggregatePrediction != null && aggregatePrediction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregatePrediction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregatePrediction; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AggregateModelResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EvaluationResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EvaluationResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EvaluationResultsEntity)));
        }

        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of EvaluationResultsEntity</returns>
        public async System.Threading.Tasks.Task<EvaluationResultsEntity> AggregateModelResultsAsync (string modelHistoryServerId, AggregatePrediction aggregatePrediction)
        {
             ApiResponse<EvaluationResultsEntity> localVarResponse = await AggregateModelResultsAsyncWithHttpInfo(modelHistoryServerId, aggregatePrediction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of ApiResponse (EvaluationResultsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EvaluationResultsEntity>> AggregateModelResultsAsyncWithHttpInfo (string modelHistoryServerId, AggregatePrediction aggregatePrediction)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->AggregateModelResults");
            // verify the required parameter 'aggregatePrediction' is set
            if (aggregatePrediction == null)
                throw new ApiException(400, "Missing required parameter 'aggregatePrediction' when calling ModelHistoryApi->AggregateModelResults");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/aggregateresults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (aggregatePrediction != null && aggregatePrediction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregatePrediction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregatePrediction; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AggregateModelResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EvaluationResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EvaluationResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EvaluationResultsEntity)));
        }

        /// <summary>
        /// Creates model History 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>ModelHistoryEntity</returns>
        public ModelHistoryEntity CreateModelHistory (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = CreateModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates model History 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        public ApiResponse< ModelHistoryEntity > CreateModelHistoryWithHttpInfo (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->CreateModelHistory");
            // verify the required parameter 'modelHistoryEntity' is set
            if (modelHistoryEntity == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryEntity' when calling ModelHistoryApi->CreateModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryEntity != null && modelHistoryEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelHistoryEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelHistoryEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Creates model History 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        public async System.Threading.Tasks.Task<ModelHistoryEntity> CreateModelHistoryAsync (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = await CreateModelHistoryAsyncWithHttpInfo(modelHistoryServerId, modelHistoryEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates model History 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> CreateModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->CreateModelHistory");
            // verify the required parameter 'modelHistoryEntity' is set
            if (modelHistoryEntity == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryEntity' when calling ModelHistoryApi->CreateModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryEntity != null && modelHistoryEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelHistoryEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelHistoryEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Deletes an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 DeleteExperiment (string modelHistoryServerId, string experimentID)
        {
             ApiResponse<InlineResponse200> localVarResponse = DeleteExperimentWithHttpInfo(modelHistoryServerId, experimentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > DeleteExperimentWithHttpInfo (string modelHistoryServerId, string experimentID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->DeleteExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling ModelHistoryApi->DeleteExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Deletes an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> DeleteExperimentAsync (string modelHistoryServerId, string experimentID)
        {
             ApiResponse<InlineResponse200> localVarResponse = await DeleteExperimentAsyncWithHttpInfo(modelHistoryServerId, experimentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->DeleteExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling ModelHistoryApi->DeleteExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Deletes a model history / workspace, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 DeleteModelHistory (string modelHistoryServerId, string modelHistoryID)
        {
             ApiResponse<InlineResponse200> localVarResponse = DeleteModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a model history / workspace, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > DeleteModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->DeleteModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling ModelHistoryApi->DeleteModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Deletes a model history / workspace, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> DeleteModelHistoryAsync (string modelHistoryServerId, string modelHistoryID)
        {
             ApiResponse<InlineResponse200> localVarResponse = await DeleteModelHistoryAsyncWithHttpInfo(modelHistoryServerId, modelHistoryID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a model history / workspace, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->DeleteModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling ModelHistoryApi->DeleteModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Deletes a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns></returns>
        public void DeleteModelInstance (string modelHistoryServerId, string modelInstanceID)
        {
             DeleteModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceID);
        }

        /// <summary>
        /// Deletes a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteModelInstanceWithHttpInfo (string modelHistoryServerId, string modelInstanceID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->DeleteModelInstance");
            // verify the required parameter 'modelInstanceID' is set
            if (modelInstanceID == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceID' when calling ModelHistoryApi->DeleteModelInstance");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceID != null) localVarPathParams.Add("modelInstanceID", this.Configuration.ApiClient.ParameterToString(modelInstanceID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteModelInstanceAsync (string modelHistoryServerId, string modelInstanceID)
        {
             await DeleteModelInstanceAsyncWithHttpInfo(modelHistoryServerId, modelInstanceID);

        }

        /// <summary>
        /// Deletes a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelInstanceAsyncWithHttpInfo (string modelHistoryServerId, string modelInstanceID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->DeleteModelInstance");
            // verify the required parameter 'modelInstanceID' is set
            if (modelInstanceID == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceID' when calling ModelHistoryApi->DeleteModelInstance");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceID != null) localVarPathParams.Add("modelInstanceID", this.Configuration.ApiClient.ParameterToString(modelInstanceID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>ModelInstanceEntity</returns>
        public ModelInstanceEntity GetBestModelAmongModelIds (string modelHistoryServerId, BestModel bestModel)
        {
             ApiResponse<ModelInstanceEntity> localVarResponse = GetBestModelAmongModelIdsWithHttpInfo(modelHistoryServerId, bestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>ApiResponse of ModelInstanceEntity</returns>
        public ApiResponse< ModelInstanceEntity > GetBestModelAmongModelIdsWithHttpInfo (string modelHistoryServerId, BestModel bestModel)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetBestModelAmongModelIds");
            // verify the required parameter 'bestModel' is set
            if (bestModel == null)
                throw new ApiException(400, "Missing required parameter 'bestModel' when calling ModelHistoryApi->GetBestModelAmongModelIds");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/best";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (bestModel != null && bestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bestModel; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBestModelAmongModelIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelInstanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelInstanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelInstanceEntity)));
        }

        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>Task of ModelInstanceEntity</returns>
        public async System.Threading.Tasks.Task<ModelInstanceEntity> GetBestModelAmongModelIdsAsync (string modelHistoryServerId, BestModel bestModel)
        {
             ApiResponse<ModelInstanceEntity> localVarResponse = await GetBestModelAmongModelIdsAsyncWithHttpInfo(modelHistoryServerId, bestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>Task of ApiResponse (ModelInstanceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelInstanceEntity>> GetBestModelAmongModelIdsAsyncWithHttpInfo (string modelHistoryServerId, BestModel bestModel)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetBestModelAmongModelIds");
            // verify the required parameter 'bestModel' is set
            if (bestModel == null)
                throw new ApiException(400, "Missing required parameter 'bestModel' when calling ModelHistoryApi->GetBestModelAmongModelIds");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/best";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (bestModel != null && bestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bestModel; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBestModelAmongModelIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelInstanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelInstanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelInstanceEntity)));
        }

        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>List&lt;EvaluationResultsEntity&gt;</returns>
        public List<EvaluationResultsEntity> GetEvaluationForModelID (string modelHistoryServerId, string modelInstanceID)
        {
             ApiResponse<List<EvaluationResultsEntity>> localVarResponse = GetEvaluationForModelIDWithHttpInfo(modelHistoryServerId, modelInstanceID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>ApiResponse of List&lt;EvaluationResultsEntity&gt;</returns>
        public ApiResponse< List<EvaluationResultsEntity> > GetEvaluationForModelIDWithHttpInfo (string modelHistoryServerId, string modelInstanceID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetEvaluationForModelID");
            // verify the required parameter 'modelInstanceID' is set
            if (modelInstanceID == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceID' when calling ModelHistoryApi->GetEvaluationForModelID");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceID != null) localVarPathParams.Add("modelInstanceID", this.Configuration.ApiClient.ParameterToString(modelInstanceID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvaluationForModelID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EvaluationResultsEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EvaluationResultsEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EvaluationResultsEntity>)));
        }

        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>Task of List&lt;EvaluationResultsEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<EvaluationResultsEntity>> GetEvaluationForModelIDAsync (string modelHistoryServerId, string modelInstanceID)
        {
             ApiResponse<List<EvaluationResultsEntity>> localVarResponse = await GetEvaluationForModelIDAsyncWithHttpInfo(modelHistoryServerId, modelInstanceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>Task of ApiResponse (List&lt;EvaluationResultsEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EvaluationResultsEntity>>> GetEvaluationForModelIDAsyncWithHttpInfo (string modelHistoryServerId, string modelInstanceID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetEvaluationForModelID");
            // verify the required parameter 'modelInstanceID' is set
            if (modelInstanceID == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceID' when calling ModelHistoryApi->GetEvaluationForModelID");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceID != null) localVarPathParams.Add("modelInstanceID", this.Configuration.ApiClient.ParameterToString(modelInstanceID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvaluationForModelID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EvaluationResultsEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EvaluationResultsEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EvaluationResultsEntity>)));
        }

        /// <summary>
        /// Gets all the examples for a minibatch ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>List&lt;ExampleEntity&gt;</returns>
        public List<ExampleEntity> GetExamplesForMinibatch (string modelHistoryServerId, string minibatchId)
        {
             ApiResponse<List<ExampleEntity>> localVarResponse = GetExamplesForMinibatchWithHttpInfo(modelHistoryServerId, minibatchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the examples for a minibatch ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>ApiResponse of List&lt;ExampleEntity&gt;</returns>
        public ApiResponse< List<ExampleEntity> > GetExamplesForMinibatchWithHttpInfo (string modelHistoryServerId, string minibatchId)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetExamplesForMinibatch");
            // verify the required parameter 'minibatchId' is set
            if (minibatchId == null)
                throw new ApiException(400, "Missing required parameter 'minibatchId' when calling ModelHistoryApi->GetExamplesForMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/example/{minibatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (minibatchId != null) localVarPathParams.Add("minibatchId", this.Configuration.ApiClient.ParameterToString(minibatchId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExamplesForMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExampleEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ExampleEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExampleEntity>)));
        }

        /// <summary>
        /// Gets all the examples for a minibatch ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of List&lt;ExampleEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExampleEntity>> GetExamplesForMinibatchAsync (string modelHistoryServerId, string minibatchId)
        {
             ApiResponse<List<ExampleEntity>> localVarResponse = await GetExamplesForMinibatchAsyncWithHttpInfo(modelHistoryServerId, minibatchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the examples for a minibatch ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of ApiResponse (List&lt;ExampleEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExampleEntity>>> GetExamplesForMinibatchAsyncWithHttpInfo (string modelHistoryServerId, string minibatchId)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetExamplesForMinibatch");
            // verify the required parameter 'minibatchId' is set
            if (minibatchId == null)
                throw new ApiException(400, "Missing required parameter 'minibatchId' when calling ModelHistoryApi->GetExamplesForMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/example/{minibatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (minibatchId != null) localVarPathParams.Add("minibatchId", this.Configuration.ApiClient.ParameterToString(minibatchId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExamplesForMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExampleEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ExampleEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExampleEntity>)));
        }

        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>ExperimentEntity</returns>
        public ExperimentEntity GetExperiment (string modelHistoryServerId, string experimentID)
        {
             ApiResponse<ExperimentEntity> localVarResponse = GetExperimentWithHttpInfo(modelHistoryServerId, experimentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        public ApiResponse< ExperimentEntity > GetExperimentWithHttpInfo (string modelHistoryServerId, string experimentID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling ModelHistoryApi->GetExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>Task of ExperimentEntity</returns>
        public async System.Threading.Tasks.Task<ExperimentEntity> GetExperimentAsync (string modelHistoryServerId, string experimentID)
        {
             ApiResponse<ExperimentEntity> localVarResponse = await GetExperimentAsyncWithHttpInfo(modelHistoryServerId, experimentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> GetExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling ModelHistoryApi->GetExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Obtain all experiments for a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>ExperimentEntity</returns>
        public ExperimentEntity GetExperimentsForModelHistory (string modelHistoryServerId, string modelHistoryID)
        {
             ApiResponse<ExperimentEntity> localVarResponse = GetExperimentsForModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain all experiments for a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        public ApiResponse< ExperimentEntity > GetExperimentsForModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetExperimentsForModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling ModelHistoryApi->GetExperimentsForModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperimentsForModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Obtain all experiments for a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>Task of ExperimentEntity</returns>
        public async System.Threading.Tasks.Task<ExperimentEntity> GetExperimentsForModelHistoryAsync (string modelHistoryServerId, string modelHistoryID)
        {
             ApiResponse<ExperimentEntity> localVarResponse = await GetExperimentsForModelHistoryAsyncWithHttpInfo(modelHistoryServerId, modelHistoryID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtain all experiments for a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> GetExperimentsForModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetExperimentsForModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling ModelHistoryApi->GetExperimentsForModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperimentsForModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Gets a minibatch for the model 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>MinibatchEntity</returns>
        public MinibatchEntity GetMinibatch (string modelHistoryServerId, string minibatchId)
        {
             ApiResponse<MinibatchEntity> localVarResponse = GetMinibatchWithHttpInfo(modelHistoryServerId, minibatchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a minibatch for the model 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>ApiResponse of MinibatchEntity</returns>
        public ApiResponse< MinibatchEntity > GetMinibatchWithHttpInfo (string modelHistoryServerId, string minibatchId)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetMinibatch");
            // verify the required parameter 'minibatchId' is set
            if (minibatchId == null)
                throw new ApiException(400, "Missing required parameter 'minibatchId' when calling ModelHistoryApi->GetMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (minibatchId != null) localVarPathParams.Add("minibatchId", this.Configuration.ApiClient.ParameterToString(minibatchId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MinibatchEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MinibatchEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MinibatchEntity)));
        }

        /// <summary>
        /// Gets a minibatch for the model 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of MinibatchEntity</returns>
        public async System.Threading.Tasks.Task<MinibatchEntity> GetMinibatchAsync (string modelHistoryServerId, string minibatchId)
        {
             ApiResponse<MinibatchEntity> localVarResponse = await GetMinibatchAsyncWithHttpInfo(modelHistoryServerId, minibatchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a minibatch for the model 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of ApiResponse (MinibatchEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MinibatchEntity>> GetMinibatchAsyncWithHttpInfo (string modelHistoryServerId, string minibatchId)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetMinibatch");
            // verify the required parameter 'minibatchId' is set
            if (minibatchId == null)
                throw new ApiException(400, "Missing required parameter 'minibatchId' when calling ModelHistoryApi->GetMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (minibatchId != null) localVarPathParams.Add("minibatchId", this.Configuration.ApiClient.ParameterToString(minibatchId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MinibatchEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MinibatchEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MinibatchEntity)));
        }

        /// <summary>
        /// Gets a model history, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>ModelHistoryEntity</returns>
        public ModelHistoryEntity GetModelHistory (string modelHistoryServerId, string modelHistoryID)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = GetModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a model history, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        public ApiResponse< ModelHistoryEntity > GetModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling ModelHistoryApi->GetModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Gets a model history, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        public async System.Threading.Tasks.Task<ModelHistoryEntity> GetModelHistoryAsync (string modelHistoryServerId, string modelHistoryID)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = await GetModelHistoryAsyncWithHttpInfo(modelHistoryServerId, modelHistoryID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a model history, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> GetModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling ModelHistoryApi->GetModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Gets a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>ModelInstanceEntity</returns>
        public ModelInstanceEntity GetModelInstance (string modelHistoryServerId, string modelInstanceID)
        {
             ApiResponse<ModelInstanceEntity> localVarResponse = GetModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>ApiResponse of ModelInstanceEntity</returns>
        public ApiResponse< ModelInstanceEntity > GetModelInstanceWithHttpInfo (string modelHistoryServerId, string modelInstanceID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetModelInstance");
            // verify the required parameter 'modelInstanceID' is set
            if (modelInstanceID == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceID' when calling ModelHistoryApi->GetModelInstance");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceID != null) localVarPathParams.Add("modelInstanceID", this.Configuration.ApiClient.ParameterToString(modelInstanceID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelInstanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelInstanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelInstanceEntity)));
        }

        /// <summary>
        /// Gets a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>Task of ModelInstanceEntity</returns>
        public async System.Threading.Tasks.Task<ModelInstanceEntity> GetModelInstanceAsync (string modelHistoryServerId, string modelInstanceID)
        {
             ApiResponse<ModelInstanceEntity> localVarResponse = await GetModelInstanceAsyncWithHttpInfo(modelHistoryServerId, modelInstanceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>Task of ApiResponse (ModelInstanceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelInstanceEntity>> GetModelInstanceAsyncWithHttpInfo (string modelHistoryServerId, string modelInstanceID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetModelInstance");
            // verify the required parameter 'modelInstanceID' is set
            if (modelInstanceID == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceID' when calling ModelHistoryApi->GetModelInstance");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceID != null) localVarPathParams.Add("modelInstanceID", this.Configuration.ApiClient.ParameterToString(modelInstanceID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelInstanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelInstanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelInstanceEntity)));
        }

        /// <summary>
        /// Obtain a list of all the models for an experiment 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>List&lt;ModelInstanceEntity&gt;</returns>
        public List<ModelInstanceEntity> GetModelsForExperiment (string modelHistoryServerId, string experimentID)
        {
             ApiResponse<List<ModelInstanceEntity>> localVarResponse = GetModelsForExperimentWithHttpInfo(modelHistoryServerId, experimentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain a list of all the models for an experiment 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>ApiResponse of List&lt;ModelInstanceEntity&gt;</returns>
        public ApiResponse< List<ModelInstanceEntity> > GetModelsForExperimentWithHttpInfo (string modelHistoryServerId, string experimentID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetModelsForExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling ModelHistoryApi->GetModelsForExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelsForExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelInstanceEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelInstanceEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelInstanceEntity>)));
        }

        /// <summary>
        /// Obtain a list of all the models for an experiment 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>Task of List&lt;ModelInstanceEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelInstanceEntity>> GetModelsForExperimentAsync (string modelHistoryServerId, string experimentID)
        {
             ApiResponse<List<ModelInstanceEntity>> localVarResponse = await GetModelsForExperimentAsyncWithHttpInfo(modelHistoryServerId, experimentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtain a list of all the models for an experiment 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>Task of ApiResponse (List&lt;ModelInstanceEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelInstanceEntity>>> GetModelsForExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->GetModelsForExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling ModelHistoryApi->GetModelsForExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelsForExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelInstanceEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelInstanceEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelInstanceEntity>)));
        }

        /// <summary>
        /// List all of the experiments in every model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>List&lt;ExperimentEntity&gt;</returns>
        public List<ExperimentEntity> ListAllExperiments (string modelHistoryServerId)
        {
             ApiResponse<List<ExperimentEntity>> localVarResponse = ListAllExperimentsWithHttpInfo(modelHistoryServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all of the experiments in every model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>ApiResponse of List&lt;ExperimentEntity&gt;</returns>
        public ApiResponse< List<ExperimentEntity> > ListAllExperimentsWithHttpInfo (string modelHistoryServerId)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->ListAllExperiments");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAllExperiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExperimentEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ExperimentEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExperimentEntity>)));
        }

        /// <summary>
        /// List all of the experiments in every model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>Task of List&lt;ExperimentEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExperimentEntity>> ListAllExperimentsAsync (string modelHistoryServerId)
        {
             ApiResponse<List<ExperimentEntity>> localVarResponse = await ListAllExperimentsAsyncWithHttpInfo(modelHistoryServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all of the experiments in every model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>Task of ApiResponse (List&lt;ExperimentEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExperimentEntity>>> ListAllExperimentsAsyncWithHttpInfo (string modelHistoryServerId)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->ListAllExperiments");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAllExperiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExperimentEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ExperimentEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExperimentEntity>)));
        }

        /// <summary>
        /// Updates the best model for an experiment 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>ExperimentEntity</returns>
        public ExperimentEntity UpdateBestModelForExperiment (string modelHistoryServerId, UpdateBestModel updateBestModel)
        {
             ApiResponse<ExperimentEntity> localVarResponse = UpdateBestModelForExperimentWithHttpInfo(modelHistoryServerId, updateBestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the best model for an experiment 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        public ApiResponse< ExperimentEntity > UpdateBestModelForExperimentWithHttpInfo (string modelHistoryServerId, UpdateBestModel updateBestModel)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->UpdateBestModelForExperiment");
            // verify the required parameter 'updateBestModel' is set
            if (updateBestModel == null)
                throw new ApiException(400, "Missing required parameter 'updateBestModel' when calling ModelHistoryApi->UpdateBestModelForExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/best";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (updateBestModel != null && updateBestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBestModel; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBestModelForExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Updates the best model for an experiment 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>Task of ExperimentEntity</returns>
        public async System.Threading.Tasks.Task<ExperimentEntity> UpdateBestModelForExperimentAsync (string modelHistoryServerId, UpdateBestModel updateBestModel)
        {
             ApiResponse<ExperimentEntity> localVarResponse = await UpdateBestModelForExperimentAsyncWithHttpInfo(modelHistoryServerId, updateBestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the best model for an experiment 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> UpdateBestModelForExperimentAsyncWithHttpInfo (string modelHistoryServerId, UpdateBestModel updateBestModel)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->UpdateBestModelForExperiment");
            // verify the required parameter 'updateBestModel' is set
            if (updateBestModel == null)
                throw new ApiException(400, "Missing required parameter 'updateBestModel' when calling ModelHistoryApi->UpdateBestModelForExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/best";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (updateBestModel != null && updateBestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBestModel; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBestModelForExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Updates an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>ExperimentEntity</returns>
        public ExperimentEntity UpdateExperiment (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity)
        {
             ApiResponse<ExperimentEntity> localVarResponse = UpdateExperimentWithHttpInfo(modelHistoryServerId, experimentID, experimentEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        public ApiResponse< ExperimentEntity > UpdateExperimentWithHttpInfo (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->UpdateExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling ModelHistoryApi->UpdateExperiment");
            // verify the required parameter 'experimentEntity' is set
            if (experimentEntity == null)
                throw new ApiException(400, "Missing required parameter 'experimentEntity' when calling ModelHistoryApi->UpdateExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter
            if (experimentEntity != null && experimentEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(experimentEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = experimentEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Updates an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>Task of ExperimentEntity</returns>
        public async System.Threading.Tasks.Task<ExperimentEntity> UpdateExperimentAsync (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity)
        {
             ApiResponse<ExperimentEntity> localVarResponse = await UpdateExperimentAsyncWithHttpInfo(modelHistoryServerId, experimentID, experimentEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> UpdateExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->UpdateExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling ModelHistoryApi->UpdateExperiment");
            // verify the required parameter 'experimentEntity' is set
            if (experimentEntity == null)
                throw new ApiException(400, "Missing required parameter 'experimentEntity' when calling ModelHistoryApi->UpdateExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter
            if (experimentEntity != null && experimentEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(experimentEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = experimentEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Update a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>ModelHistoryEntity</returns>
        public ModelHistoryEntity UpdateModelHistory (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = UpdateModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        public ApiResponse< ModelHistoryEntity > UpdateModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->UpdateModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling ModelHistoryApi->UpdateModelHistory");
            // verify the required parameter 'updateModelHistoryRequest' is set
            if (updateModelHistoryRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateModelHistoryRequest' when calling ModelHistoryApi->UpdateModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter
            if (updateModelHistoryRequest != null && updateModelHistoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateModelHistoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateModelHistoryRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Update a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        public async System.Threading.Tasks.Task<ModelHistoryEntity> UpdateModelHistoryAsync (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = await UpdateModelHistoryAsyncWithHttpInfo(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> UpdateModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling ModelHistoryApi->UpdateModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling ModelHistoryApi->UpdateModelHistory");
            // verify the required parameter 'updateModelHistoryRequest' is set
            if (updateModelHistoryRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateModelHistoryRequest' when calling ModelHistoryApi->UpdateModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter
            if (updateModelHistoryRequest != null && updateModelHistoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateModelHistoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateModelHistoryRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

    }
}
