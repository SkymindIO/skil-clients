/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Skymind.SKIL.Client;
using Skymind.SKIL.Model;

namespace Skymind.SKIL.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>JobEntity</returns>
        JobEntity CreateJob (string jobIdOrType, CreateJobRequest createJobRequest);

        /// <summary>
        /// Create a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>ApiResponse of JobEntity</returns>
        ApiResponse<JobEntity> CreateJobWithHttpInfo (string jobIdOrType, CreateJobRequest createJobRequest);
        /// <summary>
        /// Deletes a job given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns></returns>
        void DeleteJobById (long? jobIdOrType);

        /// <summary>
        /// Deletes a job given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobByIdWithHttpInfo (long? jobIdOrType);
        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns></returns>
        void DownloadJobOutputFile (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest);

        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadJobOutputFileWithHttpInfo (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest);
        /// <summary>
        /// Get a list of all available jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;JobEntity&gt;</returns>
        List<JobEntity> GetAllJobs ();

        /// <summary>
        /// Get a list of all available jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;JobEntity&gt;</returns>
        ApiResponse<List<JobEntity>> GetAllJobsWithHttpInfo ();
        /// <summary>
        /// Get a job by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>JobEntity</returns>
        JobEntity GetJobById (long? jobIdOrType);

        /// <summary>
        /// Get a job by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>ApiResponse of JobEntity</returns>
        ApiResponse<JobEntity> GetJobByIdWithHttpInfo (long? jobIdOrType);
        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>JobEntity</returns>
        JobEntity RefreshJobStatus (long? jobId);

        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>ApiResponse of JobEntity</returns>
        ApiResponse<JobEntity> RefreshJobStatusWithHttpInfo (long? jobId);
        /// <summary>
        /// Start running an (already created) job on the remote resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>JobEntity</returns>
        JobEntity RunAJob (long? jobId);

        /// <summary>
        /// Start running an (already created) job on the remote resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>ApiResponse of JobEntity</returns>
        ApiResponse<JobEntity> RunAJobWithHttpInfo (long? jobId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>Task of JobEntity</returns>
        System.Threading.Tasks.Task<JobEntity> CreateJobAsync (string jobIdOrType, CreateJobRequest createJobRequest);

        /// <summary>
        /// Create a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobEntity>> CreateJobAsyncWithHttpInfo (string jobIdOrType, CreateJobRequest createJobRequest);
        /// <summary>
        /// Deletes a job given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobByIdAsync (long? jobIdOrType);

        /// <summary>
        /// Deletes a job given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobByIdAsyncWithHttpInfo (long? jobIdOrType);
        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadJobOutputFileAsync (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest);

        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadJobOutputFileAsyncWithHttpInfo (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest);
        /// <summary>
        /// Get a list of all available jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;JobEntity&gt;</returns>
        System.Threading.Tasks.Task<List<JobEntity>> GetAllJobsAsync ();

        /// <summary>
        /// Get a list of all available jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;JobEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobEntity>>> GetAllJobsAsyncWithHttpInfo ();
        /// <summary>
        /// Get a job by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of JobEntity</returns>
        System.Threading.Tasks.Task<JobEntity> GetJobByIdAsync (long? jobIdOrType);

        /// <summary>
        /// Get a job by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobEntity>> GetJobByIdAsyncWithHttpInfo (long? jobIdOrType);
        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of JobEntity</returns>
        System.Threading.Tasks.Task<JobEntity> RefreshJobStatusAsync (long? jobId);

        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobEntity>> RefreshJobStatusAsyncWithHttpInfo (long? jobId);
        /// <summary>
        /// Start running an (already created) job on the remote resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of JobEntity</returns>
        System.Threading.Tasks.Task<JobEntity> RunAJobAsync (long? jobId);

        /// <summary>
        /// Start running an (already created) job on the remote resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobEntity>> RunAJobAsyncWithHttpInfo (long? jobId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobApi : IJobApi
    {
        private Skymind.SKIL.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobApi(String basePath)
        {
            this.Configuration = new Skymind.SKIL.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Skymind.SKIL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobApi(Skymind.SKIL.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Skymind.SKIL.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Skymind.SKIL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Skymind.SKIL.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Skymind.SKIL.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a job 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>JobEntity</returns>
        public JobEntity CreateJob (string jobIdOrType, CreateJobRequest createJobRequest)
        {
             ApiResponse<JobEntity> localVarResponse = CreateJobWithHttpInfo(jobIdOrType, createJobRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a job 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>ApiResponse of JobEntity</returns>
        public ApiResponse< JobEntity > CreateJobWithHttpInfo (string jobIdOrType, CreateJobRequest createJobRequest)
        {
            // verify the required parameter 'jobIdOrType' is set
            if (jobIdOrType == null)
                throw new ApiException(400, "Missing required parameter 'jobIdOrType' when calling JobApi->CreateJob");
            // verify the required parameter 'createJobRequest' is set
            if (createJobRequest == null)
                throw new ApiException(400, "Missing required parameter 'createJobRequest' when calling JobApi->CreateJob");

            var localVarPath = "/jobs/{jobIdOrType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIdOrType != null) localVarPathParams.Add("jobIdOrType", this.Configuration.ApiClient.ParameterToString(jobIdOrType)); // path parameter
            if (createJobRequest != null && createJobRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createJobRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createJobRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Create a job 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>Task of JobEntity</returns>
        public async System.Threading.Tasks.Task<JobEntity> CreateJobAsync (string jobIdOrType, CreateJobRequest createJobRequest)
        {
             ApiResponse<JobEntity> localVarResponse = await CreateJobAsyncWithHttpInfo(jobIdOrType, createJobRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a job 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobEntity>> CreateJobAsyncWithHttpInfo (string jobIdOrType, CreateJobRequest createJobRequest)
        {
            // verify the required parameter 'jobIdOrType' is set
            if (jobIdOrType == null)
                throw new ApiException(400, "Missing required parameter 'jobIdOrType' when calling JobApi->CreateJob");
            // verify the required parameter 'createJobRequest' is set
            if (createJobRequest == null)
                throw new ApiException(400, "Missing required parameter 'createJobRequest' when calling JobApi->CreateJob");

            var localVarPath = "/jobs/{jobIdOrType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIdOrType != null) localVarPathParams.Add("jobIdOrType", this.Configuration.ApiClient.ParameterToString(jobIdOrType)); // path parameter
            if (createJobRequest != null && createJobRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createJobRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createJobRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Deletes a job given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns></returns>
        public void DeleteJobById (long? jobIdOrType)
        {
             DeleteJobByIdWithHttpInfo(jobIdOrType);
        }

        /// <summary>
        /// Deletes a job given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobByIdWithHttpInfo (long? jobIdOrType)
        {
            // verify the required parameter 'jobIdOrType' is set
            if (jobIdOrType == null)
                throw new ApiException(400, "Missing required parameter 'jobIdOrType' when calling JobApi->DeleteJobById");

            var localVarPath = "/jobs/{jobIdOrType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIdOrType != null) localVarPathParams.Add("jobIdOrType", this.Configuration.ApiClient.ParameterToString(jobIdOrType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a job given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobByIdAsync (long? jobIdOrType)
        {
             await DeleteJobByIdAsyncWithHttpInfo(jobIdOrType);

        }

        /// <summary>
        /// Deletes a job given its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobByIdAsyncWithHttpInfo (long? jobIdOrType)
        {
            // verify the required parameter 'jobIdOrType' is set
            if (jobIdOrType == null)
                throw new ApiException(400, "Missing required parameter 'jobIdOrType' when calling JobApi->DeleteJobById");

            var localVarPath = "/jobs/{jobIdOrType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIdOrType != null) localVarPathParams.Add("jobIdOrType", this.Configuration.ApiClient.ParameterToString(jobIdOrType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns></returns>
        public void DownloadJobOutputFile (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest)
        {
             DownloadJobOutputFileWithHttpInfo(jobId, downloadOutputFileRequest);
        }

        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DownloadJobOutputFileWithHttpInfo (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobApi->DownloadJobOutputFile");
            // verify the required parameter 'downloadOutputFileRequest' is set
            if (downloadOutputFileRequest == null)
                throw new ApiException(400, "Missing required parameter 'downloadOutputFileRequest' when calling JobApi->DownloadJobOutputFile");

            var localVarPath = "/jobs/{jobId}/outputfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (downloadOutputFileRequest != null && downloadOutputFileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(downloadOutputFileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = downloadOutputFileRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadJobOutputFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadJobOutputFileAsync (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest)
        {
             await DownloadJobOutputFileAsyncWithHttpInfo(jobId, downloadOutputFileRequest);

        }

        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DownloadJobOutputFileAsyncWithHttpInfo (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobApi->DownloadJobOutputFile");
            // verify the required parameter 'downloadOutputFileRequest' is set
            if (downloadOutputFileRequest == null)
                throw new ApiException(400, "Missing required parameter 'downloadOutputFileRequest' when calling JobApi->DownloadJobOutputFile");

            var localVarPath = "/jobs/{jobId}/outputfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (downloadOutputFileRequest != null && downloadOutputFileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(downloadOutputFileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = downloadOutputFileRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadJobOutputFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a list of all available jobs 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;JobEntity&gt;</returns>
        public List<JobEntity> GetAllJobs ()
        {
             ApiResponse<List<JobEntity>> localVarResponse = GetAllJobsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all available jobs 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;JobEntity&gt;</returns>
        public ApiResponse< List<JobEntity> > GetAllJobsWithHttpInfo ()
        {

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JobEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobEntity>)));
        }

        /// <summary>
        /// Get a list of all available jobs 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;JobEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobEntity>> GetAllJobsAsync ()
        {
             ApiResponse<List<JobEntity>> localVarResponse = await GetAllJobsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all available jobs 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;JobEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobEntity>>> GetAllJobsAsyncWithHttpInfo ()
        {

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JobEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobEntity>)));
        }

        /// <summary>
        /// Get a job by its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>JobEntity</returns>
        public JobEntity GetJobById (long? jobIdOrType)
        {
             ApiResponse<JobEntity> localVarResponse = GetJobByIdWithHttpInfo(jobIdOrType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a job by its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>ApiResponse of JobEntity</returns>
        public ApiResponse< JobEntity > GetJobByIdWithHttpInfo (long? jobIdOrType)
        {
            // verify the required parameter 'jobIdOrType' is set
            if (jobIdOrType == null)
                throw new ApiException(400, "Missing required parameter 'jobIdOrType' when calling JobApi->GetJobById");

            var localVarPath = "/jobs/{jobIdOrType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIdOrType != null) localVarPathParams.Add("jobIdOrType", this.Configuration.ApiClient.ParameterToString(jobIdOrType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Get a job by its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of JobEntity</returns>
        public async System.Threading.Tasks.Task<JobEntity> GetJobByIdAsync (long? jobIdOrType)
        {
             ApiResponse<JobEntity> localVarResponse = await GetJobByIdAsyncWithHttpInfo(jobIdOrType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a job by its ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobEntity>> GetJobByIdAsyncWithHttpInfo (long? jobIdOrType)
        {
            // verify the required parameter 'jobIdOrType' is set
            if (jobIdOrType == null)
                throw new ApiException(400, "Missing required parameter 'jobIdOrType' when calling JobApi->GetJobById");

            var localVarPath = "/jobs/{jobIdOrType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIdOrType != null) localVarPathParams.Add("jobIdOrType", this.Configuration.ApiClient.ParameterToString(jobIdOrType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>JobEntity</returns>
        public JobEntity RefreshJobStatus (long? jobId)
        {
             ApiResponse<JobEntity> localVarResponse = RefreshJobStatusWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>ApiResponse of JobEntity</returns>
        public ApiResponse< JobEntity > RefreshJobStatusWithHttpInfo (long? jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobApi->RefreshJobStatus");

            var localVarPath = "/jobs/{jobId}/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of JobEntity</returns>
        public async System.Threading.Tasks.Task<JobEntity> RefreshJobStatusAsync (long? jobId)
        {
             ApiResponse<JobEntity> localVarResponse = await RefreshJobStatusAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobEntity>> RefreshJobStatusAsyncWithHttpInfo (long? jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobApi->RefreshJobStatus");

            var localVarPath = "/jobs/{jobId}/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Start running an (already created) job on the remote resource 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>JobEntity</returns>
        public JobEntity RunAJob (long? jobId)
        {
             ApiResponse<JobEntity> localVarResponse = RunAJobWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start running an (already created) job on the remote resource 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>ApiResponse of JobEntity</returns>
        public ApiResponse< JobEntity > RunAJobWithHttpInfo (long? jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobApi->RunAJob");

            var localVarPath = "/jobs/{jobId}/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunAJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Start running an (already created) job on the remote resource 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of JobEntity</returns>
        public async System.Threading.Tasks.Task<JobEntity> RunAJobAsync (long? jobId)
        {
             ApiResponse<JobEntity> localVarResponse = await RunAJobAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start running an (already created) job on the remote resource 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobEntity>> RunAJobAsyncWithHttpInfo (long? jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobApi->RunAJob");

            var localVarPath = "/jobs/{jobId}/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunAJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

    }
}
