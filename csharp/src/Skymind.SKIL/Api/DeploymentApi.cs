/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Skymind.SKIL.Client;
using Skymind.SKIL.Model;

namespace Skymind.SKIL.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeploymentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a model by deployment and model id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 DeleteModel (string deploymentId, string modelId);

        /// <summary>
        /// Delete a model by deployment and model id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> DeleteModelWithHttpInfo (string deploymentId, string modelId);
        /// <summary>
        /// Deploy a model in a deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>ModelEntity</returns>
        ModelEntity DeployModel (string deploymentId, ImportModelRequest body);

        /// <summary>
        /// Deploy a model in a deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        ApiResponse<ModelEntity> DeployModelWithHttpInfo (string deploymentId, ImportModelRequest body);
        /// <summary>
        /// Create a new deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>DeploymentResponse</returns>
        DeploymentResponse DeploymentCreate (CreateDeploymentRequest body);

        /// <summary>
        /// Create a new deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        ApiResponse<DeploymentResponse> DeploymentCreateWithHttpInfo (CreateDeploymentRequest body);
        /// <summary>
        /// Delete a deployment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 DeploymentDelete (string deploymentId);

        /// <summary>
        /// Delete a deployment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> DeploymentDeleteWithHttpInfo (string deploymentId);
        /// <summary>
        /// Get a deployment details by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>DeploymentResponse</returns>
        DeploymentResponse DeploymentGet (string deploymentId);

        /// <summary>
        /// Get a deployment details by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        ApiResponse<DeploymentResponse> DeploymentGetWithHttpInfo (string deploymentId);
        /// <summary>
        /// Get a list of deployments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DeploymentResponse&gt;</returns>
        List<DeploymentResponse> Deployments ();

        /// <summary>
        /// Get a list of deployments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DeploymentResponse&gt;</returns>
        ApiResponse<List<DeploymentResponse>> DeploymentsWithHttpInfo ();
        /// <summary>
        /// Modify the state (start/stop) of a deployed model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>ModelEntity</returns>
        ModelEntity ModelStateChange (string deploymentId, string modelId, SetState body);

        /// <summary>
        /// Modify the state (start/stop) of a deployed model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        ApiResponse<ModelEntity> ModelStateChangeWithHttpInfo (string deploymentId, string modelId, SetState body);
        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>List&lt;ModelEntity&gt;</returns>
        List<ModelEntity> Models (string deploymentId);

        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>ApiResponse of List&lt;ModelEntity&gt;</returns>
        ApiResponse<List<ModelEntity>> ModelsWithHttpInfo (string deploymentId);
        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>ModelEntity</returns>
        ModelEntity ReimportModel (string deploymentId, string modelId, ImportModelRequest body);

        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        ApiResponse<ModelEntity> ReimportModelWithHttpInfo (string deploymentId, string modelId, ImportModelRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a model by deployment and model id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> DeleteModelAsync (string deploymentId, string modelId);

        /// <summary>
        /// Delete a model by deployment and model id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteModelAsyncWithHttpInfo (string deploymentId, string modelId);
        /// <summary>
        /// Deploy a model in a deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>Task of ModelEntity</returns>
        System.Threading.Tasks.Task<ModelEntity> DeployModelAsync (string deploymentId, ImportModelRequest body);

        /// <summary>
        /// Deploy a model in a deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelEntity>> DeployModelAsyncWithHttpInfo (string deploymentId, ImportModelRequest body);
        /// <summary>
        /// Create a new deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of DeploymentResponse</returns>
        System.Threading.Tasks.Task<DeploymentResponse> DeploymentCreateAsync (CreateDeploymentRequest body);

        /// <summary>
        /// Create a new deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> DeploymentCreateAsyncWithHttpInfo (CreateDeploymentRequest body);
        /// <summary>
        /// Delete a deployment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> DeploymentDeleteAsync (string deploymentId);

        /// <summary>
        /// Delete a deployment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeploymentDeleteAsyncWithHttpInfo (string deploymentId);
        /// <summary>
        /// Get a deployment details by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of DeploymentResponse</returns>
        System.Threading.Tasks.Task<DeploymentResponse> DeploymentGetAsync (string deploymentId);

        /// <summary>
        /// Get a deployment details by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> DeploymentGetAsyncWithHttpInfo (string deploymentId);
        /// <summary>
        /// Get a list of deployments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DeploymentResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DeploymentResponse>> DeploymentsAsync ();

        /// <summary>
        /// Get a list of deployments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DeploymentResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeploymentResponse>>> DeploymentsAsyncWithHttpInfo ();
        /// <summary>
        /// Modify the state (start/stop) of a deployed model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>Task of ModelEntity</returns>
        System.Threading.Tasks.Task<ModelEntity> ModelStateChangeAsync (string deploymentId, string modelId, SetState body);

        /// <summary>
        /// Modify the state (start/stop) of a deployed model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelEntity>> ModelStateChangeAsyncWithHttpInfo (string deploymentId, string modelId, SetState body);
        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>Task of List&lt;ModelEntity&gt;</returns>
        System.Threading.Tasks.Task<List<ModelEntity>> ModelsAsync (string deploymentId);

        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>Task of ApiResponse (List&lt;ModelEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelEntity>>> ModelsAsyncWithHttpInfo (string deploymentId);
        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ModelEntity</returns>
        System.Threading.Tasks.Task<ModelEntity> ReimportModelAsync (string deploymentId, string modelId, ImportModelRequest body);

        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelEntity>> ReimportModelAsyncWithHttpInfo (string deploymentId, string modelId, ImportModelRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeploymentApi : IDeploymentApi
    {
        private Skymind.SKIL.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeploymentApi(String basePath)
        {
            this.Configuration = new Skymind.SKIL.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Skymind.SKIL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeploymentApi(Skymind.SKIL.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Skymind.SKIL.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Skymind.SKIL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Skymind.SKIL.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Skymind.SKIL.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a model by deployment and model id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 DeleteModel (string deploymentId, string modelId)
        {
             ApiResponse<InlineResponse200> localVarResponse = DeleteModelWithHttpInfo(deploymentId, modelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a model by deployment and model id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > DeleteModelWithHttpInfo (string deploymentId, string modelId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->DeleteModel");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DeploymentApi->DeleteModel");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Delete a model by deployment and model id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> DeleteModelAsync (string deploymentId, string modelId)
        {
             ApiResponse<InlineResponse200> localVarResponse = await DeleteModelAsyncWithHttpInfo(deploymentId, modelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a model by deployment and model id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteModelAsyncWithHttpInfo (string deploymentId, string modelId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->DeleteModel");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DeploymentApi->DeleteModel");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Deploy a model in a deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>ModelEntity</returns>
        public ModelEntity DeployModel (string deploymentId, ImportModelRequest body)
        {
             ApiResponse<ModelEntity> localVarResponse = DeployModelWithHttpInfo(deploymentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deploy a model in a deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        public ApiResponse< ModelEntity > DeployModelWithHttpInfo (string deploymentId, ImportModelRequest body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->DeployModel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeploymentApi->DeployModel");

            var localVarPath = "/deployment/{deploymentId}/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeployModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

        /// <summary>
        /// Deploy a model in a deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>Task of ModelEntity</returns>
        public async System.Threading.Tasks.Task<ModelEntity> DeployModelAsync (string deploymentId, ImportModelRequest body)
        {
             ApiResponse<ModelEntity> localVarResponse = await DeployModelAsyncWithHttpInfo(deploymentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deploy a model in a deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelEntity>> DeployModelAsyncWithHttpInfo (string deploymentId, ImportModelRequest body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->DeployModel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeploymentApi->DeployModel");

            var localVarPath = "/deployment/{deploymentId}/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeployModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

        /// <summary>
        /// Create a new deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>DeploymentResponse</returns>
        public DeploymentResponse DeploymentCreate (CreateDeploymentRequest body)
        {
             ApiResponse<DeploymentResponse> localVarResponse = DeploymentCreateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        public ApiResponse< DeploymentResponse > DeploymentCreateWithHttpInfo (CreateDeploymentRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeploymentApi->DeploymentCreate");

            var localVarPath = "/deployment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeploymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResponse)));
        }

        /// <summary>
        /// Create a new deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of DeploymentResponse</returns>
        public async System.Threading.Tasks.Task<DeploymentResponse> DeploymentCreateAsync (CreateDeploymentRequest body)
        {
             ApiResponse<DeploymentResponse> localVarResponse = await DeploymentCreateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> DeploymentCreateAsyncWithHttpInfo (CreateDeploymentRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeploymentApi->DeploymentCreate");

            var localVarPath = "/deployment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeploymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResponse)));
        }

        /// <summary>
        /// Delete a deployment by id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 DeploymentDelete (string deploymentId)
        {
             ApiResponse<InlineResponse200> localVarResponse = DeploymentDeleteWithHttpInfo(deploymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a deployment by id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > DeploymentDeleteWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->DeploymentDelete");

            var localVarPath = "/deployment/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Delete a deployment by id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> DeploymentDeleteAsync (string deploymentId)
        {
             ApiResponse<InlineResponse200> localVarResponse = await DeploymentDeleteAsyncWithHttpInfo(deploymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a deployment by id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeploymentDeleteAsyncWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->DeploymentDelete");

            var localVarPath = "/deployment/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get a deployment details by id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>DeploymentResponse</returns>
        public DeploymentResponse DeploymentGet (string deploymentId)
        {
             ApiResponse<DeploymentResponse> localVarResponse = DeploymentGetWithHttpInfo(deploymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a deployment details by id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        public ApiResponse< DeploymentResponse > DeploymentGetWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->DeploymentGet");

            var localVarPath = "/deployment/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeploymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResponse)));
        }

        /// <summary>
        /// Get a deployment details by id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of DeploymentResponse</returns>
        public async System.Threading.Tasks.Task<DeploymentResponse> DeploymentGetAsync (string deploymentId)
        {
             ApiResponse<DeploymentResponse> localVarResponse = await DeploymentGetAsyncWithHttpInfo(deploymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a deployment details by id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> DeploymentGetAsyncWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->DeploymentGet");

            var localVarPath = "/deployment/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeploymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResponse)));
        }

        /// <summary>
        /// Get a list of deployments 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DeploymentResponse&gt;</returns>
        public List<DeploymentResponse> Deployments ()
        {
             ApiResponse<List<DeploymentResponse>> localVarResponse = DeploymentsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of deployments 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DeploymentResponse&gt;</returns>
        public ApiResponse< List<DeploymentResponse> > DeploymentsWithHttpInfo ()
        {

            var localVarPath = "/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Deployments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeploymentResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentResponse>)));
        }

        /// <summary>
        /// Get a list of deployments 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DeploymentResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeploymentResponse>> DeploymentsAsync ()
        {
             ApiResponse<List<DeploymentResponse>> localVarResponse = await DeploymentsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of deployments 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DeploymentResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeploymentResponse>>> DeploymentsAsyncWithHttpInfo ()
        {

            var localVarPath = "/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Deployments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeploymentResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentResponse>)));
        }

        /// <summary>
        /// Modify the state (start/stop) of a deployed model 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>ModelEntity</returns>
        public ModelEntity ModelStateChange (string deploymentId, string modelId, SetState body)
        {
             ApiResponse<ModelEntity> localVarResponse = ModelStateChangeWithHttpInfo(deploymentId, modelId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify the state (start/stop) of a deployed model 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        public ApiResponse< ModelEntity > ModelStateChangeWithHttpInfo (string deploymentId, string modelId, SetState body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->ModelStateChange");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DeploymentApi->ModelStateChange");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeploymentApi->ModelStateChange");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModelStateChange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

        /// <summary>
        /// Modify the state (start/stop) of a deployed model 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>Task of ModelEntity</returns>
        public async System.Threading.Tasks.Task<ModelEntity> ModelStateChangeAsync (string deploymentId, string modelId, SetState body)
        {
             ApiResponse<ModelEntity> localVarResponse = await ModelStateChangeAsyncWithHttpInfo(deploymentId, modelId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify the state (start/stop) of a deployed model 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelEntity>> ModelStateChangeAsyncWithHttpInfo (string deploymentId, string modelId, SetState body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->ModelStateChange");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DeploymentApi->ModelStateChange");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeploymentApi->ModelStateChange");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModelStateChange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>List&lt;ModelEntity&gt;</returns>
        public List<ModelEntity> Models (string deploymentId)
        {
             ApiResponse<List<ModelEntity>> localVarResponse = ModelsWithHttpInfo(deploymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>ApiResponse of List&lt;ModelEntity&gt;</returns>
        public ApiResponse< List<ModelEntity> > ModelsWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->Models");

            var localVarPath = "/deployment/{deploymentId}/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Models", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelEntity>)));
        }

        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>Task of List&lt;ModelEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelEntity>> ModelsAsync (string deploymentId)
        {
             ApiResponse<List<ModelEntity>> localVarResponse = await ModelsAsyncWithHttpInfo(deploymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>Task of ApiResponse (List&lt;ModelEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelEntity>>> ModelsAsyncWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->Models");

            var localVarPath = "/deployment/{deploymentId}/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Models", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelEntity>)));
        }

        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>ModelEntity</returns>
        public ModelEntity ReimportModel (string deploymentId, string modelId, ImportModelRequest body)
        {
             ApiResponse<ModelEntity> localVarResponse = ReimportModelWithHttpInfo(deploymentId, modelId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        public ApiResponse< ModelEntity > ReimportModelWithHttpInfo (string deploymentId, string modelId, ImportModelRequest body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->ReimportModel");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DeploymentApi->ReimportModel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeploymentApi->ReimportModel");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReimportModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ModelEntity</returns>
        public async System.Threading.Tasks.Task<ModelEntity> ReimportModelAsync (string deploymentId, string modelId, ImportModelRequest body)
        {
             ApiResponse<ModelEntity> localVarResponse = await ReimportModelAsyncWithHttpInfo(deploymentId, modelId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelEntity>> ReimportModelAsyncWithHttpInfo (string deploymentId, string modelId, ImportModelRequest body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DeploymentApi->ReimportModel");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DeploymentApi->ReimportModel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeploymentApi->ReimportModel");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReimportModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

    }
}
