/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Skymind.SKIL.Client;
using Skymind.SKIL.Model;

namespace Skymind.SKIL.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransformApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>BatchCSVRecord</returns>
        BatchCSVRecord TransformCsv (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null);

        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>ApiResponse of BatchCSVRecord</returns>
        ApiResponse<BatchCSVRecord> TransformCsvWithHttpInfo (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null);
        /// <summary>
        /// Takes a batch input arrays and transforms it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>Base64NDArrayBody</returns>
        Base64NDArrayBody Transformarray (string deploymentName, string versionName, string transformName, Object batchRecord = null);

        /// <summary>
        /// Takes a batch input arrays and transforms it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        ApiResponse<Base64NDArrayBody> TransformarrayWithHttpInfo (string deploymentName, string versionName, string transformName, Object batchRecord = null);
        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>Base64NDArrayBody</returns>
        Base64NDArrayBody Transformimage (string deploymentName, string versionName, string imageTransformName, List<byte[]> files);

        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        ApiResponse<Base64NDArrayBody> TransformimageWithHttpInfo (string deploymentName, string versionName, string imageTransformName, List<byte[]> files);
        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>SingleCSVRecord</returns>
        SingleCSVRecord TransformincrementalCsv (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null);

        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>ApiResponse of SingleCSVRecord</returns>
        ApiResponse<SingleCSVRecord> TransformincrementalCsvWithHttpInfo (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null);
        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>Base64NDArrayBody</returns>
        Base64NDArrayBody Transformincrementalarray (string deploymentName, string versionName, string transformName, Object singleRecord = null);

        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        ApiResponse<Base64NDArrayBody> TransformincrementalarrayWithHttpInfo (string deploymentName, string versionName, string transformName, Object singleRecord = null);
        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>Base64NDArrayBody</returns>
        Base64NDArrayBody Transformincrementalimage (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file);

        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        ApiResponse<Base64NDArrayBody> TransformincrementalimageWithHttpInfo (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file);
        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>Object</returns>
        Object TransformprocessGet (string deploymentName, string versionName, string transformName);

        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TransformprocessGetWithHttpInfo (string deploymentName, string versionName, string transformName);
        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (optional)</param>
        /// <returns>Object</returns>
        Object TransformprocessPost (string deploymentName, string versionName, string transformName, Object transformProcess = null);

        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TransformprocessPostWithHttpInfo (string deploymentName, string versionName, string transformName, Object transformProcess = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of BatchCSVRecord</returns>
        System.Threading.Tasks.Task<BatchCSVRecord> TransformCsvAsync (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null);

        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of ApiResponse (BatchCSVRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchCSVRecord>> TransformCsvAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null);
        /// <summary>
        /// Takes a batch input arrays and transforms it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        System.Threading.Tasks.Task<Base64NDArrayBody> TransformarrayAsync (string deploymentName, string versionName, string transformName, Object batchRecord = null);

        /// <summary>
        /// Takes a batch input arrays and transforms it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformarrayAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, Object batchRecord = null);
        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        System.Threading.Tasks.Task<Base64NDArrayBody> TransformimageAsync (string deploymentName, string versionName, string imageTransformName, List<byte[]> files);

        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformimageAsyncWithHttpInfo (string deploymentName, string versionName, string imageTransformName, List<byte[]> files);
        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>Task of SingleCSVRecord</returns>
        System.Threading.Tasks.Task<SingleCSVRecord> TransformincrementalCsvAsync (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null);

        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>Task of ApiResponse (SingleCSVRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleCSVRecord>> TransformincrementalCsvAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null);
        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        System.Threading.Tasks.Task<Base64NDArrayBody> TransformincrementalarrayAsync (string deploymentName, string versionName, string transformName, Object singleRecord = null);

        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformincrementalarrayAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, Object singleRecord = null);
        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        System.Threading.Tasks.Task<Base64NDArrayBody> TransformincrementalimageAsync (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file);

        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformincrementalimageAsyncWithHttpInfo (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file);
        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TransformprocessGetAsync (string deploymentName, string versionName, string transformName);

        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransformprocessGetAsyncWithHttpInfo (string deploymentName, string versionName, string transformName);
        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TransformprocessPostAsync (string deploymentName, string versionName, string transformName, Object transformProcess = null);

        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransformprocessPostAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, Object transformProcess = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransformApi : ITransformApi
    {
        private Skymind.SKIL.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransformApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransformApi(String basePath)
        {
            this.Configuration = new Skymind.SKIL.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Skymind.SKIL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransformApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransformApi(Skymind.SKIL.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Skymind.SKIL.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Skymind.SKIL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Skymind.SKIL.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Skymind.SKIL.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>BatchCSVRecord</returns>
        public BatchCSVRecord TransformCsv (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null)
        {
             ApiResponse<BatchCSVRecord> localVarResponse = TransformCsvWithHttpInfo(deploymentName, versionName, transformName, batchCSVRecord);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>ApiResponse of BatchCSVRecord</returns>
        public ApiResponse< BatchCSVRecord > TransformCsvWithHttpInfo (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->TransformCsv");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->TransformCsv");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling TransformApi->TransformCsv");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (batchCSVRecord != null && batchCSVRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchCSVRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchCSVRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchCSVRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchCSVRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchCSVRecord)));
        }

        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of BatchCSVRecord</returns>
        public async System.Threading.Tasks.Task<BatchCSVRecord> TransformCsvAsync (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null)
        {
             ApiResponse<BatchCSVRecord> localVarResponse = await TransformCsvAsyncWithHttpInfo(deploymentName, versionName, transformName, batchCSVRecord);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of ApiResponse (BatchCSVRecord)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchCSVRecord>> TransformCsvAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->TransformCsv");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->TransformCsv");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling TransformApi->TransformCsv");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (batchCSVRecord != null && batchCSVRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchCSVRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchCSVRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchCSVRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchCSVRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchCSVRecord)));
        }

        /// <summary>
        /// Takes a batch input arrays and transforms it 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>Base64NDArrayBody</returns>
        public Base64NDArrayBody Transformarray (string deploymentName, string versionName, string transformName, Object batchRecord = null)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = TransformarrayWithHttpInfo(deploymentName, versionName, transformName, batchRecord);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Takes a batch input arrays and transforms it 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        public ApiResponse< Base64NDArrayBody > TransformarrayWithHttpInfo (string deploymentName, string versionName, string transformName, Object batchRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->Transformarray");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->Transformarray");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling TransformApi->Transformarray");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (batchRecord != null && batchRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Takes a batch input arrays and transforms it 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        public async System.Threading.Tasks.Task<Base64NDArrayBody> TransformarrayAsync (string deploymentName, string versionName, string transformName, Object batchRecord = null)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = await TransformarrayAsyncWithHttpInfo(deploymentName, versionName, transformName, batchRecord);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Takes a batch input arrays and transforms it 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformarrayAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, Object batchRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->Transformarray");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->Transformarray");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling TransformApi->Transformarray");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (batchRecord != null && batchRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>Base64NDArrayBody</returns>
        public Base64NDArrayBody Transformimage (string deploymentName, string versionName, string imageTransformName, List<byte[]> files)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = TransformimageWithHttpInfo(deploymentName, versionName, imageTransformName, files);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        public ApiResponse< Base64NDArrayBody > TransformimageWithHttpInfo (string deploymentName, string versionName, string imageTransformName, List<byte[]> files)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->Transformimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->Transformimage");
            // verify the required parameter 'imageTransformName' is set
            if (imageTransformName == null)
                throw new ApiException(400, "Missing required parameter 'imageTransformName' when calling TransformApi->Transformimage");
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling TransformApi->Transformimage");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (imageTransformName != null) localVarPathParams.Add("imageTransformName", this.Configuration.ApiClient.ParameterToString(imageTransformName)); // path parameter
            if (files != null) localVarFormParams.Add("files", this.Configuration.ApiClient.ParameterToString(files)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        public async System.Threading.Tasks.Task<Base64NDArrayBody> TransformimageAsync (string deploymentName, string versionName, string imageTransformName, List<byte[]> files)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = await TransformimageAsyncWithHttpInfo(deploymentName, versionName, imageTransformName, files);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformimageAsyncWithHttpInfo (string deploymentName, string versionName, string imageTransformName, List<byte[]> files)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->Transformimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->Transformimage");
            // verify the required parameter 'imageTransformName' is set
            if (imageTransformName == null)
                throw new ApiException(400, "Missing required parameter 'imageTransformName' when calling TransformApi->Transformimage");
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling TransformApi->Transformimage");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (imageTransformName != null) localVarPathParams.Add("imageTransformName", this.Configuration.ApiClient.ParameterToString(imageTransformName)); // path parameter
            if (files != null) localVarFormParams.Add("files", this.Configuration.ApiClient.ParameterToString(files)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord Takes a SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>SingleCSVRecord</returns>
        public SingleCSVRecord TransformincrementalCsv (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null)
        {
             ApiResponse<SingleCSVRecord> localVarResponse = TransformincrementalCsvWithHttpInfo(deploymentName, versionName, transformName, singleCSVRecord);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord Takes a SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>ApiResponse of SingleCSVRecord</returns>
        public ApiResponse< SingleCSVRecord > TransformincrementalCsvWithHttpInfo (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->TransformincrementalCsv");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->TransformincrementalCsv");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling TransformApi->TransformincrementalCsv");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (singleCSVRecord != null && singleCSVRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(singleCSVRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleCSVRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformincrementalCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleCSVRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleCSVRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleCSVRecord)));
        }

        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord Takes a SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>Task of SingleCSVRecord</returns>
        public async System.Threading.Tasks.Task<SingleCSVRecord> TransformincrementalCsvAsync (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null)
        {
             ApiResponse<SingleCSVRecord> localVarResponse = await TransformincrementalCsvAsyncWithHttpInfo(deploymentName, versionName, transformName, singleCSVRecord);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord Takes a SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>Task of ApiResponse (SingleCSVRecord)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleCSVRecord>> TransformincrementalCsvAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->TransformincrementalCsv");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->TransformincrementalCsv");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling TransformApi->TransformincrementalCsv");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (singleCSVRecord != null && singleCSVRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(singleCSVRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleCSVRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformincrementalCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleCSVRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleCSVRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleCSVRecord)));
        }

        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>Base64NDArrayBody</returns>
        public Base64NDArrayBody Transformincrementalarray (string deploymentName, string versionName, string transformName, Object singleRecord = null)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = TransformincrementalarrayWithHttpInfo(deploymentName, versionName, transformName, singleRecord);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        public ApiResponse< Base64NDArrayBody > TransformincrementalarrayWithHttpInfo (string deploymentName, string versionName, string transformName, Object singleRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->Transformincrementalarray");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->Transformincrementalarray");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling TransformApi->Transformincrementalarray");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (singleRecord != null && singleRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(singleRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformincrementalarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        public async System.Threading.Tasks.Task<Base64NDArrayBody> TransformincrementalarrayAsync (string deploymentName, string versionName, string transformName, Object singleRecord = null)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = await TransformincrementalarrayAsyncWithHttpInfo(deploymentName, versionName, transformName, singleRecord);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformincrementalarrayAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, Object singleRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->Transformincrementalarray");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->Transformincrementalarray");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling TransformApi->Transformincrementalarray");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (singleRecord != null && singleRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(singleRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformincrementalarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>Base64NDArrayBody</returns>
        public Base64NDArrayBody Transformincrementalimage (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = TransformincrementalimageWithHttpInfo(deploymentName, versionName, imageTransformName, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        public ApiResponse< Base64NDArrayBody > TransformincrementalimageWithHttpInfo (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->Transformincrementalimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->Transformincrementalimage");
            // verify the required parameter 'imageTransformName' is set
            if (imageTransformName == null)
                throw new ApiException(400, "Missing required parameter 'imageTransformName' when calling TransformApi->Transformincrementalimage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TransformApi->Transformincrementalimage");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (imageTransformName != null) localVarPathParams.Add("imageTransformName", this.Configuration.ApiClient.ParameterToString(imageTransformName)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformincrementalimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        public async System.Threading.Tasks.Task<Base64NDArrayBody> TransformincrementalimageAsync (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = await TransformincrementalimageAsyncWithHttpInfo(deploymentName, versionName, imageTransformName, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformincrementalimageAsyncWithHttpInfo (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->Transformincrementalimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->Transformincrementalimage");
            // verify the required parameter 'imageTransformName' is set
            if (imageTransformName == null)
                throw new ApiException(400, "Missing required parameter 'imageTransformName' when calling TransformApi->Transformincrementalimage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TransformApi->Transformincrementalimage");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (imageTransformName != null) localVarPathParams.Add("imageTransformName", this.Configuration.ApiClient.ParameterToString(imageTransformName)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformincrementalimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image) 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>Object</returns>
        public Object TransformprocessGet (string deploymentName, string versionName, string transformName)
        {
             ApiResponse<Object> localVarResponse = TransformprocessGetWithHttpInfo(deploymentName, versionName, transformName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image) 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TransformprocessGetWithHttpInfo (string deploymentName, string versionName, string transformName)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->TransformprocessGet");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->TransformprocessGet");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling TransformApi->TransformprocessGet");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformprocessGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image) 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TransformprocessGetAsync (string deploymentName, string versionName, string transformName)
        {
             ApiResponse<Object> localVarResponse = await TransformprocessGetAsyncWithHttpInfo(deploymentName, versionName, transformName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image) 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransformprocessGetAsyncWithHttpInfo (string deploymentName, string versionName, string transformName)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->TransformprocessGet");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->TransformprocessGet");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling TransformApi->TransformprocessGet");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformprocessGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (optional)</param>
        /// <returns>Object</returns>
        public Object TransformprocessPost (string deploymentName, string versionName, string transformName, Object transformProcess = null)
        {
             ApiResponse<Object> localVarResponse = TransformprocessPostWithHttpInfo(deploymentName, versionName, transformName, transformProcess);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TransformprocessPostWithHttpInfo (string deploymentName, string versionName, string transformName, Object transformProcess = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->TransformprocessPost");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->TransformprocessPost");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling TransformApi->TransformprocessPost");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (transformProcess != null && transformProcess.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transformProcess); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transformProcess; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TransformprocessPostAsync (string deploymentName, string versionName, string transformName, Object transformProcess = null)
        {
             ApiResponse<Object> localVarResponse = await TransformprocessPostAsyncWithHttpInfo(deploymentName, versionName, transformName, transformProcess);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransformprocessPostAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, Object transformProcess = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling TransformApi->TransformprocessPost");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling TransformApi->TransformprocessPost");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling TransformApi->TransformprocessPost");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (transformProcess != null && transformProcess.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transformProcess); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transformProcess; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
