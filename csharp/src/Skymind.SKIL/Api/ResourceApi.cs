/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Skymind.SKIL.Client;
using Skymind.SKIL.Model;

namespace Skymind.SKIL.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>ResourceCredentials</returns>
        ResourceCredentials AddCredentials (AddCredentialsRequest addCredentialsRequest);

        /// <summary>
        /// Adds credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>ApiResponse of ResourceCredentials</returns>
        ApiResponse<ResourceCredentials> AddCredentialsWithHttpInfo (AddCredentialsRequest addCredentialsRequest);
        /// <summary>
        /// Adds a resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>Object</returns>
        Object AddResource (AddResourceRequest addResourceRequest);

        /// <summary>
        /// Adds a resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddResourceWithHttpInfo (AddResourceRequest addResourceRequest);
        /// <summary>
        /// Adds a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>ResourceGroup</returns>
        ResourceGroup AddResourceGroup (string groupName);

        /// <summary>
        /// Adds a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>ApiResponse of ResourceGroup</returns>
        ApiResponse<ResourceGroup> AddResourceGroupWithHttpInfo (string groupName);
        /// <summary>
        /// Adds a resource to a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns></returns>
        void AddResourceToGroup (long? resourceGroupId, long? resourceId);

        /// <summary>
        /// Adds a resource to a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddResourceToGroupWithHttpInfo (long? resourceGroupId, long? resourceId);
        /// <summary>
        /// Delete credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns></returns>
        void DeleteCredentialsById (long? credentialId);

        /// <summary>
        /// Delete credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCredentialsByIdWithHttpInfo (long? credentialId);
        /// <summary>
        /// Delete the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Resource</returns>
        Resource DeleteResourceById (long? resourceId);

        /// <summary>
        /// Delete the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Resource</returns>
        ApiResponse<Resource> DeleteResourceByIdWithHttpInfo (long? resourceId);
        /// <summary>
        /// Removes a resource from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns></returns>
        void DeleteResourceFromGroup (long? resourceGroupId, long? resourceId);

        /// <summary>
        /// Removes a resource from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteResourceFromGroupWithHttpInfo (long? resourceGroupId, long? resourceId);
        /// <summary>
        /// Delete the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ResourceGroup</returns>
        ResourceGroup DeleteResourceGroupById (long? resourceGroupId);

        /// <summary>
        /// Delete the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ApiResponse of ResourceGroup</returns>
        ApiResponse<ResourceGroup> DeleteResourceGroupByIdWithHttpInfo (long? resourceGroupId);
        /// <summary>
        /// Get credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>ResourceCredentials</returns>
        ResourceCredentials GetCredentialsById (long? credentialId);

        /// <summary>
        /// Get credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>ApiResponse of ResourceCredentials</returns>
        ApiResponse<ResourceCredentials> GetCredentialsByIdWithHttpInfo (long? credentialId);
        /// <summary>
        /// Get the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Resource</returns>
        Resource GetResourceById (long? resourceId);

        /// <summary>
        /// Get the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Resource</returns>
        ApiResponse<Resource> GetResourceByIdWithHttpInfo (long? resourceId);
        /// <summary>
        /// Get all the resources with the specified resource subtype
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>List&lt;Resource&gt;</returns>
        List<Resource> GetResourceBySubType (string resourceSubType);

        /// <summary>
        /// Get all the resources with the specified resource subtype
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        ApiResponse<List<Resource>> GetResourceBySubTypeWithHttpInfo (string resourceSubType);
        /// <summary>
        /// Get all the resources with the specified resource type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>List&lt;Resource&gt;</returns>
        List<Resource> GetResourceByType (string resourceType);

        /// <summary>
        /// Get all the resources with the specified resource type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        ApiResponse<List<Resource>> GetResourceByTypeWithHttpInfo (string resourceType);
        /// <summary>
        /// Get the resource details with the specified resource ID
        /// </summary>
        /// <remarks>
        /// Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Object</returns>
        Object GetResourceDetailsById (long? resourceId);

        /// <summary>
        /// Get the resource details with the specified resource ID
        /// </summary>
        /// <remarks>
        /// Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetResourceDetailsByIdWithHttpInfo (long? resourceId);
        /// <summary>
        /// Get the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ResourceGroup</returns>
        ResourceGroup GetResourceGroupById (long? resourceGroupId);

        /// <summary>
        /// Get the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ApiResponse of ResourceGroup</returns>
        ApiResponse<ResourceGroup> GetResourceGroupByIdWithHttpInfo (long? resourceGroupId);
        /// <summary>
        /// Get a list of all the resource groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResourceGroup&gt;</returns>
        List<ResourceGroup> GetResourceGroups ();

        /// <summary>
        /// Get a list of all the resource groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResourceGroup&gt;</returns>
        ApiResponse<List<ResourceGroup>> GetResourceGroupsWithHttpInfo ();
        /// <summary>
        /// A list of all known/registered resources, of all types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Resource&gt;</returns>
        List<Resource> GetResources ();

        /// <summary>
        /// A list of all known/registered resources, of all types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        ApiResponse<List<Resource>> GetResourcesWithHttpInfo ();
        /// <summary>
        /// Get all resources from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>List&lt;Resource&gt;</returns>
        List<Resource> GetResourcesFromGroup (long? resourceGroupId);

        /// <summary>
        /// Get all resources from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        ApiResponse<List<Resource>> GetResourcesFromGroupWithHttpInfo (long? resourceGroupId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>Task of ResourceCredentials</returns>
        System.Threading.Tasks.Task<ResourceCredentials> AddCredentialsAsync (AddCredentialsRequest addCredentialsRequest);

        /// <summary>
        /// Adds credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>Task of ApiResponse (ResourceCredentials)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceCredentials>> AddCredentialsAsyncWithHttpInfo (AddCredentialsRequest addCredentialsRequest);
        /// <summary>
        /// Adds a resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddResourceAsync (AddResourceRequest addResourceRequest);

        /// <summary>
        /// Adds a resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddResourceAsyncWithHttpInfo (AddResourceRequest addResourceRequest);
        /// <summary>
        /// Adds a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>Task of ResourceGroup</returns>
        System.Threading.Tasks.Task<ResourceGroup> AddResourceGroupAsync (string groupName);

        /// <summary>
        /// Adds a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>Task of ApiResponse (ResourceGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceGroup>> AddResourceGroupAsyncWithHttpInfo (string groupName);
        /// <summary>
        /// Adds a resource to a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddResourceToGroupAsync (long? resourceGroupId, long? resourceId);

        /// <summary>
        /// Adds a resource to a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddResourceToGroupAsyncWithHttpInfo (long? resourceGroupId, long? resourceId);
        /// <summary>
        /// Delete credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCredentialsByIdAsync (long? credentialId);

        /// <summary>
        /// Delete credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCredentialsByIdAsyncWithHttpInfo (long? credentialId);
        /// <summary>
        /// Delete the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of Resource</returns>
        System.Threading.Tasks.Task<Resource> DeleteResourceByIdAsync (long? resourceId);

        /// <summary>
        /// Delete the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse (Resource)</returns>
        System.Threading.Tasks.Task<ApiResponse<Resource>> DeleteResourceByIdAsyncWithHttpInfo (long? resourceId);
        /// <summary>
        /// Removes a resource from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteResourceFromGroupAsync (long? resourceGroupId, long? resourceId);

        /// <summary>
        /// Removes a resource from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResourceFromGroupAsyncWithHttpInfo (long? resourceGroupId, long? resourceId);
        /// <summary>
        /// Delete the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ResourceGroup</returns>
        System.Threading.Tasks.Task<ResourceGroup> DeleteResourceGroupByIdAsync (long? resourceGroupId);

        /// <summary>
        /// Delete the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ApiResponse (ResourceGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceGroup>> DeleteResourceGroupByIdAsyncWithHttpInfo (long? resourceGroupId);
        /// <summary>
        /// Get credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of ResourceCredentials</returns>
        System.Threading.Tasks.Task<ResourceCredentials> GetCredentialsByIdAsync (long? credentialId);

        /// <summary>
        /// Get credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of ApiResponse (ResourceCredentials)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceCredentials>> GetCredentialsByIdAsyncWithHttpInfo (long? credentialId);
        /// <summary>
        /// Get the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of Resource</returns>
        System.Threading.Tasks.Task<Resource> GetResourceByIdAsync (long? resourceId);

        /// <summary>
        /// Get the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse (Resource)</returns>
        System.Threading.Tasks.Task<ApiResponse<Resource>> GetResourceByIdAsyncWithHttpInfo (long? resourceId);
        /// <summary>
        /// Get all the resources with the specified resource subtype
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        System.Threading.Tasks.Task<List<Resource>> GetResourceBySubTypeAsync (string resourceSubType);

        /// <summary>
        /// Get all the resources with the specified resource subtype
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourceBySubTypeAsyncWithHttpInfo (string resourceSubType);
        /// <summary>
        /// Get all the resources with the specified resource type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        System.Threading.Tasks.Task<List<Resource>> GetResourceByTypeAsync (string resourceType);

        /// <summary>
        /// Get all the resources with the specified resource type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourceByTypeAsyncWithHttpInfo (string resourceType);
        /// <summary>
        /// Get the resource details with the specified resource ID
        /// </summary>
        /// <remarks>
        /// Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetResourceDetailsByIdAsync (long? resourceId);

        /// <summary>
        /// Get the resource details with the specified resource ID
        /// </summary>
        /// <remarks>
        /// Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceDetailsByIdAsyncWithHttpInfo (long? resourceId);
        /// <summary>
        /// Get the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ResourceGroup</returns>
        System.Threading.Tasks.Task<ResourceGroup> GetResourceGroupByIdAsync (long? resourceGroupId);

        /// <summary>
        /// Get the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ApiResponse (ResourceGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceGroup>> GetResourceGroupByIdAsyncWithHttpInfo (long? resourceGroupId);
        /// <summary>
        /// Get a list of all the resource groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ResourceGroup&gt;</returns>
        System.Threading.Tasks.Task<List<ResourceGroup>> GetResourceGroupsAsync ();

        /// <summary>
        /// Get a list of all the resource groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ResourceGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourceGroup>>> GetResourceGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// A list of all known/registered resources, of all types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        System.Threading.Tasks.Task<List<Resource>> GetResourcesAsync ();

        /// <summary>
        /// A list of all known/registered resources, of all types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourcesAsyncWithHttpInfo ();
        /// <summary>
        /// Get all resources from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        System.Threading.Tasks.Task<List<Resource>> GetResourcesFromGroupAsync (long? resourceGroupId);

        /// <summary>
        /// Get all resources from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourcesFromGroupAsyncWithHttpInfo (long? resourceGroupId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ResourceApi : IResourceApi
    {
        private Skymind.SKIL.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResourceApi(String basePath)
        {
            this.Configuration = new Skymind.SKIL.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Skymind.SKIL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ResourceApi(Skymind.SKIL.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Skymind.SKIL.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Skymind.SKIL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Skymind.SKIL.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Skymind.SKIL.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds credentials 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>ResourceCredentials</returns>
        public ResourceCredentials AddCredentials (AddCredentialsRequest addCredentialsRequest)
        {
             ApiResponse<ResourceCredentials> localVarResponse = AddCredentialsWithHttpInfo(addCredentialsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds credentials 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>ApiResponse of ResourceCredentials</returns>
        public ApiResponse< ResourceCredentials > AddCredentialsWithHttpInfo (AddCredentialsRequest addCredentialsRequest)
        {
            // verify the required parameter 'addCredentialsRequest' is set
            if (addCredentialsRequest == null)
                throw new ApiException(400, "Missing required parameter 'addCredentialsRequest' when calling ResourceApi->AddCredentials");

            var localVarPath = "/resources/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addCredentialsRequest != null && addCredentialsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addCredentialsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addCredentialsRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceCredentials)));
        }

        /// <summary>
        /// Adds credentials 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>Task of ResourceCredentials</returns>
        public async System.Threading.Tasks.Task<ResourceCredentials> AddCredentialsAsync (AddCredentialsRequest addCredentialsRequest)
        {
             ApiResponse<ResourceCredentials> localVarResponse = await AddCredentialsAsyncWithHttpInfo(addCredentialsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds credentials 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>Task of ApiResponse (ResourceCredentials)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceCredentials>> AddCredentialsAsyncWithHttpInfo (AddCredentialsRequest addCredentialsRequest)
        {
            // verify the required parameter 'addCredentialsRequest' is set
            if (addCredentialsRequest == null)
                throw new ApiException(400, "Missing required parameter 'addCredentialsRequest' when calling ResourceApi->AddCredentials");

            var localVarPath = "/resources/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addCredentialsRequest != null && addCredentialsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addCredentialsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addCredentialsRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceCredentials)));
        }

        /// <summary>
        /// Adds a resource 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>Object</returns>
        public Object AddResource (AddResourceRequest addResourceRequest)
        {
             ApiResponse<Object> localVarResponse = AddResourceWithHttpInfo(addResourceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a resource 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddResourceWithHttpInfo (AddResourceRequest addResourceRequest)
        {
            // verify the required parameter 'addResourceRequest' is set
            if (addResourceRequest == null)
                throw new ApiException(400, "Missing required parameter 'addResourceRequest' when calling ResourceApi->AddResource");

            var localVarPath = "/resources/add/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addResourceRequest != null && addResourceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Adds a resource 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddResourceAsync (AddResourceRequest addResourceRequest)
        {
             ApiResponse<Object> localVarResponse = await AddResourceAsyncWithHttpInfo(addResourceRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a resource 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddResourceAsyncWithHttpInfo (AddResourceRequest addResourceRequest)
        {
            // verify the required parameter 'addResourceRequest' is set
            if (addResourceRequest == null)
                throw new ApiException(400, "Missing required parameter 'addResourceRequest' when calling ResourceApi->AddResource");

            var localVarPath = "/resources/add/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addResourceRequest != null && addResourceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Adds a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>ResourceGroup</returns>
        public ResourceGroup AddResourceGroup (string groupName)
        {
             ApiResponse<ResourceGroup> localVarResponse = AddResourceGroupWithHttpInfo(groupName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>ApiResponse of ResourceGroup</returns>
        public ApiResponse< ResourceGroup > AddResourceGroupWithHttpInfo (string groupName)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling ResourceApi->AddResourceGroup");

            var localVarPath = "/resources/add/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupName != null && groupName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupName; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResourceGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceGroup)));
        }

        /// <summary>
        /// Adds a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>Task of ResourceGroup</returns>
        public async System.Threading.Tasks.Task<ResourceGroup> AddResourceGroupAsync (string groupName)
        {
             ApiResponse<ResourceGroup> localVarResponse = await AddResourceGroupAsyncWithHttpInfo(groupName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>Task of ApiResponse (ResourceGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceGroup>> AddResourceGroupAsyncWithHttpInfo (string groupName)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling ResourceApi->AddResourceGroup");

            var localVarPath = "/resources/add/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupName != null && groupName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupName; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResourceGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceGroup)));
        }

        /// <summary>
        /// Adds a resource to a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns></returns>
        public void AddResourceToGroup (long? resourceGroupId, long? resourceId)
        {
             AddResourceToGroupWithHttpInfo(resourceGroupId, resourceId);
        }

        /// <summary>
        /// Adds a resource to a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddResourceToGroupWithHttpInfo (long? resourceGroupId, long? resourceId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling ResourceApi->AddResourceToGroup");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ResourceApi->AddResourceToGroup");

            var localVarPath = "/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResourceToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a resource to a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddResourceToGroupAsync (long? resourceGroupId, long? resourceId)
        {
             await AddResourceToGroupAsyncWithHttpInfo(resourceGroupId, resourceId);

        }

        /// <summary>
        /// Adds a resource to a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddResourceToGroupAsyncWithHttpInfo (long? resourceGroupId, long? resourceId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling ResourceApi->AddResourceToGroup");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ResourceApi->AddResourceToGroup");

            var localVarPath = "/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResourceToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns></returns>
        public void DeleteCredentialsById (long? credentialId)
        {
             DeleteCredentialsByIdWithHttpInfo(credentialId);
        }

        /// <summary>
        /// Delete credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCredentialsByIdWithHttpInfo (long? credentialId)
        {
            // verify the required parameter 'credentialId' is set
            if (credentialId == null)
                throw new ApiException(400, "Missing required parameter 'credentialId' when calling ResourceApi->DeleteCredentialsById");

            var localVarPath = "/resources/credentials/{credentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentialId != null) localVarPathParams.Add("credentialId", this.Configuration.ApiClient.ParameterToString(credentialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCredentialsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCredentialsByIdAsync (long? credentialId)
        {
             await DeleteCredentialsByIdAsyncWithHttpInfo(credentialId);

        }

        /// <summary>
        /// Delete credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCredentialsByIdAsyncWithHttpInfo (long? credentialId)
        {
            // verify the required parameter 'credentialId' is set
            if (credentialId == null)
                throw new ApiException(400, "Missing required parameter 'credentialId' when calling ResourceApi->DeleteCredentialsById");

            var localVarPath = "/resources/credentials/{credentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentialId != null) localVarPathParams.Add("credentialId", this.Configuration.ApiClient.ParameterToString(credentialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCredentialsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Resource</returns>
        public Resource DeleteResourceById (long? resourceId)
        {
             ApiResponse<Resource> localVarResponse = DeleteResourceByIdWithHttpInfo(resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Resource</returns>
        public ApiResponse< Resource > DeleteResourceByIdWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ResourceApi->DeleteResourceById");

            var localVarPath = "/resources/remove/resource/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Resource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Resource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Resource)));
        }

        /// <summary>
        /// Delete the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of Resource</returns>
        public async System.Threading.Tasks.Task<Resource> DeleteResourceByIdAsync (long? resourceId)
        {
             ApiResponse<Resource> localVarResponse = await DeleteResourceByIdAsyncWithHttpInfo(resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse (Resource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Resource>> DeleteResourceByIdAsyncWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ResourceApi->DeleteResourceById");

            var localVarPath = "/resources/remove/resource/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Resource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Resource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Resource)));
        }

        /// <summary>
        /// Removes a resource from a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns></returns>
        public void DeleteResourceFromGroup (long? resourceGroupId, long? resourceId)
        {
             DeleteResourceFromGroupWithHttpInfo(resourceGroupId, resourceId);
        }

        /// <summary>
        /// Removes a resource from a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteResourceFromGroupWithHttpInfo (long? resourceGroupId, long? resourceId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling ResourceApi->DeleteResourceFromGroup");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ResourceApi->DeleteResourceFromGroup");

            var localVarPath = "/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes a resource from a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteResourceFromGroupAsync (long? resourceGroupId, long? resourceId)
        {
             await DeleteResourceFromGroupAsyncWithHttpInfo(resourceGroupId, resourceId);

        }

        /// <summary>
        /// Removes a resource from a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResourceFromGroupAsyncWithHttpInfo (long? resourceGroupId, long? resourceId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling ResourceApi->DeleteResourceFromGroup");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ResourceApi->DeleteResourceFromGroup");

            var localVarPath = "/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ResourceGroup</returns>
        public ResourceGroup DeleteResourceGroupById (long? resourceGroupId)
        {
             ApiResponse<ResourceGroup> localVarResponse = DeleteResourceGroupByIdWithHttpInfo(resourceGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ApiResponse of ResourceGroup</returns>
        public ApiResponse< ResourceGroup > DeleteResourceGroupByIdWithHttpInfo (long? resourceGroupId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling ResourceApi->DeleteResourceGroupById");

            var localVarPath = "/resources/remove/group/{resourceGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceGroup)));
        }

        /// <summary>
        /// Delete the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ResourceGroup</returns>
        public async System.Threading.Tasks.Task<ResourceGroup> DeleteResourceGroupByIdAsync (long? resourceGroupId)
        {
             ApiResponse<ResourceGroup> localVarResponse = await DeleteResourceGroupByIdAsyncWithHttpInfo(resourceGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ApiResponse (ResourceGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceGroup>> DeleteResourceGroupByIdAsyncWithHttpInfo (long? resourceGroupId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling ResourceApi->DeleteResourceGroupById");

            var localVarPath = "/resources/remove/group/{resourceGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceGroup)));
        }

        /// <summary>
        /// Get credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>ResourceCredentials</returns>
        public ResourceCredentials GetCredentialsById (long? credentialId)
        {
             ApiResponse<ResourceCredentials> localVarResponse = GetCredentialsByIdWithHttpInfo(credentialId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>ApiResponse of ResourceCredentials</returns>
        public ApiResponse< ResourceCredentials > GetCredentialsByIdWithHttpInfo (long? credentialId)
        {
            // verify the required parameter 'credentialId' is set
            if (credentialId == null)
                throw new ApiException(400, "Missing required parameter 'credentialId' when calling ResourceApi->GetCredentialsById");

            var localVarPath = "/resources/credentials/{credentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentialId != null) localVarPathParams.Add("credentialId", this.Configuration.ApiClient.ParameterToString(credentialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredentialsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceCredentials)));
        }

        /// <summary>
        /// Get credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of ResourceCredentials</returns>
        public async System.Threading.Tasks.Task<ResourceCredentials> GetCredentialsByIdAsync (long? credentialId)
        {
             ApiResponse<ResourceCredentials> localVarResponse = await GetCredentialsByIdAsyncWithHttpInfo(credentialId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of ApiResponse (ResourceCredentials)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceCredentials>> GetCredentialsByIdAsyncWithHttpInfo (long? credentialId)
        {
            // verify the required parameter 'credentialId' is set
            if (credentialId == null)
                throw new ApiException(400, "Missing required parameter 'credentialId' when calling ResourceApi->GetCredentialsById");

            var localVarPath = "/resources/credentials/{credentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentialId != null) localVarPathParams.Add("credentialId", this.Configuration.ApiClient.ParameterToString(credentialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredentialsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceCredentials)));
        }

        /// <summary>
        /// Get the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Resource</returns>
        public Resource GetResourceById (long? resourceId)
        {
             ApiResponse<Resource> localVarResponse = GetResourceByIdWithHttpInfo(resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Resource</returns>
        public ApiResponse< Resource > GetResourceByIdWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ResourceApi->GetResourceById");

            var localVarPath = "/resources/resource/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Resource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Resource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Resource)));
        }

        /// <summary>
        /// Get the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of Resource</returns>
        public async System.Threading.Tasks.Task<Resource> GetResourceByIdAsync (long? resourceId)
        {
             ApiResponse<Resource> localVarResponse = await GetResourceByIdAsyncWithHttpInfo(resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse (Resource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Resource>> GetResourceByIdAsyncWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ResourceApi->GetResourceById");

            var localVarPath = "/resources/resource/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Resource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Resource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Resource)));
        }

        /// <summary>
        /// Get all the resources with the specified resource subtype 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>List&lt;Resource&gt;</returns>
        public List<Resource> GetResourceBySubType (string resourceSubType)
        {
             ApiResponse<List<Resource>> localVarResponse = GetResourceBySubTypeWithHttpInfo(resourceSubType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the resources with the specified resource subtype 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        public ApiResponse< List<Resource> > GetResourceBySubTypeWithHttpInfo (string resourceSubType)
        {
            // verify the required parameter 'resourceSubType' is set
            if (resourceSubType == null)
                throw new ApiException(400, "Missing required parameter 'resourceSubType' when calling ResourceApi->GetResourceBySubType");

            var localVarPath = "/resources/resources/subtype/{resourceSubType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceSubType != null) localVarPathParams.Add("resourceSubType", this.Configuration.ApiClient.ParameterToString(resourceSubType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceBySubType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// Get all the resources with the specified resource subtype 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        public async System.Threading.Tasks.Task<List<Resource>> GetResourceBySubTypeAsync (string resourceSubType)
        {
             ApiResponse<List<Resource>> localVarResponse = await GetResourceBySubTypeAsyncWithHttpInfo(resourceSubType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the resources with the specified resource subtype 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourceBySubTypeAsyncWithHttpInfo (string resourceSubType)
        {
            // verify the required parameter 'resourceSubType' is set
            if (resourceSubType == null)
                throw new ApiException(400, "Missing required parameter 'resourceSubType' when calling ResourceApi->GetResourceBySubType");

            var localVarPath = "/resources/resources/subtype/{resourceSubType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceSubType != null) localVarPathParams.Add("resourceSubType", this.Configuration.ApiClient.ParameterToString(resourceSubType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceBySubType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// Get all the resources with the specified resource type 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>List&lt;Resource&gt;</returns>
        public List<Resource> GetResourceByType (string resourceType)
        {
             ApiResponse<List<Resource>> localVarResponse = GetResourceByTypeWithHttpInfo(resourceType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the resources with the specified resource type 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        public ApiResponse< List<Resource> > GetResourceByTypeWithHttpInfo (string resourceType)
        {
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling ResourceApi->GetResourceByType");

            var localVarPath = "/resources/resources/type/{resourceType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// Get all the resources with the specified resource type 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        public async System.Threading.Tasks.Task<List<Resource>> GetResourceByTypeAsync (string resourceType)
        {
             ApiResponse<List<Resource>> localVarResponse = await GetResourceByTypeAsyncWithHttpInfo(resourceType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the resources with the specified resource type 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourceByTypeAsyncWithHttpInfo (string resourceType)
        {
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling ResourceApi->GetResourceByType");

            var localVarPath = "/resources/resources/type/{resourceType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// Get the resource details with the specified resource ID Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Object</returns>
        public Object GetResourceDetailsById (long? resourceId)
        {
             ApiResponse<Object> localVarResponse = GetResourceDetailsByIdWithHttpInfo(resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the resource details with the specified resource ID Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetResourceDetailsByIdWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ResourceApi->GetResourceDetailsById");

            var localVarPath = "/resources/details/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceDetailsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get the resource details with the specified resource ID Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetResourceDetailsByIdAsync (long? resourceId)
        {
             ApiResponse<Object> localVarResponse = await GetResourceDetailsByIdAsyncWithHttpInfo(resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the resource details with the specified resource ID Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceDetailsByIdAsyncWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling ResourceApi->GetResourceDetailsById");

            var localVarPath = "/resources/details/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceDetailsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ResourceGroup</returns>
        public ResourceGroup GetResourceGroupById (long? resourceGroupId)
        {
             ApiResponse<ResourceGroup> localVarResponse = GetResourceGroupByIdWithHttpInfo(resourceGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ApiResponse of ResourceGroup</returns>
        public ApiResponse< ResourceGroup > GetResourceGroupByIdWithHttpInfo (long? resourceGroupId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling ResourceApi->GetResourceGroupById");

            var localVarPath = "/resources/group/{resourceGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceGroup)));
        }

        /// <summary>
        /// Get the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ResourceGroup</returns>
        public async System.Threading.Tasks.Task<ResourceGroup> GetResourceGroupByIdAsync (long? resourceGroupId)
        {
             ApiResponse<ResourceGroup> localVarResponse = await GetResourceGroupByIdAsyncWithHttpInfo(resourceGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ApiResponse (ResourceGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceGroup>> GetResourceGroupByIdAsyncWithHttpInfo (long? resourceGroupId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling ResourceApi->GetResourceGroupById");

            var localVarPath = "/resources/group/{resourceGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceGroup)));
        }

        /// <summary>
        /// Get a list of all the resource groups 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResourceGroup&gt;</returns>
        public List<ResourceGroup> GetResourceGroups ()
        {
             ApiResponse<List<ResourceGroup>> localVarResponse = GetResourceGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all the resource groups 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResourceGroup&gt;</returns>
        public ApiResponse< List<ResourceGroup> > GetResourceGroupsWithHttpInfo ()
        {

            var localVarPath = "/resources/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResourceGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceGroup>)));
        }

        /// <summary>
        /// Get a list of all the resource groups 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ResourceGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourceGroup>> GetResourceGroupsAsync ()
        {
             ApiResponse<List<ResourceGroup>> localVarResponse = await GetResourceGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all the resource groups 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ResourceGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResourceGroup>>> GetResourceGroupsAsyncWithHttpInfo ()
        {

            var localVarPath = "/resources/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResourceGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceGroup>)));
        }

        /// <summary>
        /// A list of all known/registered resources, of all types 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Resource&gt;</returns>
        public List<Resource> GetResources ()
        {
             ApiResponse<List<Resource>> localVarResponse = GetResourcesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// A list of all known/registered resources, of all types 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        public ApiResponse< List<Resource> > GetResourcesWithHttpInfo ()
        {

            var localVarPath = "/resources/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// A list of all known/registered resources, of all types 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        public async System.Threading.Tasks.Task<List<Resource>> GetResourcesAsync ()
        {
             ApiResponse<List<Resource>> localVarResponse = await GetResourcesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// A list of all known/registered resources, of all types 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourcesAsyncWithHttpInfo ()
        {

            var localVarPath = "/resources/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// Get all resources from a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>List&lt;Resource&gt;</returns>
        public List<Resource> GetResourcesFromGroup (long? resourceGroupId)
        {
             ApiResponse<List<Resource>> localVarResponse = GetResourcesFromGroupWithHttpInfo(resourceGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all resources from a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        public ApiResponse< List<Resource> > GetResourcesFromGroupWithHttpInfo (long? resourceGroupId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling ResourceApi->GetResourcesFromGroup");

            var localVarPath = "/resources/group/{resourceGroupId}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourcesFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// Get all resources from a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        public async System.Threading.Tasks.Task<List<Resource>> GetResourcesFromGroupAsync (long? resourceGroupId)
        {
             ApiResponse<List<Resource>> localVarResponse = await GetResourcesFromGroupAsyncWithHttpInfo(resourceGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all resources from a resource group 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourcesFromGroupAsyncWithHttpInfo (long? resourceGroupId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling ResourceApi->GetResourcesFromGroup");

            var localVarPath = "/resources/group/{resourceGroupId}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourcesFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

    }
}
