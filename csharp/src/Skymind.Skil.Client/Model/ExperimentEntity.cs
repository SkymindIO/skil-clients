/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Skymind.Skil.Client.Client.SwaggerDateConverter;

namespace Skymind.Skil.Client.Model
{
    /// <summary>
    /// ExperimentEntity
    /// </summary>
    [DataContract]
    public partial class ExperimentEntity :  IEquatable<ExperimentEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExperimentEntity" /> class.
        /// </summary>
        /// <param name="bestModelId">GUID of the best selected model in an experiment.</param>
        /// <param name="inputDataUri">Input data URI.</param>
        /// <param name="experimentId">GUID of the experiment.</param>
        /// <param name="experimentName">Experiment&#39;s name.</param>
        /// <param name="experimentDescription">Experiment&#39;s description.</param>
        /// <param name="notebookJson">The associated Zeppelin notebook JSON string.</param>
        /// <param name="notebookUrl">URL of the associated Zeppelin notebook.</param>
        /// <param name="zeppelinId">Zeppelin ID.</param>
        /// <param name="modelHistoryId">Id of the model history / workspace.</param>
        /// <param name="lastUpdated">Indicates the time when experiment was last updated.</param>
        public ExperimentEntity(string bestModelId = default(string), string inputDataUri = default(string), string experimentId = default(string), string experimentName = default(string), string experimentDescription = default(string), string notebookJson = default(string), string notebookUrl = default(string), string zeppelinId = default(string), string modelHistoryId = default(string), long? lastUpdated = default(long?))
        {
            this.BestModelId = bestModelId;
            this.InputDataUri = inputDataUri;
            this.ExperimentId = experimentId;
            this.ExperimentName = experimentName;
            this.ExperimentDescription = experimentDescription;
            this.NotebookJson = notebookJson;
            this.NotebookUrl = notebookUrl;
            this.ZeppelinId = zeppelinId;
            this.ModelHistoryId = modelHistoryId;
            this.LastUpdated = lastUpdated;
        }
        
        /// <summary>
        /// GUID of the best selected model in an experiment
        /// </summary>
        /// <value>GUID of the best selected model in an experiment</value>
        [DataMember(Name="bestModelId", EmitDefaultValue=false)]
        public string BestModelId { get; set; }

        /// <summary>
        /// Input data URI
        /// </summary>
        /// <value>Input data URI</value>
        [DataMember(Name="inputDataUri", EmitDefaultValue=false)]
        public string InputDataUri { get; set; }

        /// <summary>
        /// GUID of the experiment
        /// </summary>
        /// <value>GUID of the experiment</value>
        [DataMember(Name="experimentId", EmitDefaultValue=false)]
        public string ExperimentId { get; set; }

        /// <summary>
        /// Experiment&#39;s name
        /// </summary>
        /// <value>Experiment&#39;s name</value>
        [DataMember(Name="experimentName", EmitDefaultValue=false)]
        public string ExperimentName { get; set; }

        /// <summary>
        /// Experiment&#39;s description
        /// </summary>
        /// <value>Experiment&#39;s description</value>
        [DataMember(Name="experimentDescription", EmitDefaultValue=false)]
        public string ExperimentDescription { get; set; }

        /// <summary>
        /// The associated Zeppelin notebook JSON string
        /// </summary>
        /// <value>The associated Zeppelin notebook JSON string</value>
        [DataMember(Name="notebookJson", EmitDefaultValue=false)]
        public string NotebookJson { get; set; }

        /// <summary>
        /// URL of the associated Zeppelin notebook
        /// </summary>
        /// <value>URL of the associated Zeppelin notebook</value>
        [DataMember(Name="notebookUrl", EmitDefaultValue=false)]
        public string NotebookUrl { get; set; }

        /// <summary>
        /// Zeppelin ID
        /// </summary>
        /// <value>Zeppelin ID</value>
        [DataMember(Name="zeppelinId", EmitDefaultValue=false)]
        public string ZeppelinId { get; set; }

        /// <summary>
        /// Id of the model history / workspace
        /// </summary>
        /// <value>Id of the model history / workspace</value>
        [DataMember(Name="modelHistoryId", EmitDefaultValue=false)]
        public string ModelHistoryId { get; set; }

        /// <summary>
        /// Indicates the time when experiment was last updated
        /// </summary>
        /// <value>Indicates the time when experiment was last updated</value>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public long? LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExperimentEntity {\n");
            sb.Append("  BestModelId: ").Append(BestModelId).Append("\n");
            sb.Append("  InputDataUri: ").Append(InputDataUri).Append("\n");
            sb.Append("  ExperimentId: ").Append(ExperimentId).Append("\n");
            sb.Append("  ExperimentName: ").Append(ExperimentName).Append("\n");
            sb.Append("  ExperimentDescription: ").Append(ExperimentDescription).Append("\n");
            sb.Append("  NotebookJson: ").Append(NotebookJson).Append("\n");
            sb.Append("  NotebookUrl: ").Append(NotebookUrl).Append("\n");
            sb.Append("  ZeppelinId: ").Append(ZeppelinId).Append("\n");
            sb.Append("  ModelHistoryId: ").Append(ModelHistoryId).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExperimentEntity);
        }

        /// <summary>
        /// Returns true if ExperimentEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of ExperimentEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExperimentEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BestModelId == input.BestModelId ||
                    (this.BestModelId != null &&
                    this.BestModelId.Equals(input.BestModelId))
                ) && 
                (
                    this.InputDataUri == input.InputDataUri ||
                    (this.InputDataUri != null &&
                    this.InputDataUri.Equals(input.InputDataUri))
                ) && 
                (
                    this.ExperimentId == input.ExperimentId ||
                    (this.ExperimentId != null &&
                    this.ExperimentId.Equals(input.ExperimentId))
                ) && 
                (
                    this.ExperimentName == input.ExperimentName ||
                    (this.ExperimentName != null &&
                    this.ExperimentName.Equals(input.ExperimentName))
                ) && 
                (
                    this.ExperimentDescription == input.ExperimentDescription ||
                    (this.ExperimentDescription != null &&
                    this.ExperimentDescription.Equals(input.ExperimentDescription))
                ) && 
                (
                    this.NotebookJson == input.NotebookJson ||
                    (this.NotebookJson != null &&
                    this.NotebookJson.Equals(input.NotebookJson))
                ) && 
                (
                    this.NotebookUrl == input.NotebookUrl ||
                    (this.NotebookUrl != null &&
                    this.NotebookUrl.Equals(input.NotebookUrl))
                ) && 
                (
                    this.ZeppelinId == input.ZeppelinId ||
                    (this.ZeppelinId != null &&
                    this.ZeppelinId.Equals(input.ZeppelinId))
                ) && 
                (
                    this.ModelHistoryId == input.ModelHistoryId ||
                    (this.ModelHistoryId != null &&
                    this.ModelHistoryId.Equals(input.ModelHistoryId))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BestModelId != null)
                    hashCode = hashCode * 59 + this.BestModelId.GetHashCode();
                if (this.InputDataUri != null)
                    hashCode = hashCode * 59 + this.InputDataUri.GetHashCode();
                if (this.ExperimentId != null)
                    hashCode = hashCode * 59 + this.ExperimentId.GetHashCode();
                if (this.ExperimentName != null)
                    hashCode = hashCode * 59 + this.ExperimentName.GetHashCode();
                if (this.ExperimentDescription != null)
                    hashCode = hashCode * 59 + this.ExperimentDescription.GetHashCode();
                if (this.NotebookJson != null)
                    hashCode = hashCode * 59 + this.NotebookJson.GetHashCode();
                if (this.NotebookUrl != null)
                    hashCode = hashCode * 59 + this.NotebookUrl.GetHashCode();
                if (this.ZeppelinId != null)
                    hashCode = hashCode * 59 + this.ZeppelinId.GetHashCode();
                if (this.ModelHistoryId != null)
                    hashCode = hashCode * 59 + this.ModelHistoryId.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
