/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Skymind.Skil.Client.Client.OpenAPIDateConverter;

namespace Skymind.Skil.Client.Model
{
    /// <summary>
    /// AccumulatedResults
    /// </summary>
    [DataContract]
    public partial class AccumulatedResults :  IEquatable<AccumulatedResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccumulatedResults" /> class.
        /// </summary>
        /// <param name="accumulatedDataWithLabels">accumulatedDataWithLabels.</param>
        /// <param name="accumulatedDataWithOutLabels">accumulatedDataWithOutLabels.</param>
        public AccumulatedResults(int? accumulatedDataWithLabels = default(int?), int? accumulatedDataWithOutLabels = default(int?))
        {
            this.AccumulatedDataWithLabels = accumulatedDataWithLabels;
            this.AccumulatedDataWithOutLabels = accumulatedDataWithOutLabels;
        }
        
        /// <summary>
        /// Gets or Sets AccumulatedDataWithLabels
        /// </summary>
        [DataMember(Name="accumulatedDataWithLabels", EmitDefaultValue=false)]
        public int? AccumulatedDataWithLabels { get; set; }

        /// <summary>
        /// Gets or Sets AccumulatedDataWithOutLabels
        /// </summary>
        [DataMember(Name="accumulatedDataWithOutLabels", EmitDefaultValue=false)]
        public int? AccumulatedDataWithOutLabels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccumulatedResults {\n");
            sb.Append("  AccumulatedDataWithLabels: ").Append(AccumulatedDataWithLabels).Append("\n");
            sb.Append("  AccumulatedDataWithOutLabels: ").Append(AccumulatedDataWithOutLabels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccumulatedResults);
        }

        /// <summary>
        /// Returns true if AccumulatedResults instances are equal
        /// </summary>
        /// <param name="input">Instance of AccumulatedResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccumulatedResults input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccumulatedDataWithLabels == input.AccumulatedDataWithLabels ||
                    (this.AccumulatedDataWithLabels != null &&
                    this.AccumulatedDataWithLabels.Equals(input.AccumulatedDataWithLabels))
                ) && 
                (
                    this.AccumulatedDataWithOutLabels == input.AccumulatedDataWithOutLabels ||
                    (this.AccumulatedDataWithOutLabels != null &&
                    this.AccumulatedDataWithOutLabels.Equals(input.AccumulatedDataWithOutLabels))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccumulatedDataWithLabels != null)
                    hashCode = hashCode * 59 + this.AccumulatedDataWithLabels.GetHashCode();
                if (this.AccumulatedDataWithOutLabels != null)
                    hashCode = hashCode * 59 + this.AccumulatedDataWithOutLabels.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
