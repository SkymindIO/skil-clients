/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Skymind.Skil.Client.Client.OpenAPIDateConverter;

namespace Skymind.Skil.Client.Model
{
    /// <summary>
    /// Token
    /// </summary>
    [DataContract]
    public partial class Token :  IEquatable<Token>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Token" /> class.
        /// </summary>
        /// <param name="tokenId">tokenId.</param>
        /// <param name="issued">issued.</param>
        /// <param name="expire">expire.</param>
        /// <param name="token">token.</param>
        /// <param name="userId">userId.</param>
        /// <param name="isRevoked">isRevoked.</param>
        public Token(long? tokenId = default(long?), long? issued = default(long?), long? expire = default(long?), string token = default(string), string userId = default(string), int? isRevoked = default(int?))
        {
            this.TokenId = tokenId;
            this.Issued = issued;
            this.Expire = expire;
            this._Token = token;
            this.UserId = userId;
            this.IsRevoked = isRevoked;
        }
        
        /// <summary>
        /// Gets or Sets TokenId
        /// </summary>
        [DataMember(Name="tokenId", EmitDefaultValue=false)]
        public long? TokenId { get; set; }

        /// <summary>
        /// Gets or Sets Issued
        /// </summary>
        [DataMember(Name="issued", EmitDefaultValue=false)]
        public long? Issued { get; set; }

        /// <summary>
        /// Gets or Sets Expire
        /// </summary>
        [DataMember(Name="expire", EmitDefaultValue=false)]
        public long? Expire { get; set; }

        /// <summary>
        /// Gets or Sets _Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string _Token { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets IsRevoked
        /// </summary>
        [DataMember(Name="isRevoked", EmitDefaultValue=false)]
        public int? IsRevoked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Token {\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  Issued: ").Append(Issued).Append("\n");
            sb.Append("  Expire: ").Append(Expire).Append("\n");
            sb.Append("  _Token: ").Append(_Token).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  IsRevoked: ").Append(IsRevoked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Token);
        }

        /// <summary>
        /// Returns true if Token instances are equal
        /// </summary>
        /// <param name="input">Instance of Token to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Token input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                ) && 
                (
                    this.Issued == input.Issued ||
                    (this.Issued != null &&
                    this.Issued.Equals(input.Issued))
                ) && 
                (
                    this.Expire == input.Expire ||
                    (this.Expire != null &&
                    this.Expire.Equals(input.Expire))
                ) && 
                (
                    this._Token == input._Token ||
                    (this._Token != null &&
                    this._Token.Equals(input._Token))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.IsRevoked == input.IsRevoked ||
                    (this.IsRevoked != null &&
                    this.IsRevoked.Equals(input.IsRevoked))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenId != null)
                    hashCode = hashCode * 59 + this.TokenId.GetHashCode();
                if (this.Issued != null)
                    hashCode = hashCode * 59 + this.Issued.GetHashCode();
                if (this.Expire != null)
                    hashCode = hashCode * 59 + this.Expire.GetHashCode();
                if (this._Token != null)
                    hashCode = hashCode * 59 + this._Token.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.IsRevoked != null)
                    hashCode = hashCode * 59 + this.IsRevoked.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
