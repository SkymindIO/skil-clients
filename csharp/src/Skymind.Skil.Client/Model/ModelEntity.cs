/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Skymind.Skil.Client.Client.SwaggerDateConverter;

namespace Skymind.Skil.Client.Model
{
    /// <summary>
    /// ModelEntity
    /// </summary>
    [DataContract]
    public partial class ModelEntity :  IEquatable<ModelEntity>, IValidatableObject
    {
        /// <summary>
        /// Defines ModelType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModelTypeEnum
        {
            
            /// <summary>
            /// Enum Transform for value: transform
            /// </summary>
            [EnumMember(Value = "transform")]
            Transform = 1,
            
            /// <summary>
            /// Enum Model for value: model
            /// </summary>
            [EnumMember(Value = "model")]
            Model = 2,
            
            /// <summary>
            /// Enum Knn for value: knn
            /// </summary>
            [EnumMember(Value = "knn")]
            Knn = 3
        }

        /// <summary>
        /// Gets or Sets ModelType
        /// </summary>
        [DataMember(Name="modelType", EmitDefaultValue=false)]
        public ModelTypeEnum? ModelType { get; set; }
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Created for value: created
            /// </summary>
            [EnumMember(Value = "created")]
            Created = 1,
            
            /// <summary>
            /// Enum Starting for value: starting
            /// </summary>
            [EnumMember(Value = "starting")]
            Starting = 2,
            
            /// <summary>
            /// Enum Started for value: started
            /// </summary>
            [EnumMember(Value = "started")]
            Started = 3,
            
            /// <summary>
            /// Enum Stopping for value: stopping
            /// </summary>
            [EnumMember(Value = "stopping")]
            Stopping = 4,
            
            /// <summary>
            /// Enum Stopped for value: stopped
            /// </summary>
            [EnumMember(Value = "stopped")]
            Stopped = 5,
            
            /// <summary>
            /// Enum Unhealthy for value: unhealthy
            /// </summary>
            [EnumMember(Value = "unhealthy")]
            Unhealthy = 6,
            
            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 7
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Defines ModelState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModelStateEnum
        {
            
            /// <summary>
            /// Enum CREATED for value: CREATED
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATED = 1,
            
            /// <summary>
            /// Enum STARTING for value: STARTING
            /// </summary>
            [EnumMember(Value = "STARTING")]
            STARTING = 2,
            
            /// <summary>
            /// Enum STARTED for value: STARTED
            /// </summary>
            [EnumMember(Value = "STARTED")]
            STARTED = 3,
            
            /// <summary>
            /// Enum STOPPING for value: STOPPING
            /// </summary>
            [EnumMember(Value = "STOPPING")]
            STOPPING = 4,
            
            /// <summary>
            /// Enum STOPPED for value: STOPPED
            /// </summary>
            [EnumMember(Value = "STOPPED")]
            STOPPED = 5,
            
            /// <summary>
            /// Enum UNHEALTHY for value: UNHEALTHY
            /// </summary>
            [EnumMember(Value = "UNHEALTHY")]
            UNHEALTHY = 6,
            
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 7
        }

        /// <summary>
        /// Gets or Sets ModelState
        /// </summary>
        [DataMember(Name="modelState", EmitDefaultValue=false)]
        public ModelStateEnum? ModelState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelEntity" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="created">created.</param>
        /// <param name="updated">updated.</param>
        /// <param name="modelType">modelType.</param>
        /// <param name="deploymentId">deploymentId.</param>
        /// <param name="name">name.</param>
        /// <param name="scale">scale.</param>
        /// <param name="fileLocation">fileLocation.</param>
        /// <param name="state">state.</param>
        /// <param name="jvmArgs">jvmArgs.</param>
        /// <param name="subType">subType.</param>
        /// <param name="labelsFileLocation">labelsFileLocation.</param>
        /// <param name="extraArgs">extraArgs.</param>
        /// <param name="launchPolicy">launchPolicy.</param>
        /// <param name="modelState">modelState.</param>
        public ModelEntity(long? id = default(long?), long? created = default(long?), long? updated = default(long?), ModelTypeEnum? modelType = default(ModelTypeEnum?), long? deploymentId = default(long?), string name = default(string), decimal? scale = default(decimal?), string fileLocation = default(string), StateEnum? state = default(StateEnum?), string jvmArgs = default(string), string subType = default(string), string labelsFileLocation = default(string), string extraArgs = default(string), Object launchPolicy = default(Object), ModelStateEnum? modelState = default(ModelStateEnum?))
        {
            this.Id = id;
            this.Created = created;
            this.Updated = updated;
            this.ModelType = modelType;
            this.DeploymentId = deploymentId;
            this.Name = name;
            this.Scale = scale;
            this.FileLocation = fileLocation;
            this.State = state;
            this.JvmArgs = jvmArgs;
            this.SubType = subType;
            this.LabelsFileLocation = labelsFileLocation;
            this.ExtraArgs = extraArgs;
            this.LaunchPolicy = launchPolicy;
            this.ModelState = modelState;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public long? Created { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public long? Updated { get; set; }


        /// <summary>
        /// Gets or Sets DeploymentId
        /// </summary>
        [DataMember(Name="deploymentId", EmitDefaultValue=false)]
        public long? DeploymentId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Scale
        /// </summary>
        [DataMember(Name="scale", EmitDefaultValue=false)]
        public decimal? Scale { get; set; }

        /// <summary>
        /// Gets or Sets FileLocation
        /// </summary>
        [DataMember(Name="fileLocation", EmitDefaultValue=false)]
        public string FileLocation { get; set; }


        /// <summary>
        /// Gets or Sets JvmArgs
        /// </summary>
        [DataMember(Name="jvmArgs", EmitDefaultValue=false)]
        public string JvmArgs { get; set; }

        /// <summary>
        /// Gets or Sets SubType
        /// </summary>
        [DataMember(Name="subType", EmitDefaultValue=false)]
        public string SubType { get; set; }

        /// <summary>
        /// Gets or Sets LabelsFileLocation
        /// </summary>
        [DataMember(Name="labelsFileLocation", EmitDefaultValue=false)]
        public string LabelsFileLocation { get; set; }

        /// <summary>
        /// Gets or Sets ExtraArgs
        /// </summary>
        [DataMember(Name="extraArgs", EmitDefaultValue=false)]
        public string ExtraArgs { get; set; }

        /// <summary>
        /// Gets or Sets LaunchPolicy
        /// </summary>
        [DataMember(Name="launchPolicy", EmitDefaultValue=false)]
        public Object LaunchPolicy { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelEntity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  ModelType: ").Append(ModelType).Append("\n");
            sb.Append("  DeploymentId: ").Append(DeploymentId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  FileLocation: ").Append(FileLocation).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  JvmArgs: ").Append(JvmArgs).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  LabelsFileLocation: ").Append(LabelsFileLocation).Append("\n");
            sb.Append("  ExtraArgs: ").Append(ExtraArgs).Append("\n");
            sb.Append("  LaunchPolicy: ").Append(LaunchPolicy).Append("\n");
            sb.Append("  ModelState: ").Append(ModelState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelEntity);
        }

        /// <summary>
        /// Returns true if ModelEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.ModelType == input.ModelType ||
                    (this.ModelType != null &&
                    this.ModelType.Equals(input.ModelType))
                ) && 
                (
                    this.DeploymentId == input.DeploymentId ||
                    (this.DeploymentId != null &&
                    this.DeploymentId.Equals(input.DeploymentId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Scale == input.Scale ||
                    (this.Scale != null &&
                    this.Scale.Equals(input.Scale))
                ) && 
                (
                    this.FileLocation == input.FileLocation ||
                    (this.FileLocation != null &&
                    this.FileLocation.Equals(input.FileLocation))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.JvmArgs == input.JvmArgs ||
                    (this.JvmArgs != null &&
                    this.JvmArgs.Equals(input.JvmArgs))
                ) && 
                (
                    this.SubType == input.SubType ||
                    (this.SubType != null &&
                    this.SubType.Equals(input.SubType))
                ) && 
                (
                    this.LabelsFileLocation == input.LabelsFileLocation ||
                    (this.LabelsFileLocation != null &&
                    this.LabelsFileLocation.Equals(input.LabelsFileLocation))
                ) && 
                (
                    this.ExtraArgs == input.ExtraArgs ||
                    (this.ExtraArgs != null &&
                    this.ExtraArgs.Equals(input.ExtraArgs))
                ) && 
                (
                    this.LaunchPolicy == input.LaunchPolicy ||
                    (this.LaunchPolicy != null &&
                    this.LaunchPolicy.Equals(input.LaunchPolicy))
                ) && 
                (
                    this.ModelState == input.ModelState ||
                    (this.ModelState != null &&
                    this.ModelState.Equals(input.ModelState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.ModelType != null)
                    hashCode = hashCode * 59 + this.ModelType.GetHashCode();
                if (this.DeploymentId != null)
                    hashCode = hashCode * 59 + this.DeploymentId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Scale != null)
                    hashCode = hashCode * 59 + this.Scale.GetHashCode();
                if (this.FileLocation != null)
                    hashCode = hashCode * 59 + this.FileLocation.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.JvmArgs != null)
                    hashCode = hashCode * 59 + this.JvmArgs.GetHashCode();
                if (this.SubType != null)
                    hashCode = hashCode * 59 + this.SubType.GetHashCode();
                if (this.LabelsFileLocation != null)
                    hashCode = hashCode * 59 + this.LabelsFileLocation.GetHashCode();
                if (this.ExtraArgs != null)
                    hashCode = hashCode * 59 + this.ExtraArgs.GetHashCode();
                if (this.LaunchPolicy != null)
                    hashCode = hashCode * 59 + this.LaunchPolicy.GetHashCode();
                if (this.ModelState != null)
                    hashCode = hashCode * 59 + this.ModelState.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
