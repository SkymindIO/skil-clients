/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Skymind.Skil.Client.Client;
using Skymind.Skil.Client.Model;

namespace Skymind.Skil.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Tells how many retraining examples have labels associated with them.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccumulatedResults</returns>
        AccumulatedResults AccumulatedResults ();

        /// <summary>
        /// Tells how many retraining examples have labels associated with them.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccumulatedResults</returns>
        ApiResponse<AccumulatedResults> AccumulatedResultsWithHttpInfo ();
        /// <summary>
        /// Adds credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>ResourceCredentials</returns>
        ResourceCredentials AddCredentials (AddCredentialsRequest addCredentialsRequest);

        /// <summary>
        /// Adds credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>ApiResponse of ResourceCredentials</returns>
        ApiResponse<ResourceCredentials> AddCredentialsWithHttpInfo (AddCredentialsRequest addCredentialsRequest);
        /// <summary>
        /// Adds an evaluation result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>EvaluationResultsEntity</returns>
        EvaluationResultsEntity AddEvaluationResult (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity);

        /// <summary>
        /// Adds an evaluation result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>ApiResponse of EvaluationResultsEntity</returns>
        ApiResponse<EvaluationResultsEntity> AddEvaluationResultWithHttpInfo (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity);
        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>AddExampleRequest</returns>
        AddExampleRequest AddExampleForBatch (string modelHistoryServerId, AddExampleRequest addExampleRequest);

        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>ApiResponse of AddExampleRequest</returns>
        ApiResponse<AddExampleRequest> AddExampleForBatchWithHttpInfo (string modelHistoryServerId, AddExampleRequest addExampleRequest);
        /// <summary>
        /// Adds an example to a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>ExampleEntity</returns>
        ExampleEntity AddExampleToMinibatch (string modelHistoryServerId, ExampleEntity exampleEntity);

        /// <summary>
        /// Adds an example to a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>ApiResponse of ExampleEntity</returns>
        ApiResponse<ExampleEntity> AddExampleToMinibatchWithHttpInfo (string modelHistoryServerId, ExampleEntity exampleEntity);
        /// <summary>
        /// Add an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>ExperimentEntity</returns>
        ExperimentEntity AddExperiment (string modelHistoryServerId, ExperimentEntity experimentEntity);

        /// <summary>
        /// Add an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        ApiResponse<ExperimentEntity> AddExperimentWithHttpInfo (string modelHistoryServerId, ExperimentEntity experimentEntity);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="type">The type of the labels array.</param>
        /// <param name="file">The labels file to upload. (optional)</param>
        /// <returns>FeedbackResponse</returns>
        FeedbackResponse AddFeedbackBinary (string id, string type, System.IO.Stream file = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="type">The type of the labels array.</param>
        /// <param name="file">The labels file to upload. (optional)</param>
        /// <returns>ApiResponse of FeedbackResponse</returns>
        ApiResponse<FeedbackResponse> AddFeedbackBinaryWithHttpInfo (string id, string type, System.IO.Stream file = null);
        /// <summary>
        /// Gets the retraining feedback for the given batch ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="labels">The associated labels (one-hot vectors) with the batch for retraining. (optional)</param>
        /// <returns>FeedbackResponse</returns>
        FeedbackResponse AddFeedbackJson (string id, List<List<double?>> labels = null);

        /// <summary>
        /// Gets the retraining feedback for the given batch ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="labels">The associated labels (one-hot vectors) with the batch for retraining. (optional)</param>
        /// <returns>ApiResponse of FeedbackResponse</returns>
        ApiResponse<FeedbackResponse> AddFeedbackJsonWithHttpInfo (string id, List<List<double?>> labels = null);
        /// <summary>
        /// Adds a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>MinibatchEntity</returns>
        MinibatchEntity AddMinibatch (string modelHistoryServerId, MinibatchEntity minibatchEntity);

        /// <summary>
        /// Adds a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>ApiResponse of MinibatchEntity</returns>
        ApiResponse<MinibatchEntity> AddMinibatchWithHttpInfo (string modelHistoryServerId, MinibatchEntity minibatchEntity);
        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>ModelFeedBackRequest</returns>
        ModelFeedBackRequest AddModelFeedback (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest);

        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>ApiResponse of ModelFeedBackRequest</returns>
        ApiResponse<ModelFeedBackRequest> AddModelFeedbackWithHttpInfo (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest);
        /// <summary>
        /// Add a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>ModelHistoryEntity</returns>
        ModelHistoryEntity AddModelHistory (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest);

        /// <summary>
        /// Add a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        ApiResponse<ModelHistoryEntity> AddModelHistoryWithHttpInfo (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest);
        /// <summary>
        /// Adds a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>ModelInstanceEntity</returns>
        ModelInstanceEntity AddModelInstance (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity);

        /// <summary>
        /// Adds a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>ApiResponse of ModelInstanceEntity</returns>
        ApiResponse<ModelInstanceEntity> AddModelInstanceWithHttpInfo (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity);
        /// <summary>
        /// Adds a resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>Object</returns>
        Object AddResource (AddResourceRequest addResourceRequest);

        /// <summary>
        /// Adds a resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddResourceWithHttpInfo (AddResourceRequest addResourceRequest);
        /// <summary>
        /// Adds a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>ResourceGroup</returns>
        ResourceGroup AddResourceGroup (string groupName);

        /// <summary>
        /// Adds a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>ApiResponse of ResourceGroup</returns>
        ApiResponse<ResourceGroup> AddResourceGroupWithHttpInfo (string groupName);
        /// <summary>
        /// Adds a resource to a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns></returns>
        void AddResourceToGroup (long? resourceGroupId, long? resourceId);

        /// <summary>
        /// Adds a resource to a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddResourceToGroupWithHttpInfo (long? resourceGroupId, long? resourceId);
        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>EvaluationResultsEntity</returns>
        EvaluationResultsEntity AggregateModelResults (string modelHistoryServerId, AggregatePrediction aggregatePrediction);

        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>ApiResponse of EvaluationResultsEntity</returns>
        ApiResponse<EvaluationResultsEntity> AggregateModelResultsWithHttpInfo (string modelHistoryServerId, AggregatePrediction aggregatePrediction);
        /// <summary>
        /// Change user&#39;s password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="changePasswordRequest">Password details.</param>
        /// <returns>User</returns>
        User ChangeUserPassword (string userId, ChangePasswordRequest changePasswordRequest);

        /// <summary>
        /// Change user&#39;s password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="changePasswordRequest">Password details.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> ChangeUserPasswordWithHttpInfo (string userId, ChangePasswordRequest changePasswordRequest);
        /// <summary>
        /// Use the deployed model to classify the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ClassificationResult</returns>
        ClassificationResult Classify (string deploymentName, string versionName, string modelName, Prediction body);

        /// <summary>
        /// Use the deployed model to classify the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ApiResponse of ClassificationResult</returns>
        ApiResponse<ClassificationResult> ClassifyWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body);
        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Base64NDArrayBody</returns>
        Base64NDArrayBody Classifyarray (string deploymentName, string versionName, string modelName, Prediction body);

        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        ApiResponse<Base64NDArrayBody> ClassifyarrayWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body);
        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>ClassificationResult</returns>
        ClassificationResult Classifyimage (string deploymentName, string versionName, string modelName, System.IO.Stream image = null);

        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>ApiResponse of ClassificationResult</returns>
        ApiResponse<ClassificationResult> ClassifyimageWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream image = null);
        /// <summary>
        /// Clears the accumulated data for retraining.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FeedbackResponse</returns>
        FeedbackResponse ClearState ();

        /// <summary>
        /// Clears the accumulated data for retraining.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FeedbackResponse</returns>
        ApiResponse<FeedbackResponse> ClearStateWithHttpInfo ();
        /// <summary>
        /// Create a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>JobEntity</returns>
        JobEntity CreateJob (string jobIdOrType, CreateJobRequest createJobRequest);

        /// <summary>
        /// Create a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>ApiResponse of JobEntity</returns>
        ApiResponse<JobEntity> CreateJobWithHttpInfo (string jobIdOrType, CreateJobRequest createJobRequest);
        /// <summary>
        /// Creates model History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>ModelHistoryEntity</returns>
        ModelHistoryEntity CreateModelHistory (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity);

        /// <summary>
        /// Creates model History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        ApiResponse<ModelHistoryEntity> CreateModelHistoryWithHttpInfo (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity);
        /// <summary>
        /// Delete credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns></returns>
        void DeleteCredentialsById (long? credentialId);

        /// <summary>
        /// Delete credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCredentialsByIdWithHttpInfo (long? credentialId);
        /// <summary>
        /// Deletes an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 DeleteExperiment (string modelHistoryServerId, string experimentID);

        /// <summary>
        /// Deletes an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> DeleteExperimentWithHttpInfo (string modelHistoryServerId, string experimentID);
        /// <summary>
        /// Deletes a job given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns></returns>
        void DeleteJobById (long? jobIdOrType);

        /// <summary>
        /// Deletes a job given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobByIdWithHttpInfo (long? jobIdOrType);
        /// <summary>
        /// Delete a model by deployment and model id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 DeleteModel (string deploymentId, string modelId);

        /// <summary>
        /// Delete a model by deployment and model id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> DeleteModelWithHttpInfo (string deploymentId, string modelId);
        /// <summary>
        /// Deletes a model history / workspace, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 DeleteModelHistory (string modelHistoryServerId, string modelHistoryID);

        /// <summary>
        /// Deletes a model history / workspace, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> DeleteModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID);
        /// <summary>
        /// Deletes a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns></returns>
        void DeleteModelInstance (string modelHistoryServerId, string modelInstanceID);

        /// <summary>
        /// Deletes a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteModelInstanceWithHttpInfo (string modelHistoryServerId, string modelInstanceID);
        /// <summary>
        /// Delete the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Resource</returns>
        Resource DeleteResourceById (long? resourceId);

        /// <summary>
        /// Delete the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Resource</returns>
        ApiResponse<Resource> DeleteResourceByIdWithHttpInfo (long? resourceId);
        /// <summary>
        /// Removes a resource from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns></returns>
        void DeleteResourceFromGroup (long? resourceGroupId, long? resourceId);

        /// <summary>
        /// Removes a resource from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteResourceFromGroupWithHttpInfo (long? resourceGroupId, long? resourceId);
        /// <summary>
        /// Delete the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ResourceGroup</returns>
        ResourceGroup DeleteResourceGroupById (long? resourceGroupId);

        /// <summary>
        /// Delete the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ApiResponse of ResourceGroup</returns>
        ApiResponse<ResourceGroup> DeleteResourceGroupByIdWithHttpInfo (long? resourceGroupId);
        /// <summary>
        /// Deploy a model in a deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>ModelEntity</returns>
        ModelEntity DeployModel (string deploymentId, ImportModelRequest body);

        /// <summary>
        /// Deploy a model in a deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        ApiResponse<ModelEntity> DeployModelWithHttpInfo (string deploymentId, ImportModelRequest body);
        /// <summary>
        /// Create a new deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>DeploymentResponse</returns>
        DeploymentResponse DeploymentCreate (CreateDeploymentRequest body);

        /// <summary>
        /// Create a new deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        ApiResponse<DeploymentResponse> DeploymentCreateWithHttpInfo (CreateDeploymentRequest body);
        /// <summary>
        /// Delete a deployment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 DeploymentDelete (string deploymentId);

        /// <summary>
        /// Delete a deployment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> DeploymentDeleteWithHttpInfo (string deploymentId);
        /// <summary>
        /// Get a deployment details by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>DeploymentResponse</returns>
        DeploymentResponse DeploymentGet (string deploymentId);

        /// <summary>
        /// Get a deployment details by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        ApiResponse<DeploymentResponse> DeploymentGetWithHttpInfo (string deploymentId);
        /// <summary>
        /// Get a list of deployments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DeploymentResponse&gt;</returns>
        List<DeploymentResponse> Deployments ();

        /// <summary>
        /// Get a list of deployments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DeploymentResponse&gt;</returns>
        ApiResponse<List<DeploymentResponse>> DeploymentsWithHttpInfo ();
        /// <summary>
        /// Detect the objects, given a (input) prediction request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="id">the GUID for mapping the results in the detections</param>
        /// <param name="needsPreprocessing">(true) if the image needs preprocessing</param>
        /// <param name="threshold">A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.</param>
        /// <param name="file">the image file to detect objects from</param>
        /// <returns>DetectionResult</returns>
        DetectionResult Detectobjects (string deploymentName, string versionName, string modelName, string id, bool? needsPreprocessing, float? threshold, System.IO.Stream file);

        /// <summary>
        /// Detect the objects, given a (input) prediction request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="id">the GUID for mapping the results in the detections</param>
        /// <param name="needsPreprocessing">(true) if the image needs preprocessing</param>
        /// <param name="threshold">A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.</param>
        /// <param name="file">the image file to detect objects from</param>
        /// <returns>ApiResponse of DetectionResult</returns>
        ApiResponse<DetectionResult> DetectobjectsWithHttpInfo (string deploymentName, string versionName, string modelName, string id, bool? needsPreprocessing, float? threshold, System.IO.Stream file);
        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns></returns>
        void DownloadJobOutputFile (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest);

        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadJobOutputFileWithHttpInfo (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest);
        /// <summary>
        /// Generate new auth token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenGenerateRequest">Auth token details.</param>
        /// <returns>Token</returns>
        Token GenerateAuthToken (TokenGenerateRequest tokenGenerateRequest);

        /// <summary>
        /// Generate new auth token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenGenerateRequest">Auth token details.</param>
        /// <returns>ApiResponse of Token</returns>
        ApiResponse<Token> GenerateAuthTokenWithHttpInfo (TokenGenerateRequest tokenGenerateRequest);
        /// <summary>
        /// Get a list of all available jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;JobEntity&gt;</returns>
        List<JobEntity> GetAllJobs ();

        /// <summary>
        /// Get a list of all available jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;JobEntity&gt;</returns>
        ApiResponse<List<JobEntity>> GetAllJobsWithHttpInfo ();
        /// <summary>
        /// Get the memory mapped array based on the array type.
        /// </summary>
        /// <remarks>
        /// The array is specified through a file path, in the configuration object, during model server deployment.
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">The format in which the memory mapped array is returned.</param>
        /// <returns></returns>
        void GetArray (string accept, string arrayType);

        /// <summary>
        /// Get the memory mapped array based on the array type.
        /// </summary>
        /// <remarks>
        /// The array is specified through a file path, in the configuration object, during model server deployment.
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">The format in which the memory mapped array is returned.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetArrayWithHttpInfo (string accept, string arrayType);
        /// <summary>
        /// Get the memory mapped array indices based on the array type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="input">Input indices array (optional)</param>
        /// <returns></returns>
        void GetArrayIndices (string contentType, string accept, string arrayType, string input = null);

        /// <summary>
        /// Get the memory mapped array indices based on the array type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="input">Input indices array (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetArrayIndicesWithHttpInfo (string contentType, string accept, string arrayType, string input = null);
        /// <summary>
        /// Get the memory mapped array within a range based on the array type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns></returns>
        void GetArrayRange (string accept, string arrayType, int? from, int? to);

        /// <summary>
        /// Get the memory mapped array within a range based on the array type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetArrayRangeWithHttpInfo (string accept, string arrayType, int? from, int? to);
        /// <summary>
        /// Get auth policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthPolicy</returns>
        AuthPolicy GetAuthPolicy ();

        /// <summary>
        /// Get auth policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthPolicy</returns>
        ApiResponse<AuthPolicy> GetAuthPolicyWithHttpInfo ();
        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>ModelInstanceEntity</returns>
        ModelInstanceEntity GetBestModelAmongModelIds (string modelHistoryServerId, BestModel bestModel);

        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>ApiResponse of ModelInstanceEntity</returns>
        ApiResponse<ModelInstanceEntity> GetBestModelAmongModelIdsWithHttpInfo (string modelHistoryServerId, BestModel bestModel);
        /// <summary>
        /// Get credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>ResourceCredentials</returns>
        ResourceCredentials GetCredentialsById (long? credentialId);

        /// <summary>
        /// Get credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>ApiResponse of ResourceCredentials</returns>
        ApiResponse<ResourceCredentials> GetCredentialsByIdWithHttpInfo (long? credentialId);
        /// <summary>
        /// Returns the current model being used for retraining.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetCurrentModel ();

        /// <summary>
        /// Returns the current model being used for retraining.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCurrentModelWithHttpInfo ();
        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>List&lt;EvaluationResultsEntity&gt;</returns>
        List<EvaluationResultsEntity> GetEvaluationForModelID (string modelHistoryServerId, string modelInstanceID);

        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>ApiResponse of List&lt;EvaluationResultsEntity&gt;</returns>
        ApiResponse<List<EvaluationResultsEntity>> GetEvaluationForModelIDWithHttpInfo (string modelHistoryServerId, string modelInstanceID);
        /// <summary>
        /// Gets all the examples for a minibatch ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>List&lt;ExampleEntity&gt;</returns>
        List<ExampleEntity> GetExamplesForMinibatch (string modelHistoryServerId, string minibatchId);

        /// <summary>
        /// Gets all the examples for a minibatch ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>ApiResponse of List&lt;ExampleEntity&gt;</returns>
        ApiResponse<List<ExampleEntity>> GetExamplesForMinibatchWithHttpInfo (string modelHistoryServerId, string minibatchId);
        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>ExperimentEntity</returns>
        ExperimentEntity GetExperiment (string modelHistoryServerId, string experimentID);

        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        ApiResponse<ExperimentEntity> GetExperimentWithHttpInfo (string modelHistoryServerId, string experimentID);
        /// <summary>
        /// Obtain all experiments for a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>List&lt;ExperimentEntity&gt;</returns>
        List<ExperimentEntity> GetExperimentsForModelHistory (string modelHistoryServerId, string modelHistoryID);

        /// <summary>
        /// Obtain all experiments for a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>ApiResponse of List&lt;ExperimentEntity&gt;</returns>
        ApiResponse<List<ExperimentEntity>> GetExperimentsForModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID);
        /// <summary>
        /// Get a job by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>JobEntity</returns>
        JobEntity GetJobById (long? jobIdOrType);

        /// <summary>
        /// Get a job by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>ApiResponse of JobEntity</returns>
        ApiResponse<JobEntity> GetJobByIdWithHttpInfo (long? jobIdOrType);
        /// <summary>
        /// Get the last evaluation specifications from the current model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EvaluationResultsEntity</returns>
        EvaluationResultsEntity GetLastEvaluation ();

        /// <summary>
        /// Get the last evaluation specifications from the current model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EvaluationResultsEntity</returns>
        ApiResponse<EvaluationResultsEntity> GetLastEvaluationWithHttpInfo ();
        /// <summary>
        /// Gets a minibatch for the model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>MinibatchEntity</returns>
        MinibatchEntity GetMinibatch (string modelHistoryServerId, string minibatchId);

        /// <summary>
        /// Gets a minibatch for the model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>ApiResponse of MinibatchEntity</returns>
        ApiResponse<MinibatchEntity> GetMinibatchWithHttpInfo (string modelHistoryServerId, string minibatchId);
        /// <summary>
        /// Get model details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>ModelEntity</returns>
        ModelEntity GetModelDetails (string deploymentId, string modelId);

        /// <summary>
        /// Get model details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        ApiResponse<ModelEntity> GetModelDetailsWithHttpInfo (string deploymentId, string modelId);
        /// <summary>
        /// Gets a model history, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>ModelHistoryEntity</returns>
        ModelHistoryEntity GetModelHistory (string modelHistoryServerId, string modelHistoryID);

        /// <summary>
        /// Gets a model history, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        ApiResponse<ModelHistoryEntity> GetModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID);
        /// <summary>
        /// Gets a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>ModelInstanceEntity</returns>
        ModelInstanceEntity GetModelInstance (string modelHistoryServerId, string modelInstanceID);

        /// <summary>
        /// Gets a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>ApiResponse of ModelInstanceEntity</returns>
        ApiResponse<ModelInstanceEntity> GetModelInstanceWithHttpInfo (string modelHistoryServerId, string modelInstanceID);
        /// <summary>
        /// Obtain a list of all the models for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>List&lt;ModelInstanceEntity&gt;</returns>
        List<ModelInstanceEntity> GetModelsForExperiment (string modelHistoryServerId, string experimentID);

        /// <summary>
        /// Obtain a list of all the models for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>ApiResponse of List&lt;ModelInstanceEntity&gt;</returns>
        ApiResponse<List<ModelInstanceEntity>> GetModelsForExperimentWithHttpInfo (string modelHistoryServerId, string experimentID);
        /// <summary>
        /// Get the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Resource</returns>
        Resource GetResourceById (long? resourceId);

        /// <summary>
        /// Get the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Resource</returns>
        ApiResponse<Resource> GetResourceByIdWithHttpInfo (long? resourceId);
        /// <summary>
        /// Get all the resources with the specified resource subtype
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>List&lt;Resource&gt;</returns>
        List<Resource> GetResourceBySubType (string resourceSubType);

        /// <summary>
        /// Get all the resources with the specified resource subtype
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        ApiResponse<List<Resource>> GetResourceBySubTypeWithHttpInfo (string resourceSubType);
        /// <summary>
        /// Get all the resources with the specified resource type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>List&lt;Resource&gt;</returns>
        List<Resource> GetResourceByType (string resourceType);

        /// <summary>
        /// Get all the resources with the specified resource type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        ApiResponse<List<Resource>> GetResourceByTypeWithHttpInfo (string resourceType);
        /// <summary>
        /// Get the resource details with the specified resource ID
        /// </summary>
        /// <remarks>
        /// Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Object</returns>
        Object GetResourceDetailsById (long? resourceId);

        /// <summary>
        /// Get the resource details with the specified resource ID
        /// </summary>
        /// <remarks>
        /// Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetResourceDetailsByIdWithHttpInfo (long? resourceId);
        /// <summary>
        /// Get the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ResourceGroup</returns>
        ResourceGroup GetResourceGroupById (long? resourceGroupId);

        /// <summary>
        /// Get the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ApiResponse of ResourceGroup</returns>
        ApiResponse<ResourceGroup> GetResourceGroupByIdWithHttpInfo (long? resourceGroupId);
        /// <summary>
        /// Get a list of all the resource groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResourceGroup&gt;</returns>
        List<ResourceGroup> GetResourceGroups ();

        /// <summary>
        /// Get a list of all the resource groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResourceGroup&gt;</returns>
        ApiResponse<List<ResourceGroup>> GetResourceGroupsWithHttpInfo ();
        /// <summary>
        /// A list of all known/registered resources, of all types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Resource&gt;</returns>
        List<Resource> GetResources ();

        /// <summary>
        /// A list of all known/registered resources, of all types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        ApiResponse<List<Resource>> GetResourcesWithHttpInfo ();
        /// <summary>
        /// Get all resources from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>List&lt;Resource&gt;</returns>
        List<Resource> GetResourcesFromGroup (long? resourceGroupId);

        /// <summary>
        /// Get all resources from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        ApiResponse<List<Resource>> GetResourcesFromGroupWithHttpInfo (long? resourceGroupId);
        /// <summary>
        /// Get all roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Role&gt;</returns>
        List<Role> GetRoles ();

        /// <summary>
        /// Get all roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Role&gt;</returns>
        ApiResponse<List<Role>> GetRolesWithHttpInfo ();
        /// <summary>
        /// Get a user by user ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <returns>User</returns>
        User GetUser (string userId);

        /// <summary>
        /// Get a user by user ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo (string userId);
        /// <summary>
        /// Get auth tokens for a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="onlyValid">True if you only want the valid tokens. (optional)</param>
        /// <returns>List&lt;Token&gt;</returns>
        List<Token> GetUserAuthTokens (string userId, bool? onlyValid = null);

        /// <summary>
        /// Get auth tokens for a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="onlyValid">True if you only want the valid tokens. (optional)</param>
        /// <returns>ApiResponse of List&lt;Token&gt;</returns>
        ApiResponse<List<Token>> GetUserAuthTokensWithHttpInfo (string userId, bool? onlyValid = null);
        /// <summary>
        /// Get all users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetUsers ();

        /// <summary>
        /// Get all users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetUsersWithHttpInfo ();
        /// <summary>
        /// Get the retraining status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RetrainingStatus</returns>
        RetrainingStatus IsTraining ();

        /// <summary>
        /// Get the retraining status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RetrainingStatus</returns>
        ApiResponse<RetrainingStatus> IsTrainingWithHttpInfo ();
        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>JsonArrayResponse</returns>
        JsonArrayResponse Jsonarray (string deploymentName, string versionName, string modelName, Prediction body);

        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ApiResponse of JsonArrayResponse</returns>
        ApiResponse<JsonArrayResponse> JsonarrayWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body);
        /// <summary>
        /// Runs knn on the given index with the given k
        /// </summary>
        /// <remarks>
        /// Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body"></param>
        /// <returns>NearestNeighborsResults</returns>
        NearestNeighborsResults Knn (string deploymentName, string versionName, string knnName, NearestNeighborRequest body);

        /// <summary>
        /// Runs knn on the given index with the given k
        /// </summary>
        /// <remarks>
        /// Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of NearestNeighborsResults</returns>
        ApiResponse<NearestNeighborsResults> KnnWithHttpInfo (string deploymentName, string versionName, string knnName, NearestNeighborRequest body);
        /// <summary>
        /// Run a k nearest neighbors search on a NEW data point
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>NearestNeighborsResults</returns>
        NearestNeighborsResults Knnnew (string deploymentName, string versionName, string knnName, Base64NDArrayBodyKNN body);

        /// <summary>
        /// Run a k nearest neighbors search on a NEW data point
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ApiResponse of NearestNeighborsResults</returns>
        ApiResponse<NearestNeighborsResults> KnnnewWithHttpInfo (string deploymentName, string versionName, string knnName, Base64NDArrayBodyKNN body);
        /// <summary>
        /// List all of the experiments in every model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>List&lt;ExperimentEntity&gt;</returns>
        List<ExperimentEntity> ListAllExperiments (string modelHistoryServerId);

        /// <summary>
        /// List all of the experiments in every model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>ApiResponse of List&lt;ExperimentEntity&gt;</returns>
        ApiResponse<List<ExperimentEntity>> ListAllExperimentsWithHttpInfo (string modelHistoryServerId);
        /// <summary>
        /// Get logs file path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>string</returns>
        string Logfilepath (string deploymentName, string versionName, string modelName);

        /// <summary>
        /// Get logs file path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> LogfilepathWithHttpInfo (string deploymentName, string versionName, string modelName);
        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login credentials.</param>
        /// <returns>LoginResponse</returns>
        LoginResponse Login (LoginRequest loginRequest);

        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login credentials.</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        ApiResponse<LoginResponse> LoginWithHttpInfo (LoginRequest loginRequest);
        /// <summary>
        /// Get logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="logRequest">The log object</param>
        /// <returns>LogBatch</returns>
        LogBatch Logs (string deploymentName, string versionName, string modelName, LogRequest logRequest);

        /// <summary>
        /// Get logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="logRequest">The log object</param>
        /// <returns>ApiResponse of LogBatch</returns>
        ApiResponse<LogBatch> LogsWithHttpInfo (string deploymentName, string versionName, string modelName, LogRequest logRequest);
        /// <summary>
        /// this method can be used to get the meta data for the current model which set to the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Object</returns>
        Object MetaGet (string deploymentName, string versionName, string modelName);

        /// <summary>
        /// this method can be used to get the meta data for the current model which set to the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MetaGetWithHttpInfo (string deploymentName, string versionName, string modelName);
        /// <summary>
        /// This method can be used to set meta data for the current model which is set to the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">the meta data object</param>
        /// <returns>Object</returns>
        Object MetaPost (string contentType, string deploymentName, string versionName, string modelName, string body);

        /// <summary>
        /// This method can be used to set meta data for the current model which is set to the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">the meta data object</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MetaPostWithHttpInfo (string contentType, string deploymentName, string versionName, string modelName, string body);
        /// <summary>
        /// Modify the state (start/stop) of a deployed model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>ModelEntity</returns>
        ModelEntity ModelStateChange (string deploymentId, string modelId, SetState body);

        /// <summary>
        /// Modify the state (start/stop) of a deployed model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        ApiResponse<ModelEntity> ModelStateChangeWithHttpInfo (string deploymentId, string modelId, SetState body);
        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>List&lt;ModelEntity&gt;</returns>
        List<ModelEntity> Models (string deploymentId);

        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>ApiResponse of List&lt;ModelEntity&gt;</returns>
        ApiResponse<List<ModelEntity>> ModelsWithHttpInfo (string deploymentId);
        /// <summary>
        /// Set the model to be served
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to upload (.pb file) (optional)</param>
        /// <returns>ModelStatus</returns>
        ModelStatus Modelset (string deploymentName, string versionName, string modelName, System.IO.Stream file = null);

        /// <summary>
        /// Set the model to be served
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to upload (.pb file) (optional)</param>
        /// <returns>ApiResponse of ModelStatus</returns>
        ApiResponse<ModelStatus> ModelsetWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream file = null);
        /// <summary>
        /// Update the model to be served
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to update with (.pb file)</param>
        /// <returns>ModelStatus</returns>
        ModelStatus Modelupdate (string deploymentName, string versionName, string modelName, System.IO.Stream file);

        /// <summary>
        /// Update the model to be served
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to update with (.pb file)</param>
        /// <returns>ApiResponse of ModelStatus</returns>
        ApiResponse<ModelStatus> ModelupdateWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream file);
        /// <summary>
        /// Represents all of the labels for a given classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>MultiClassClassificationResult</returns>
        MultiClassClassificationResult Multiclassify (string deploymentName, string versionName, string modelName, Prediction body);

        /// <summary>
        /// Represents all of the labels for a given classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ApiResponse of MultiClassClassificationResult</returns>
        ApiResponse<MultiClassClassificationResult> MulticlassifyWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body);
        /// <summary>
        /// Get the output from the network, based on the given INDArray[] input
        /// </summary>
        /// <remarks>
        /// Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The multiple input arrays with mask inputs to run inferences on</param>
        /// <returns>MultiPredictResponse</returns>
        MultiPredictResponse Multipredict (string deploymentName, string versionName, string modelName, MultiPredictRequest body);

        /// <summary>
        /// Get the output from the network, based on the given INDArray[] input
        /// </summary>
        /// <remarks>
        /// Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The multiple input arrays with mask inputs to run inferences on</param>
        /// <returns>ApiResponse of MultiPredictResponse</returns>
        ApiResponse<MultiPredictResponse> MultipredictWithHttpInfo (string deploymentName, string versionName, string modelName, MultiPredictRequest body);
        /// <summary>
        /// Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
        /// </summary>
        /// <remarks>
        /// Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The image file to run the prediction on</param>
        /// <param name="id">The id of the request (could be self generated)</param>
        /// <param name="needsPreprocessing">Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)</param>
        /// <returns>MultiPredictResponse</returns>
        MultiPredictResponse Multipredictimage (string deploymentName, string versionName, string modelName, System.IO.Stream file, string id, bool? needsPreprocessing);

        /// <summary>
        /// Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
        /// </summary>
        /// <remarks>
        /// Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The image file to run the prediction on</param>
        /// <param name="id">The id of the request (could be self generated)</param>
        /// <param name="needsPreprocessing">Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)</param>
        /// <returns>ApiResponse of MultiPredictResponse</returns>
        ApiResponse<MultiPredictResponse> MultipredictimageWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream file, string id, bool? needsPreprocessing);
        /// <summary>
        /// Gets the number of retrained models written with retraining.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RevisionsWritten</returns>
        RevisionsWritten NumRevisions ();

        /// <summary>
        /// Gets the number of retrained models written with retraining.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RevisionsWritten</returns>
        ApiResponse<RevisionsWritten> NumRevisionsWithHttpInfo ();
        /// <summary>
        /// Run inference on the input array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Prediction</returns>
        Prediction Predict (string deploymentName, string versionName, string modelName, Prediction body);

        /// <summary>
        /// Run inference on the input array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ApiResponse of Prediction</returns>
        ApiResponse<Prediction> PredictWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body);
        /// <summary>
        /// Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">Operation to perform on the input data.</param>
        /// <param name="inputType">Type of the input data.</param>
        /// <param name="inputData"> (optional)</param>
        /// <returns></returns>
        void PredictError (string contentType, string operation, string inputType, string inputData = null);

        /// <summary>
        /// Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">Operation to perform on the input data.</param>
        /// <param name="inputType">Type of the input data.</param>
        /// <param name="inputData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PredictErrorWithHttpInfo (string contentType, string operation, string inputType, string inputData = null);
        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeFile">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on.</param>
        /// <returns></returns>
        void PredictV2File (string operation, string inputTypeFile, System.IO.Stream inputData);

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeFile">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PredictV2FileWithHttpInfo (string operation, string inputTypeFile, System.IO.Stream inputData);
        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeJson">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on. (Specify a JSON string here)</param>
        /// <returns></returns>
        void PredictV2Json (string contentType, string operation, string inputTypeJson, string inputData);

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeJson">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on. (Specify a JSON string here)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PredictV2JsonWithHttpInfo (string contentType, string operation, string inputTypeJson, string inputData);
        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Prediction</returns>
        Prediction Predictimage (string deploymentName, string versionName, string modelName, System.IO.Stream image = null);

        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>ApiResponse of Prediction</returns>
        ApiResponse<Prediction> PredictimageWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream image = null);
        /// <summary>
        /// Preprocesses the input and run inference on it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>Prediction</returns>
        Prediction Predictwithpreprocess (string deploymentName, string versionName, string modelName, List<string> body);

        /// <summary>
        /// Preprocesses the input and run inference on it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>ApiResponse of Prediction</returns>
        ApiResponse<Prediction> PredictwithpreprocessWithHttpInfo (string deploymentName, string versionName, string modelName, List<string> body);
        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>JsonArrayResponse</returns>
        JsonArrayResponse Predictwithpreprocessjson (string deploymentName, string versionName, string modelName, List<string> body);

        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>ApiResponse of JsonArrayResponse</returns>
        ApiResponse<JsonArrayResponse> PredictwithpreprocessjsonWithHttpInfo (string deploymentName, string versionName, string modelName, List<string> body);
        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputType">Input data type.</param>
        /// <param name="outputType">Binary output data type.</param>
        /// <param name="inputData">The input file to upload. (optional)</param>
        /// <returns></returns>
        void RawPredictBinary (string inputType, string outputType, System.IO.Stream inputData = null);

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputType">Input data type.</param>
        /// <param name="outputType">Binary output data type.</param>
        /// <param name="inputData">The input file to upload. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RawPredictBinaryWithHttpInfo (string inputType, string outputType, System.IO.Stream inputData = null);
        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>JobEntity</returns>
        JobEntity RefreshJobStatus (long? jobId);

        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>ApiResponse of JobEntity</returns>
        ApiResponse<JobEntity> RefreshJobStatusWithHttpInfo (long? jobId);
        /// <summary>
        /// Register a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>User</returns>
        User RegisterUser (User user);

        /// <summary>
        /// Register a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> RegisterUserWithHttpInfo (User user);
        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>ModelEntity</returns>
        ModelEntity ReimportModel (string deploymentId, string modelId, ImportModelRequest body);

        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        ApiResponse<ModelEntity> ReimportModelWithHttpInfo (string deploymentId, string modelId, ImportModelRequest body);
        /// <summary>
        /// Revoke a user token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token ID</param>
        /// <returns>Token</returns>
        Token RevokeUserToken (long? tokenId);

        /// <summary>
        /// Revoke a user token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token ID</param>
        /// <returns>ApiResponse of Token</returns>
        ApiResponse<Token> RevokeUserTokenWithHttpInfo (long? tokenId);
        /// <summary>
        /// Rollback to a previous revision of the model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Model revision index.</param>
        /// <returns>RollbackStatus</returns>
        RollbackStatus Rollback (int? index);

        /// <summary>
        /// Rollback to a previous revision of the model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Model revision index.</param>
        /// <returns>ApiResponse of RollbackStatus</returns>
        ApiResponse<RollbackStatus> RollbackWithHttpInfo (int? index);
        /// <summary>
        /// Start running an (already created) job on the remote resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>JobEntity</returns>
        JobEntity RunAJob (long? jobId);

        /// <summary>
        /// Start running an (already created) job on the remote resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>ApiResponse of JobEntity</returns>
        ApiResponse<JobEntity> RunAJobWithHttpInfo (long? jobId);
        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>BatchCSVRecord</returns>
        BatchCSVRecord TransformCsv (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null);

        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>ApiResponse of BatchCSVRecord</returns>
        ApiResponse<BatchCSVRecord> TransformCsvWithHttpInfo (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null);
        /// <summary>
        /// Takes a batch input arrays and transforms it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>Base64NDArrayBody</returns>
        Base64NDArrayBody Transformarray (string deploymentName, string versionName, string transformName, BatchRecord batchRecord = null);

        /// <summary>
        /// Takes a batch input arrays and transforms it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        ApiResponse<Base64NDArrayBody> TransformarrayWithHttpInfo (string deploymentName, string versionName, string transformName, BatchRecord batchRecord = null);
        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>Base64NDArrayBody</returns>
        Base64NDArrayBody Transformimage (string deploymentName, string versionName, string imageTransformName, List<System.IO.Stream> files);

        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        ApiResponse<Base64NDArrayBody> TransformimageWithHttpInfo (string deploymentName, string versionName, string imageTransformName, List<System.IO.Stream> files);
        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>SingleCSVRecord</returns>
        SingleCSVRecord TransformincrementalCsv (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null);

        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>ApiResponse of SingleCSVRecord</returns>
        ApiResponse<SingleCSVRecord> TransformincrementalCsvWithHttpInfo (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null);
        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>Base64NDArrayBody</returns>
        Base64NDArrayBody Transformincrementalarray (string deploymentName, string versionName, string transformName, SingleRecord singleRecord = null);

        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        ApiResponse<Base64NDArrayBody> TransformincrementalarrayWithHttpInfo (string deploymentName, string versionName, string transformName, SingleRecord singleRecord = null);
        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>Base64NDArrayBody</returns>
        Base64NDArrayBody Transformincrementalimage (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file);

        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        ApiResponse<Base64NDArrayBody> TransformincrementalimageWithHttpInfo (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file);
        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>Object</returns>
        Object TransformprocessGet (string deploymentName, string versionName, string transformName);

        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TransformprocessGetWithHttpInfo (string deploymentName, string versionName, string transformName);
        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;.</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (Specify a JSON string here). (optional)</param>
        /// <returns>Object</returns>
        Object TransformprocessPost (string contentType, string deploymentName, string versionName, string transformName, string transformProcess = null);

        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;.</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (Specify a JSON string here). (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TransformprocessPostWithHttpInfo (string contentType, string deploymentName, string versionName, string transformName, string transformProcess = null);
        /// <summary>
        /// Update auth policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authPolicy">Auth policy object</param>
        /// <returns>AuthPolicy</returns>
        AuthPolicy UpdateAuthPolicy (AuthPolicy authPolicy);

        /// <summary>
        /// Update auth policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authPolicy">Auth policy object</param>
        /// <returns>ApiResponse of AuthPolicy</returns>
        ApiResponse<AuthPolicy> UpdateAuthPolicyWithHttpInfo (AuthPolicy authPolicy);
        /// <summary>
        /// Updates the best model for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>ExperimentEntity</returns>
        ExperimentEntity UpdateBestModelForExperiment (string modelHistoryServerId, UpdateBestModel updateBestModel);

        /// <summary>
        /// Updates the best model for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        ApiResponse<ExperimentEntity> UpdateBestModelForExperimentWithHttpInfo (string modelHistoryServerId, UpdateBestModel updateBestModel);
        /// <summary>
        /// Updates an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>ExperimentEntity</returns>
        ExperimentEntity UpdateExperiment (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity);

        /// <summary>
        /// Updates an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        ApiResponse<ExperimentEntity> UpdateExperimentWithHttpInfo (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity);
        /// <summary>
        /// Update a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>ModelHistoryEntity</returns>
        ModelHistoryEntity UpdateModelHistory (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest);

        /// <summary>
        /// Update a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        ApiResponse<ModelHistoryEntity> UpdateModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>User</returns>
        User UpdateUser (User user);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UpdateUserWithHttpInfo (User user);
        /// <summary>
        /// Upload a model file to SKIL for import.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>FileUploadList</returns>
        FileUploadList Upload (System.IO.Stream file = null);

        /// <summary>
        /// Upload a model file to SKIL for import.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>ApiResponse of FileUploadList</returns>
        ApiResponse<FileUploadList> UploadWithHttpInfo (System.IO.Stream file = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Tells how many retraining examples have labels associated with them.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccumulatedResults</returns>
        System.Threading.Tasks.Task<AccumulatedResults> AccumulatedResultsAsync ();

        /// <summary>
        /// Tells how many retraining examples have labels associated with them.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccumulatedResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccumulatedResults>> AccumulatedResultsAsyncWithHttpInfo ();
        /// <summary>
        /// Adds credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>Task of ResourceCredentials</returns>
        System.Threading.Tasks.Task<ResourceCredentials> AddCredentialsAsync (AddCredentialsRequest addCredentialsRequest);

        /// <summary>
        /// Adds credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>Task of ApiResponse (ResourceCredentials)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceCredentials>> AddCredentialsAsyncWithHttpInfo (AddCredentialsRequest addCredentialsRequest);
        /// <summary>
        /// Adds an evaluation result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>Task of EvaluationResultsEntity</returns>
        System.Threading.Tasks.Task<EvaluationResultsEntity> AddEvaluationResultAsync (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity);

        /// <summary>
        /// Adds an evaluation result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>Task of ApiResponse (EvaluationResultsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EvaluationResultsEntity>> AddEvaluationResultAsyncWithHttpInfo (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity);
        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>Task of AddExampleRequest</returns>
        System.Threading.Tasks.Task<AddExampleRequest> AddExampleForBatchAsync (string modelHistoryServerId, AddExampleRequest addExampleRequest);

        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>Task of ApiResponse (AddExampleRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddExampleRequest>> AddExampleForBatchAsyncWithHttpInfo (string modelHistoryServerId, AddExampleRequest addExampleRequest);
        /// <summary>
        /// Adds an example to a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>Task of ExampleEntity</returns>
        System.Threading.Tasks.Task<ExampleEntity> AddExampleToMinibatchAsync (string modelHistoryServerId, ExampleEntity exampleEntity);

        /// <summary>
        /// Adds an example to a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>Task of ApiResponse (ExampleEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExampleEntity>> AddExampleToMinibatchAsyncWithHttpInfo (string modelHistoryServerId, ExampleEntity exampleEntity);
        /// <summary>
        /// Add an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>Task of ExperimentEntity</returns>
        System.Threading.Tasks.Task<ExperimentEntity> AddExperimentAsync (string modelHistoryServerId, ExperimentEntity experimentEntity);

        /// <summary>
        /// Add an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> AddExperimentAsyncWithHttpInfo (string modelHistoryServerId, ExperimentEntity experimentEntity);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="type">The type of the labels array.</param>
        /// <param name="file">The labels file to upload. (optional)</param>
        /// <returns>Task of FeedbackResponse</returns>
        System.Threading.Tasks.Task<FeedbackResponse> AddFeedbackBinaryAsync (string id, string type, System.IO.Stream file = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="type">The type of the labels array.</param>
        /// <param name="file">The labels file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (FeedbackResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeedbackResponse>> AddFeedbackBinaryAsyncWithHttpInfo (string id, string type, System.IO.Stream file = null);
        /// <summary>
        /// Gets the retraining feedback for the given batch ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="labels">The associated labels (one-hot vectors) with the batch for retraining. (optional)</param>
        /// <returns>Task of FeedbackResponse</returns>
        System.Threading.Tasks.Task<FeedbackResponse> AddFeedbackJsonAsync (string id, List<List<double?>> labels = null);

        /// <summary>
        /// Gets the retraining feedback for the given batch ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="labels">The associated labels (one-hot vectors) with the batch for retraining. (optional)</param>
        /// <returns>Task of ApiResponse (FeedbackResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeedbackResponse>> AddFeedbackJsonAsyncWithHttpInfo (string id, List<List<double?>> labels = null);
        /// <summary>
        /// Adds a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>Task of MinibatchEntity</returns>
        System.Threading.Tasks.Task<MinibatchEntity> AddMinibatchAsync (string modelHistoryServerId, MinibatchEntity minibatchEntity);

        /// <summary>
        /// Adds a minibatch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>Task of ApiResponse (MinibatchEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<MinibatchEntity>> AddMinibatchAsyncWithHttpInfo (string modelHistoryServerId, MinibatchEntity minibatchEntity);
        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>Task of ModelFeedBackRequest</returns>
        System.Threading.Tasks.Task<ModelFeedBackRequest> AddModelFeedbackAsync (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest);

        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>Task of ApiResponse (ModelFeedBackRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelFeedBackRequest>> AddModelFeedbackAsyncWithHttpInfo (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest);
        /// <summary>
        /// Add a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        System.Threading.Tasks.Task<ModelHistoryEntity> AddModelHistoryAsync (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest);

        /// <summary>
        /// Add a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> AddModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest);
        /// <summary>
        /// Adds a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of ModelInstanceEntity</returns>
        System.Threading.Tasks.Task<ModelInstanceEntity> AddModelInstanceAsync (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity);

        /// <summary>
        /// Adds a model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of ApiResponse (ModelInstanceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelInstanceEntity>> AddModelInstanceAsyncWithHttpInfo (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity);
        /// <summary>
        /// Adds a resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddResourceAsync (AddResourceRequest addResourceRequest);

        /// <summary>
        /// Adds a resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddResourceAsyncWithHttpInfo (AddResourceRequest addResourceRequest);
        /// <summary>
        /// Adds a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>Task of ResourceGroup</returns>
        System.Threading.Tasks.Task<ResourceGroup> AddResourceGroupAsync (string groupName);

        /// <summary>
        /// Adds a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>Task of ApiResponse (ResourceGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceGroup>> AddResourceGroupAsyncWithHttpInfo (string groupName);
        /// <summary>
        /// Adds a resource to a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddResourceToGroupAsync (long? resourceGroupId, long? resourceId);

        /// <summary>
        /// Adds a resource to a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddResourceToGroupAsyncWithHttpInfo (long? resourceGroupId, long? resourceId);
        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of EvaluationResultsEntity</returns>
        System.Threading.Tasks.Task<EvaluationResultsEntity> AggregateModelResultsAsync (string modelHistoryServerId, AggregatePrediction aggregatePrediction);

        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of ApiResponse (EvaluationResultsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EvaluationResultsEntity>> AggregateModelResultsAsyncWithHttpInfo (string modelHistoryServerId, AggregatePrediction aggregatePrediction);
        /// <summary>
        /// Change user&#39;s password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="changePasswordRequest">Password details.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> ChangeUserPasswordAsync (string userId, ChangePasswordRequest changePasswordRequest);

        /// <summary>
        /// Change user&#39;s password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="changePasswordRequest">Password details.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> ChangeUserPasswordAsyncWithHttpInfo (string userId, ChangePasswordRequest changePasswordRequest);
        /// <summary>
        /// Use the deployed model to classify the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ClassificationResult</returns>
        System.Threading.Tasks.Task<ClassificationResult> ClassifyAsync (string deploymentName, string versionName, string modelName, Prediction body);

        /// <summary>
        /// Use the deployed model to classify the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ApiResponse (ClassificationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassificationResult>> ClassifyAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body);
        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        System.Threading.Tasks.Task<Base64NDArrayBody> ClassifyarrayAsync (string deploymentName, string versionName, string modelName, Prediction body);

        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> ClassifyarrayAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body);
        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of ClassificationResult</returns>
        System.Threading.Tasks.Task<ClassificationResult> ClassifyimageAsync (string deploymentName, string versionName, string modelName, System.IO.Stream image = null);

        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (ClassificationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassificationResult>> ClassifyimageAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream image = null);
        /// <summary>
        /// Clears the accumulated data for retraining.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of FeedbackResponse</returns>
        System.Threading.Tasks.Task<FeedbackResponse> ClearStateAsync ();

        /// <summary>
        /// Clears the accumulated data for retraining.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (FeedbackResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeedbackResponse>> ClearStateAsyncWithHttpInfo ();
        /// <summary>
        /// Create a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>Task of JobEntity</returns>
        System.Threading.Tasks.Task<JobEntity> CreateJobAsync (string jobIdOrType, CreateJobRequest createJobRequest);

        /// <summary>
        /// Create a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobEntity>> CreateJobAsyncWithHttpInfo (string jobIdOrType, CreateJobRequest createJobRequest);
        /// <summary>
        /// Creates model History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        System.Threading.Tasks.Task<ModelHistoryEntity> CreateModelHistoryAsync (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity);

        /// <summary>
        /// Creates model History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> CreateModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity);
        /// <summary>
        /// Delete credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCredentialsByIdAsync (long? credentialId);

        /// <summary>
        /// Delete credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCredentialsByIdAsyncWithHttpInfo (long? credentialId);
        /// <summary>
        /// Deletes an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> DeleteExperimentAsync (string modelHistoryServerId, string experimentID);

        /// <summary>
        /// Deletes an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID);
        /// <summary>
        /// Deletes a job given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobByIdAsync (long? jobIdOrType);

        /// <summary>
        /// Deletes a job given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobByIdAsyncWithHttpInfo (long? jobIdOrType);
        /// <summary>
        /// Delete a model by deployment and model id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> DeleteModelAsync (string deploymentId, string modelId);

        /// <summary>
        /// Delete a model by deployment and model id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteModelAsyncWithHttpInfo (string deploymentId, string modelId);
        /// <summary>
        /// Deletes a model history / workspace, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> DeleteModelHistoryAsync (string modelHistoryServerId, string modelHistoryID);

        /// <summary>
        /// Deletes a model history / workspace, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID);
        /// <summary>
        /// Deletes a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteModelInstanceAsync (string modelHistoryServerId, string modelInstanceID);

        /// <summary>
        /// Deletes a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelInstanceAsyncWithHttpInfo (string modelHistoryServerId, string modelInstanceID);
        /// <summary>
        /// Delete the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of Resource</returns>
        System.Threading.Tasks.Task<Resource> DeleteResourceByIdAsync (long? resourceId);

        /// <summary>
        /// Delete the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse (Resource)</returns>
        System.Threading.Tasks.Task<ApiResponse<Resource>> DeleteResourceByIdAsyncWithHttpInfo (long? resourceId);
        /// <summary>
        /// Removes a resource from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteResourceFromGroupAsync (long? resourceGroupId, long? resourceId);

        /// <summary>
        /// Removes a resource from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResourceFromGroupAsyncWithHttpInfo (long? resourceGroupId, long? resourceId);
        /// <summary>
        /// Delete the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ResourceGroup</returns>
        System.Threading.Tasks.Task<ResourceGroup> DeleteResourceGroupByIdAsync (long? resourceGroupId);

        /// <summary>
        /// Delete the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ApiResponse (ResourceGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceGroup>> DeleteResourceGroupByIdAsyncWithHttpInfo (long? resourceGroupId);
        /// <summary>
        /// Deploy a model in a deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>Task of ModelEntity</returns>
        System.Threading.Tasks.Task<ModelEntity> DeployModelAsync (string deploymentId, ImportModelRequest body);

        /// <summary>
        /// Deploy a model in a deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelEntity>> DeployModelAsyncWithHttpInfo (string deploymentId, ImportModelRequest body);
        /// <summary>
        /// Create a new deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of DeploymentResponse</returns>
        System.Threading.Tasks.Task<DeploymentResponse> DeploymentCreateAsync (CreateDeploymentRequest body);

        /// <summary>
        /// Create a new deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> DeploymentCreateAsyncWithHttpInfo (CreateDeploymentRequest body);
        /// <summary>
        /// Delete a deployment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> DeploymentDeleteAsync (string deploymentId);

        /// <summary>
        /// Delete a deployment by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeploymentDeleteAsyncWithHttpInfo (string deploymentId);
        /// <summary>
        /// Get a deployment details by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of DeploymentResponse</returns>
        System.Threading.Tasks.Task<DeploymentResponse> DeploymentGetAsync (string deploymentId);

        /// <summary>
        /// Get a deployment details by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> DeploymentGetAsyncWithHttpInfo (string deploymentId);
        /// <summary>
        /// Get a list of deployments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DeploymentResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DeploymentResponse>> DeploymentsAsync ();

        /// <summary>
        /// Get a list of deployments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DeploymentResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeploymentResponse>>> DeploymentsAsyncWithHttpInfo ();
        /// <summary>
        /// Detect the objects, given a (input) prediction request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="id">the GUID for mapping the results in the detections</param>
        /// <param name="needsPreprocessing">(true) if the image needs preprocessing</param>
        /// <param name="threshold">A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.</param>
        /// <param name="file">the image file to detect objects from</param>
        /// <returns>Task of DetectionResult</returns>
        System.Threading.Tasks.Task<DetectionResult> DetectobjectsAsync (string deploymentName, string versionName, string modelName, string id, bool? needsPreprocessing, float? threshold, System.IO.Stream file);

        /// <summary>
        /// Detect the objects, given a (input) prediction request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="id">the GUID for mapping the results in the detections</param>
        /// <param name="needsPreprocessing">(true) if the image needs preprocessing</param>
        /// <param name="threshold">A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.</param>
        /// <param name="file">the image file to detect objects from</param>
        /// <returns>Task of ApiResponse (DetectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetectionResult>> DetectobjectsAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, string id, bool? needsPreprocessing, float? threshold, System.IO.Stream file);
        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadJobOutputFileAsync (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest);

        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadJobOutputFileAsyncWithHttpInfo (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest);
        /// <summary>
        /// Generate new auth token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenGenerateRequest">Auth token details.</param>
        /// <returns>Task of Token</returns>
        System.Threading.Tasks.Task<Token> GenerateAuthTokenAsync (TokenGenerateRequest tokenGenerateRequest);

        /// <summary>
        /// Generate new auth token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenGenerateRequest">Auth token details.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<Token>> GenerateAuthTokenAsyncWithHttpInfo (TokenGenerateRequest tokenGenerateRequest);
        /// <summary>
        /// Get a list of all available jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;JobEntity&gt;</returns>
        System.Threading.Tasks.Task<List<JobEntity>> GetAllJobsAsync ();

        /// <summary>
        /// Get a list of all available jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;JobEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobEntity>>> GetAllJobsAsyncWithHttpInfo ();
        /// <summary>
        /// Get the memory mapped array based on the array type.
        /// </summary>
        /// <remarks>
        /// The array is specified through a file path, in the configuration object, during model server deployment.
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">The format in which the memory mapped array is returned.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetArrayAsync (string accept, string arrayType);

        /// <summary>
        /// Get the memory mapped array based on the array type.
        /// </summary>
        /// <remarks>
        /// The array is specified through a file path, in the configuration object, during model server deployment.
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">The format in which the memory mapped array is returned.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetArrayAsyncWithHttpInfo (string accept, string arrayType);
        /// <summary>
        /// Get the memory mapped array indices based on the array type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="input">Input indices array (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetArrayIndicesAsync (string contentType, string accept, string arrayType, string input = null);

        /// <summary>
        /// Get the memory mapped array indices based on the array type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="input">Input indices array (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetArrayIndicesAsyncWithHttpInfo (string contentType, string accept, string arrayType, string input = null);
        /// <summary>
        /// Get the memory mapped array within a range based on the array type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetArrayRangeAsync (string accept, string arrayType, int? from, int? to);

        /// <summary>
        /// Get the memory mapped array within a range based on the array type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetArrayRangeAsyncWithHttpInfo (string accept, string arrayType, int? from, int? to);
        /// <summary>
        /// Get auth policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AuthPolicy</returns>
        System.Threading.Tasks.Task<AuthPolicy> GetAuthPolicyAsync ();

        /// <summary>
        /// Get auth policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AuthPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthPolicy>> GetAuthPolicyAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>Task of ModelInstanceEntity</returns>
        System.Threading.Tasks.Task<ModelInstanceEntity> GetBestModelAmongModelIdsAsync (string modelHistoryServerId, BestModel bestModel);

        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>Task of ApiResponse (ModelInstanceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelInstanceEntity>> GetBestModelAmongModelIdsAsyncWithHttpInfo (string modelHistoryServerId, BestModel bestModel);
        /// <summary>
        /// Get credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of ResourceCredentials</returns>
        System.Threading.Tasks.Task<ResourceCredentials> GetCredentialsByIdAsync (long? credentialId);

        /// <summary>
        /// Get credentials given an ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of ApiResponse (ResourceCredentials)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceCredentials>> GetCredentialsByIdAsyncWithHttpInfo (long? credentialId);
        /// <summary>
        /// Returns the current model being used for retraining.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetCurrentModelAsync ();

        /// <summary>
        /// Returns the current model being used for retraining.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCurrentModelAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>Task of List&lt;EvaluationResultsEntity&gt;</returns>
        System.Threading.Tasks.Task<List<EvaluationResultsEntity>> GetEvaluationForModelIDAsync (string modelHistoryServerId, string modelInstanceID);

        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>Task of ApiResponse (List&lt;EvaluationResultsEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EvaluationResultsEntity>>> GetEvaluationForModelIDAsyncWithHttpInfo (string modelHistoryServerId, string modelInstanceID);
        /// <summary>
        /// Gets all the examples for a minibatch ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of List&lt;ExampleEntity&gt;</returns>
        System.Threading.Tasks.Task<List<ExampleEntity>> GetExamplesForMinibatchAsync (string modelHistoryServerId, string minibatchId);

        /// <summary>
        /// Gets all the examples for a minibatch ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of ApiResponse (List&lt;ExampleEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExampleEntity>>> GetExamplesForMinibatchAsyncWithHttpInfo (string modelHistoryServerId, string minibatchId);
        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>Task of ExperimentEntity</returns>
        System.Threading.Tasks.Task<ExperimentEntity> GetExperimentAsync (string modelHistoryServerId, string experimentID);

        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> GetExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID);
        /// <summary>
        /// Obtain all experiments for a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>Task of List&lt;ExperimentEntity&gt;</returns>
        System.Threading.Tasks.Task<List<ExperimentEntity>> GetExperimentsForModelHistoryAsync (string modelHistoryServerId, string modelHistoryID);

        /// <summary>
        /// Obtain all experiments for a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>Task of ApiResponse (List&lt;ExperimentEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExperimentEntity>>> GetExperimentsForModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID);
        /// <summary>
        /// Get a job by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of JobEntity</returns>
        System.Threading.Tasks.Task<JobEntity> GetJobByIdAsync (long? jobIdOrType);

        /// <summary>
        /// Get a job by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobEntity>> GetJobByIdAsyncWithHttpInfo (long? jobIdOrType);
        /// <summary>
        /// Get the last evaluation specifications from the current model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EvaluationResultsEntity</returns>
        System.Threading.Tasks.Task<EvaluationResultsEntity> GetLastEvaluationAsync ();

        /// <summary>
        /// Get the last evaluation specifications from the current model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EvaluationResultsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EvaluationResultsEntity>> GetLastEvaluationAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a minibatch for the model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of MinibatchEntity</returns>
        System.Threading.Tasks.Task<MinibatchEntity> GetMinibatchAsync (string modelHistoryServerId, string minibatchId);

        /// <summary>
        /// Gets a minibatch for the model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of ApiResponse (MinibatchEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<MinibatchEntity>> GetMinibatchAsyncWithHttpInfo (string modelHistoryServerId, string minibatchId);
        /// <summary>
        /// Get model details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>Task of ModelEntity</returns>
        System.Threading.Tasks.Task<ModelEntity> GetModelDetailsAsync (string deploymentId, string modelId);

        /// <summary>
        /// Get model details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelEntity>> GetModelDetailsAsyncWithHttpInfo (string deploymentId, string modelId);
        /// <summary>
        /// Gets a model history, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        System.Threading.Tasks.Task<ModelHistoryEntity> GetModelHistoryAsync (string modelHistoryServerId, string modelHistoryID);

        /// <summary>
        /// Gets a model history, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> GetModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID);
        /// <summary>
        /// Gets a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>Task of ModelInstanceEntity</returns>
        System.Threading.Tasks.Task<ModelInstanceEntity> GetModelInstanceAsync (string modelHistoryServerId, string modelInstanceID);

        /// <summary>
        /// Gets a model instance, given its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>Task of ApiResponse (ModelInstanceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelInstanceEntity>> GetModelInstanceAsyncWithHttpInfo (string modelHistoryServerId, string modelInstanceID);
        /// <summary>
        /// Obtain a list of all the models for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>Task of List&lt;ModelInstanceEntity&gt;</returns>
        System.Threading.Tasks.Task<List<ModelInstanceEntity>> GetModelsForExperimentAsync (string modelHistoryServerId, string experimentID);

        /// <summary>
        /// Obtain a list of all the models for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>Task of ApiResponse (List&lt;ModelInstanceEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelInstanceEntity>>> GetModelsForExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID);
        /// <summary>
        /// Get the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of Resource</returns>
        System.Threading.Tasks.Task<Resource> GetResourceByIdAsync (long? resourceId);

        /// <summary>
        /// Get the resource with the specified resource ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse (Resource)</returns>
        System.Threading.Tasks.Task<ApiResponse<Resource>> GetResourceByIdAsyncWithHttpInfo (long? resourceId);
        /// <summary>
        /// Get all the resources with the specified resource subtype
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        System.Threading.Tasks.Task<List<Resource>> GetResourceBySubTypeAsync (string resourceSubType);

        /// <summary>
        /// Get all the resources with the specified resource subtype
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourceBySubTypeAsyncWithHttpInfo (string resourceSubType);
        /// <summary>
        /// Get all the resources with the specified resource type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        System.Threading.Tasks.Task<List<Resource>> GetResourceByTypeAsync (string resourceType);

        /// <summary>
        /// Get all the resources with the specified resource type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourceByTypeAsyncWithHttpInfo (string resourceType);
        /// <summary>
        /// Get the resource details with the specified resource ID
        /// </summary>
        /// <remarks>
        /// Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetResourceDetailsByIdAsync (long? resourceId);

        /// <summary>
        /// Get the resource details with the specified resource ID
        /// </summary>
        /// <remarks>
        /// Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceDetailsByIdAsyncWithHttpInfo (long? resourceId);
        /// <summary>
        /// Get the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ResourceGroup</returns>
        System.Threading.Tasks.Task<ResourceGroup> GetResourceGroupByIdAsync (long? resourceGroupId);

        /// <summary>
        /// Get the resource group with the specified resource group ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ApiResponse (ResourceGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceGroup>> GetResourceGroupByIdAsyncWithHttpInfo (long? resourceGroupId);
        /// <summary>
        /// Get a list of all the resource groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ResourceGroup&gt;</returns>
        System.Threading.Tasks.Task<List<ResourceGroup>> GetResourceGroupsAsync ();

        /// <summary>
        /// Get a list of all the resource groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ResourceGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourceGroup>>> GetResourceGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// A list of all known/registered resources, of all types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        System.Threading.Tasks.Task<List<Resource>> GetResourcesAsync ();

        /// <summary>
        /// A list of all known/registered resources, of all types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourcesAsyncWithHttpInfo ();
        /// <summary>
        /// Get all resources from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        System.Threading.Tasks.Task<List<Resource>> GetResourcesFromGroupAsync (long? resourceGroupId);

        /// <summary>
        /// Get all resources from a resource group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourcesFromGroupAsyncWithHttpInfo (long? resourceGroupId);
        /// <summary>
        /// Get all roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Role&gt;</returns>
        System.Threading.Tasks.Task<List<Role>> GetRolesAsync ();

        /// <summary>
        /// Get all roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Role&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Role>>> GetRolesAsyncWithHttpInfo ();
        /// <summary>
        /// Get a user by user ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync (string userId);

        /// <summary>
        /// Get a user by user ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Get auth tokens for a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="onlyValid">True if you only want the valid tokens. (optional)</param>
        /// <returns>Task of List&lt;Token&gt;</returns>
        System.Threading.Tasks.Task<List<Token>> GetUserAuthTokensAsync (string userId, bool? onlyValid = null);

        /// <summary>
        /// Get auth tokens for a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="onlyValid">True if you only want the valid tokens. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Token&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Token>>> GetUserAuthTokensAsyncWithHttpInfo (string userId, bool? onlyValid = null);
        /// <summary>
        /// Get all users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetUsersAsync ();

        /// <summary>
        /// Get all users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetUsersAsyncWithHttpInfo ();
        /// <summary>
        /// Get the retraining status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RetrainingStatus</returns>
        System.Threading.Tasks.Task<RetrainingStatus> IsTrainingAsync ();

        /// <summary>
        /// Get the retraining status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RetrainingStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrainingStatus>> IsTrainingAsyncWithHttpInfo ();
        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of JsonArrayResponse</returns>
        System.Threading.Tasks.Task<JsonArrayResponse> JsonarrayAsync (string deploymentName, string versionName, string modelName, Prediction body);

        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ApiResponse (JsonArrayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonArrayResponse>> JsonarrayAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body);
        /// <summary>
        /// Runs knn on the given index with the given k
        /// </summary>
        /// <remarks>
        /// Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body"></param>
        /// <returns>Task of NearestNeighborsResults</returns>
        System.Threading.Tasks.Task<NearestNeighborsResults> KnnAsync (string deploymentName, string versionName, string knnName, NearestNeighborRequest body);

        /// <summary>
        /// Runs knn on the given index with the given k
        /// </summary>
        /// <remarks>
        /// Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (NearestNeighborsResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<NearestNeighborsResults>> KnnAsyncWithHttpInfo (string deploymentName, string versionName, string knnName, NearestNeighborRequest body);
        /// <summary>
        /// Run a k nearest neighbors search on a NEW data point
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of NearestNeighborsResults</returns>
        System.Threading.Tasks.Task<NearestNeighborsResults> KnnnewAsync (string deploymentName, string versionName, string knnName, Base64NDArrayBodyKNN body);

        /// <summary>
        /// Run a k nearest neighbors search on a NEW data point
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ApiResponse (NearestNeighborsResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<NearestNeighborsResults>> KnnnewAsyncWithHttpInfo (string deploymentName, string versionName, string knnName, Base64NDArrayBodyKNN body);
        /// <summary>
        /// List all of the experiments in every model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>Task of List&lt;ExperimentEntity&gt;</returns>
        System.Threading.Tasks.Task<List<ExperimentEntity>> ListAllExperimentsAsync (string modelHistoryServerId);

        /// <summary>
        /// List all of the experiments in every model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>Task of ApiResponse (List&lt;ExperimentEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExperimentEntity>>> ListAllExperimentsAsyncWithHttpInfo (string modelHistoryServerId);
        /// <summary>
        /// Get logs file path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> LogfilepathAsync (string deploymentName, string versionName, string modelName);

        /// <summary>
        /// Get logs file path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> LogfilepathAsyncWithHttpInfo (string deploymentName, string versionName, string modelName);
        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login credentials.</param>
        /// <returns>Task of LoginResponse</returns>
        System.Threading.Tasks.Task<LoginResponse> LoginAsync (LoginRequest loginRequest);

        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login credentials.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginResponse>> LoginAsyncWithHttpInfo (LoginRequest loginRequest);
        /// <summary>
        /// Get logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="logRequest">The log object</param>
        /// <returns>Task of LogBatch</returns>
        System.Threading.Tasks.Task<LogBatch> LogsAsync (string deploymentName, string versionName, string modelName, LogRequest logRequest);

        /// <summary>
        /// Get logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="logRequest">The log object</param>
        /// <returns>Task of ApiResponse (LogBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogBatch>> LogsAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, LogRequest logRequest);
        /// <summary>
        /// this method can be used to get the meta data for the current model which set to the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MetaGetAsync (string deploymentName, string versionName, string modelName);

        /// <summary>
        /// this method can be used to get the meta data for the current model which set to the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MetaGetAsyncWithHttpInfo (string deploymentName, string versionName, string modelName);
        /// <summary>
        /// This method can be used to set meta data for the current model which is set to the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">the meta data object</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MetaPostAsync (string contentType, string deploymentName, string versionName, string modelName, string body);

        /// <summary>
        /// This method can be used to set meta data for the current model which is set to the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">the meta data object</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MetaPostAsyncWithHttpInfo (string contentType, string deploymentName, string versionName, string modelName, string body);
        /// <summary>
        /// Modify the state (start/stop) of a deployed model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>Task of ModelEntity</returns>
        System.Threading.Tasks.Task<ModelEntity> ModelStateChangeAsync (string deploymentId, string modelId, SetState body);

        /// <summary>
        /// Modify the state (start/stop) of a deployed model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelEntity>> ModelStateChangeAsyncWithHttpInfo (string deploymentId, string modelId, SetState body);
        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>Task of List&lt;ModelEntity&gt;</returns>
        System.Threading.Tasks.Task<List<ModelEntity>> ModelsAsync (string deploymentId);

        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>Task of ApiResponse (List&lt;ModelEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelEntity>>> ModelsAsyncWithHttpInfo (string deploymentId);
        /// <summary>
        /// Set the model to be served
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to upload (.pb file) (optional)</param>
        /// <returns>Task of ModelStatus</returns>
        System.Threading.Tasks.Task<ModelStatus> ModelsetAsync (string deploymentName, string versionName, string modelName, System.IO.Stream file = null);

        /// <summary>
        /// Set the model to be served
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to upload (.pb file) (optional)</param>
        /// <returns>Task of ApiResponse (ModelStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelStatus>> ModelsetAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream file = null);
        /// <summary>
        /// Update the model to be served
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to update with (.pb file)</param>
        /// <returns>Task of ModelStatus</returns>
        System.Threading.Tasks.Task<ModelStatus> ModelupdateAsync (string deploymentName, string versionName, string modelName, System.IO.Stream file);

        /// <summary>
        /// Update the model to be served
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to update with (.pb file)</param>
        /// <returns>Task of ApiResponse (ModelStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelStatus>> ModelupdateAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream file);
        /// <summary>
        /// Represents all of the labels for a given classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of MultiClassClassificationResult</returns>
        System.Threading.Tasks.Task<MultiClassClassificationResult> MulticlassifyAsync (string deploymentName, string versionName, string modelName, Prediction body);

        /// <summary>
        /// Represents all of the labels for a given classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ApiResponse (MultiClassClassificationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiClassClassificationResult>> MulticlassifyAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body);
        /// <summary>
        /// Get the output from the network, based on the given INDArray[] input
        /// </summary>
        /// <remarks>
        /// Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The multiple input arrays with mask inputs to run inferences on</param>
        /// <returns>Task of MultiPredictResponse</returns>
        System.Threading.Tasks.Task<MultiPredictResponse> MultipredictAsync (string deploymentName, string versionName, string modelName, MultiPredictRequest body);

        /// <summary>
        /// Get the output from the network, based on the given INDArray[] input
        /// </summary>
        /// <remarks>
        /// Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The multiple input arrays with mask inputs to run inferences on</param>
        /// <returns>Task of ApiResponse (MultiPredictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiPredictResponse>> MultipredictAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, MultiPredictRequest body);
        /// <summary>
        /// Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
        /// </summary>
        /// <remarks>
        /// Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The image file to run the prediction on</param>
        /// <param name="id">The id of the request (could be self generated)</param>
        /// <param name="needsPreprocessing">Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)</param>
        /// <returns>Task of MultiPredictResponse</returns>
        System.Threading.Tasks.Task<MultiPredictResponse> MultipredictimageAsync (string deploymentName, string versionName, string modelName, System.IO.Stream file, string id, bool? needsPreprocessing);

        /// <summary>
        /// Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
        /// </summary>
        /// <remarks>
        /// Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The image file to run the prediction on</param>
        /// <param name="id">The id of the request (could be self generated)</param>
        /// <param name="needsPreprocessing">Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)</param>
        /// <returns>Task of ApiResponse (MultiPredictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiPredictResponse>> MultipredictimageAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream file, string id, bool? needsPreprocessing);
        /// <summary>
        /// Gets the number of retrained models written with retraining.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RevisionsWritten</returns>
        System.Threading.Tasks.Task<RevisionsWritten> NumRevisionsAsync ();

        /// <summary>
        /// Gets the number of retrained models written with retraining.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RevisionsWritten)</returns>
        System.Threading.Tasks.Task<ApiResponse<RevisionsWritten>> NumRevisionsAsyncWithHttpInfo ();
        /// <summary>
        /// Run inference on the input array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of Prediction</returns>
        System.Threading.Tasks.Task<Prediction> PredictAsync (string deploymentName, string versionName, string modelName, Prediction body);

        /// <summary>
        /// Run inference on the input array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ApiResponse (Prediction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Prediction>> PredictAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body);
        /// <summary>
        /// Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">Operation to perform on the input data.</param>
        /// <param name="inputType">Type of the input data.</param>
        /// <param name="inputData"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PredictErrorAsync (string contentType, string operation, string inputType, string inputData = null);

        /// <summary>
        /// Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">Operation to perform on the input data.</param>
        /// <param name="inputType">Type of the input data.</param>
        /// <param name="inputData"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PredictErrorAsyncWithHttpInfo (string contentType, string operation, string inputType, string inputData = null);
        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeFile">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PredictV2FileAsync (string operation, string inputTypeFile, System.IO.Stream inputData);

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeFile">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PredictV2FileAsyncWithHttpInfo (string operation, string inputTypeFile, System.IO.Stream inputData);
        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeJson">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on. (Specify a JSON string here)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PredictV2JsonAsync (string contentType, string operation, string inputTypeJson, string inputData);

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeJson">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on. (Specify a JSON string here)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PredictV2JsonAsyncWithHttpInfo (string contentType, string operation, string inputTypeJson, string inputData);
        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of Prediction</returns>
        System.Threading.Tasks.Task<Prediction> PredictimageAsync (string deploymentName, string versionName, string modelName, System.IO.Stream image = null);

        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (Prediction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Prediction>> PredictimageAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream image = null);
        /// <summary>
        /// Preprocesses the input and run inference on it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>Task of Prediction</returns>
        System.Threading.Tasks.Task<Prediction> PredictwithpreprocessAsync (string deploymentName, string versionName, string modelName, List<string> body);

        /// <summary>
        /// Preprocesses the input and run inference on it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>Task of ApiResponse (Prediction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Prediction>> PredictwithpreprocessAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, List<string> body);
        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>Task of JsonArrayResponse</returns>
        System.Threading.Tasks.Task<JsonArrayResponse> PredictwithpreprocessjsonAsync (string deploymentName, string versionName, string modelName, List<string> body);

        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>Task of ApiResponse (JsonArrayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonArrayResponse>> PredictwithpreprocessjsonAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, List<string> body);
        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputType">Input data type.</param>
        /// <param name="outputType">Binary output data type.</param>
        /// <param name="inputData">The input file to upload. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RawPredictBinaryAsync (string inputType, string outputType, System.IO.Stream inputData = null);

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputType">Input data type.</param>
        /// <param name="outputType">Binary output data type.</param>
        /// <param name="inputData">The input file to upload. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RawPredictBinaryAsyncWithHttpInfo (string inputType, string outputType, System.IO.Stream inputData = null);
        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of JobEntity</returns>
        System.Threading.Tasks.Task<JobEntity> RefreshJobStatusAsync (long? jobId);

        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobEntity>> RefreshJobStatusAsyncWithHttpInfo (long? jobId);
        /// <summary>
        /// Register a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> RegisterUserAsync (User user);

        /// <summary>
        /// Register a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> RegisterUserAsyncWithHttpInfo (User user);
        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ModelEntity</returns>
        System.Threading.Tasks.Task<ModelEntity> ReimportModelAsync (string deploymentId, string modelId, ImportModelRequest body);

        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelEntity>> ReimportModelAsyncWithHttpInfo (string deploymentId, string modelId, ImportModelRequest body);
        /// <summary>
        /// Revoke a user token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token ID</param>
        /// <returns>Task of Token</returns>
        System.Threading.Tasks.Task<Token> RevokeUserTokenAsync (long? tokenId);

        /// <summary>
        /// Revoke a user token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token ID</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<Token>> RevokeUserTokenAsyncWithHttpInfo (long? tokenId);
        /// <summary>
        /// Rollback to a previous revision of the model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Model revision index.</param>
        /// <returns>Task of RollbackStatus</returns>
        System.Threading.Tasks.Task<RollbackStatus> RollbackAsync (int? index);

        /// <summary>
        /// Rollback to a previous revision of the model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Model revision index.</param>
        /// <returns>Task of ApiResponse (RollbackStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RollbackStatus>> RollbackAsyncWithHttpInfo (int? index);
        /// <summary>
        /// Start running an (already created) job on the remote resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of JobEntity</returns>
        System.Threading.Tasks.Task<JobEntity> RunAJobAsync (long? jobId);

        /// <summary>
        /// Start running an (already created) job on the remote resource
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobEntity>> RunAJobAsyncWithHttpInfo (long? jobId);
        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of BatchCSVRecord</returns>
        System.Threading.Tasks.Task<BatchCSVRecord> TransformCsvAsync (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null);

        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of ApiResponse (BatchCSVRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchCSVRecord>> TransformCsvAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null);
        /// <summary>
        /// Takes a batch input arrays and transforms it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        System.Threading.Tasks.Task<Base64NDArrayBody> TransformarrayAsync (string deploymentName, string versionName, string transformName, BatchRecord batchRecord = null);

        /// <summary>
        /// Takes a batch input arrays and transforms it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformarrayAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, BatchRecord batchRecord = null);
        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        System.Threading.Tasks.Task<Base64NDArrayBody> TransformimageAsync (string deploymentName, string versionName, string imageTransformName, List<System.IO.Stream> files);

        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformimageAsyncWithHttpInfo (string deploymentName, string versionName, string imageTransformName, List<System.IO.Stream> files);
        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>Task of SingleCSVRecord</returns>
        System.Threading.Tasks.Task<SingleCSVRecord> TransformincrementalCsvAsync (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null);

        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
        /// </summary>
        /// <remarks>
        /// Takes a SingleCSVRecord object and transforms it into the desired format
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>Task of ApiResponse (SingleCSVRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleCSVRecord>> TransformincrementalCsvAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null);
        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        System.Threading.Tasks.Task<Base64NDArrayBody> TransformincrementalarrayAsync (string deploymentName, string versionName, string transformName, SingleRecord singleRecord = null);

        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformincrementalarrayAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, SingleRecord singleRecord = null);
        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        System.Threading.Tasks.Task<Base64NDArrayBody> TransformincrementalimageAsync (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file);

        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformincrementalimageAsyncWithHttpInfo (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file);
        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TransformprocessGetAsync (string deploymentName, string versionName, string transformName);

        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransformprocessGetAsyncWithHttpInfo (string deploymentName, string versionName, string transformName);
        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;.</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (Specify a JSON string here). (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TransformprocessPostAsync (string contentType, string deploymentName, string versionName, string transformName, string transformProcess = null);

        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;.</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (Specify a JSON string here). (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransformprocessPostAsyncWithHttpInfo (string contentType, string deploymentName, string versionName, string transformName, string transformProcess = null);
        /// <summary>
        /// Update auth policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authPolicy">Auth policy object</param>
        /// <returns>Task of AuthPolicy</returns>
        System.Threading.Tasks.Task<AuthPolicy> UpdateAuthPolicyAsync (AuthPolicy authPolicy);

        /// <summary>
        /// Update auth policy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authPolicy">Auth policy object</param>
        /// <returns>Task of ApiResponse (AuthPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthPolicy>> UpdateAuthPolicyAsyncWithHttpInfo (AuthPolicy authPolicy);
        /// <summary>
        /// Updates the best model for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>Task of ExperimentEntity</returns>
        System.Threading.Tasks.Task<ExperimentEntity> UpdateBestModelForExperimentAsync (string modelHistoryServerId, UpdateBestModel updateBestModel);

        /// <summary>
        /// Updates the best model for an experiment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> UpdateBestModelForExperimentAsyncWithHttpInfo (string modelHistoryServerId, UpdateBestModel updateBestModel);
        /// <summary>
        /// Updates an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>Task of ExperimentEntity</returns>
        System.Threading.Tasks.Task<ExperimentEntity> UpdateExperimentAsync (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity);

        /// <summary>
        /// Updates an experiment, given an experiment entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> UpdateExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity);
        /// <summary>
        /// Update a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        System.Threading.Tasks.Task<ModelHistoryEntity> UpdateModelHistoryAsync (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest);

        /// <summary>
        /// Update a model history / workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> UpdateModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UpdateUserAsync (User user);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserAsyncWithHttpInfo (User user);
        /// <summary>
        /// Upload a model file to SKIL for import.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>Task of FileUploadList</returns>
        System.Threading.Tasks.Task<FileUploadList> UploadAsync (System.IO.Stream file = null);

        /// <summary>
        /// Upload a model file to SKIL for import.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (FileUploadList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileUploadList>> UploadAsyncWithHttpInfo (System.IO.Stream file = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Skymind.Skil.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Skymind.Skil.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Skymind.Skil.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = Skymind.Skil.Client.Client.Configuration.Default;

            ExceptionFactory = Skymind.Skil.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Skymind.Skil.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Skymind.Skil.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Skymind.Skil.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Skymind.Skil.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Skymind.Skil.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Tells how many retraining examples have labels associated with them. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccumulatedResults</returns>
        public AccumulatedResults AccumulatedResults ()
        {
             ApiResponse<AccumulatedResults> localVarResponse = AccumulatedResultsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tells how many retraining examples have labels associated with them. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccumulatedResults</returns>
        public ApiResponse< AccumulatedResults > AccumulatedResultsWithHttpInfo ()
        {

            var localVarPath = "/accumulatedresults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccumulatedResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccumulatedResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccumulatedResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccumulatedResults)));
        }

        /// <summary>
        /// Tells how many retraining examples have labels associated with them. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccumulatedResults</returns>
        public async System.Threading.Tasks.Task<AccumulatedResults> AccumulatedResultsAsync ()
        {
             ApiResponse<AccumulatedResults> localVarResponse = await AccumulatedResultsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tells how many retraining examples have labels associated with them. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccumulatedResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccumulatedResults>> AccumulatedResultsAsyncWithHttpInfo ()
        {

            var localVarPath = "/accumulatedresults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccumulatedResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccumulatedResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccumulatedResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccumulatedResults)));
        }

        /// <summary>
        /// Adds credentials 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>ResourceCredentials</returns>
        public ResourceCredentials AddCredentials (AddCredentialsRequest addCredentialsRequest)
        {
             ApiResponse<ResourceCredentials> localVarResponse = AddCredentialsWithHttpInfo(addCredentialsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds credentials 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>ApiResponse of ResourceCredentials</returns>
        public ApiResponse< ResourceCredentials > AddCredentialsWithHttpInfo (AddCredentialsRequest addCredentialsRequest)
        {
            // verify the required parameter 'addCredentialsRequest' is set
            if (addCredentialsRequest == null)
                throw new ApiException(400, "Missing required parameter 'addCredentialsRequest' when calling DefaultApi->AddCredentials");

            var localVarPath = "/resources/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addCredentialsRequest != null && addCredentialsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addCredentialsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addCredentialsRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResourceCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceCredentials)));
        }

        /// <summary>
        /// Adds credentials 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>Task of ResourceCredentials</returns>
        public async System.Threading.Tasks.Task<ResourceCredentials> AddCredentialsAsync (AddCredentialsRequest addCredentialsRequest)
        {
             ApiResponse<ResourceCredentials> localVarResponse = await AddCredentialsAsyncWithHttpInfo(addCredentialsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds credentials 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCredentialsRequest">Add credentials request object</param>
        /// <returns>Task of ApiResponse (ResourceCredentials)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceCredentials>> AddCredentialsAsyncWithHttpInfo (AddCredentialsRequest addCredentialsRequest)
        {
            // verify the required parameter 'addCredentialsRequest' is set
            if (addCredentialsRequest == null)
                throw new ApiException(400, "Missing required parameter 'addCredentialsRequest' when calling DefaultApi->AddCredentials");

            var localVarPath = "/resources/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addCredentialsRequest != null && addCredentialsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addCredentialsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addCredentialsRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResourceCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceCredentials)));
        }

        /// <summary>
        /// Adds an evaluation result 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>EvaluationResultsEntity</returns>
        public EvaluationResultsEntity AddEvaluationResult (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity)
        {
             ApiResponse<EvaluationResultsEntity> localVarResponse = AddEvaluationResultWithHttpInfo(modelHistoryServerId, evaluationResultsEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an evaluation result 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>ApiResponse of EvaluationResultsEntity</returns>
        public ApiResponse< EvaluationResultsEntity > AddEvaluationResultWithHttpInfo (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddEvaluationResult");
            // verify the required parameter 'evaluationResultsEntity' is set
            if (evaluationResultsEntity == null)
                throw new ApiException(400, "Missing required parameter 'evaluationResultsEntity' when calling DefaultApi->AddEvaluationResult");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (evaluationResultsEntity != null && evaluationResultsEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(evaluationResultsEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = evaluationResultsEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEvaluationResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EvaluationResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EvaluationResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EvaluationResultsEntity)));
        }

        /// <summary>
        /// Adds an evaluation result 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>Task of EvaluationResultsEntity</returns>
        public async System.Threading.Tasks.Task<EvaluationResultsEntity> AddEvaluationResultAsync (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity)
        {
             ApiResponse<EvaluationResultsEntity> localVarResponse = await AddEvaluationResultAsyncWithHttpInfo(modelHistoryServerId, evaluationResultsEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an evaluation result 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="evaluationResultsEntity">The evaluation result entity</param>
        /// <returns>Task of ApiResponse (EvaluationResultsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EvaluationResultsEntity>> AddEvaluationResultAsyncWithHttpInfo (string modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddEvaluationResult");
            // verify the required parameter 'evaluationResultsEntity' is set
            if (evaluationResultsEntity == null)
                throw new ApiException(400, "Missing required parameter 'evaluationResultsEntity' when calling DefaultApi->AddEvaluationResult");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (evaluationResultsEntity != null && evaluationResultsEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(evaluationResultsEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = evaluationResultsEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEvaluationResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EvaluationResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EvaluationResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EvaluationResultsEntity)));
        }

        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>AddExampleRequest</returns>
        public AddExampleRequest AddExampleForBatch (string modelHistoryServerId, AddExampleRequest addExampleRequest)
        {
             ApiResponse<AddExampleRequest> localVarResponse = AddExampleForBatchWithHttpInfo(modelHistoryServerId, addExampleRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>ApiResponse of AddExampleRequest</returns>
        public ApiResponse< AddExampleRequest > AddExampleForBatchWithHttpInfo (string modelHistoryServerId, AddExampleRequest addExampleRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddExampleForBatch");
            // verify the required parameter 'addExampleRequest' is set
            if (addExampleRequest == null)
                throw new ApiException(400, "Missing required parameter 'addExampleRequest' when calling DefaultApi->AddExampleForBatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/exampleForBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (addExampleRequest != null && addExampleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addExampleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addExampleRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExampleForBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddExampleRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddExampleRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddExampleRequest)));
        }

        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>Task of AddExampleRequest</returns>
        public async System.Threading.Tasks.Task<AddExampleRequest> AddExampleForBatchAsync (string modelHistoryServerId, AddExampleRequest addExampleRequest)
        {
             ApiResponse<AddExampleRequest> localVarResponse = await AddExampleForBatchAsyncWithHttpInfo(modelHistoryServerId, addExampleRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a number of examples to a minibatch ID given an AddExampleRequest. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addExampleRequest">The add example request, encapsulating minibatch details and examples batch size</param>
        /// <returns>Task of ApiResponse (AddExampleRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddExampleRequest>> AddExampleForBatchAsyncWithHttpInfo (string modelHistoryServerId, AddExampleRequest addExampleRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddExampleForBatch");
            // verify the required parameter 'addExampleRequest' is set
            if (addExampleRequest == null)
                throw new ApiException(400, "Missing required parameter 'addExampleRequest' when calling DefaultApi->AddExampleForBatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/exampleForBatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (addExampleRequest != null && addExampleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addExampleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addExampleRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExampleForBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddExampleRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddExampleRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddExampleRequest)));
        }

        /// <summary>
        /// Adds an example to a minibatch 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>ExampleEntity</returns>
        public ExampleEntity AddExampleToMinibatch (string modelHistoryServerId, ExampleEntity exampleEntity)
        {
             ApiResponse<ExampleEntity> localVarResponse = AddExampleToMinibatchWithHttpInfo(modelHistoryServerId, exampleEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an example to a minibatch 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>ApiResponse of ExampleEntity</returns>
        public ApiResponse< ExampleEntity > AddExampleToMinibatchWithHttpInfo (string modelHistoryServerId, ExampleEntity exampleEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddExampleToMinibatch");
            // verify the required parameter 'exampleEntity' is set
            if (exampleEntity == null)
                throw new ApiException(400, "Missing required parameter 'exampleEntity' when calling DefaultApi->AddExampleToMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/example";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (exampleEntity != null && exampleEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exampleEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exampleEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExampleToMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExampleEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExampleEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExampleEntity)));
        }

        /// <summary>
        /// Adds an example to a minibatch 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>Task of ExampleEntity</returns>
        public async System.Threading.Tasks.Task<ExampleEntity> AddExampleToMinibatchAsync (string modelHistoryServerId, ExampleEntity exampleEntity)
        {
             ApiResponse<ExampleEntity> localVarResponse = await AddExampleToMinibatchAsyncWithHttpInfo(modelHistoryServerId, exampleEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an example to a minibatch 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="exampleEntity">The example to add to the minibatch</param>
        /// <returns>Task of ApiResponse (ExampleEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExampleEntity>> AddExampleToMinibatchAsyncWithHttpInfo (string modelHistoryServerId, ExampleEntity exampleEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddExampleToMinibatch");
            // verify the required parameter 'exampleEntity' is set
            if (exampleEntity == null)
                throw new ApiException(400, "Missing required parameter 'exampleEntity' when calling DefaultApi->AddExampleToMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/example";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (exampleEntity != null && exampleEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(exampleEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = exampleEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExampleToMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExampleEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExampleEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExampleEntity)));
        }

        /// <summary>
        /// Add an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>ExperimentEntity</returns>
        public ExperimentEntity AddExperiment (string modelHistoryServerId, ExperimentEntity experimentEntity)
        {
             ApiResponse<ExperimentEntity> localVarResponse = AddExperimentWithHttpInfo(modelHistoryServerId, experimentEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        public ApiResponse< ExperimentEntity > AddExperimentWithHttpInfo (string modelHistoryServerId, ExperimentEntity experimentEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddExperiment");
            // verify the required parameter 'experimentEntity' is set
            if (experimentEntity == null)
                throw new ApiException(400, "Missing required parameter 'experimentEntity' when calling DefaultApi->AddExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentEntity != null && experimentEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(experimentEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = experimentEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Add an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>Task of ExperimentEntity</returns>
        public async System.Threading.Tasks.Task<ExperimentEntity> AddExperimentAsync (string modelHistoryServerId, ExperimentEntity experimentEntity)
        {
             ApiResponse<ExperimentEntity> localVarResponse = await AddExperimentAsyncWithHttpInfo(modelHistoryServerId, experimentEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentEntity">The experiment entity to add</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> AddExperimentAsyncWithHttpInfo (string modelHistoryServerId, ExperimentEntity experimentEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddExperiment");
            // verify the required parameter 'experimentEntity' is set
            if (experimentEntity == null)
                throw new ApiException(400, "Missing required parameter 'experimentEntity' when calling DefaultApi->AddExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentEntity != null && experimentEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(experimentEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = experimentEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="type">The type of the labels array.</param>
        /// <param name="file">The labels file to upload. (optional)</param>
        /// <returns>FeedbackResponse</returns>
        public FeedbackResponse AddFeedbackBinary (string id, string type, System.IO.Stream file = null)
        {
             ApiResponse<FeedbackResponse> localVarResponse = AddFeedbackBinaryWithHttpInfo(id, type, file);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="type">The type of the labels array.</param>
        /// <param name="file">The labels file to upload. (optional)</param>
        /// <returns>ApiResponse of FeedbackResponse</returns>
        public ApiResponse< FeedbackResponse > AddFeedbackBinaryWithHttpInfo (string id, string type, System.IO.Stream file = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->AddFeedbackBinary");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->AddFeedbackBinary");

            var localVarPath = "/feedback/{id}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFeedbackBinary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeedbackResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeedbackResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeedbackResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="type">The type of the labels array.</param>
        /// <param name="file">The labels file to upload. (optional)</param>
        /// <returns>Task of FeedbackResponse</returns>
        public async System.Threading.Tasks.Task<FeedbackResponse> AddFeedbackBinaryAsync (string id, string type, System.IO.Stream file = null)
        {
             ApiResponse<FeedbackResponse> localVarResponse = await AddFeedbackBinaryAsyncWithHttpInfo(id, type, file);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="type">The type of the labels array.</param>
        /// <param name="file">The labels file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (FeedbackResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeedbackResponse>> AddFeedbackBinaryAsyncWithHttpInfo (string id, string type, System.IO.Stream file = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->AddFeedbackBinary");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->AddFeedbackBinary");

            var localVarPath = "/feedback/{id}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFeedbackBinary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeedbackResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeedbackResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeedbackResponse)));
        }

        /// <summary>
        /// Gets the retraining feedback for the given batch ID. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="labels">The associated labels (one-hot vectors) with the batch for retraining. (optional)</param>
        /// <returns>FeedbackResponse</returns>
        public FeedbackResponse AddFeedbackJson (string id, List<List<double?>> labels = null)
        {
             ApiResponse<FeedbackResponse> localVarResponse = AddFeedbackJsonWithHttpInfo(id, labels);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the retraining feedback for the given batch ID. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="labels">The associated labels (one-hot vectors) with the batch for retraining. (optional)</param>
        /// <returns>ApiResponse of FeedbackResponse</returns>
        public ApiResponse< FeedbackResponse > AddFeedbackJsonWithHttpInfo (string id, List<List<double?>> labels = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->AddFeedbackJson");

            var localVarPath = "/feedback/{id}/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (labels != null && labels.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(labels); // http body (model) parameter
            }
            else
            {
                localVarPostBody = labels; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFeedbackJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeedbackResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeedbackResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeedbackResponse)));
        }

        /// <summary>
        /// Gets the retraining feedback for the given batch ID. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="labels">The associated labels (one-hot vectors) with the batch for retraining. (optional)</param>
        /// <returns>Task of FeedbackResponse</returns>
        public async System.Threading.Tasks.Task<FeedbackResponse> AddFeedbackJsonAsync (string id, List<List<double?>> labels = null)
        {
             ApiResponse<FeedbackResponse> localVarResponse = await AddFeedbackJsonAsyncWithHttpInfo(id, labels);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the retraining feedback for the given batch ID. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Batch ID to retrain the model with and get feedback for.</param>
        /// <param name="labels">The associated labels (one-hot vectors) with the batch for retraining. (optional)</param>
        /// <returns>Task of ApiResponse (FeedbackResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeedbackResponse>> AddFeedbackJsonAsyncWithHttpInfo (string id, List<List<double?>> labels = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->AddFeedbackJson");

            var localVarPath = "/feedback/{id}/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (labels != null && labels.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(labels); // http body (model) parameter
            }
            else
            {
                localVarPostBody = labels; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFeedbackJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeedbackResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeedbackResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeedbackResponse)));
        }

        /// <summary>
        /// Adds a minibatch 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>MinibatchEntity</returns>
        public MinibatchEntity AddMinibatch (string modelHistoryServerId, MinibatchEntity minibatchEntity)
        {
             ApiResponse<MinibatchEntity> localVarResponse = AddMinibatchWithHttpInfo(modelHistoryServerId, minibatchEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a minibatch 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>ApiResponse of MinibatchEntity</returns>
        public ApiResponse< MinibatchEntity > AddMinibatchWithHttpInfo (string modelHistoryServerId, MinibatchEntity minibatchEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddMinibatch");
            // verify the required parameter 'minibatchEntity' is set
            if (minibatchEntity == null)
                throw new ApiException(400, "Missing required parameter 'minibatchEntity' when calling DefaultApi->AddMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (minibatchEntity != null && minibatchEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(minibatchEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = minibatchEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MinibatchEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MinibatchEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MinibatchEntity)));
        }

        /// <summary>
        /// Adds a minibatch 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>Task of MinibatchEntity</returns>
        public async System.Threading.Tasks.Task<MinibatchEntity> AddMinibatchAsync (string modelHistoryServerId, MinibatchEntity minibatchEntity)
        {
             ApiResponse<MinibatchEntity> localVarResponse = await AddMinibatchAsyncWithHttpInfo(modelHistoryServerId, minibatchEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a minibatch 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchEntity">The minibatch entity to add</param>
        /// <returns>Task of ApiResponse (MinibatchEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MinibatchEntity>> AddMinibatchAsyncWithHttpInfo (string modelHistoryServerId, MinibatchEntity minibatchEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddMinibatch");
            // verify the required parameter 'minibatchEntity' is set
            if (minibatchEntity == null)
                throw new ApiException(400, "Missing required parameter 'minibatchEntity' when calling DefaultApi->AddMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (minibatchEntity != null && minibatchEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(minibatchEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = minibatchEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MinibatchEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MinibatchEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MinibatchEntity)));
        }

        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>ModelFeedBackRequest</returns>
        public ModelFeedBackRequest AddModelFeedback (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest)
        {
             ApiResponse<ModelFeedBackRequest> localVarResponse = AddModelFeedbackWithHttpInfo(modelHistoryServerId, modelFeedBackRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>ApiResponse of ModelFeedBackRequest</returns>
        public ApiResponse< ModelFeedBackRequest > AddModelFeedbackWithHttpInfo (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddModelFeedback");
            // verify the required parameter 'modelFeedBackRequest' is set
            if (modelFeedBackRequest == null)
                throw new ApiException(400, "Missing required parameter 'modelFeedBackRequest' when calling DefaultApi->AddModelFeedback");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelFeedBackRequest != null && modelFeedBackRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelFeedBackRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelFeedBackRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelFeedback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelFeedBackRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelFeedBackRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelFeedBackRequest)));
        }

        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>Task of ModelFeedBackRequest</returns>
        public async System.Threading.Tasks.Task<ModelFeedBackRequest> AddModelFeedbackAsync (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest)
        {
             ApiResponse<ModelFeedBackRequest> localVarResponse = await AddModelFeedbackAsyncWithHttpInfo(modelHistoryServerId, modelFeedBackRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an evaluation feedback to the model against a given minibatch id. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelFeedBackRequest">The model feedback request object</param>
        /// <returns>Task of ApiResponse (ModelFeedBackRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelFeedBackRequest>> AddModelFeedbackAsyncWithHttpInfo (string modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddModelFeedback");
            // verify the required parameter 'modelFeedBackRequest' is set
            if (modelFeedBackRequest == null)
                throw new ApiException(400, "Missing required parameter 'modelFeedBackRequest' when calling DefaultApi->AddModelFeedback");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelFeedBackRequest != null && modelFeedBackRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelFeedBackRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelFeedBackRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelFeedback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelFeedBackRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelFeedBackRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelFeedBackRequest)));
        }

        /// <summary>
        /// Add a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>ModelHistoryEntity</returns>
        public ModelHistoryEntity AddModelHistory (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = AddModelHistoryWithHttpInfo(modelHistoryServerId, addModelHistoryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        public ApiResponse< ModelHistoryEntity > AddModelHistoryWithHttpInfo (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddModelHistory");
            // verify the required parameter 'addModelHistoryRequest' is set
            if (addModelHistoryRequest == null)
                throw new ApiException(400, "Missing required parameter 'addModelHistoryRequest' when calling DefaultApi->AddModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/modelhistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (addModelHistoryRequest != null && addModelHistoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addModelHistoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addModelHistoryRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Add a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        public async System.Threading.Tasks.Task<ModelHistoryEntity> AddModelHistoryAsync (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = await AddModelHistoryAsyncWithHttpInfo(modelHistoryServerId, addModelHistoryRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="addModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> AddModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddModelHistory");
            // verify the required parameter 'addModelHistoryRequest' is set
            if (addModelHistoryRequest == null)
                throw new ApiException(400, "Missing required parameter 'addModelHistoryRequest' when calling DefaultApi->AddModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/modelhistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (addModelHistoryRequest != null && addModelHistoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addModelHistoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addModelHistoryRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Adds a model 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>ModelInstanceEntity</returns>
        public ModelInstanceEntity AddModelInstance (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity)
        {
             ApiResponse<ModelInstanceEntity> localVarResponse = AddModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a model 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>ApiResponse of ModelInstanceEntity</returns>
        public ApiResponse< ModelInstanceEntity > AddModelInstanceWithHttpInfo (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddModelInstance");
            // verify the required parameter 'modelInstanceEntity' is set
            if (modelInstanceEntity == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceEntity' when calling DefaultApi->AddModelInstance");

            var localVarPath = "/rpc/{modelHistoryServerId}/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceEntity != null && modelInstanceEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelInstanceEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelInstanceEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelInstanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelInstanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelInstanceEntity)));
        }

        /// <summary>
        /// Adds a model 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of ModelInstanceEntity</returns>
        public async System.Threading.Tasks.Task<ModelInstanceEntity> AddModelInstanceAsync (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity)
        {
             ApiResponse<ModelInstanceEntity> localVarResponse = await AddModelInstanceAsyncWithHttpInfo(modelHistoryServerId, modelInstanceEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a model 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceEntity">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of ApiResponse (ModelInstanceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelInstanceEntity>> AddModelInstanceAsyncWithHttpInfo (string modelHistoryServerId, ModelInstanceEntity modelInstanceEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AddModelInstance");
            // verify the required parameter 'modelInstanceEntity' is set
            if (modelInstanceEntity == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceEntity' when calling DefaultApi->AddModelInstance");

            var localVarPath = "/rpc/{modelHistoryServerId}/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceEntity != null && modelInstanceEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelInstanceEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelInstanceEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddModelInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelInstanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelInstanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelInstanceEntity)));
        }

        /// <summary>
        /// Adds a resource 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>Object</returns>
        public Object AddResource (AddResourceRequest addResourceRequest)
        {
             ApiResponse<Object> localVarResponse = AddResourceWithHttpInfo(addResourceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a resource 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddResourceWithHttpInfo (AddResourceRequest addResourceRequest)
        {
            // verify the required parameter 'addResourceRequest' is set
            if (addResourceRequest == null)
                throw new ApiException(400, "Missing required parameter 'addResourceRequest' when calling DefaultApi->AddResource");

            var localVarPath = "/resources/add/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addResourceRequest != null && addResourceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Adds a resource 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddResourceAsync (AddResourceRequest addResourceRequest)
        {
             ApiResponse<Object> localVarResponse = await AddResourceAsyncWithHttpInfo(addResourceRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a resource 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addResourceRequest">The Add resource request object</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddResourceAsyncWithHttpInfo (AddResourceRequest addResourceRequest)
        {
            // verify the required parameter 'addResourceRequest' is set
            if (addResourceRequest == null)
                throw new ApiException(400, "Missing required parameter 'addResourceRequest' when calling DefaultApi->AddResource");

            var localVarPath = "/resources/add/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addResourceRequest != null && addResourceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addResourceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addResourceRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Adds a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>ResourceGroup</returns>
        public ResourceGroup AddResourceGroup (string groupName)
        {
             ApiResponse<ResourceGroup> localVarResponse = AddResourceGroupWithHttpInfo(groupName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>ApiResponse of ResourceGroup</returns>
        public ApiResponse< ResourceGroup > AddResourceGroupWithHttpInfo (string groupName)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling DefaultApi->AddResourceGroup");

            var localVarPath = "/resources/add/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupName != null && groupName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupName; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResourceGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResourceGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceGroup)));
        }

        /// <summary>
        /// Adds a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>Task of ResourceGroup</returns>
        public async System.Threading.Tasks.Task<ResourceGroup> AddResourceGroupAsync (string groupName)
        {
             ApiResponse<ResourceGroup> localVarResponse = await AddResourceGroupAsyncWithHttpInfo(groupName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Name of the resource group</param>
        /// <returns>Task of ApiResponse (ResourceGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceGroup>> AddResourceGroupAsyncWithHttpInfo (string groupName)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new ApiException(400, "Missing required parameter 'groupName' when calling DefaultApi->AddResourceGroup");

            var localVarPath = "/resources/add/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain; charset=utf-8"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupName != null && groupName.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(groupName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupName; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResourceGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResourceGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceGroup)));
        }

        /// <summary>
        /// Adds a resource to a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns></returns>
        public void AddResourceToGroup (long? resourceGroupId, long? resourceId)
        {
             AddResourceToGroupWithHttpInfo(resourceGroupId, resourceId);
        }

        /// <summary>
        /// Adds a resource to a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddResourceToGroupWithHttpInfo (long? resourceGroupId, long? resourceId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling DefaultApi->AddResourceToGroup");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DefaultApi->AddResourceToGroup");

            var localVarPath = "/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResourceToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Adds a resource to a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddResourceToGroupAsync (long? resourceGroupId, long? resourceId)
        {
             await AddResourceToGroupAsyncWithHttpInfo(resourceGroupId, resourceId);

        }

        /// <summary>
        /// Adds a resource to a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddResourceToGroupAsyncWithHttpInfo (long? resourceGroupId, long? resourceId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling DefaultApi->AddResourceToGroup");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DefaultApi->AddResourceToGroup");

            var localVarPath = "/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddResourceToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>EvaluationResultsEntity</returns>
        public EvaluationResultsEntity AggregateModelResults (string modelHistoryServerId, AggregatePrediction aggregatePrediction)
        {
             ApiResponse<EvaluationResultsEntity> localVarResponse = AggregateModelResultsWithHttpInfo(modelHistoryServerId, aggregatePrediction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>ApiResponse of EvaluationResultsEntity</returns>
        public ApiResponse< EvaluationResultsEntity > AggregateModelResultsWithHttpInfo (string modelHistoryServerId, AggregatePrediction aggregatePrediction)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AggregateModelResults");
            // verify the required parameter 'aggregatePrediction' is set
            if (aggregatePrediction == null)
                throw new ApiException(400, "Missing required parameter 'aggregatePrediction' when calling DefaultApi->AggregateModelResults");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/aggregateresults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (aggregatePrediction != null && aggregatePrediction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregatePrediction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregatePrediction; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AggregateModelResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EvaluationResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EvaluationResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EvaluationResultsEntity)));
        }

        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of EvaluationResultsEntity</returns>
        public async System.Threading.Tasks.Task<EvaluationResultsEntity> AggregateModelResultsAsync (string modelHistoryServerId, AggregatePrediction aggregatePrediction)
        {
             ApiResponse<EvaluationResultsEntity> localVarResponse = await AggregateModelResultsAsyncWithHttpInfo(modelHistoryServerId, aggregatePrediction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Aggregates the evaluaition results of a model instance, based on the evaluation type 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="aggregatePrediction">The object encapsulating the model instance id and evaluation type to aggregate</param>
        /// <returns>Task of ApiResponse (EvaluationResultsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EvaluationResultsEntity>> AggregateModelResultsAsyncWithHttpInfo (string modelHistoryServerId, AggregatePrediction aggregatePrediction)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->AggregateModelResults");
            // verify the required parameter 'aggregatePrediction' is set
            if (aggregatePrediction == null)
                throw new ApiException(400, "Missing required parameter 'aggregatePrediction' when calling DefaultApi->AggregateModelResults");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/aggregateresults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (aggregatePrediction != null && aggregatePrediction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregatePrediction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregatePrediction; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AggregateModelResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EvaluationResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EvaluationResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EvaluationResultsEntity)));
        }

        /// <summary>
        /// Change user&#39;s password 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="changePasswordRequest">Password details.</param>
        /// <returns>User</returns>
        public User ChangeUserPassword (string userId, ChangePasswordRequest changePasswordRequest)
        {
             ApiResponse<User> localVarResponse = ChangeUserPasswordWithHttpInfo(userId, changePasswordRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change user&#39;s password 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="changePasswordRequest">Password details.</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > ChangeUserPasswordWithHttpInfo (string userId, ChangePasswordRequest changePasswordRequest)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->ChangeUserPassword");
            // verify the required parameter 'changePasswordRequest' is set
            if (changePasswordRequest == null)
                throw new ApiException(400, "Missing required parameter 'changePasswordRequest' when calling DefaultApi->ChangeUserPassword");

            var localVarPath = "/user/{userId}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (changePasswordRequest != null && changePasswordRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(changePasswordRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changePasswordRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Change user&#39;s password 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="changePasswordRequest">Password details.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> ChangeUserPasswordAsync (string userId, ChangePasswordRequest changePasswordRequest)
        {
             ApiResponse<User> localVarResponse = await ChangeUserPasswordAsyncWithHttpInfo(userId, changePasswordRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change user&#39;s password 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="changePasswordRequest">Password details.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> ChangeUserPasswordAsyncWithHttpInfo (string userId, ChangePasswordRequest changePasswordRequest)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->ChangeUserPassword");
            // verify the required parameter 'changePasswordRequest' is set
            if (changePasswordRequest == null)
                throw new ApiException(400, "Missing required parameter 'changePasswordRequest' when calling DefaultApi->ChangeUserPassword");

            var localVarPath = "/user/{userId}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (changePasswordRequest != null && changePasswordRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(changePasswordRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changePasswordRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Use the deployed model to classify the input 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ClassificationResult</returns>
        public ClassificationResult Classify (string deploymentName, string versionName, string modelName, Prediction body)
        {
             ApiResponse<ClassificationResult> localVarResponse = ClassifyWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use the deployed model to classify the input 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ApiResponse of ClassificationResult</returns>
        public ApiResponse< ClassificationResult > ClassifyWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Classify");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Classify");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Classify");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Classify");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClassificationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationResult)));
        }

        /// <summary>
        /// Use the deployed model to classify the input 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ClassificationResult</returns>
        public async System.Threading.Tasks.Task<ClassificationResult> ClassifyAsync (string deploymentName, string versionName, string modelName, Prediction body)
        {
             ApiResponse<ClassificationResult> localVarResponse = await ClassifyAsyncWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use the deployed model to classify the input 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ApiResponse (ClassificationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClassificationResult>> ClassifyAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Classify");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Classify");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Classify");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Classify");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClassificationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationResult)));
        }

        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Base64NDArrayBody</returns>
        public Base64NDArrayBody Classifyarray (string deploymentName, string versionName, string modelName, Prediction body)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = ClassifyarrayWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        public ApiResponse< Base64NDArrayBody > ClassifyarrayWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Classifyarray");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Classifyarray");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Classifyarray");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Classifyarray");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classifyarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        public async System.Threading.Tasks.Task<Base64NDArrayBody> ClassifyarrayAsync (string deploymentName, string versionName, string modelName, Prediction body)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = await ClassifyarrayAsyncWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> ClassifyarrayAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Classifyarray");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Classifyarray");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Classifyarray");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Classifyarray");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classifyarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>ClassificationResult</returns>
        public ClassificationResult Classifyimage (string deploymentName, string versionName, string modelName, System.IO.Stream image = null)
        {
             ApiResponse<ClassificationResult> localVarResponse = ClassifyimageWithHttpInfo(deploymentName, versionName, modelName, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>ApiResponse of ClassificationResult</returns>
        public ApiResponse< ClassificationResult > ClassifyimageWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream image = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Classifyimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Classifyimage");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Classifyimage");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classifyimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClassificationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationResult)));
        }

        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of ClassificationResult</returns>
        public async System.Threading.Tasks.Task<ClassificationResult> ClassifyimageAsync (string deploymentName, string versionName, string modelName, System.IO.Stream image = null)
        {
             ApiResponse<ClassificationResult> localVarResponse = await ClassifyimageAsyncWithHttpInfo(deploymentName, versionName, modelName, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (ClassificationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClassificationResult>> ClassifyimageAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream image = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Classifyimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Classifyimage");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Classifyimage");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classifyimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClassificationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationResult)));
        }

        /// <summary>
        /// Clears the accumulated data for retraining. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>FeedbackResponse</returns>
        public FeedbackResponse ClearState ()
        {
             ApiResponse<FeedbackResponse> localVarResponse = ClearStateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clears the accumulated data for retraining. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FeedbackResponse</returns>
        public ApiResponse< FeedbackResponse > ClearStateWithHttpInfo ()
        {

            var localVarPath = "/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeedbackResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeedbackResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeedbackResponse)));
        }

        /// <summary>
        /// Clears the accumulated data for retraining. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of FeedbackResponse</returns>
        public async System.Threading.Tasks.Task<FeedbackResponse> ClearStateAsync ()
        {
             ApiResponse<FeedbackResponse> localVarResponse = await ClearStateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clears the accumulated data for retraining. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (FeedbackResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeedbackResponse>> ClearStateAsyncWithHttpInfo ()
        {

            var localVarPath = "/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeedbackResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeedbackResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeedbackResponse)));
        }

        /// <summary>
        /// Create a job 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>JobEntity</returns>
        public JobEntity CreateJob (string jobIdOrType, CreateJobRequest createJobRequest)
        {
             ApiResponse<JobEntity> localVarResponse = CreateJobWithHttpInfo(jobIdOrType, createJobRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a job 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>ApiResponse of JobEntity</returns>
        public ApiResponse< JobEntity > CreateJobWithHttpInfo (string jobIdOrType, CreateJobRequest createJobRequest)
        {
            // verify the required parameter 'jobIdOrType' is set
            if (jobIdOrType == null)
                throw new ApiException(400, "Missing required parameter 'jobIdOrType' when calling DefaultApi->CreateJob");
            // verify the required parameter 'createJobRequest' is set
            if (createJobRequest == null)
                throw new ApiException(400, "Missing required parameter 'createJobRequest' when calling DefaultApi->CreateJob");

            var localVarPath = "/jobs/{jobIdOrType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIdOrType != null) localVarPathParams.Add("jobIdOrType", this.Configuration.ApiClient.ParameterToString(jobIdOrType)); // path parameter
            if (createJobRequest != null && createJobRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createJobRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createJobRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Create a job 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>Task of JobEntity</returns>
        public async System.Threading.Tasks.Task<JobEntity> CreateJobAsync (string jobIdOrType, CreateJobRequest createJobRequest)
        {
             ApiResponse<JobEntity> localVarResponse = await CreateJobAsyncWithHttpInfo(jobIdOrType, createJobRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a job 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job Type</param>
        /// <param name="createJobRequest">Create job request object</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobEntity>> CreateJobAsyncWithHttpInfo (string jobIdOrType, CreateJobRequest createJobRequest)
        {
            // verify the required parameter 'jobIdOrType' is set
            if (jobIdOrType == null)
                throw new ApiException(400, "Missing required parameter 'jobIdOrType' when calling DefaultApi->CreateJob");
            // verify the required parameter 'createJobRequest' is set
            if (createJobRequest == null)
                throw new ApiException(400, "Missing required parameter 'createJobRequest' when calling DefaultApi->CreateJob");

            var localVarPath = "/jobs/{jobIdOrType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIdOrType != null) localVarPathParams.Add("jobIdOrType", this.Configuration.ApiClient.ParameterToString(jobIdOrType)); // path parameter
            if (createJobRequest != null && createJobRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createJobRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createJobRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Creates model History 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>ModelHistoryEntity</returns>
        public ModelHistoryEntity CreateModelHistory (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = CreateModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates model History 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        public ApiResponse< ModelHistoryEntity > CreateModelHistoryWithHttpInfo (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->CreateModelHistory");
            // verify the required parameter 'modelHistoryEntity' is set
            if (modelHistoryEntity == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryEntity' when calling DefaultApi->CreateModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryEntity != null && modelHistoryEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelHistoryEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelHistoryEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Creates model History 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        public async System.Threading.Tasks.Task<ModelHistoryEntity> CreateModelHistoryAsync (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = await CreateModelHistoryAsyncWithHttpInfo(modelHistoryServerId, modelHistoryEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates model History 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryEntity">The model history entity</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> CreateModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, ModelHistoryEntity modelHistoryEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->CreateModelHistory");
            // verify the required parameter 'modelHistoryEntity' is set
            if (modelHistoryEntity == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryEntity' when calling DefaultApi->CreateModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryEntity != null && modelHistoryEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelHistoryEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelHistoryEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Delete credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns></returns>
        public void DeleteCredentialsById (long? credentialId)
        {
             DeleteCredentialsByIdWithHttpInfo(credentialId);
        }

        /// <summary>
        /// Delete credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCredentialsByIdWithHttpInfo (long? credentialId)
        {
            // verify the required parameter 'credentialId' is set
            if (credentialId == null)
                throw new ApiException(400, "Missing required parameter 'credentialId' when calling DefaultApi->DeleteCredentialsById");

            var localVarPath = "/resources/credentials/{credentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentialId != null) localVarPathParams.Add("credentialId", this.Configuration.ApiClient.ParameterToString(credentialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCredentialsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCredentialsByIdAsync (long? credentialId)
        {
             await DeleteCredentialsByIdAsyncWithHttpInfo(credentialId);

        }

        /// <summary>
        /// Delete credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCredentialsByIdAsyncWithHttpInfo (long? credentialId)
        {
            // verify the required parameter 'credentialId' is set
            if (credentialId == null)
                throw new ApiException(400, "Missing required parameter 'credentialId' when calling DefaultApi->DeleteCredentialsById");

            var localVarPath = "/resources/credentials/{credentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentialId != null) localVarPathParams.Add("credentialId", this.Configuration.ApiClient.ParameterToString(credentialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCredentialsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 DeleteExperiment (string modelHistoryServerId, string experimentID)
        {
             ApiResponse<InlineResponse200> localVarResponse = DeleteExperimentWithHttpInfo(modelHistoryServerId, experimentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > DeleteExperimentWithHttpInfo (string modelHistoryServerId, string experimentID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->DeleteExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling DefaultApi->DeleteExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Deletes an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> DeleteExperimentAsync (string modelHistoryServerId, string experimentID)
        {
             ApiResponse<InlineResponse200> localVarResponse = await DeleteExperimentAsyncWithHttpInfo(modelHistoryServerId, experimentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to delete</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->DeleteExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling DefaultApi->DeleteExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Deletes a job given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns></returns>
        public void DeleteJobById (long? jobIdOrType)
        {
             DeleteJobByIdWithHttpInfo(jobIdOrType);
        }

        /// <summary>
        /// Deletes a job given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobByIdWithHttpInfo (long? jobIdOrType)
        {
            // verify the required parameter 'jobIdOrType' is set
            if (jobIdOrType == null)
                throw new ApiException(400, "Missing required parameter 'jobIdOrType' when calling DefaultApi->DeleteJobById");

            var localVarPath = "/jobs/{jobIdOrType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIdOrType != null) localVarPathParams.Add("jobIdOrType", this.Configuration.ApiClient.ParameterToString(jobIdOrType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a job given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobByIdAsync (long? jobIdOrType)
        {
             await DeleteJobByIdAsyncWithHttpInfo(jobIdOrType);

        }

        /// <summary>
        /// Deletes a job given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobByIdAsyncWithHttpInfo (long? jobIdOrType)
        {
            // verify the required parameter 'jobIdOrType' is set
            if (jobIdOrType == null)
                throw new ApiException(400, "Missing required parameter 'jobIdOrType' when calling DefaultApi->DeleteJobById");

            var localVarPath = "/jobs/{jobIdOrType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIdOrType != null) localVarPathParams.Add("jobIdOrType", this.Configuration.ApiClient.ParameterToString(jobIdOrType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a model by deployment and model id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 DeleteModel (string deploymentId, string modelId)
        {
             ApiResponse<InlineResponse200> localVarResponse = DeleteModelWithHttpInfo(deploymentId, modelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a model by deployment and model id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > DeleteModelWithHttpInfo (string deploymentId, string modelId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->DeleteModel");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DefaultApi->DeleteModel");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Delete a model by deployment and model id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> DeleteModelAsync (string deploymentId, string modelId)
        {
             ApiResponse<InlineResponse200> localVarResponse = await DeleteModelAsyncWithHttpInfo(deploymentId, modelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a model by deployment and model id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteModelAsyncWithHttpInfo (string deploymentId, string modelId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->DeleteModel");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DefaultApi->DeleteModel");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Deletes a model history / workspace, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 DeleteModelHistory (string modelHistoryServerId, string modelHistoryID)
        {
             ApiResponse<InlineResponse200> localVarResponse = DeleteModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a model history / workspace, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > DeleteModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->DeleteModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling DefaultApi->DeleteModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Deletes a model history / workspace, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> DeleteModelHistoryAsync (string modelHistoryServerId, string modelHistoryID)
        {
             ApiResponse<InlineResponse200> localVarResponse = await DeleteModelHistoryAsyncWithHttpInfo(modelHistoryServerId, modelHistoryID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a model history / workspace, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to delete</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->DeleteModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling DefaultApi->DeleteModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Deletes a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns></returns>
        public void DeleteModelInstance (string modelHistoryServerId, string modelInstanceID)
        {
             DeleteModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceID);
        }

        /// <summary>
        /// Deletes a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteModelInstanceWithHttpInfo (string modelHistoryServerId, string modelInstanceID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->DeleteModelInstance");
            // verify the required parameter 'modelInstanceID' is set
            if (modelInstanceID == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceID' when calling DefaultApi->DeleteModelInstance");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceID != null) localVarPathParams.Add("modelInstanceID", this.Configuration.ApiClient.ParameterToString(modelInstanceID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteModelInstanceAsync (string modelHistoryServerId, string modelInstanceID)
        {
             await DeleteModelInstanceAsyncWithHttpInfo(modelHistoryServerId, modelInstanceID);

        }

        /// <summary>
        /// Deletes a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelInstanceAsyncWithHttpInfo (string modelHistoryServerId, string modelInstanceID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->DeleteModelInstance");
            // verify the required parameter 'modelInstanceID' is set
            if (modelInstanceID == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceID' when calling DefaultApi->DeleteModelInstance");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceID != null) localVarPathParams.Add("modelInstanceID", this.Configuration.ApiClient.ParameterToString(modelInstanceID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Resource</returns>
        public Resource DeleteResourceById (long? resourceId)
        {
             ApiResponse<Resource> localVarResponse = DeleteResourceByIdWithHttpInfo(resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Resource</returns>
        public ApiResponse< Resource > DeleteResourceByIdWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DefaultApi->DeleteResourceById");

            var localVarPath = "/resources/remove/resource/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Resource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Resource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Resource)));
        }

        /// <summary>
        /// Delete the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of Resource</returns>
        public async System.Threading.Tasks.Task<Resource> DeleteResourceByIdAsync (long? resourceId)
        {
             ApiResponse<Resource> localVarResponse = await DeleteResourceByIdAsyncWithHttpInfo(resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse (Resource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Resource>> DeleteResourceByIdAsyncWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DefaultApi->DeleteResourceById");

            var localVarPath = "/resources/remove/resource/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Resource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Resource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Resource)));
        }

        /// <summary>
        /// Removes a resource from a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns></returns>
        public void DeleteResourceFromGroup (long? resourceGroupId, long? resourceId)
        {
             DeleteResourceFromGroupWithHttpInfo(resourceGroupId, resourceId);
        }

        /// <summary>
        /// Removes a resource from a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteResourceFromGroupWithHttpInfo (long? resourceGroupId, long? resourceId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling DefaultApi->DeleteResourceFromGroup");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DefaultApi->DeleteResourceFromGroup");

            var localVarPath = "/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Removes a resource from a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteResourceFromGroupAsync (long? resourceGroupId, long? resourceId)
        {
             await DeleteResourceFromGroupAsyncWithHttpInfo(resourceGroupId, resourceId);

        }

        /// <summary>
        /// Removes a resource from a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResourceFromGroupAsyncWithHttpInfo (long? resourceGroupId, long? resourceId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling DefaultApi->DeleteResourceFromGroup");
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DefaultApi->DeleteResourceFromGroup");

            var localVarPath = "/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter
            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ResourceGroup</returns>
        public ResourceGroup DeleteResourceGroupById (long? resourceGroupId)
        {
             ApiResponse<ResourceGroup> localVarResponse = DeleteResourceGroupByIdWithHttpInfo(resourceGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ApiResponse of ResourceGroup</returns>
        public ApiResponse< ResourceGroup > DeleteResourceGroupByIdWithHttpInfo (long? resourceGroupId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling DefaultApi->DeleteResourceGroupById");

            var localVarPath = "/resources/remove/group/{resourceGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResourceGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceGroup)));
        }

        /// <summary>
        /// Delete the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ResourceGroup</returns>
        public async System.Threading.Tasks.Task<ResourceGroup> DeleteResourceGroupByIdAsync (long? resourceGroupId)
        {
             ApiResponse<ResourceGroup> localVarResponse = await DeleteResourceGroupByIdAsyncWithHttpInfo(resourceGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ApiResponse (ResourceGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceGroup>> DeleteResourceGroupByIdAsyncWithHttpInfo (long? resourceGroupId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling DefaultApi->DeleteResourceGroupById");

            var localVarPath = "/resources/remove/group/{resourceGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResourceGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResourceGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceGroup)));
        }

        /// <summary>
        /// Deploy a model in a deployment group. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>ModelEntity</returns>
        public ModelEntity DeployModel (string deploymentId, ImportModelRequest body)
        {
             ApiResponse<ModelEntity> localVarResponse = DeployModelWithHttpInfo(deploymentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deploy a model in a deployment group. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        public ApiResponse< ModelEntity > DeployModelWithHttpInfo (string deploymentId, ImportModelRequest body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->DeployModel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DeployModel");

            var localVarPath = "/deployment/{deploymentId}/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeployModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

        /// <summary>
        /// Deploy a model in a deployment group. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>Task of ModelEntity</returns>
        public async System.Threading.Tasks.Task<ModelEntity> DeployModelAsync (string deploymentId, ImportModelRequest body)
        {
             ApiResponse<ModelEntity> localVarResponse = await DeployModelAsyncWithHttpInfo(deploymentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deploy a model in a deployment group. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the model import request</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelEntity>> DeployModelAsyncWithHttpInfo (string deploymentId, ImportModelRequest body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->DeployModel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DeployModel");

            var localVarPath = "/deployment/{deploymentId}/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeployModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

        /// <summary>
        /// Create a new deployment group. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>DeploymentResponse</returns>
        public DeploymentResponse DeploymentCreate (CreateDeploymentRequest body)
        {
             ApiResponse<DeploymentResponse> localVarResponse = DeploymentCreateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new deployment group. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        public ApiResponse< DeploymentResponse > DeploymentCreateWithHttpInfo (CreateDeploymentRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DeploymentCreate");

            var localVarPath = "/deployment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeploymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResponse)));
        }

        /// <summary>
        /// Create a new deployment group. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of DeploymentResponse</returns>
        public async System.Threading.Tasks.Task<DeploymentResponse> DeploymentCreateAsync (CreateDeploymentRequest body)
        {
             ApiResponse<DeploymentResponse> localVarResponse = await DeploymentCreateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new deployment group. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> DeploymentCreateAsyncWithHttpInfo (CreateDeploymentRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DeploymentCreate");

            var localVarPath = "/deployment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeploymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResponse)));
        }

        /// <summary>
        /// Delete a deployment by id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 DeploymentDelete (string deploymentId)
        {
             ApiResponse<InlineResponse200> localVarResponse = DeploymentDeleteWithHttpInfo(deploymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a deployment by id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > DeploymentDeleteWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->DeploymentDelete");

            var localVarPath = "/deployment/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Delete a deployment by id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> DeploymentDeleteAsync (string deploymentId)
        {
             ApiResponse<InlineResponse200> localVarResponse = await DeploymentDeleteAsyncWithHttpInfo(deploymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a deployment by id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeploymentDeleteAsyncWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->DeploymentDelete");

            var localVarPath = "/deployment/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get a deployment details by id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>DeploymentResponse</returns>
        public DeploymentResponse DeploymentGet (string deploymentId)
        {
             ApiResponse<DeploymentResponse> localVarResponse = DeploymentGetWithHttpInfo(deploymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a deployment details by id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        public ApiResponse< DeploymentResponse > DeploymentGetWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->DeploymentGet");

            var localVarPath = "/deployment/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeploymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResponse)));
        }

        /// <summary>
        /// Get a deployment details by id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of DeploymentResponse</returns>
        public async System.Threading.Tasks.Task<DeploymentResponse> DeploymentGetAsync (string deploymentId)
        {
             ApiResponse<DeploymentResponse> localVarResponse = await DeploymentGetAsyncWithHttpInfo(deploymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a deployment details by id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">Id of the deployment group</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> DeploymentGetAsyncWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->DeploymentGet");

            var localVarPath = "/deployment/{deploymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeploymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeploymentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeploymentResponse)));
        }

        /// <summary>
        /// Get a list of deployments 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DeploymentResponse&gt;</returns>
        public List<DeploymentResponse> Deployments ()
        {
             ApiResponse<List<DeploymentResponse>> localVarResponse = DeploymentsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of deployments 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DeploymentResponse&gt;</returns>
        public ApiResponse< List<DeploymentResponse> > DeploymentsWithHttpInfo ()
        {

            var localVarPath = "/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Deployments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeploymentResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentResponse>)));
        }

        /// <summary>
        /// Get a list of deployments 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DeploymentResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeploymentResponse>> DeploymentsAsync ()
        {
             ApiResponse<List<DeploymentResponse>> localVarResponse = await DeploymentsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of deployments 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DeploymentResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeploymentResponse>>> DeploymentsAsyncWithHttpInfo ()
        {

            var localVarPath = "/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Deployments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeploymentResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DeploymentResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeploymentResponse>)));
        }

        /// <summary>
        /// Detect the objects, given a (input) prediction request 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="id">the GUID for mapping the results in the detections</param>
        /// <param name="needsPreprocessing">(true) if the image needs preprocessing</param>
        /// <param name="threshold">A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.</param>
        /// <param name="file">the image file to detect objects from</param>
        /// <returns>DetectionResult</returns>
        public DetectionResult Detectobjects (string deploymentName, string versionName, string modelName, string id, bool? needsPreprocessing, float? threshold, System.IO.Stream file)
        {
             ApiResponse<DetectionResult> localVarResponse = DetectobjectsWithHttpInfo(deploymentName, versionName, modelName, id, needsPreprocessing, threshold, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detect the objects, given a (input) prediction request 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="id">the GUID for mapping the results in the detections</param>
        /// <param name="needsPreprocessing">(true) if the image needs preprocessing</param>
        /// <param name="threshold">A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.</param>
        /// <param name="file">the image file to detect objects from</param>
        /// <returns>ApiResponse of DetectionResult</returns>
        public ApiResponse< DetectionResult > DetectobjectsWithHttpInfo (string deploymentName, string versionName, string modelName, string id, bool? needsPreprocessing, float? threshold, System.IO.Stream file)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Detectobjects");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Detectobjects");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Detectobjects");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->Detectobjects");
            // verify the required parameter 'needsPreprocessing' is set
            if (needsPreprocessing == null)
                throw new ApiException(400, "Missing required parameter 'needsPreprocessing' when calling DefaultApi->Detectobjects");
            // verify the required parameter 'threshold' is set
            if (threshold == null)
                throw new ApiException(400, "Missing required parameter 'threshold' when calling DefaultApi->Detectobjects");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling DefaultApi->Detectobjects");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (needsPreprocessing != null) localVarFormParams.Add("needsPreprocessing", this.Configuration.ApiClient.ParameterToString(needsPreprocessing)); // form parameter
            if (threshold != null) localVarFormParams.Add("threshold", this.Configuration.ApiClient.ParameterToString(threshold)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Detectobjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DetectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectionResult)));
        }

        /// <summary>
        /// Detect the objects, given a (input) prediction request 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="id">the GUID for mapping the results in the detections</param>
        /// <param name="needsPreprocessing">(true) if the image needs preprocessing</param>
        /// <param name="threshold">A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.</param>
        /// <param name="file">the image file to detect objects from</param>
        /// <returns>Task of DetectionResult</returns>
        public async System.Threading.Tasks.Task<DetectionResult> DetectobjectsAsync (string deploymentName, string versionName, string modelName, string id, bool? needsPreprocessing, float? threshold, System.IO.Stream file)
        {
             ApiResponse<DetectionResult> localVarResponse = await DetectobjectsAsyncWithHttpInfo(deploymentName, versionName, modelName, id, needsPreprocessing, threshold, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detect the objects, given a (input) prediction request 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="id">the GUID for mapping the results in the detections</param>
        /// <param name="needsPreprocessing">(true) if the image needs preprocessing</param>
        /// <param name="threshold">A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.</param>
        /// <param name="file">the image file to detect objects from</param>
        /// <returns>Task of ApiResponse (DetectionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetectionResult>> DetectobjectsAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, string id, bool? needsPreprocessing, float? threshold, System.IO.Stream file)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Detectobjects");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Detectobjects");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Detectobjects");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->Detectobjects");
            // verify the required parameter 'needsPreprocessing' is set
            if (needsPreprocessing == null)
                throw new ApiException(400, "Missing required parameter 'needsPreprocessing' when calling DefaultApi->Detectobjects");
            // verify the required parameter 'threshold' is set
            if (threshold == null)
                throw new ApiException(400, "Missing required parameter 'threshold' when calling DefaultApi->Detectobjects");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling DefaultApi->Detectobjects");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (needsPreprocessing != null) localVarFormParams.Add("needsPreprocessing", this.Configuration.ApiClient.ParameterToString(needsPreprocessing)); // form parameter
            if (threshold != null) localVarFormParams.Add("threshold", this.Configuration.ApiClient.ParameterToString(threshold)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Detectobjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DetectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectionResult)));
        }

        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns></returns>
        public void DownloadJobOutputFile (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest)
        {
             DownloadJobOutputFileWithHttpInfo(jobId, downloadOutputFileRequest);
        }

        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DownloadJobOutputFileWithHttpInfo (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DefaultApi->DownloadJobOutputFile");
            // verify the required parameter 'downloadOutputFileRequest' is set
            if (downloadOutputFileRequest == null)
                throw new ApiException(400, "Missing required parameter 'downloadOutputFileRequest' when calling DefaultApi->DownloadJobOutputFile");

            var localVarPath = "/jobs/{jobId}/outputfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (downloadOutputFileRequest != null && downloadOutputFileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(downloadOutputFileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = downloadOutputFileRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadJobOutputFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadJobOutputFileAsync (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest)
        {
             await DownloadJobOutputFileAsyncWithHttpInfo(jobId, downloadOutputFileRequest);

        }

        /// <summary>
        /// Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <param name="downloadOutputFileRequest">Download output file request object</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DownloadJobOutputFileAsyncWithHttpInfo (long? jobId, DownloadOutputFileRequest downloadOutputFileRequest)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DefaultApi->DownloadJobOutputFile");
            // verify the required parameter 'downloadOutputFileRequest' is set
            if (downloadOutputFileRequest == null)
                throw new ApiException(400, "Missing required parameter 'downloadOutputFileRequest' when calling DefaultApi->DownloadJobOutputFile");

            var localVarPath = "/jobs/{jobId}/outputfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (downloadOutputFileRequest != null && downloadOutputFileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(downloadOutputFileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = downloadOutputFileRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadJobOutputFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Generate new auth token 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenGenerateRequest">Auth token details.</param>
        /// <returns>Token</returns>
        public Token GenerateAuthToken (TokenGenerateRequest tokenGenerateRequest)
        {
             ApiResponse<Token> localVarResponse = GenerateAuthTokenWithHttpInfo(tokenGenerateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate new auth token 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenGenerateRequest">Auth token details.</param>
        /// <returns>ApiResponse of Token</returns>
        public ApiResponse< Token > GenerateAuthTokenWithHttpInfo (TokenGenerateRequest tokenGenerateRequest)
        {
            // verify the required parameter 'tokenGenerateRequest' is set
            if (tokenGenerateRequest == null)
                throw new ApiException(400, "Missing required parameter 'tokenGenerateRequest' when calling DefaultApi->GenerateAuthToken");

            var localVarPath = "/auth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenGenerateRequest != null && tokenGenerateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenGenerateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenGenerateRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateAuthToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Token) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Token)));
        }

        /// <summary>
        /// Generate new auth token 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenGenerateRequest">Auth token details.</param>
        /// <returns>Task of Token</returns>
        public async System.Threading.Tasks.Task<Token> GenerateAuthTokenAsync (TokenGenerateRequest tokenGenerateRequest)
        {
             ApiResponse<Token> localVarResponse = await GenerateAuthTokenAsyncWithHttpInfo(tokenGenerateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate new auth token 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenGenerateRequest">Auth token details.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Token>> GenerateAuthTokenAsyncWithHttpInfo (TokenGenerateRequest tokenGenerateRequest)
        {
            // verify the required parameter 'tokenGenerateRequest' is set
            if (tokenGenerateRequest == null)
                throw new ApiException(400, "Missing required parameter 'tokenGenerateRequest' when calling DefaultApi->GenerateAuthToken");

            var localVarPath = "/auth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenGenerateRequest != null && tokenGenerateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenGenerateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenGenerateRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateAuthToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Token) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Token)));
        }

        /// <summary>
        /// Get a list of all available jobs 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;JobEntity&gt;</returns>
        public List<JobEntity> GetAllJobs ()
        {
             ApiResponse<List<JobEntity>> localVarResponse = GetAllJobsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all available jobs 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;JobEntity&gt;</returns>
        public ApiResponse< List<JobEntity> > GetAllJobsWithHttpInfo ()
        {

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobEntity>)));
        }

        /// <summary>
        /// Get a list of all available jobs 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;JobEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobEntity>> GetAllJobsAsync ()
        {
             ApiResponse<List<JobEntity>> localVarResponse = await GetAllJobsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all available jobs 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;JobEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobEntity>>> GetAllJobsAsyncWithHttpInfo ()
        {

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobEntity>)));
        }

        /// <summary>
        /// Get the memory mapped array based on the array type. The array is specified through a file path, in the configuration object, during model server deployment.
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">The format in which the memory mapped array is returned.</param>
        /// <returns></returns>
        public void GetArray (string accept, string arrayType)
        {
             GetArrayWithHttpInfo(accept, arrayType);
        }

        /// <summary>
        /// Get the memory mapped array based on the array type. The array is specified through a file path, in the configuration object, during model server deployment.
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">The format in which the memory mapped array is returned.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetArrayWithHttpInfo (string accept, string arrayType)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->GetArray");
            // verify the required parameter 'arrayType' is set
            if (arrayType == null)
                throw new ApiException(400, "Missing required parameter 'arrayType' when calling DefaultApi->GetArray");

            var localVarPath = "/array/{arrayType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arrayType != null) localVarPathParams.Add("arrayType", this.Configuration.ApiClient.ParameterToString(arrayType)); // path parameter
            if (accept != null) localVarHeaderParams.Add("accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get the memory mapped array based on the array type. The array is specified through a file path, in the configuration object, during model server deployment.
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">The format in which the memory mapped array is returned.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetArrayAsync (string accept, string arrayType)
        {
             await GetArrayAsyncWithHttpInfo(accept, arrayType);

        }

        /// <summary>
        /// Get the memory mapped array based on the array type. The array is specified through a file path, in the configuration object, during model server deployment.
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">The format in which the memory mapped array is returned.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetArrayAsyncWithHttpInfo (string accept, string arrayType)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->GetArray");
            // verify the required parameter 'arrayType' is set
            if (arrayType == null)
                throw new ApiException(400, "Missing required parameter 'arrayType' when calling DefaultApi->GetArray");

            var localVarPath = "/array/{arrayType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arrayType != null) localVarPathParams.Add("arrayType", this.Configuration.ApiClient.ParameterToString(arrayType)); // path parameter
            if (accept != null) localVarHeaderParams.Add("accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get the memory mapped array indices based on the array type. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="input">Input indices array (optional)</param>
        /// <returns></returns>
        public void GetArrayIndices (string contentType, string accept, string arrayType, string input = null)
        {
             GetArrayIndicesWithHttpInfo(contentType, accept, arrayType, input);
        }

        /// <summary>
        /// Get the memory mapped array indices based on the array type. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="input">Input indices array (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetArrayIndicesWithHttpInfo (string contentType, string accept, string arrayType, string input = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->GetArrayIndices");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->GetArrayIndices");
            // verify the required parameter 'arrayType' is set
            if (arrayType == null)
                throw new ApiException(400, "Missing required parameter 'arrayType' when calling DefaultApi->GetArrayIndices");

            var localVarPath = "/array/indices/{arrayType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arrayType != null) localVarPathParams.Add("arrayType", this.Configuration.ApiClient.ParameterToString(arrayType)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayIndices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get the memory mapped array indices based on the array type. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="input">Input indices array (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetArrayIndicesAsync (string contentType, string accept, string arrayType, string input = null)
        {
             await GetArrayIndicesAsyncWithHttpInfo(contentType, accept, arrayType, input);

        }

        /// <summary>
        /// Get the memory mapped array indices based on the array type. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="input">Input indices array (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetArrayIndicesAsyncWithHttpInfo (string contentType, string accept, string arrayType, string input = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->GetArrayIndices");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->GetArrayIndices");
            // verify the required parameter 'arrayType' is set
            if (arrayType == null)
                throw new ApiException(400, "Missing required parameter 'arrayType' when calling DefaultApi->GetArrayIndices");

            var localVarPath = "/array/indices/{arrayType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arrayType != null) localVarPathParams.Add("arrayType", this.Configuration.ApiClient.ParameterToString(arrayType)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (accept != null) localVarHeaderParams.Add("accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayIndices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get the memory mapped array within a range based on the array type. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns></returns>
        public void GetArrayRange (string accept, string arrayType, int? from, int? to)
        {
             GetArrayRangeWithHttpInfo(accept, arrayType, from, to);
        }

        /// <summary>
        /// Get the memory mapped array within a range based on the array type. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetArrayRangeWithHttpInfo (string accept, string arrayType, int? from, int? to)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->GetArrayRange");
            // verify the required parameter 'arrayType' is set
            if (arrayType == null)
                throw new ApiException(400, "Missing required parameter 'arrayType' when calling DefaultApi->GetArrayRange");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling DefaultApi->GetArrayRange");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling DefaultApi->GetArrayRange");

            var localVarPath = "/array/range/{from}/{to}/{arrayType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arrayType != null) localVarPathParams.Add("arrayType", this.Configuration.ApiClient.ParameterToString(arrayType)); // path parameter
            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (accept != null) localVarHeaderParams.Add("accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get the memory mapped array within a range based on the array type. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetArrayRangeAsync (string accept, string arrayType, int? from, int? to)
        {
             await GetArrayRangeAsyncWithHttpInfo(accept, arrayType, from, to);

        }

        /// <summary>
        /// Get the memory mapped array within a range based on the array type. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"></param>
        /// <param name="arrayType">Format in which the memory mapped array is returned in.</param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetArrayRangeAsyncWithHttpInfo (string accept, string arrayType, int? from, int? to)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->GetArrayRange");
            // verify the required parameter 'arrayType' is set
            if (arrayType == null)
                throw new ApiException(400, "Missing required parameter 'arrayType' when calling DefaultApi->GetArrayRange");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling DefaultApi->GetArrayRange");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling DefaultApi->GetArrayRange");

            var localVarPath = "/array/range/{from}/{to}/{arrayType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arrayType != null) localVarPathParams.Add("arrayType", this.Configuration.ApiClient.ParameterToString(arrayType)); // path parameter
            if (from != null) localVarPathParams.Add("from", this.Configuration.ApiClient.ParameterToString(from)); // path parameter
            if (to != null) localVarPathParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // path parameter
            if (accept != null) localVarHeaderParams.Add("accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArrayRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get auth policy 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthPolicy</returns>
        public AuthPolicy GetAuthPolicy ()
        {
             ApiResponse<AuthPolicy> localVarResponse = GetAuthPolicyWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get auth policy 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthPolicy</returns>
        public ApiResponse< AuthPolicy > GetAuthPolicyWithHttpInfo ()
        {

            var localVarPath = "/auth/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthPolicy)));
        }

        /// <summary>
        /// Get auth policy 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AuthPolicy</returns>
        public async System.Threading.Tasks.Task<AuthPolicy> GetAuthPolicyAsync ()
        {
             ApiResponse<AuthPolicy> localVarResponse = await GetAuthPolicyAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get auth policy 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AuthPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthPolicy>> GetAuthPolicyAsyncWithHttpInfo ()
        {

            var localVarPath = "/auth/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthPolicy)));
        }

        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>ModelInstanceEntity</returns>
        public ModelInstanceEntity GetBestModelAmongModelIds (string modelHistoryServerId, BestModel bestModel)
        {
             ApiResponse<ModelInstanceEntity> localVarResponse = GetBestModelAmongModelIdsWithHttpInfo(modelHistoryServerId, bestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>ApiResponse of ModelInstanceEntity</returns>
        public ApiResponse< ModelInstanceEntity > GetBestModelAmongModelIdsWithHttpInfo (string modelHistoryServerId, BestModel bestModel)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetBestModelAmongModelIds");
            // verify the required parameter 'bestModel' is set
            if (bestModel == null)
                throw new ApiException(400, "Missing required parameter 'bestModel' when calling DefaultApi->GetBestModelAmongModelIds");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/best";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (bestModel != null && bestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bestModel; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBestModelAmongModelIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelInstanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelInstanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelInstanceEntity)));
        }

        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>Task of ModelInstanceEntity</returns>
        public async System.Threading.Tasks.Task<ModelInstanceEntity> GetBestModelAmongModelIdsAsync (string modelHistoryServerId, BestModel bestModel)
        {
             ApiResponse<ModelInstanceEntity> localVarResponse = await GetBestModelAmongModelIdsAsyncWithHttpInfo(modelHistoryServerId, bestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the best model among the given model instance IDs, based on the evaluation type and column metric 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="bestModel">Object encapsulating the model ids, eval type and column metric name</param>
        /// <returns>Task of ApiResponse (ModelInstanceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelInstanceEntity>> GetBestModelAmongModelIdsAsyncWithHttpInfo (string modelHistoryServerId, BestModel bestModel)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetBestModelAmongModelIds");
            // verify the required parameter 'bestModel' is set
            if (bestModel == null)
                throw new ApiException(400, "Missing required parameter 'bestModel' when calling DefaultApi->GetBestModelAmongModelIds");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/best";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (bestModel != null && bestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bestModel; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBestModelAmongModelIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelInstanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelInstanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelInstanceEntity)));
        }

        /// <summary>
        /// Get credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>ResourceCredentials</returns>
        public ResourceCredentials GetCredentialsById (long? credentialId)
        {
             ApiResponse<ResourceCredentials> localVarResponse = GetCredentialsByIdWithHttpInfo(credentialId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>ApiResponse of ResourceCredentials</returns>
        public ApiResponse< ResourceCredentials > GetCredentialsByIdWithHttpInfo (long? credentialId)
        {
            // verify the required parameter 'credentialId' is set
            if (credentialId == null)
                throw new ApiException(400, "Missing required parameter 'credentialId' when calling DefaultApi->GetCredentialsById");

            var localVarPath = "/resources/credentials/{credentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentialId != null) localVarPathParams.Add("credentialId", this.Configuration.ApiClient.ParameterToString(credentialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredentialsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResourceCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceCredentials)));
        }

        /// <summary>
        /// Get credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of ResourceCredentials</returns>
        public async System.Threading.Tasks.Task<ResourceCredentials> GetCredentialsByIdAsync (long? credentialId)
        {
             ApiResponse<ResourceCredentials> localVarResponse = await GetCredentialsByIdAsyncWithHttpInfo(credentialId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get credentials given an ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentialId">Credentials ID</param>
        /// <returns>Task of ApiResponse (ResourceCredentials)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceCredentials>> GetCredentialsByIdAsyncWithHttpInfo (long? credentialId)
        {
            // verify the required parameter 'credentialId' is set
            if (credentialId == null)
                throw new ApiException(400, "Missing required parameter 'credentialId' when calling DefaultApi->GetCredentialsById");

            var localVarPath = "/resources/credentials/{credentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentialId != null) localVarPathParams.Add("credentialId", this.Configuration.ApiClient.ParameterToString(credentialId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredentialsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResourceCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceCredentials)));
        }

        /// <summary>
        /// Returns the current model being used for retraining. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetCurrentModel ()
        {
             GetCurrentModelWithHttpInfo();
        }

        /// <summary>
        /// Returns the current model being used for retraining. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetCurrentModelWithHttpInfo ()
        {

            var localVarPath = "/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns the current model being used for retraining. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetCurrentModelAsync ()
        {
             await GetCurrentModelAsyncWithHttpInfo();

        }

        /// <summary>
        /// Returns the current model being used for retraining. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCurrentModelAsyncWithHttpInfo ()
        {

            var localVarPath = "/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>List&lt;EvaluationResultsEntity&gt;</returns>
        public List<EvaluationResultsEntity> GetEvaluationForModelID (string modelHistoryServerId, string modelInstanceID)
        {
             ApiResponse<List<EvaluationResultsEntity>> localVarResponse = GetEvaluationForModelIDWithHttpInfo(modelHistoryServerId, modelInstanceID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>ApiResponse of List&lt;EvaluationResultsEntity&gt;</returns>
        public ApiResponse< List<EvaluationResultsEntity> > GetEvaluationForModelIDWithHttpInfo (string modelHistoryServerId, string modelInstanceID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetEvaluationForModelID");
            // verify the required parameter 'modelInstanceID' is set
            if (modelInstanceID == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceID' when calling DefaultApi->GetEvaluationForModelID");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceID != null) localVarPathParams.Add("modelInstanceID", this.Configuration.ApiClient.ParameterToString(modelInstanceID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvaluationForModelID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EvaluationResultsEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EvaluationResultsEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EvaluationResultsEntity>)));
        }

        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>Task of List&lt;EvaluationResultsEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<EvaluationResultsEntity>> GetEvaluationForModelIDAsync (string modelHistoryServerId, string modelInstanceID)
        {
             ApiResponse<List<EvaluationResultsEntity>> localVarResponse = await GetEvaluationForModelIDAsyncWithHttpInfo(modelHistoryServerId, modelInstanceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the list of evaluation results entity, given a model instance ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get evaluation results for.</param>
        /// <returns>Task of ApiResponse (List&lt;EvaluationResultsEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EvaluationResultsEntity>>> GetEvaluationForModelIDAsyncWithHttpInfo (string modelHistoryServerId, string modelInstanceID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetEvaluationForModelID");
            // verify the required parameter 'modelInstanceID' is set
            if (modelInstanceID == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceID' when calling DefaultApi->GetEvaluationForModelID");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceID != null) localVarPathParams.Add("modelInstanceID", this.Configuration.ApiClient.ParameterToString(modelInstanceID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvaluationForModelID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EvaluationResultsEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EvaluationResultsEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EvaluationResultsEntity>)));
        }

        /// <summary>
        /// Gets all the examples for a minibatch ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>List&lt;ExampleEntity&gt;</returns>
        public List<ExampleEntity> GetExamplesForMinibatch (string modelHistoryServerId, string minibatchId)
        {
             ApiResponse<List<ExampleEntity>> localVarResponse = GetExamplesForMinibatchWithHttpInfo(modelHistoryServerId, minibatchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the examples for a minibatch ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>ApiResponse of List&lt;ExampleEntity&gt;</returns>
        public ApiResponse< List<ExampleEntity> > GetExamplesForMinibatchWithHttpInfo (string modelHistoryServerId, string minibatchId)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetExamplesForMinibatch");
            // verify the required parameter 'minibatchId' is set
            if (minibatchId == null)
                throw new ApiException(400, "Missing required parameter 'minibatchId' when calling DefaultApi->GetExamplesForMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/example/{minibatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (minibatchId != null) localVarPathParams.Add("minibatchId", this.Configuration.ApiClient.ParameterToString(minibatchId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExamplesForMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExampleEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExampleEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExampleEntity>)));
        }

        /// <summary>
        /// Gets all the examples for a minibatch ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of List&lt;ExampleEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExampleEntity>> GetExamplesForMinibatchAsync (string modelHistoryServerId, string minibatchId)
        {
             ApiResponse<List<ExampleEntity>> localVarResponse = await GetExamplesForMinibatchAsyncWithHttpInfo(modelHistoryServerId, minibatchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the examples for a minibatch ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of ApiResponse (List&lt;ExampleEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExampleEntity>>> GetExamplesForMinibatchAsyncWithHttpInfo (string modelHistoryServerId, string minibatchId)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetExamplesForMinibatch");
            // verify the required parameter 'minibatchId' is set
            if (minibatchId == null)
                throw new ApiException(400, "Missing required parameter 'minibatchId' when calling DefaultApi->GetExamplesForMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/example/{minibatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (minibatchId != null) localVarPathParams.Add("minibatchId", this.Configuration.ApiClient.ParameterToString(minibatchId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExamplesForMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExampleEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExampleEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExampleEntity>)));
        }

        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>ExperimentEntity</returns>
        public ExperimentEntity GetExperiment (string modelHistoryServerId, string experimentID)
        {
             ApiResponse<ExperimentEntity> localVarResponse = GetExperimentWithHttpInfo(modelHistoryServerId, experimentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        public ApiResponse< ExperimentEntity > GetExperimentWithHttpInfo (string modelHistoryServerId, string experimentID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling DefaultApi->GetExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>Task of ExperimentEntity</returns>
        public async System.Threading.Tasks.Task<ExperimentEntity> GetExperimentAsync (string modelHistoryServerId, string experimentID)
        {
             ApiResponse<ExperimentEntity> localVarResponse = await GetExperimentAsyncWithHttpInfo(modelHistoryServerId, experimentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtain an experiment&#39;s details, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to obtain</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> GetExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling DefaultApi->GetExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Obtain all experiments for a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>List&lt;ExperimentEntity&gt;</returns>
        public List<ExperimentEntity> GetExperimentsForModelHistory (string modelHistoryServerId, string modelHistoryID)
        {
             ApiResponse<List<ExperimentEntity>> localVarResponse = GetExperimentsForModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain all experiments for a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>ApiResponse of List&lt;ExperimentEntity&gt;</returns>
        public ApiResponse< List<ExperimentEntity> > GetExperimentsForModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetExperimentsForModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling DefaultApi->GetExperimentsForModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperimentsForModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExperimentEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExperimentEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExperimentEntity>)));
        }

        /// <summary>
        /// Obtain all experiments for a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>Task of List&lt;ExperimentEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExperimentEntity>> GetExperimentsForModelHistoryAsync (string modelHistoryServerId, string modelHistoryID)
        {
             ApiResponse<List<ExperimentEntity>> localVarResponse = await GetExperimentsForModelHistoryAsyncWithHttpInfo(modelHistoryServerId, modelHistoryID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtain all experiments for a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace</param>
        /// <returns>Task of ApiResponse (List&lt;ExperimentEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExperimentEntity>>> GetExperimentsForModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetExperimentsForModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling DefaultApi->GetExperimentsForModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExperimentsForModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExperimentEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExperimentEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExperimentEntity>)));
        }

        /// <summary>
        /// Get a job by its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>JobEntity</returns>
        public JobEntity GetJobById (long? jobIdOrType)
        {
             ApiResponse<JobEntity> localVarResponse = GetJobByIdWithHttpInfo(jobIdOrType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a job by its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>ApiResponse of JobEntity</returns>
        public ApiResponse< JobEntity > GetJobByIdWithHttpInfo (long? jobIdOrType)
        {
            // verify the required parameter 'jobIdOrType' is set
            if (jobIdOrType == null)
                throw new ApiException(400, "Missing required parameter 'jobIdOrType' when calling DefaultApi->GetJobById");

            var localVarPath = "/jobs/{jobIdOrType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIdOrType != null) localVarPathParams.Add("jobIdOrType", this.Configuration.ApiClient.ParameterToString(jobIdOrType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Get a job by its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of JobEntity</returns>
        public async System.Threading.Tasks.Task<JobEntity> GetJobByIdAsync (long? jobIdOrType)
        {
             ApiResponse<JobEntity> localVarResponse = await GetJobByIdAsyncWithHttpInfo(jobIdOrType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a job by its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIdOrType">Job ID</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobEntity>> GetJobByIdAsyncWithHttpInfo (long? jobIdOrType)
        {
            // verify the required parameter 'jobIdOrType' is set
            if (jobIdOrType == null)
                throw new ApiException(400, "Missing required parameter 'jobIdOrType' when calling DefaultApi->GetJobById");

            var localVarPath = "/jobs/{jobIdOrType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIdOrType != null) localVarPathParams.Add("jobIdOrType", this.Configuration.ApiClient.ParameterToString(jobIdOrType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Get the last evaluation specifications from the current model. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EvaluationResultsEntity</returns>
        public EvaluationResultsEntity GetLastEvaluation ()
        {
             ApiResponse<EvaluationResultsEntity> localVarResponse = GetLastEvaluationWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the last evaluation specifications from the current model. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EvaluationResultsEntity</returns>
        public ApiResponse< EvaluationResultsEntity > GetLastEvaluationWithHttpInfo ()
        {

            var localVarPath = "/lastevaluation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLastEvaluation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EvaluationResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EvaluationResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EvaluationResultsEntity)));
        }

        /// <summary>
        /// Get the last evaluation specifications from the current model. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of EvaluationResultsEntity</returns>
        public async System.Threading.Tasks.Task<EvaluationResultsEntity> GetLastEvaluationAsync ()
        {
             ApiResponse<EvaluationResultsEntity> localVarResponse = await GetLastEvaluationAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the last evaluation specifications from the current model. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (EvaluationResultsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EvaluationResultsEntity>> GetLastEvaluationAsyncWithHttpInfo ()
        {

            var localVarPath = "/lastevaluation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLastEvaluation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EvaluationResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EvaluationResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EvaluationResultsEntity)));
        }

        /// <summary>
        /// Gets a minibatch for the model 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>MinibatchEntity</returns>
        public MinibatchEntity GetMinibatch (string modelHistoryServerId, string minibatchId)
        {
             ApiResponse<MinibatchEntity> localVarResponse = GetMinibatchWithHttpInfo(modelHistoryServerId, minibatchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a minibatch for the model 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>ApiResponse of MinibatchEntity</returns>
        public ApiResponse< MinibatchEntity > GetMinibatchWithHttpInfo (string modelHistoryServerId, string minibatchId)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetMinibatch");
            // verify the required parameter 'minibatchId' is set
            if (minibatchId == null)
                throw new ApiException(400, "Missing required parameter 'minibatchId' when calling DefaultApi->GetMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (minibatchId != null) localVarPathParams.Add("minibatchId", this.Configuration.ApiClient.ParameterToString(minibatchId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MinibatchEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MinibatchEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MinibatchEntity)));
        }

        /// <summary>
        /// Gets a minibatch for the model 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of MinibatchEntity</returns>
        public async System.Threading.Tasks.Task<MinibatchEntity> GetMinibatchAsync (string modelHistoryServerId, string minibatchId)
        {
             ApiResponse<MinibatchEntity> localVarResponse = await GetMinibatchAsyncWithHttpInfo(modelHistoryServerId, minibatchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a minibatch for the model 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="minibatchId">The GUID of the minibatch</param>
        /// <returns>Task of ApiResponse (MinibatchEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MinibatchEntity>> GetMinibatchAsyncWithHttpInfo (string modelHistoryServerId, string minibatchId)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetMinibatch");
            // verify the required parameter 'minibatchId' is set
            if (minibatchId == null)
                throw new ApiException(400, "Missing required parameter 'minibatchId' when calling DefaultApi->GetMinibatch");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (minibatchId != null) localVarPathParams.Add("minibatchId", this.Configuration.ApiClient.ParameterToString(minibatchId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMinibatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MinibatchEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MinibatchEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MinibatchEntity)));
        }

        /// <summary>
        /// Get model details 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>ModelEntity</returns>
        public ModelEntity GetModelDetails (string deploymentId, string modelId)
        {
             ApiResponse<ModelEntity> localVarResponse = GetModelDetailsWithHttpInfo(deploymentId, modelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get model details 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        public ApiResponse< ModelEntity > GetModelDetailsWithHttpInfo (string deploymentId, string modelId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->GetModelDetails");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DefaultApi->GetModelDetails");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

        /// <summary>
        /// Get model details 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>Task of ModelEntity</returns>
        public async System.Threading.Tasks.Task<ModelEntity> GetModelDetailsAsync (string deploymentId, string modelId)
        {
             ApiResponse<ModelEntity> localVarResponse = await GetModelDetailsAsyncWithHttpInfo(deploymentId, modelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get model details 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelEntity>> GetModelDetailsAsyncWithHttpInfo (string deploymentId, string modelId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->GetModelDetails");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DefaultApi->GetModelDetails");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

        /// <summary>
        /// Gets a model history, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>ModelHistoryEntity</returns>
        public ModelHistoryEntity GetModelHistory (string modelHistoryServerId, string modelHistoryID)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = GetModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a model history, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        public ApiResponse< ModelHistoryEntity > GetModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling DefaultApi->GetModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Gets a model history, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        public async System.Threading.Tasks.Task<ModelHistoryEntity> GetModelHistoryAsync (string modelHistoryServerId, string modelHistoryID)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = await GetModelHistoryAsyncWithHttpInfo(modelHistoryServerId, modelHistoryID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a model history, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">GUID of the model history to get information of.</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> GetModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling DefaultApi->GetModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Gets a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>ModelInstanceEntity</returns>
        public ModelInstanceEntity GetModelInstance (string modelHistoryServerId, string modelInstanceID)
        {
             ApiResponse<ModelInstanceEntity> localVarResponse = GetModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>ApiResponse of ModelInstanceEntity</returns>
        public ApiResponse< ModelInstanceEntity > GetModelInstanceWithHttpInfo (string modelHistoryServerId, string modelInstanceID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetModelInstance");
            // verify the required parameter 'modelInstanceID' is set
            if (modelInstanceID == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceID' when calling DefaultApi->GetModelInstance");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceID != null) localVarPathParams.Add("modelInstanceID", this.Configuration.ApiClient.ParameterToString(modelInstanceID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelInstanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelInstanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelInstanceEntity)));
        }

        /// <summary>
        /// Gets a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>Task of ModelInstanceEntity</returns>
        public async System.Threading.Tasks.Task<ModelInstanceEntity> GetModelInstanceAsync (string modelHistoryServerId, string modelInstanceID)
        {
             ApiResponse<ModelInstanceEntity> localVarResponse = await GetModelInstanceAsyncWithHttpInfo(modelHistoryServerId, modelInstanceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a model instance, given its ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelInstanceID">GUID of the model instance to get information of.</param>
        /// <returns>Task of ApiResponse (ModelInstanceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelInstanceEntity>> GetModelInstanceAsyncWithHttpInfo (string modelHistoryServerId, string modelInstanceID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetModelInstance");
            // verify the required parameter 'modelInstanceID' is set
            if (modelInstanceID == null)
                throw new ApiException(400, "Missing required parameter 'modelInstanceID' when calling DefaultApi->GetModelInstance");

            var localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelInstanceID != null) localVarPathParams.Add("modelInstanceID", this.Configuration.ApiClient.ParameterToString(modelInstanceID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelInstanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelInstanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelInstanceEntity)));
        }

        /// <summary>
        /// Obtain a list of all the models for an experiment 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>List&lt;ModelInstanceEntity&gt;</returns>
        public List<ModelInstanceEntity> GetModelsForExperiment (string modelHistoryServerId, string experimentID)
        {
             ApiResponse<List<ModelInstanceEntity>> localVarResponse = GetModelsForExperimentWithHttpInfo(modelHistoryServerId, experimentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain a list of all the models for an experiment 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>ApiResponse of List&lt;ModelInstanceEntity&gt;</returns>
        public ApiResponse< List<ModelInstanceEntity> > GetModelsForExperimentWithHttpInfo (string modelHistoryServerId, string experimentID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetModelsForExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling DefaultApi->GetModelsForExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelsForExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelInstanceEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ModelInstanceEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelInstanceEntity>)));
        }

        /// <summary>
        /// Obtain a list of all the models for an experiment 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>Task of List&lt;ModelInstanceEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelInstanceEntity>> GetModelsForExperimentAsync (string modelHistoryServerId, string experimentID)
        {
             ApiResponse<List<ModelInstanceEntity>> localVarResponse = await GetModelsForExperimentAsyncWithHttpInfo(modelHistoryServerId, experimentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtain a list of all the models for an experiment 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment</param>
        /// <returns>Task of ApiResponse (List&lt;ModelInstanceEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelInstanceEntity>>> GetModelsForExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->GetModelsForExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling DefaultApi->GetModelsForExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelsForExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelInstanceEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ModelInstanceEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelInstanceEntity>)));
        }

        /// <summary>
        /// Get the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Resource</returns>
        public Resource GetResourceById (long? resourceId)
        {
             ApiResponse<Resource> localVarResponse = GetResourceByIdWithHttpInfo(resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Resource</returns>
        public ApiResponse< Resource > GetResourceByIdWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DefaultApi->GetResourceById");

            var localVarPath = "/resources/resource/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Resource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Resource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Resource)));
        }

        /// <summary>
        /// Get the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of Resource</returns>
        public async System.Threading.Tasks.Task<Resource> GetResourceByIdAsync (long? resourceId)
        {
             ApiResponse<Resource> localVarResponse = await GetResourceByIdAsyncWithHttpInfo(resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the resource with the specified resource ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse (Resource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Resource>> GetResourceByIdAsyncWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DefaultApi->GetResourceById");

            var localVarPath = "/resources/resource/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Resource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Resource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Resource)));
        }

        /// <summary>
        /// Get all the resources with the specified resource subtype 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>List&lt;Resource&gt;</returns>
        public List<Resource> GetResourceBySubType (string resourceSubType)
        {
             ApiResponse<List<Resource>> localVarResponse = GetResourceBySubTypeWithHttpInfo(resourceSubType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the resources with the specified resource subtype 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        public ApiResponse< List<Resource> > GetResourceBySubTypeWithHttpInfo (string resourceSubType)
        {
            // verify the required parameter 'resourceSubType' is set
            if (resourceSubType == null)
                throw new ApiException(400, "Missing required parameter 'resourceSubType' when calling DefaultApi->GetResourceBySubType");

            var localVarPath = "/resources/resources/subtype/{resourceSubType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceSubType != null) localVarPathParams.Add("resourceSubType", this.Configuration.ApiClient.ParameterToString(resourceSubType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceBySubType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// Get all the resources with the specified resource subtype 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        public async System.Threading.Tasks.Task<List<Resource>> GetResourceBySubTypeAsync (string resourceSubType)
        {
             ApiResponse<List<Resource>> localVarResponse = await GetResourceBySubTypeAsyncWithHttpInfo(resourceSubType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the resources with the specified resource subtype 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceSubType">Subtype of the resource</param>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourceBySubTypeAsyncWithHttpInfo (string resourceSubType)
        {
            // verify the required parameter 'resourceSubType' is set
            if (resourceSubType == null)
                throw new ApiException(400, "Missing required parameter 'resourceSubType' when calling DefaultApi->GetResourceBySubType");

            var localVarPath = "/resources/resources/subtype/{resourceSubType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceSubType != null) localVarPathParams.Add("resourceSubType", this.Configuration.ApiClient.ParameterToString(resourceSubType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceBySubType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// Get all the resources with the specified resource type 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>List&lt;Resource&gt;</returns>
        public List<Resource> GetResourceByType (string resourceType)
        {
             ApiResponse<List<Resource>> localVarResponse = GetResourceByTypeWithHttpInfo(resourceType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the resources with the specified resource type 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        public ApiResponse< List<Resource> > GetResourceByTypeWithHttpInfo (string resourceType)
        {
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling DefaultApi->GetResourceByType");

            var localVarPath = "/resources/resources/type/{resourceType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// Get all the resources with the specified resource type 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        public async System.Threading.Tasks.Task<List<Resource>> GetResourceByTypeAsync (string resourceType)
        {
             ApiResponse<List<Resource>> localVarResponse = await GetResourceByTypeAsyncWithHttpInfo(resourceType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the resources with the specified resource type 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">Type of the resource</param>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourceByTypeAsyncWithHttpInfo (string resourceType)
        {
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
                throw new ApiException(400, "Missing required parameter 'resourceType' when calling DefaultApi->GetResourceByType");

            var localVarPath = "/resources/resources/type/{resourceType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceType != null) localVarPathParams.Add("resourceType", this.Configuration.ApiClient.ParameterToString(resourceType)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// Get the resource details with the specified resource ID Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Object</returns>
        public Object GetResourceDetailsById (long? resourceId)
        {
             ApiResponse<Object> localVarResponse = GetResourceDetailsByIdWithHttpInfo(resourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the resource details with the specified resource ID Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetResourceDetailsByIdWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DefaultApi->GetResourceDetailsById");

            var localVarPath = "/resources/details/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceDetailsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get the resource details with the specified resource ID Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetResourceDetailsByIdAsync (long? resourceId)
        {
             ApiResponse<Object> localVarResponse = await GetResourceDetailsByIdAsyncWithHttpInfo(resourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the resource details with the specified resource ID Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceId">ID of the resource</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetResourceDetailsByIdAsyncWithHttpInfo (long? resourceId)
        {
            // verify the required parameter 'resourceId' is set
            if (resourceId == null)
                throw new ApiException(400, "Missing required parameter 'resourceId' when calling DefaultApi->GetResourceDetailsById");

            var localVarPath = "/resources/details/{resourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceId != null) localVarPathParams.Add("resourceId", this.Configuration.ApiClient.ParameterToString(resourceId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceDetailsById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ResourceGroup</returns>
        public ResourceGroup GetResourceGroupById (long? resourceGroupId)
        {
             ApiResponse<ResourceGroup> localVarResponse = GetResourceGroupByIdWithHttpInfo(resourceGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ApiResponse of ResourceGroup</returns>
        public ApiResponse< ResourceGroup > GetResourceGroupByIdWithHttpInfo (long? resourceGroupId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling DefaultApi->GetResourceGroupById");

            var localVarPath = "/resources/group/{resourceGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResourceGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceGroup)));
        }

        /// <summary>
        /// Get the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ResourceGroup</returns>
        public async System.Threading.Tasks.Task<ResourceGroup> GetResourceGroupByIdAsync (long? resourceGroupId)
        {
             ApiResponse<ResourceGroup> localVarResponse = await GetResourceGroupByIdAsyncWithHttpInfo(resourceGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the resource group with the specified resource group ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ApiResponse (ResourceGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceGroup>> GetResourceGroupByIdAsyncWithHttpInfo (long? resourceGroupId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling DefaultApi->GetResourceGroupById");

            var localVarPath = "/resources/group/{resourceGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResourceGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceGroup)));
        }

        /// <summary>
        /// Get a list of all the resource groups 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResourceGroup&gt;</returns>
        public List<ResourceGroup> GetResourceGroups ()
        {
             ApiResponse<List<ResourceGroup>> localVarResponse = GetResourceGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all the resource groups 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResourceGroup&gt;</returns>
        public ApiResponse< List<ResourceGroup> > GetResourceGroupsWithHttpInfo ()
        {

            var localVarPath = "/resources/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ResourceGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceGroup>)));
        }

        /// <summary>
        /// Get a list of all the resource groups 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ResourceGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourceGroup>> GetResourceGroupsAsync ()
        {
             ApiResponse<List<ResourceGroup>> localVarResponse = await GetResourceGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all the resource groups 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ResourceGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResourceGroup>>> GetResourceGroupsAsyncWithHttpInfo ()
        {

            var localVarPath = "/resources/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResourceGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ResourceGroup>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResourceGroup>)));
        }

        /// <summary>
        /// A list of all known/registered resources, of all types 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Resource&gt;</returns>
        public List<Resource> GetResources ()
        {
             ApiResponse<List<Resource>> localVarResponse = GetResourcesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// A list of all known/registered resources, of all types 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        public ApiResponse< List<Resource> > GetResourcesWithHttpInfo ()
        {

            var localVarPath = "/resources/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// A list of all known/registered resources, of all types 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        public async System.Threading.Tasks.Task<List<Resource>> GetResourcesAsync ()
        {
             ApiResponse<List<Resource>> localVarResponse = await GetResourcesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// A list of all known/registered resources, of all types 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourcesAsyncWithHttpInfo ()
        {

            var localVarPath = "/resources/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// Get all resources from a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>List&lt;Resource&gt;</returns>
        public List<Resource> GetResourcesFromGroup (long? resourceGroupId)
        {
             ApiResponse<List<Resource>> localVarResponse = GetResourcesFromGroupWithHttpInfo(resourceGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all resources from a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>ApiResponse of List&lt;Resource&gt;</returns>
        public ApiResponse< List<Resource> > GetResourcesFromGroupWithHttpInfo (long? resourceGroupId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling DefaultApi->GetResourcesFromGroup");

            var localVarPath = "/resources/group/{resourceGroupId}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourcesFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// Get all resources from a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of List&lt;Resource&gt;</returns>
        public async System.Threading.Tasks.Task<List<Resource>> GetResourcesFromGroupAsync (long? resourceGroupId)
        {
             ApiResponse<List<Resource>> localVarResponse = await GetResourcesFromGroupAsyncWithHttpInfo(resourceGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all resources from a resource group 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceGroupId">ID of the resource group</param>
        /// <returns>Task of ApiResponse (List&lt;Resource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Resource>>> GetResourcesFromGroupAsyncWithHttpInfo (long? resourceGroupId)
        {
            // verify the required parameter 'resourceGroupId' is set
            if (resourceGroupId == null)
                throw new ApiException(400, "Missing required parameter 'resourceGroupId' when calling DefaultApi->GetResourcesFromGroup");

            var localVarPath = "/resources/group/{resourceGroupId}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceGroupId != null) localVarPathParams.Add("resourceGroupId", this.Configuration.ApiClient.ParameterToString(resourceGroupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourcesFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Resource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Resource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Resource>)));
        }

        /// <summary>
        /// Get all roles. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Role&gt;</returns>
        public List<Role> GetRoles ()
        {
             ApiResponse<List<Role>> localVarResponse = GetRolesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all roles. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Role&gt;</returns>
        public ApiResponse< List<Role> > GetRolesWithHttpInfo ()
        {

            var localVarPath = "/security/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Role>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Role>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Role>)));
        }

        /// <summary>
        /// Get all roles. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Role&gt;</returns>
        public async System.Threading.Tasks.Task<List<Role>> GetRolesAsync ()
        {
             ApiResponse<List<Role>> localVarResponse = await GetRolesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all roles. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Role&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Role>>> GetRolesAsyncWithHttpInfo ()
        {

            var localVarPath = "/security/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Role>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Role>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Role>)));
        }

        /// <summary>
        /// Get a user by user ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <returns>User</returns>
        public User GetUser (string userId)
        {
             ApiResponse<User> localVarResponse = GetUserWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user by user ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetUserWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->GetUser");

            var localVarPath = "/user/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a user by user ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync (string userId)
        {
             ApiResponse<User> localVarResponse = await GetUserAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user by user ID 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->GetUser");

            var localVarPath = "/user/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get auth tokens for a user. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="onlyValid">True if you only want the valid tokens. (optional)</param>
        /// <returns>List&lt;Token&gt;</returns>
        public List<Token> GetUserAuthTokens (string userId, bool? onlyValid = null)
        {
             ApiResponse<List<Token>> localVarResponse = GetUserAuthTokensWithHttpInfo(userId, onlyValid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get auth tokens for a user. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="onlyValid">True if you only want the valid tokens. (optional)</param>
        /// <returns>ApiResponse of List&lt;Token&gt;</returns>
        public ApiResponse< List<Token> > GetUserAuthTokensWithHttpInfo (string userId, bool? onlyValid = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->GetUserAuthTokens");

            var localVarPath = "/auth/{userId}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (onlyValid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyValid", onlyValid)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAuthTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Token>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Token>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Token>)));
        }

        /// <summary>
        /// Get auth tokens for a user. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="onlyValid">True if you only want the valid tokens. (optional)</param>
        /// <returns>Task of List&lt;Token&gt;</returns>
        public async System.Threading.Tasks.Task<List<Token>> GetUserAuthTokensAsync (string userId, bool? onlyValid = null)
        {
             ApiResponse<List<Token>> localVarResponse = await GetUserAuthTokensAsyncWithHttpInfo(userId, onlyValid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get auth tokens for a user. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User&#39;s ID</param>
        /// <param name="onlyValid">True if you only want the valid tokens. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Token&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Token>>> GetUserAuthTokensAsyncWithHttpInfo (string userId, bool? onlyValid = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->GetUserAuthTokens");

            var localVarPath = "/auth/{userId}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (onlyValid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyValid", onlyValid)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserAuthTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Token>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Token>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Token>)));
        }

        /// <summary>
        /// Get all users. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetUsers ()
        {
             ApiResponse<List<User>> localVarResponse = GetUsersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all users. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse< List<User> > GetUsersWithHttpInfo ()
        {

            var localVarPath = "/security/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Get all users. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetUsersAsync ()
        {
             ApiResponse<List<User>> localVarResponse = await GetUsersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all users. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> GetUsersAsyncWithHttpInfo ()
        {

            var localVarPath = "/security/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Get the retraining status 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RetrainingStatus</returns>
        public RetrainingStatus IsTraining ()
        {
             ApiResponse<RetrainingStatus> localVarResponse = IsTrainingWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the retraining status 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RetrainingStatus</returns>
        public ApiResponse< RetrainingStatus > IsTrainingWithHttpInfo ()
        {

            var localVarPath = "/istraining";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsTraining", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrainingStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrainingStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrainingStatus)));
        }

        /// <summary>
        /// Get the retraining status 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RetrainingStatus</returns>
        public async System.Threading.Tasks.Task<RetrainingStatus> IsTrainingAsync ()
        {
             ApiResponse<RetrainingStatus> localVarResponse = await IsTrainingAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the retraining status 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RetrainingStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrainingStatus>> IsTrainingAsyncWithHttpInfo ()
        {

            var localVarPath = "/istraining";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsTraining", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrainingStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrainingStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrainingStatus)));
        }

        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>JsonArrayResponse</returns>
        public JsonArrayResponse Jsonarray (string deploymentName, string versionName, string modelName, Prediction body)
        {
             ApiResponse<JsonArrayResponse> localVarResponse = JsonarrayWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ApiResponse of JsonArrayResponse</returns>
        public ApiResponse< JsonArrayResponse > JsonarrayWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Jsonarray");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Jsonarray");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Jsonarray");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Jsonarray");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Jsonarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonArrayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonArrayResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonArrayResponse)));
        }

        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of JsonArrayResponse</returns>
        public async System.Threading.Tasks.Task<JsonArrayResponse> JsonarrayAsync (string deploymentName, string versionName, string modelName, Prediction body)
        {
             ApiResponse<JsonArrayResponse> localVarResponse = await JsonarrayAsyncWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ApiResponse (JsonArrayResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonArrayResponse>> JsonarrayAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Jsonarray");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Jsonarray");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Jsonarray");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Jsonarray");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Jsonarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonArrayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonArrayResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonArrayResponse)));
        }

        /// <summary>
        /// Runs knn on the given index with the given k Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body"></param>
        /// <returns>NearestNeighborsResults</returns>
        public NearestNeighborsResults Knn (string deploymentName, string versionName, string knnName, NearestNeighborRequest body)
        {
             ApiResponse<NearestNeighborsResults> localVarResponse = KnnWithHttpInfo(deploymentName, versionName, knnName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Runs knn on the given index with the given k Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of NearestNeighborsResults</returns>
        public ApiResponse< NearestNeighborsResults > KnnWithHttpInfo (string deploymentName, string versionName, string knnName, NearestNeighborRequest body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Knn");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Knn");
            // verify the required parameter 'knnName' is set
            if (knnName == null)
                throw new ApiException(400, "Missing required parameter 'knnName' when calling DefaultApi->Knn");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Knn");

            var localVarPath = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (knnName != null) localVarPathParams.Add("knnName", this.Configuration.ApiClient.ParameterToString(knnName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Knn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NearestNeighborsResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NearestNeighborsResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NearestNeighborsResults)));
        }

        /// <summary>
        /// Runs knn on the given index with the given k Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body"></param>
        /// <returns>Task of NearestNeighborsResults</returns>
        public async System.Threading.Tasks.Task<NearestNeighborsResults> KnnAsync (string deploymentName, string versionName, string knnName, NearestNeighborRequest body)
        {
             ApiResponse<NearestNeighborsResults> localVarResponse = await KnnAsyncWithHttpInfo(deploymentName, versionName, knnName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Runs knn on the given index with the given k Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (NearestNeighborsResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NearestNeighborsResults>> KnnAsyncWithHttpInfo (string deploymentName, string versionName, string knnName, NearestNeighborRequest body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Knn");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Knn");
            // verify the required parameter 'knnName' is set
            if (knnName == null)
                throw new ApiException(400, "Missing required parameter 'knnName' when calling DefaultApi->Knn");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Knn");

            var localVarPath = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (knnName != null) localVarPathParams.Add("knnName", this.Configuration.ApiClient.ParameterToString(knnName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Knn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NearestNeighborsResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NearestNeighborsResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NearestNeighborsResults)));
        }

        /// <summary>
        /// Run a k nearest neighbors search on a NEW data point 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>NearestNeighborsResults</returns>
        public NearestNeighborsResults Knnnew (string deploymentName, string versionName, string knnName, Base64NDArrayBodyKNN body)
        {
             ApiResponse<NearestNeighborsResults> localVarResponse = KnnnewWithHttpInfo(deploymentName, versionName, knnName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run a k nearest neighbors search on a NEW data point 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ApiResponse of NearestNeighborsResults</returns>
        public ApiResponse< NearestNeighborsResults > KnnnewWithHttpInfo (string deploymentName, string versionName, string knnName, Base64NDArrayBodyKNN body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Knnnew");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Knnnew");
            // verify the required parameter 'knnName' is set
            if (knnName == null)
                throw new ApiException(400, "Missing required parameter 'knnName' when calling DefaultApi->Knnnew");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Knnnew");

            var localVarPath = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (knnName != null) localVarPathParams.Add("knnName", this.Configuration.ApiClient.ParameterToString(knnName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Knnnew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NearestNeighborsResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NearestNeighborsResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NearestNeighborsResults)));
        }

        /// <summary>
        /// Run a k nearest neighbors search on a NEW data point 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of NearestNeighborsResults</returns>
        public async System.Threading.Tasks.Task<NearestNeighborsResults> KnnnewAsync (string deploymentName, string versionName, string knnName, Base64NDArrayBodyKNN body)
        {
             ApiResponse<NearestNeighborsResults> localVarResponse = await KnnnewAsyncWithHttpInfo(deploymentName, versionName, knnName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run a k nearest neighbors search on a NEW data point 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="knnName">ID or name of the deployed knn</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ApiResponse (NearestNeighborsResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NearestNeighborsResults>> KnnnewAsyncWithHttpInfo (string deploymentName, string versionName, string knnName, Base64NDArrayBodyKNN body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Knnnew");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Knnnew");
            // verify the required parameter 'knnName' is set
            if (knnName == null)
                throw new ApiException(400, "Missing required parameter 'knnName' when calling DefaultApi->Knnnew");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Knnnew");

            var localVarPath = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (knnName != null) localVarPathParams.Add("knnName", this.Configuration.ApiClient.ParameterToString(knnName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Knnnew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NearestNeighborsResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NearestNeighborsResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NearestNeighborsResults)));
        }

        /// <summary>
        /// List all of the experiments in every model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>List&lt;ExperimentEntity&gt;</returns>
        public List<ExperimentEntity> ListAllExperiments (string modelHistoryServerId)
        {
             ApiResponse<List<ExperimentEntity>> localVarResponse = ListAllExperimentsWithHttpInfo(modelHistoryServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all of the experiments in every model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>ApiResponse of List&lt;ExperimentEntity&gt;</returns>
        public ApiResponse< List<ExperimentEntity> > ListAllExperimentsWithHttpInfo (string modelHistoryServerId)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->ListAllExperiments");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAllExperiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExperimentEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExperimentEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExperimentEntity>)));
        }

        /// <summary>
        /// List all of the experiments in every model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>Task of List&lt;ExperimentEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ExperimentEntity>> ListAllExperimentsAsync (string modelHistoryServerId)
        {
             ApiResponse<List<ExperimentEntity>> localVarResponse = await ListAllExperimentsAsyncWithHttpInfo(modelHistoryServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all of the experiments in every model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <returns>Task of ApiResponse (List&lt;ExperimentEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExperimentEntity>>> ListAllExperimentsAsyncWithHttpInfo (string modelHistoryServerId)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->ListAllExperiments");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAllExperiments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExperimentEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExperimentEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExperimentEntity>)));
        }

        /// <summary>
        /// Get logs file path 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>string</returns>
        public string Logfilepath (string deploymentName, string versionName, string modelName)
        {
             ApiResponse<string> localVarResponse = LogfilepathWithHttpInfo(deploymentName, versionName, modelName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get logs file path 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > LogfilepathWithHttpInfo (string deploymentName, string versionName, string modelName)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Logfilepath");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Logfilepath");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Logfilepath");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logfilepath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get logs file path 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> LogfilepathAsync (string deploymentName, string versionName, string modelName)
        {
             ApiResponse<string> localVarResponse = await LogfilepathAsyncWithHttpInfo(deploymentName, versionName, modelName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get logs file path 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> LogfilepathAsyncWithHttpInfo (string deploymentName, string versionName, string modelName)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Logfilepath");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Logfilepath");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Logfilepath");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logfilepath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login credentials.</param>
        /// <returns>LoginResponse</returns>
        public LoginResponse Login (LoginRequest loginRequest)
        {
             ApiResponse<LoginResponse> localVarResponse = LoginWithHttpInfo(loginRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login credentials.</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        public ApiResponse< LoginResponse > LoginWithHttpInfo (LoginRequest loginRequest)
        {
            // verify the required parameter 'loginRequest' is set
            if (loginRequest == null)
                throw new ApiException(400, "Missing required parameter 'loginRequest' when calling DefaultApi->Login");

            var localVarPath = "/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginRequest != null && loginRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(loginRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loginRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoginResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoginResponse)));
        }

        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login credentials.</param>
        /// <returns>Task of LoginResponse</returns>
        public async System.Threading.Tasks.Task<LoginResponse> LoginAsync (LoginRequest loginRequest)
        {
             ApiResponse<LoginResponse> localVarResponse = await LoginAsyncWithHttpInfo(loginRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest">Login credentials.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoginResponse>> LoginAsyncWithHttpInfo (LoginRequest loginRequest)
        {
            // verify the required parameter 'loginRequest' is set
            if (loginRequest == null)
                throw new ApiException(400, "Missing required parameter 'loginRequest' when calling DefaultApi->Login");

            var localVarPath = "/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginRequest != null && loginRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(loginRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loginRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoginResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoginResponse)));
        }

        /// <summary>
        /// Get logs 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="logRequest">The log object</param>
        /// <returns>LogBatch</returns>
        public LogBatch Logs (string deploymentName, string versionName, string modelName, LogRequest logRequest)
        {
             ApiResponse<LogBatch> localVarResponse = LogsWithHttpInfo(deploymentName, versionName, modelName, logRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get logs 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="logRequest">The log object</param>
        /// <returns>ApiResponse of LogBatch</returns>
        public ApiResponse< LogBatch > LogsWithHttpInfo (string deploymentName, string versionName, string modelName, LogRequest logRequest)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Logs");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Logs");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Logs");
            // verify the required parameter 'logRequest' is set
            if (logRequest == null)
                throw new ApiException(400, "Missing required parameter 'logRequest' when calling DefaultApi->Logs");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (logRequest != null && logRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(logRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogBatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogBatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogBatch)));
        }

        /// <summary>
        /// Get logs 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="logRequest">The log object</param>
        /// <returns>Task of LogBatch</returns>
        public async System.Threading.Tasks.Task<LogBatch> LogsAsync (string deploymentName, string versionName, string modelName, LogRequest logRequest)
        {
             ApiResponse<LogBatch> localVarResponse = await LogsAsyncWithHttpInfo(deploymentName, versionName, modelName, logRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get logs 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="logRequest">The log object</param>
        /// <returns>Task of ApiResponse (LogBatch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogBatch>> LogsAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, LogRequest logRequest)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Logs");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Logs");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Logs");
            // verify the required parameter 'logRequest' is set
            if (logRequest == null)
                throw new ApiException(400, "Missing required parameter 'logRequest' when calling DefaultApi->Logs");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (logRequest != null && logRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(logRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogBatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogBatch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogBatch)));
        }

        /// <summary>
        /// this method can be used to get the meta data for the current model which set to the server 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Object</returns>
        public Object MetaGet (string deploymentName, string versionName, string modelName)
        {
             ApiResponse<Object> localVarResponse = MetaGetWithHttpInfo(deploymentName, versionName, modelName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// this method can be used to get the meta data for the current model which set to the server 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > MetaGetWithHttpInfo (string deploymentName, string versionName, string modelName)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->MetaGet");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->MetaGet");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->MetaGet");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MetaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// this method can be used to get the meta data for the current model which set to the server 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MetaGetAsync (string deploymentName, string versionName, string modelName)
        {
             ApiResponse<Object> localVarResponse = await MetaGetAsyncWithHttpInfo(deploymentName, versionName, modelName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// this method can be used to get the meta data for the current model which set to the server 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MetaGetAsyncWithHttpInfo (string deploymentName, string versionName, string modelName)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->MetaGet");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->MetaGet");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->MetaGet");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MetaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This method can be used to set meta data for the current model which is set to the server 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">the meta data object</param>
        /// <returns>Object</returns>
        public Object MetaPost (string contentType, string deploymentName, string versionName, string modelName, string body)
        {
             ApiResponse<Object> localVarResponse = MetaPostWithHttpInfo(contentType, deploymentName, versionName, modelName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This method can be used to set meta data for the current model which is set to the server 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">the meta data object</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > MetaPostWithHttpInfo (string contentType, string deploymentName, string versionName, string modelName, string body)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->MetaPost");
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->MetaPost");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->MetaPost");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->MetaPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->MetaPost");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MetaPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This method can be used to set meta data for the current model which is set to the server 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">the meta data object</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MetaPostAsync (string contentType, string deploymentName, string versionName, string modelName, string body)
        {
             ApiResponse<Object> localVarResponse = await MetaPostAsyncWithHttpInfo(contentType, deploymentName, versionName, modelName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This method can be used to set meta data for the current model which is set to the server 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">the meta data object</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MetaPostAsyncWithHttpInfo (string contentType, string deploymentName, string versionName, string modelName, string body)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->MetaPost");
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->MetaPost");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->MetaPost");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->MetaPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->MetaPost");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MetaPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Modify the state (start/stop) of a deployed model 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>ModelEntity</returns>
        public ModelEntity ModelStateChange (string deploymentId, string modelId, SetState body)
        {
             ApiResponse<ModelEntity> localVarResponse = ModelStateChangeWithHttpInfo(deploymentId, modelId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify the state (start/stop) of a deployed model 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        public ApiResponse< ModelEntity > ModelStateChangeWithHttpInfo (string deploymentId, string modelId, SetState body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->ModelStateChange");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DefaultApi->ModelStateChange");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ModelStateChange");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModelStateChange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

        /// <summary>
        /// Modify the state (start/stop) of a deployed model 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>Task of ModelEntity</returns>
        public async System.Threading.Tasks.Task<ModelEntity> ModelStateChangeAsync (string deploymentId, string modelId, SetState body)
        {
             ApiResponse<ModelEntity> localVarResponse = await ModelStateChangeAsyncWithHttpInfo(deploymentId, modelId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify the state (start/stop) of a deployed model 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the model state object</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelEntity>> ModelStateChangeAsyncWithHttpInfo (string deploymentId, string modelId, SetState body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->ModelStateChange");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DefaultApi->ModelStateChange");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ModelStateChange");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModelStateChange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>List&lt;ModelEntity&gt;</returns>
        public List<ModelEntity> Models (string deploymentId)
        {
             ApiResponse<List<ModelEntity>> localVarResponse = ModelsWithHttpInfo(deploymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>ApiResponse of List&lt;ModelEntity&gt;</returns>
        public ApiResponse< List<ModelEntity> > ModelsWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->Models");

            var localVarPath = "/deployment/{deploymentId}/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Models", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ModelEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelEntity>)));
        }

        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>Task of List&lt;ModelEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelEntity>> ModelsAsync (string deploymentId)
        {
             ApiResponse<List<ModelEntity>> localVarResponse = await ModelsAsyncWithHttpInfo(deploymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of all the deployed models given a deployment id 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <returns>Task of ApiResponse (List&lt;ModelEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelEntity>>> ModelsAsyncWithHttpInfo (string deploymentId)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->Models");

            var localVarPath = "/deployment/{deploymentId}/models";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Models", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ModelEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelEntity>)));
        }

        /// <summary>
        /// Set the model to be served 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to upload (.pb file) (optional)</param>
        /// <returns>ModelStatus</returns>
        public ModelStatus Modelset (string deploymentName, string versionName, string modelName, System.IO.Stream file = null)
        {
             ApiResponse<ModelStatus> localVarResponse = ModelsetWithHttpInfo(deploymentName, versionName, modelName, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the model to be served 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to upload (.pb file) (optional)</param>
        /// <returns>ApiResponse of ModelStatus</returns>
        public ApiResponse< ModelStatus > ModelsetWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream file = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Modelset");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Modelset");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Modelset");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Modelset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelStatus)));
        }

        /// <summary>
        /// Set the model to be served 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to upload (.pb file) (optional)</param>
        /// <returns>Task of ModelStatus</returns>
        public async System.Threading.Tasks.Task<ModelStatus> ModelsetAsync (string deploymentName, string versionName, string modelName, System.IO.Stream file = null)
        {
             ApiResponse<ModelStatus> localVarResponse = await ModelsetAsyncWithHttpInfo(deploymentName, versionName, modelName, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the model to be served 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to upload (.pb file) (optional)</param>
        /// <returns>Task of ApiResponse (ModelStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelStatus>> ModelsetAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream file = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Modelset");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Modelset");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Modelset");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Modelset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelStatus)));
        }

        /// <summary>
        /// Update the model to be served 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to update with (.pb file)</param>
        /// <returns>ModelStatus</returns>
        public ModelStatus Modelupdate (string deploymentName, string versionName, string modelName, System.IO.Stream file)
        {
             ApiResponse<ModelStatus> localVarResponse = ModelupdateWithHttpInfo(deploymentName, versionName, modelName, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the model to be served 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to update with (.pb file)</param>
        /// <returns>ApiResponse of ModelStatus</returns>
        public ApiResponse< ModelStatus > ModelupdateWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream file)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Modelupdate");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Modelupdate");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Modelupdate");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling DefaultApi->Modelupdate");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Modelupdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelStatus)));
        }

        /// <summary>
        /// Update the model to be served 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to update with (.pb file)</param>
        /// <returns>Task of ModelStatus</returns>
        public async System.Threading.Tasks.Task<ModelStatus> ModelupdateAsync (string deploymentName, string versionName, string modelName, System.IO.Stream file)
        {
             ApiResponse<ModelStatus> localVarResponse = await ModelupdateAsyncWithHttpInfo(deploymentName, versionName, modelName, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the model to be served 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The model file to update with (.pb file)</param>
        /// <returns>Task of ApiResponse (ModelStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelStatus>> ModelupdateAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream file)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Modelupdate");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Modelupdate");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Modelupdate");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling DefaultApi->Modelupdate");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Modelupdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelStatus)));
        }

        /// <summary>
        /// Represents all of the labels for a given classification 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>MultiClassClassificationResult</returns>
        public MultiClassClassificationResult Multiclassify (string deploymentName, string versionName, string modelName, Prediction body)
        {
             ApiResponse<MultiClassClassificationResult> localVarResponse = MulticlassifyWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Represents all of the labels for a given classification 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ApiResponse of MultiClassClassificationResult</returns>
        public ApiResponse< MultiClassClassificationResult > MulticlassifyWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Multiclassify");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Multiclassify");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Multiclassify");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Multiclassify");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Multiclassify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiClassClassificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiClassClassificationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiClassClassificationResult)));
        }

        /// <summary>
        /// Represents all of the labels for a given classification 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of MultiClassClassificationResult</returns>
        public async System.Threading.Tasks.Task<MultiClassClassificationResult> MulticlassifyAsync (string deploymentName, string versionName, string modelName, Prediction body)
        {
             ApiResponse<MultiClassClassificationResult> localVarResponse = await MulticlassifyAsyncWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Represents all of the labels for a given classification 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ApiResponse (MultiClassClassificationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiClassClassificationResult>> MulticlassifyAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Multiclassify");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Multiclassify");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Multiclassify");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Multiclassify");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Multiclassify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiClassClassificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiClassClassificationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiClassClassificationResult)));
        }

        /// <summary>
        /// Get the output from the network, based on the given INDArray[] input Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The multiple input arrays with mask inputs to run inferences on</param>
        /// <returns>MultiPredictResponse</returns>
        public MultiPredictResponse Multipredict (string deploymentName, string versionName, string modelName, MultiPredictRequest body)
        {
             ApiResponse<MultiPredictResponse> localVarResponse = MultipredictWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the output from the network, based on the given INDArray[] input Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The multiple input arrays with mask inputs to run inferences on</param>
        /// <returns>ApiResponse of MultiPredictResponse</returns>
        public ApiResponse< MultiPredictResponse > MultipredictWithHttpInfo (string deploymentName, string versionName, string modelName, MultiPredictRequest body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Multipredict");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Multipredict");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Multipredict");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Multipredict");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Multipredict", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiPredictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiPredictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiPredictResponse)));
        }

        /// <summary>
        /// Get the output from the network, based on the given INDArray[] input Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The multiple input arrays with mask inputs to run inferences on</param>
        /// <returns>Task of MultiPredictResponse</returns>
        public async System.Threading.Tasks.Task<MultiPredictResponse> MultipredictAsync (string deploymentName, string versionName, string modelName, MultiPredictRequest body)
        {
             ApiResponse<MultiPredictResponse> localVarResponse = await MultipredictAsyncWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the output from the network, based on the given INDArray[] input Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The multiple input arrays with mask inputs to run inferences on</param>
        /// <returns>Task of ApiResponse (MultiPredictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiPredictResponse>> MultipredictAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, MultiPredictRequest body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Multipredict");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Multipredict");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Multipredict");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Multipredict");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Multipredict", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiPredictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiPredictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiPredictResponse)));
        }

        /// <summary>
        /// Get the output from the network using the given image file using the /multipredict endpoint&#39;s method Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The image file to run the prediction on</param>
        /// <param name="id">The id of the request (could be self generated)</param>
        /// <param name="needsPreprocessing">Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)</param>
        /// <returns>MultiPredictResponse</returns>
        public MultiPredictResponse Multipredictimage (string deploymentName, string versionName, string modelName, System.IO.Stream file, string id, bool? needsPreprocessing)
        {
             ApiResponse<MultiPredictResponse> localVarResponse = MultipredictimageWithHttpInfo(deploymentName, versionName, modelName, file, id, needsPreprocessing);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the output from the network using the given image file using the /multipredict endpoint&#39;s method Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The image file to run the prediction on</param>
        /// <param name="id">The id of the request (could be self generated)</param>
        /// <param name="needsPreprocessing">Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)</param>
        /// <returns>ApiResponse of MultiPredictResponse</returns>
        public ApiResponse< MultiPredictResponse > MultipredictimageWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream file, string id, bool? needsPreprocessing)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Multipredictimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Multipredictimage");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Multipredictimage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling DefaultApi->Multipredictimage");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->Multipredictimage");
            // verify the required parameter 'needsPreprocessing' is set
            if (needsPreprocessing == null)
                throw new ApiException(400, "Missing required parameter 'needsPreprocessing' when calling DefaultApi->Multipredictimage");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (needsPreprocessing != null) localVarFormParams.Add("needs_preprocessing", this.Configuration.ApiClient.ParameterToString(needsPreprocessing)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Multipredictimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiPredictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiPredictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiPredictResponse)));
        }

        /// <summary>
        /// Get the output from the network using the given image file using the /multipredict endpoint&#39;s method Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The image file to run the prediction on</param>
        /// <param name="id">The id of the request (could be self generated)</param>
        /// <param name="needsPreprocessing">Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)</param>
        /// <returns>Task of MultiPredictResponse</returns>
        public async System.Threading.Tasks.Task<MultiPredictResponse> MultipredictimageAsync (string deploymentName, string versionName, string modelName, System.IO.Stream file, string id, bool? needsPreprocessing)
        {
             ApiResponse<MultiPredictResponse> localVarResponse = await MultipredictimageAsyncWithHttpInfo(deploymentName, versionName, modelName, file, id, needsPreprocessing);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the output from the network using the given image file using the /multipredict endpoint&#39;s method Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="file">The image file to run the prediction on</param>
        /// <param name="id">The id of the request (could be self generated)</param>
        /// <param name="needsPreprocessing">Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)</param>
        /// <returns>Task of ApiResponse (MultiPredictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiPredictResponse>> MultipredictimageAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream file, string id, bool? needsPreprocessing)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Multipredictimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Multipredictimage");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Multipredictimage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling DefaultApi->Multipredictimage");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->Multipredictimage");
            // verify the required parameter 'needsPreprocessing' is set
            if (needsPreprocessing == null)
                throw new ApiException(400, "Missing required parameter 'needsPreprocessing' when calling DefaultApi->Multipredictimage");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (needsPreprocessing != null) localVarFormParams.Add("needs_preprocessing", this.Configuration.ApiClient.ParameterToString(needsPreprocessing)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Multipredictimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiPredictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiPredictResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiPredictResponse)));
        }

        /// <summary>
        /// Gets the number of retrained models written with retraining. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RevisionsWritten</returns>
        public RevisionsWritten NumRevisions ()
        {
             ApiResponse<RevisionsWritten> localVarResponse = NumRevisionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the number of retrained models written with retraining. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RevisionsWritten</returns>
        public ApiResponse< RevisionsWritten > NumRevisionsWithHttpInfo ()
        {

            var localVarPath = "/numrevisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NumRevisions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevisionsWritten>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RevisionsWritten) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevisionsWritten)));
        }

        /// <summary>
        /// Gets the number of retrained models written with retraining. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RevisionsWritten</returns>
        public async System.Threading.Tasks.Task<RevisionsWritten> NumRevisionsAsync ()
        {
             ApiResponse<RevisionsWritten> localVarResponse = await NumRevisionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the number of retrained models written with retraining. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RevisionsWritten)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RevisionsWritten>> NumRevisionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/numrevisions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NumRevisions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevisionsWritten>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RevisionsWritten) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevisionsWritten)));
        }

        /// <summary>
        /// Run inference on the input array. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Prediction</returns>
        public Prediction Predict (string deploymentName, string versionName, string modelName, Prediction body)
        {
             ApiResponse<Prediction> localVarResponse = PredictWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run inference on the input array. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>ApiResponse of Prediction</returns>
        public ApiResponse< Prediction > PredictWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Predict");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Predict");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Predict");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Predict");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predict";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predict", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Prediction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Prediction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Prediction)));
        }

        /// <summary>
        /// Run inference on the input array. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of Prediction</returns>
        public async System.Threading.Tasks.Task<Prediction> PredictAsync (string deploymentName, string versionName, string modelName, Prediction body)
        {
             ApiResponse<Prediction> localVarResponse = await PredictAsyncWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run inference on the input array. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input NDArray</param>
        /// <returns>Task of ApiResponse (Prediction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Prediction>> PredictAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, Prediction body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Predict");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Predict");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Predict");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Predict");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predict";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predict", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Prediction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Prediction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Prediction)));
        }

        /// <summary>
        /// Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified. These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">Operation to perform on the input data.</param>
        /// <param name="inputType">Type of the input data.</param>
        /// <param name="inputData"> (optional)</param>
        /// <returns></returns>
        public void PredictError (string contentType, string operation, string inputType, string inputData = null)
        {
             PredictErrorWithHttpInfo(contentType, operation, inputType, inputData);
        }

        /// <summary>
        /// Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified. These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">Operation to perform on the input data.</param>
        /// <param name="inputType">Type of the input data.</param>
        /// <param name="inputData"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PredictErrorWithHttpInfo (string contentType, string operation, string inputType, string inputData = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->PredictError");
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ApiException(400, "Missing required parameter 'operation' when calling DefaultApi->PredictError");
            // verify the required parameter 'inputType' is set
            if (inputType == null)
                throw new ApiException(400, "Missing required parameter 'inputType' when calling DefaultApi->PredictError");

            var localVarPath = "/{operation}/{inputType}/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operation != null) localVarPathParams.Add("operation", this.Configuration.ApiClient.ParameterToString(operation)); // path parameter
            if (inputType != null) localVarPathParams.Add("inputType", this.Configuration.ApiClient.ParameterToString(inputType)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredictError", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified. These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">Operation to perform on the input data.</param>
        /// <param name="inputType">Type of the input data.</param>
        /// <param name="inputData"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PredictErrorAsync (string contentType, string operation, string inputType, string inputData = null)
        {
             await PredictErrorAsyncWithHttpInfo(contentType, operation, inputType, inputData);

        }

        /// <summary>
        /// Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified. These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">Operation to perform on the input data.</param>
        /// <param name="inputType">Type of the input data.</param>
        /// <param name="inputData"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PredictErrorAsyncWithHttpInfo (string contentType, string operation, string inputType, string inputData = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->PredictError");
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ApiException(400, "Missing required parameter 'operation' when calling DefaultApi->PredictError");
            // verify the required parameter 'inputType' is set
            if (inputType == null)
                throw new ApiException(400, "Missing required parameter 'inputType' when calling DefaultApi->PredictError");

            var localVarPath = "/{operation}/{inputType}/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operation != null) localVarPathParams.Add("operation", this.Configuration.ApiClient.ParameterToString(operation)); // path parameter
            if (inputType != null) localVarPathParams.Add("inputType", this.Configuration.ApiClient.ParameterToString(inputType)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredictError", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeFile">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on.</param>
        /// <returns></returns>
        public void PredictV2File (string operation, string inputTypeFile, System.IO.Stream inputData)
        {
             PredictV2FileWithHttpInfo(operation, inputTypeFile, inputData);
        }

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeFile">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PredictV2FileWithHttpInfo (string operation, string inputTypeFile, System.IO.Stream inputData)
        {
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ApiException(400, "Missing required parameter 'operation' when calling DefaultApi->PredictV2File");
            // verify the required parameter 'inputTypeFile' is set
            if (inputTypeFile == null)
                throw new ApiException(400, "Missing required parameter 'inputTypeFile' when calling DefaultApi->PredictV2File");
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling DefaultApi->PredictV2File");

            var localVarPath = "/{operation}/{inputTypeFile}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operation != null) localVarPathParams.Add("operation", this.Configuration.ApiClient.ParameterToString(operation)); // path parameter
            if (inputTypeFile != null) localVarPathParams.Add("inputTypeFile", this.Configuration.ApiClient.ParameterToString(inputTypeFile)); // path parameter
            if (inputData != null) localVarFileParams.Add("inputData", this.Configuration.ApiClient.ParameterToFile("inputData", inputData));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredictV2File", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeFile">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PredictV2FileAsync (string operation, string inputTypeFile, System.IO.Stream inputData)
        {
             await PredictV2FileAsyncWithHttpInfo(operation, inputTypeFile, inputData);

        }

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeFile">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PredictV2FileAsyncWithHttpInfo (string operation, string inputTypeFile, System.IO.Stream inputData)
        {
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ApiException(400, "Missing required parameter 'operation' when calling DefaultApi->PredictV2File");
            // verify the required parameter 'inputTypeFile' is set
            if (inputTypeFile == null)
                throw new ApiException(400, "Missing required parameter 'inputTypeFile' when calling DefaultApi->PredictV2File");
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling DefaultApi->PredictV2File");

            var localVarPath = "/{operation}/{inputTypeFile}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operation != null) localVarPathParams.Add("operation", this.Configuration.ApiClient.ParameterToString(operation)); // path parameter
            if (inputTypeFile != null) localVarPathParams.Add("inputTypeFile", this.Configuration.ApiClient.ParameterToString(inputTypeFile)); // path parameter
            if (inputData != null) localVarFileParams.Add("inputData", this.Configuration.ApiClient.ParameterToFile("inputData", inputData));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredictV2File", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeJson">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on. (Specify a JSON string here)</param>
        /// <returns></returns>
        public void PredictV2Json (string contentType, string operation, string inputTypeJson, string inputData)
        {
             PredictV2JsonWithHttpInfo(contentType, operation, inputTypeJson, inputData);
        }

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeJson">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on. (Specify a JSON string here)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PredictV2JsonWithHttpInfo (string contentType, string operation, string inputTypeJson, string inputData)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->PredictV2Json");
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ApiException(400, "Missing required parameter 'operation' when calling DefaultApi->PredictV2Json");
            // verify the required parameter 'inputTypeJson' is set
            if (inputTypeJson == null)
                throw new ApiException(400, "Missing required parameter 'inputTypeJson' when calling DefaultApi->PredictV2Json");
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling DefaultApi->PredictV2Json");

            var localVarPath = "/{operation}/{inputTypeJson}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operation != null) localVarPathParams.Add("operation", this.Configuration.ApiClient.ParameterToString(operation)); // path parameter
            if (inputTypeJson != null) localVarPathParams.Add("inputTypeJson", this.Configuration.ApiClient.ParameterToString(inputTypeJson)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredictV2Json", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeJson">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on. (Specify a JSON string here)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PredictV2JsonAsync (string contentType, string operation, string inputTypeJson, string inputData)
        {
             await PredictV2JsonAsyncWithHttpInfo(contentType, operation, inputTypeJson, inputData);

        }

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.</param>
        /// <param name="operation">The operation to perform on the input data. </param>
        /// <param name="inputTypeJson">Type of the input data. </param>
        /// <param name="inputData">The input data to run inference on. (Specify a JSON string here)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PredictV2JsonAsyncWithHttpInfo (string contentType, string operation, string inputTypeJson, string inputData)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->PredictV2Json");
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ApiException(400, "Missing required parameter 'operation' when calling DefaultApi->PredictV2Json");
            // verify the required parameter 'inputTypeJson' is set
            if (inputTypeJson == null)
                throw new ApiException(400, "Missing required parameter 'inputTypeJson' when calling DefaultApi->PredictV2Json");
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling DefaultApi->PredictV2Json");

            var localVarPath = "/{operation}/{inputTypeJson}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operation != null) localVarPathParams.Add("operation", this.Configuration.ApiClient.ParameterToString(operation)); // path parameter
            if (inputTypeJson != null) localVarPathParams.Add("inputTypeJson", this.Configuration.ApiClient.ParameterToString(inputTypeJson)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PredictV2Json", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Prediction</returns>
        public Prediction Predictimage (string deploymentName, string versionName, string modelName, System.IO.Stream image = null)
        {
             ApiResponse<Prediction> localVarResponse = PredictimageWithHttpInfo(deploymentName, versionName, modelName, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>ApiResponse of Prediction</returns>
        public ApiResponse< Prediction > PredictimageWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream image = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Predictimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Predictimage");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Predictimage");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predictimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Prediction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Prediction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Prediction)));
        }

        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of Prediction</returns>
        public async System.Threading.Tasks.Task<Prediction> PredictimageAsync (string deploymentName, string versionName, string modelName, System.IO.Stream image = null)
        {
             ApiResponse<Prediction> localVarResponse = await PredictimageAsyncWithHttpInfo(deploymentName, versionName, modelName, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (Prediction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Prediction>> PredictimageAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, System.IO.Stream image = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Predictimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Predictimage");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Predictimage");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predictimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Prediction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Prediction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Prediction)));
        }

        /// <summary>
        /// Preprocesses the input and run inference on it 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>Prediction</returns>
        public Prediction Predictwithpreprocess (string deploymentName, string versionName, string modelName, List<string> body)
        {
             ApiResponse<Prediction> localVarResponse = PredictwithpreprocessWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Preprocesses the input and run inference on it 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>ApiResponse of Prediction</returns>
        public ApiResponse< Prediction > PredictwithpreprocessWithHttpInfo (string deploymentName, string versionName, string modelName, List<string> body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Predictwithpreprocess");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Predictwithpreprocess");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Predictwithpreprocess");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Predictwithpreprocess");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predictwithpreprocess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Prediction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Prediction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Prediction)));
        }

        /// <summary>
        /// Preprocesses the input and run inference on it 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>Task of Prediction</returns>
        public async System.Threading.Tasks.Task<Prediction> PredictwithpreprocessAsync (string deploymentName, string versionName, string modelName, List<string> body)
        {
             ApiResponse<Prediction> localVarResponse = await PredictwithpreprocessAsyncWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Preprocesses the input and run inference on it 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>Task of ApiResponse (Prediction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Prediction>> PredictwithpreprocessAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, List<string> body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Predictwithpreprocess");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Predictwithpreprocess");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Predictwithpreprocess");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Predictwithpreprocess");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predictwithpreprocess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Prediction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Prediction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Prediction)));
        }

        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>JsonArrayResponse</returns>
        public JsonArrayResponse Predictwithpreprocessjson (string deploymentName, string versionName, string modelName, List<string> body)
        {
             ApiResponse<JsonArrayResponse> localVarResponse = PredictwithpreprocessjsonWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>ApiResponse of JsonArrayResponse</returns>
        public ApiResponse< JsonArrayResponse > PredictwithpreprocessjsonWithHttpInfo (string deploymentName, string versionName, string modelName, List<string> body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Predictwithpreprocessjson");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Predictwithpreprocessjson");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Predictwithpreprocessjson");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Predictwithpreprocessjson");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predictwithpreprocessjson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonArrayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonArrayResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonArrayResponse)));
        }

        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>Task of JsonArrayResponse</returns>
        public async System.Threading.Tasks.Task<JsonArrayResponse> PredictwithpreprocessjsonAsync (string deploymentName, string versionName, string modelName, List<string> body)
        {
             ApiResponse<JsonArrayResponse> localVarResponse = await PredictwithpreprocessjsonAsyncWithHttpInfo(deploymentName, versionName, modelName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <param name="body">The input array</param>
        /// <returns>Task of ApiResponse (JsonArrayResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonArrayResponse>> PredictwithpreprocessjsonAsyncWithHttpInfo (string deploymentName, string versionName, string modelName, List<string> body)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Predictwithpreprocessjson");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Predictwithpreprocessjson");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Predictwithpreprocessjson");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Predictwithpreprocessjson");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", this.Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predictwithpreprocessjson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonArrayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonArrayResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonArrayResponse)));
        }

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputType">Input data type.</param>
        /// <param name="outputType">Binary output data type.</param>
        /// <param name="inputData">The input file to upload. (optional)</param>
        /// <returns></returns>
        public void RawPredictBinary (string inputType, string outputType, System.IO.Stream inputData = null)
        {
             RawPredictBinaryWithHttpInfo(inputType, outputType, inputData);
        }

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputType">Input data type.</param>
        /// <param name="outputType">Binary output data type.</param>
        /// <param name="inputData">The input file to upload. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RawPredictBinaryWithHttpInfo (string inputType, string outputType, System.IO.Stream inputData = null)
        {
            // verify the required parameter 'inputType' is set
            if (inputType == null)
                throw new ApiException(400, "Missing required parameter 'inputType' when calling DefaultApi->RawPredictBinary");
            // verify the required parameter 'outputType' is set
            if (outputType == null)
                throw new ApiException(400, "Missing required parameter 'outputType' when calling DefaultApi->RawPredictBinary");

            var localVarPath = "/raw/{inputType}/{outputType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputType != null) localVarPathParams.Add("inputType", this.Configuration.ApiClient.ParameterToString(inputType)); // path parameter
            if (outputType != null) localVarPathParams.Add("outputType", this.Configuration.ApiClient.ParameterToString(outputType)); // path parameter
            if (inputData != null) localVarFileParams.Add("inputData", this.Configuration.ApiClient.ParameterToFile("inputData", inputData));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawPredictBinary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputType">Input data type.</param>
        /// <param name="outputType">Binary output data type.</param>
        /// <param name="inputData">The input file to upload. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RawPredictBinaryAsync (string inputType, string outputType, System.IO.Stream inputData = null)
        {
             await RawPredictBinaryAsyncWithHttpInfo(inputType, outputType, inputData);

        }

        /// <summary>
        /// Runs inference based on the input data. Output is defined relative to the output adapter specified. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputType">Input data type.</param>
        /// <param name="outputType">Binary output data type.</param>
        /// <param name="inputData">The input file to upload. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RawPredictBinaryAsyncWithHttpInfo (string inputType, string outputType, System.IO.Stream inputData = null)
        {
            // verify the required parameter 'inputType' is set
            if (inputType == null)
                throw new ApiException(400, "Missing required parameter 'inputType' when calling DefaultApi->RawPredictBinary");
            // verify the required parameter 'outputType' is set
            if (outputType == null)
                throw new ApiException(400, "Missing required parameter 'outputType' when calling DefaultApi->RawPredictBinary");

            var localVarPath = "/raw/{inputType}/{outputType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputType != null) localVarPathParams.Add("inputType", this.Configuration.ApiClient.ParameterToString(inputType)); // path parameter
            if (outputType != null) localVarPathParams.Add("outputType", this.Configuration.ApiClient.ParameterToString(outputType)); // path parameter
            if (inputData != null) localVarFileParams.Add("inputData", this.Configuration.ApiClient.ParameterToFile("inputData", inputData));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawPredictBinary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>JobEntity</returns>
        public JobEntity RefreshJobStatus (long? jobId)
        {
             ApiResponse<JobEntity> localVarResponse = RefreshJobStatusWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>ApiResponse of JobEntity</returns>
        public ApiResponse< JobEntity > RefreshJobStatusWithHttpInfo (long? jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DefaultApi->RefreshJobStatus");

            var localVarPath = "/jobs/{jobId}/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of JobEntity</returns>
        public async System.Threading.Tasks.Task<JobEntity> RefreshJobStatusAsync (long? jobId)
        {
             ApiResponse<JobEntity> localVarResponse = await RefreshJobStatusAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Refresh the remote job status. Can be used for monitoring. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobEntity>> RefreshJobStatusAsyncWithHttpInfo (long? jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DefaultApi->RefreshJobStatus");

            var localVarPath = "/jobs/{jobId}/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Register a new user 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>User</returns>
        public User RegisterUser (User user)
        {
             ApiResponse<User> localVarResponse = RegisterUserWithHttpInfo(user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new user 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > RegisterUserWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling DefaultApi->RegisterUser");

            var localVarPath = "/user/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Register a new user 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> RegisterUserAsync (User user)
        {
             ApiResponse<User> localVarResponse = await RegisterUserAsyncWithHttpInfo(user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register a new user 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> RegisterUserAsyncWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling DefaultApi->RegisterUser");

            var localVarPath = "/user/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>ModelEntity</returns>
        public ModelEntity ReimportModel (string deploymentId, string modelId, ImportModelRequest body)
        {
             ApiResponse<ModelEntity> localVarResponse = ReimportModelWithHttpInfo(deploymentId, modelId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>ApiResponse of ModelEntity</returns>
        public ApiResponse< ModelEntity > ReimportModelWithHttpInfo (string deploymentId, string modelId, ImportModelRequest body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->ReimportModel");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DefaultApi->ReimportModel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ReimportModel");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReimportModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ModelEntity</returns>
        public async System.Threading.Tasks.Task<ModelEntity> ReimportModelAsync (string deploymentId, string modelId, ImportModelRequest body)
        {
             ApiResponse<ModelEntity> localVarResponse = await ReimportModelAsyncWithHttpInfo(deploymentId, modelId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reimport a model to a previous deployed model in a deployment 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">the id of the deployed model</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ApiResponse (ModelEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelEntity>> ReimportModelAsyncWithHttpInfo (string deploymentId, string modelId, ImportModelRequest body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->ReimportModel");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DefaultApi->ReimportModel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ReimportModel");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", this.Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReimportModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEntity)));
        }

        /// <summary>
        /// Revoke a user token. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token ID</param>
        /// <returns>Token</returns>
        public Token RevokeUserToken (long? tokenId)
        {
             ApiResponse<Token> localVarResponse = RevokeUserTokenWithHttpInfo(tokenId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Revoke a user token. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token ID</param>
        /// <returns>ApiResponse of Token</returns>
        public ApiResponse< Token > RevokeUserTokenWithHttpInfo (long? tokenId)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling DefaultApi->RevokeUserToken");

            var localVarPath = "/auth/token/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarPathParams.Add("tokenId", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeUserToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Token) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Token)));
        }

        /// <summary>
        /// Revoke a user token. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token ID</param>
        /// <returns>Task of Token</returns>
        public async System.Threading.Tasks.Task<Token> RevokeUserTokenAsync (long? tokenId)
        {
             ApiResponse<Token> localVarResponse = await RevokeUserTokenAsyncWithHttpInfo(tokenId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Revoke a user token. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token ID</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Token>> RevokeUserTokenAsyncWithHttpInfo (long? tokenId)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling DefaultApi->RevokeUserToken");

            var localVarPath = "/auth/token/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarPathParams.Add("tokenId", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeUserToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Token) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Token)));
        }

        /// <summary>
        /// Rollback to a previous revision of the model. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Model revision index.</param>
        /// <returns>RollbackStatus</returns>
        public RollbackStatus Rollback (int? index)
        {
             ApiResponse<RollbackStatus> localVarResponse = RollbackWithHttpInfo(index);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Rollback to a previous revision of the model. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Model revision index.</param>
        /// <returns>ApiResponse of RollbackStatus</returns>
        public ApiResponse< RollbackStatus > RollbackWithHttpInfo (int? index)
        {
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling DefaultApi->Rollback");

            var localVarPath = "/rollback/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Rollback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RollbackStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RollbackStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RollbackStatus)));
        }

        /// <summary>
        /// Rollback to a previous revision of the model. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Model revision index.</param>
        /// <returns>Task of RollbackStatus</returns>
        public async System.Threading.Tasks.Task<RollbackStatus> RollbackAsync (int? index)
        {
             ApiResponse<RollbackStatus> localVarResponse = await RollbackAsyncWithHttpInfo(index);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rollback to a previous revision of the model. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Model revision index.</param>
        /// <returns>Task of ApiResponse (RollbackStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RollbackStatus>> RollbackAsyncWithHttpInfo (int? index)
        {
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling DefaultApi->Rollback");

            var localVarPath = "/rollback/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Rollback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RollbackStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RollbackStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RollbackStatus)));
        }

        /// <summary>
        /// Start running an (already created) job on the remote resource 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>JobEntity</returns>
        public JobEntity RunAJob (long? jobId)
        {
             ApiResponse<JobEntity> localVarResponse = RunAJobWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start running an (already created) job on the remote resource 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>ApiResponse of JobEntity</returns>
        public ApiResponse< JobEntity > RunAJobWithHttpInfo (long? jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DefaultApi->RunAJob");

            var localVarPath = "/jobs/{jobId}/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunAJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Start running an (already created) job on the remote resource 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of JobEntity</returns>
        public async System.Threading.Tasks.Task<JobEntity> RunAJobAsync (long? jobId)
        {
             ApiResponse<JobEntity> localVarResponse = await RunAJobAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start running an (already created) job on the remote resource 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job ID</param>
        /// <returns>Task of ApiResponse (JobEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobEntity>> RunAJobAsyncWithHttpInfo (long? jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling DefaultApi->RunAJob");

            var localVarPath = "/jobs/{jobId}/run";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunAJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobEntity)));
        }

        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>BatchCSVRecord</returns>
        public BatchCSVRecord TransformCsv (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null)
        {
             ApiResponse<BatchCSVRecord> localVarResponse = TransformCsvWithHttpInfo(deploymentName, versionName, transformName, batchCSVRecord);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>ApiResponse of BatchCSVRecord</returns>
        public ApiResponse< BatchCSVRecord > TransformCsvWithHttpInfo (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->TransformCsv");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->TransformCsv");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling DefaultApi->TransformCsv");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (batchCSVRecord != null && batchCSVRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchCSVRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchCSVRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchCSVRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BatchCSVRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchCSVRecord)));
        }

        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of BatchCSVRecord</returns>
        public async System.Threading.Tasks.Task<BatchCSVRecord> TransformCsvAsync (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null)
        {
             ApiResponse<BatchCSVRecord> localVarResponse = await TransformCsvAsyncWithHttpInfo(deploymentName, versionName, transformName, batchCSVRecord);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord Takes a batch of SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchCSVRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of ApiResponse (BatchCSVRecord)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchCSVRecord>> TransformCsvAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, BatchCSVRecord batchCSVRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->TransformCsv");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->TransformCsv");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling DefaultApi->TransformCsv");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (batchCSVRecord != null && batchCSVRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchCSVRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchCSVRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchCSVRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BatchCSVRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchCSVRecord)));
        }

        /// <summary>
        /// Takes a batch input arrays and transforms it 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>Base64NDArrayBody</returns>
        public Base64NDArrayBody Transformarray (string deploymentName, string versionName, string transformName, BatchRecord batchRecord = null)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = TransformarrayWithHttpInfo(deploymentName, versionName, transformName, batchRecord);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Takes a batch input arrays and transforms it 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        public ApiResponse< Base64NDArrayBody > TransformarrayWithHttpInfo (string deploymentName, string versionName, string transformName, BatchRecord batchRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Transformarray");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Transformarray");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling DefaultApi->Transformarray");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (batchRecord != null && batchRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Takes a batch input arrays and transforms it 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        public async System.Threading.Tasks.Task<Base64NDArrayBody> TransformarrayAsync (string deploymentName, string versionName, string transformName, BatchRecord batchRecord = null)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = await TransformarrayAsyncWithHttpInfo(deploymentName, versionName, transformName, batchRecord);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Takes a batch input arrays and transforms it 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="batchRecord">The input batch of record arrays (optional)</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformarrayAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, BatchRecord batchRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Transformarray");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Transformarray");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling DefaultApi->Transformarray");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (batchRecord != null && batchRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>Base64NDArrayBody</returns>
        public Base64NDArrayBody Transformimage (string deploymentName, string versionName, string imageTransformName, List<System.IO.Stream> files)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = TransformimageWithHttpInfo(deploymentName, versionName, imageTransformName, files);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        public ApiResponse< Base64NDArrayBody > TransformimageWithHttpInfo (string deploymentName, string versionName, string imageTransformName, List<System.IO.Stream> files)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Transformimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Transformimage");
            // verify the required parameter 'imageTransformName' is set
            if (imageTransformName == null)
                throw new ApiException(400, "Missing required parameter 'imageTransformName' when calling DefaultApi->Transformimage");
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling DefaultApi->Transformimage");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (imageTransformName != null) localVarPathParams.Add("imageTransformName", this.Configuration.ApiClient.ParameterToString(imageTransformName)); // path parameter
            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files[0]));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        public async System.Threading.Tasks.Task<Base64NDArrayBody> TransformimageAsync (string deploymentName, string versionName, string imageTransformName, List<System.IO.Stream> files)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = await TransformimageAsyncWithHttpInfo(deploymentName, versionName, imageTransformName, files);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Takes multiple multipart image file to transform and returns Base64NDArrayBody Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="files">The image files to upload</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformimageAsyncWithHttpInfo (string deploymentName, string versionName, string imageTransformName, List<System.IO.Stream> files)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Transformimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Transformimage");
            // verify the required parameter 'imageTransformName' is set
            if (imageTransformName == null)
                throw new ApiException(400, "Missing required parameter 'imageTransformName' when calling DefaultApi->Transformimage");
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling DefaultApi->Transformimage");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (imageTransformName != null) localVarPathParams.Add("imageTransformName", this.Configuration.ApiClient.ParameterToString(imageTransformName)); // path parameter
            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files[0]));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord Takes a SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>SingleCSVRecord</returns>
        public SingleCSVRecord TransformincrementalCsv (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null)
        {
             ApiResponse<SingleCSVRecord> localVarResponse = TransformincrementalCsvWithHttpInfo(deploymentName, versionName, transformName, singleCSVRecord);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord Takes a SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>ApiResponse of SingleCSVRecord</returns>
        public ApiResponse< SingleCSVRecord > TransformincrementalCsvWithHttpInfo (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->TransformincrementalCsv");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->TransformincrementalCsv");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling DefaultApi->TransformincrementalCsv");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (singleCSVRecord != null && singleCSVRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(singleCSVRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleCSVRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformincrementalCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleCSVRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SingleCSVRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleCSVRecord)));
        }

        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord Takes a SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>Task of SingleCSVRecord</returns>
        public async System.Threading.Tasks.Task<SingleCSVRecord> TransformincrementalCsvAsync (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null)
        {
             ApiResponse<SingleCSVRecord> localVarResponse = await TransformincrementalCsvAsyncWithHttpInfo(deploymentName, versionName, transformName, singleCSVRecord);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord Takes a SingleCSVRecord object and transforms it into the desired format
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleCSVRecord">The input record array (optional)</param>
        /// <returns>Task of ApiResponse (SingleCSVRecord)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleCSVRecord>> TransformincrementalCsvAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, SingleCSVRecord singleCSVRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->TransformincrementalCsv");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->TransformincrementalCsv");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling DefaultApi->TransformincrementalCsv");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (singleCSVRecord != null && singleCSVRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(singleCSVRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleCSVRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformincrementalCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleCSVRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SingleCSVRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleCSVRecord)));
        }

        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>Base64NDArrayBody</returns>
        public Base64NDArrayBody Transformincrementalarray (string deploymentName, string versionName, string transformName, SingleRecord singleRecord = null)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = TransformincrementalarrayWithHttpInfo(deploymentName, versionName, transformName, singleRecord);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        public ApiResponse< Base64NDArrayBody > TransformincrementalarrayWithHttpInfo (string deploymentName, string versionName, string transformName, SingleRecord singleRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Transformincrementalarray");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Transformincrementalarray");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling DefaultApi->Transformincrementalarray");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (singleRecord != null && singleRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(singleRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformincrementalarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        public async System.Threading.Tasks.Task<Base64NDArrayBody> TransformincrementalarrayAsync (string deploymentName, string versionName, string transformName, SingleRecord singleRecord = null)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = await TransformincrementalarrayAsyncWithHttpInfo(deploymentName, versionName, transformName, singleRecord);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Same as /transformincremental but returns Base64NDArrayBody. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="singleRecord">The input record array (optional)</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformincrementalarrayAsyncWithHttpInfo (string deploymentName, string versionName, string transformName, SingleRecord singleRecord = null)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Transformincrementalarray");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Transformincrementalarray");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling DefaultApi->Transformincrementalarray");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (singleRecord != null && singleRecord.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(singleRecord); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleRecord; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformincrementalarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>Base64NDArrayBody</returns>
        public Base64NDArrayBody Transformincrementalimage (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = TransformincrementalimageWithHttpInfo(deploymentName, versionName, imageTransformName, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        public ApiResponse< Base64NDArrayBody > TransformincrementalimageWithHttpInfo (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Transformincrementalimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Transformincrementalimage");
            // verify the required parameter 'imageTransformName' is set
            if (imageTransformName == null)
                throw new ApiException(400, "Missing required parameter 'imageTransformName' when calling DefaultApi->Transformincrementalimage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling DefaultApi->Transformincrementalimage");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (imageTransformName != null) localVarPathParams.Add("imageTransformName", this.Configuration.ApiClient.ParameterToString(imageTransformName)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformincrementalimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        public async System.Threading.Tasks.Task<Base64NDArrayBody> TransformincrementalimageAsync (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = await TransformincrementalimageAsyncWithHttpInfo(deploymentName, versionName, imageTransformName, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Takes a single multipart image file to transform and returns Base64NDArrayBody Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="imageTransformName">ID or name of the deployed image transform</param>
        /// <param name="file">The image file to upload</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> TransformincrementalimageAsyncWithHttpInfo (string deploymentName, string versionName, string imageTransformName, System.IO.Stream file)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Transformincrementalimage");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->Transformincrementalimage");
            // verify the required parameter 'imageTransformName' is set
            if (imageTransformName == null)
                throw new ApiException(400, "Missing required parameter 'imageTransformName' when calling DefaultApi->Transformincrementalimage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling DefaultApi->Transformincrementalimage");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (imageTransformName != null) localVarPathParams.Add("imageTransformName", this.Configuration.ApiClient.ParameterToString(imageTransformName)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transformincrementalimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Base64NDArrayBody) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image) 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>Object</returns>
        public Object TransformprocessGet (string deploymentName, string versionName, string transformName)
        {
             ApiResponse<Object> localVarResponse = TransformprocessGetWithHttpInfo(deploymentName, versionName, transformName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image) 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TransformprocessGetWithHttpInfo (string deploymentName, string versionName, string transformName)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->TransformprocessGet");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->TransformprocessGet");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling DefaultApi->TransformprocessGet");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformprocessGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image) 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TransformprocessGetAsync (string deploymentName, string versionName, string transformName)
        {
             ApiResponse<Object> localVarResponse = await TransformprocessGetAsyncWithHttpInfo(deploymentName, versionName, transformName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the JSON string of the deployed transform process (CSV or Image) 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransformprocessGetAsyncWithHttpInfo (string deploymentName, string versionName, string transformName)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->TransformprocessGet");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->TransformprocessGet");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling DefaultApi->TransformprocessGet");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformprocessGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;.</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (Specify a JSON string here). (optional)</param>
        /// <returns>Object</returns>
        public Object TransformprocessPost (string contentType, string deploymentName, string versionName, string transformName, string transformProcess = null)
        {
             ApiResponse<Object> localVarResponse = TransformprocessPostWithHttpInfo(contentType, deploymentName, versionName, transformName, transformProcess);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;.</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (Specify a JSON string here). (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TransformprocessPostWithHttpInfo (string contentType, string deploymentName, string versionName, string transformName, string transformProcess = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->TransformprocessPost");
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->TransformprocessPost");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->TransformprocessPost");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling DefaultApi->TransformprocessPost");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (transformProcess != null && transformProcess.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transformProcess); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transformProcess; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;.</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (Specify a JSON string here). (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TransformprocessPostAsync (string contentType, string deploymentName, string versionName, string transformName, string transformProcess = null)
        {
             ApiResponse<Object> localVarResponse = await TransformprocessPostAsyncWithHttpInfo(contentType, deploymentName, versionName, transformName, transformProcess);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the deployed (CSV or Image) transform process through the provided JSON string 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;.</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="versionName">Version name of the endpoint. The default value is \&quot;default\&quot;</param>
        /// <param name="transformName">ID or name of the deployed transform</param>
        /// <param name="transformProcess">The transform process to set (Specify a JSON string here). (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransformprocessPostAsyncWithHttpInfo (string contentType, string deploymentName, string versionName, string transformName, string transformProcess = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->TransformprocessPost");
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->TransformprocessPost");
            // verify the required parameter 'versionName' is set
            if (versionName == null)
                throw new ApiException(400, "Missing required parameter 'versionName' when calling DefaultApi->TransformprocessPost");
            // verify the required parameter 'transformName' is set
            if (transformName == null)
                throw new ApiException(400, "Missing required parameter 'transformName' when calling DefaultApi->TransformprocessPost");

            var localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", this.Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (versionName != null) localVarPathParams.Add("versionName", this.Configuration.ApiClient.ParameterToString(versionName)); // path parameter
            if (transformName != null) localVarPathParams.Add("transformName", this.Configuration.ApiClient.ParameterToString(transformName)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (transformProcess != null && transformProcess.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transformProcess); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transformProcess; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransformprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update auth policy 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authPolicy">Auth policy object</param>
        /// <returns>AuthPolicy</returns>
        public AuthPolicy UpdateAuthPolicy (AuthPolicy authPolicy)
        {
             ApiResponse<AuthPolicy> localVarResponse = UpdateAuthPolicyWithHttpInfo(authPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update auth policy 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authPolicy">Auth policy object</param>
        /// <returns>ApiResponse of AuthPolicy</returns>
        public ApiResponse< AuthPolicy > UpdateAuthPolicyWithHttpInfo (AuthPolicy authPolicy)
        {
            // verify the required parameter 'authPolicy' is set
            if (authPolicy == null)
                throw new ApiException(400, "Missing required parameter 'authPolicy' when calling DefaultApi->UpdateAuthPolicy");

            var localVarPath = "/auth/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authPolicy != null && authPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(authPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authPolicy; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAuthPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthPolicy)));
        }

        /// <summary>
        /// Update auth policy 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authPolicy">Auth policy object</param>
        /// <returns>Task of AuthPolicy</returns>
        public async System.Threading.Tasks.Task<AuthPolicy> UpdateAuthPolicyAsync (AuthPolicy authPolicy)
        {
             ApiResponse<AuthPolicy> localVarResponse = await UpdateAuthPolicyAsyncWithHttpInfo(authPolicy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update auth policy 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authPolicy">Auth policy object</param>
        /// <returns>Task of ApiResponse (AuthPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthPolicy>> UpdateAuthPolicyAsyncWithHttpInfo (AuthPolicy authPolicy)
        {
            // verify the required parameter 'authPolicy' is set
            if (authPolicy == null)
                throw new ApiException(400, "Missing required parameter 'authPolicy' when calling DefaultApi->UpdateAuthPolicy");

            var localVarPath = "/auth/policy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authPolicy != null && authPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(authPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authPolicy; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAuthPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthPolicy)));
        }

        /// <summary>
        /// Updates the best model for an experiment 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>ExperimentEntity</returns>
        public ExperimentEntity UpdateBestModelForExperiment (string modelHistoryServerId, UpdateBestModel updateBestModel)
        {
             ApiResponse<ExperimentEntity> localVarResponse = UpdateBestModelForExperimentWithHttpInfo(modelHistoryServerId, updateBestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the best model for an experiment 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        public ApiResponse< ExperimentEntity > UpdateBestModelForExperimentWithHttpInfo (string modelHistoryServerId, UpdateBestModel updateBestModel)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->UpdateBestModelForExperiment");
            // verify the required parameter 'updateBestModel' is set
            if (updateBestModel == null)
                throw new ApiException(400, "Missing required parameter 'updateBestModel' when calling DefaultApi->UpdateBestModelForExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/best";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (updateBestModel != null && updateBestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBestModel; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBestModelForExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Updates the best model for an experiment 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>Task of ExperimentEntity</returns>
        public async System.Threading.Tasks.Task<ExperimentEntity> UpdateBestModelForExperimentAsync (string modelHistoryServerId, UpdateBestModel updateBestModel)
        {
             ApiResponse<ExperimentEntity> localVarResponse = await UpdateBestModelForExperimentAsyncWithHttpInfo(modelHistoryServerId, updateBestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the best model for an experiment 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="updateBestModel">Model encapsulating the experiment id to update and the best model id.</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> UpdateBestModelForExperimentAsyncWithHttpInfo (string modelHistoryServerId, UpdateBestModel updateBestModel)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->UpdateBestModelForExperiment");
            // verify the required parameter 'updateBestModel' is set
            if (updateBestModel == null)
                throw new ApiException(400, "Missing required parameter 'updateBestModel' when calling DefaultApi->UpdateBestModelForExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/best";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (updateBestModel != null && updateBestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBestModel; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBestModelForExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Updates an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>ExperimentEntity</returns>
        public ExperimentEntity UpdateExperiment (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity)
        {
             ApiResponse<ExperimentEntity> localVarResponse = UpdateExperimentWithHttpInfo(modelHistoryServerId, experimentID, experimentEntity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>ApiResponse of ExperimentEntity</returns>
        public ApiResponse< ExperimentEntity > UpdateExperimentWithHttpInfo (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->UpdateExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling DefaultApi->UpdateExperiment");
            // verify the required parameter 'experimentEntity' is set
            if (experimentEntity == null)
                throw new ApiException(400, "Missing required parameter 'experimentEntity' when calling DefaultApi->UpdateExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter
            if (experimentEntity != null && experimentEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(experimentEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = experimentEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Updates an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>Task of ExperimentEntity</returns>
        public async System.Threading.Tasks.Task<ExperimentEntity> UpdateExperimentAsync (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity)
        {
             ApiResponse<ExperimentEntity> localVarResponse = await UpdateExperimentAsyncWithHttpInfo(modelHistoryServerId, experimentID, experimentEntity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an experiment, given an experiment entity 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="experimentID">the GUID of the experiment to update</param>
        /// <param name="experimentEntity">The experiment entity to update with</param>
        /// <returns>Task of ApiResponse (ExperimentEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExperimentEntity>> UpdateExperimentAsyncWithHttpInfo (string modelHistoryServerId, string experimentID, ExperimentEntity experimentEntity)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->UpdateExperiment");
            // verify the required parameter 'experimentID' is set
            if (experimentID == null)
                throw new ApiException(400, "Missing required parameter 'experimentID' when calling DefaultApi->UpdateExperiment");
            // verify the required parameter 'experimentEntity' is set
            if (experimentEntity == null)
                throw new ApiException(400, "Missing required parameter 'experimentEntity' when calling DefaultApi->UpdateExperiment");

            var localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (experimentID != null) localVarPathParams.Add("experimentID", this.Configuration.ApiClient.ParameterToString(experimentID)); // path parameter
            if (experimentEntity != null && experimentEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(experimentEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = experimentEntity; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExperiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExperimentEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExperimentEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExperimentEntity)));
        }

        /// <summary>
        /// Update a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>ModelHistoryEntity</returns>
        public ModelHistoryEntity UpdateModelHistory (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = UpdateModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>ApiResponse of ModelHistoryEntity</returns>
        public ApiResponse< ModelHistoryEntity > UpdateModelHistoryWithHttpInfo (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->UpdateModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling DefaultApi->UpdateModelHistory");
            // verify the required parameter 'updateModelHistoryRequest' is set
            if (updateModelHistoryRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateModelHistoryRequest' when calling DefaultApi->UpdateModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter
            if (updateModelHistoryRequest != null && updateModelHistoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateModelHistoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateModelHistoryRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Update a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ModelHistoryEntity</returns>
        public async System.Threading.Tasks.Task<ModelHistoryEntity> UpdateModelHistoryAsync (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest)
        {
             ApiResponse<ModelHistoryEntity> localVarResponse = await UpdateModelHistoryAsyncWithHttpInfo(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a model history / workspace 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHistoryServerId">Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.</param>
        /// <param name="modelHistoryID">the GUID of the model history / workspace to update</param>
        /// <param name="updateModelHistoryRequest">The model history request object</param>
        /// <returns>Task of ApiResponse (ModelHistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelHistoryEntity>> UpdateModelHistoryAsyncWithHttpInfo (string modelHistoryServerId, string modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest)
        {
            // verify the required parameter 'modelHistoryServerId' is set
            if (modelHistoryServerId == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryServerId' when calling DefaultApi->UpdateModelHistory");
            // verify the required parameter 'modelHistoryID' is set
            if (modelHistoryID == null)
                throw new ApiException(400, "Missing required parameter 'modelHistoryID' when calling DefaultApi->UpdateModelHistory");
            // verify the required parameter 'updateModelHistoryRequest' is set
            if (updateModelHistoryRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateModelHistoryRequest' when calling DefaultApi->UpdateModelHistory");

            var localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHistoryServerId != null) localVarPathParams.Add("modelHistoryServerId", this.Configuration.ApiClient.ParameterToString(modelHistoryServerId)); // path parameter
            if (modelHistoryID != null) localVarPathParams.Add("modelHistoryID", this.Configuration.ApiClient.ParameterToString(modelHistoryID)); // path parameter
            if (updateModelHistoryRequest != null && updateModelHistoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateModelHistoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateModelHistoryRequest; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHistoryEntity)));
        }

        /// <summary>
        /// Update a user 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>User</returns>
        public User UpdateUser (User user)
        {
             ApiResponse<User> localVarResponse = UpdateUserWithHttpInfo(user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UpdateUserWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling DefaultApi->UpdateUser");

            var localVarPath = "/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Update a user 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UpdateUserAsync (User user)
        {
             ApiResponse<User> localVarResponse = await UpdateUserAsyncWithHttpInfo(user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User details</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserAsyncWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling DefaultApi->UpdateUser");

            var localVarPath = "/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Upload a model file to SKIL for import. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>FileUploadList</returns>
        public FileUploadList Upload (System.IO.Stream file = null)
        {
             ApiResponse<FileUploadList> localVarResponse = UploadWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a model file to SKIL for import. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>ApiResponse of FileUploadList</returns>
        public ApiResponse< FileUploadList > UploadWithHttpInfo (System.IO.Stream file = null)
        {

            var localVarPath = "/api/upload/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Upload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileUploadList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileUploadList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileUploadList)));
        }

        /// <summary>
        /// Upload a model file to SKIL for import. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>Task of FileUploadList</returns>
        public async System.Threading.Tasks.Task<FileUploadList> UploadAsync (System.IO.Stream file = null)
        {
             ApiResponse<FileUploadList> localVarResponse = await UploadAsyncWithHttpInfo(file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a model file to SKIL for import. 
        /// </summary>
        /// <exception cref="Skymind.Skil.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (FileUploadList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileUploadList>> UploadAsyncWithHttpInfo (System.IO.Stream file = null)
        {

            var localVarPath = "/api/upload/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = this.Configuration.GetApiKeyWithPrefix("authorization");
            }
            // authentication (x_api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Upload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileUploadList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FileUploadList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileUploadList)));
        }

    }
}
