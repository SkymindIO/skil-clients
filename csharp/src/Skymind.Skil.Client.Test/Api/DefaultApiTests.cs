/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Skymind.Skil.Client.Client;
using Skymind.Skil.Client.Api;
using Skymind.Skil.Client.Model;

namespace Skymind.Skil.Client.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DefaultApi
            //Assert.IsInstanceOf(typeof(DefaultApi), instance);
        }

        
        /// <summary>
        /// Test AccumulatedResults
        /// </summary>
        [Test]
        public void AccumulatedResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AccumulatedResults();
            //Assert.IsInstanceOf(typeof(AccumulatedResults), response, "response is AccumulatedResults");
        }
        
        /// <summary>
        /// Test AddCredentials
        /// </summary>
        [Test]
        public void AddCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddCredentialsRequest addCredentialsRequest = null;
            //var response = instance.AddCredentials(addCredentialsRequest);
            //Assert.IsInstanceOf(typeof(ResourceCredentials), response, "response is ResourceCredentials");
        }
        
        /// <summary>
        /// Test AddEvaluationResult
        /// </summary>
        [Test]
        public void AddEvaluationResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //EvaluationResultsEntity evaluationResultsEntity = null;
            //var response = instance.AddEvaluationResult(modelHistoryServerId, evaluationResultsEntity);
            //Assert.IsInstanceOf(typeof(EvaluationResultsEntity), response, "response is EvaluationResultsEntity");
        }
        
        /// <summary>
        /// Test AddExampleForBatch
        /// </summary>
        [Test]
        public void AddExampleForBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //AddExampleRequest addExampleRequest = null;
            //var response = instance.AddExampleForBatch(modelHistoryServerId, addExampleRequest);
            //Assert.IsInstanceOf(typeof(AddExampleRequest), response, "response is AddExampleRequest");
        }
        
        /// <summary>
        /// Test AddExampleToMinibatch
        /// </summary>
        [Test]
        public void AddExampleToMinibatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //ExampleEntity exampleEntity = null;
            //var response = instance.AddExampleToMinibatch(modelHistoryServerId, exampleEntity);
            //Assert.IsInstanceOf(typeof(ExampleEntity), response, "response is ExampleEntity");
        }
        
        /// <summary>
        /// Test AddExperiment
        /// </summary>
        [Test]
        public void AddExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //ExperimentEntity experimentEntity = null;
            //var response = instance.AddExperiment(modelHistoryServerId, experimentEntity);
            //Assert.IsInstanceOf(typeof(ExperimentEntity), response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test AddFeedbackBinary
        /// </summary>
        [Test]
        public void AddFeedbackBinaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string type = null;
            //System.IO.Stream file = null;
            //var response = instance.AddFeedbackBinary(id, type, file);
            //Assert.IsInstanceOf(typeof(FeedbackResponse), response, "response is FeedbackResponse");
        }
        
        /// <summary>
        /// Test AddFeedbackJson
        /// </summary>
        [Test]
        public void AddFeedbackJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<List<double?>> labels = null;
            //var response = instance.AddFeedbackJson(id, labels);
            //Assert.IsInstanceOf(typeof(FeedbackResponse), response, "response is FeedbackResponse");
        }
        
        /// <summary>
        /// Test AddMinibatch
        /// </summary>
        [Test]
        public void AddMinibatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //MinibatchEntity minibatchEntity = null;
            //var response = instance.AddMinibatch(modelHistoryServerId, minibatchEntity);
            //Assert.IsInstanceOf(typeof(MinibatchEntity), response, "response is MinibatchEntity");
        }
        
        /// <summary>
        /// Test AddModelFeedback
        /// </summary>
        [Test]
        public void AddModelFeedbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //ModelFeedBackRequest modelFeedBackRequest = null;
            //var response = instance.AddModelFeedback(modelHistoryServerId, modelFeedBackRequest);
            //Assert.IsInstanceOf(typeof(ModelFeedBackRequest), response, "response is ModelFeedBackRequest");
        }
        
        /// <summary>
        /// Test AddModelHistory
        /// </summary>
        [Test]
        public void AddModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //AddModelHistoryRequest addModelHistoryRequest = null;
            //var response = instance.AddModelHistory(modelHistoryServerId, addModelHistoryRequest);
            //Assert.IsInstanceOf(typeof(ModelHistoryEntity), response, "response is ModelHistoryEntity");
        }
        
        /// <summary>
        /// Test AddModelInstance
        /// </summary>
        [Test]
        public void AddModelInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //ModelInstanceEntity modelInstanceEntity = null;
            //var response = instance.AddModelInstance(modelHistoryServerId, modelInstanceEntity);
            //Assert.IsInstanceOf(typeof(ModelInstanceEntity), response, "response is ModelInstanceEntity");
        }
        
        /// <summary>
        /// Test AddResource
        /// </summary>
        [Test]
        public void AddResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddResourceRequest addResourceRequest = null;
            //var response = instance.AddResource(addResourceRequest);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test AddResourceGroup
        /// </summary>
        [Test]
        public void AddResourceGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupName = null;
            //var response = instance.AddResourceGroup(groupName);
            //Assert.IsInstanceOf(typeof(ResourceGroup), response, "response is ResourceGroup");
        }
        
        /// <summary>
        /// Test AddResourceToGroup
        /// </summary>
        [Test]
        public void AddResourceToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceGroupId = null;
            //long? resourceId = null;
            //instance.AddResourceToGroup(resourceGroupId, resourceId);
            
        }
        
        /// <summary>
        /// Test AggregateModelResults
        /// </summary>
        [Test]
        public void AggregateModelResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //AggregatePrediction aggregatePrediction = null;
            //var response = instance.AggregateModelResults(modelHistoryServerId, aggregatePrediction);
            //Assert.IsInstanceOf(typeof(EvaluationResultsEntity), response, "response is EvaluationResultsEntity");
        }
        
        /// <summary>
        /// Test ChangeUserPassword
        /// </summary>
        [Test]
        public void ChangeUserPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //ChangePasswordRequest changePasswordRequest = null;
            //var response = instance.ChangeUserPassword(userId, changePasswordRequest);
            //Assert.IsInstanceOf(typeof(User), response, "response is User");
        }
        
        /// <summary>
        /// Test Classify
        /// </summary>
        [Test]
        public void ClassifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //Prediction body = null;
            //var response = instance.Classify(deploymentName, versionName, modelName, body);
            //Assert.IsInstanceOf(typeof(ClassificationResult), response, "response is ClassificationResult");
        }
        
        /// <summary>
        /// Test Classifyarray
        /// </summary>
        [Test]
        public void ClassifyarrayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //Prediction body = null;
            //var response = instance.Classifyarray(deploymentName, versionName, modelName, body);
            //Assert.IsInstanceOf(typeof(Base64NDArrayBody), response, "response is Base64NDArrayBody");
        }
        
        /// <summary>
        /// Test Classifyimage
        /// </summary>
        [Test]
        public void ClassifyimageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //System.IO.Stream image = null;
            //var response = instance.Classifyimage(deploymentName, versionName, modelName, image);
            //Assert.IsInstanceOf(typeof(ClassificationResult), response, "response is ClassificationResult");
        }
        
        /// <summary>
        /// Test ClearState
        /// </summary>
        [Test]
        public void ClearStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ClearState();
            //Assert.IsInstanceOf(typeof(FeedbackResponse), response, "response is FeedbackResponse");
        }
        
        /// <summary>
        /// Test CreateJob
        /// </summary>
        [Test]
        public void CreateJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobIdOrType = null;
            //CreateJobRequest createJobRequest = null;
            //var response = instance.CreateJob(jobIdOrType, createJobRequest);
            //Assert.IsInstanceOf(typeof(JobEntity), response, "response is JobEntity");
        }
        
        /// <summary>
        /// Test CreateModelHistory
        /// </summary>
        [Test]
        public void CreateModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //ModelHistoryEntity modelHistoryEntity = null;
            //var response = instance.CreateModelHistory(modelHistoryServerId, modelHistoryEntity);
            //Assert.IsInstanceOf(typeof(ModelHistoryEntity), response, "response is ModelHistoryEntity");
        }
        
        /// <summary>
        /// Test DeleteCredentialsById
        /// </summary>
        [Test]
        public void DeleteCredentialsByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? credentialId = null;
            //instance.DeleteCredentialsById(credentialId);
            
        }
        
        /// <summary>
        /// Test DeleteExperiment
        /// </summary>
        [Test]
        public void DeleteExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string experimentID = null;
            //var response = instance.DeleteExperiment(modelHistoryServerId, experimentID);
            //Assert.IsInstanceOf(typeof(InlineResponse200), response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test DeleteJobById
        /// </summary>
        [Test]
        public void DeleteJobByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? jobIdOrType = null;
            //instance.DeleteJobById(jobIdOrType);
            
        }
        
        /// <summary>
        /// Test DeleteModel
        /// </summary>
        [Test]
        public void DeleteModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string modelId = null;
            //var response = instance.DeleteModel(deploymentId, modelId);
            //Assert.IsInstanceOf(typeof(InlineResponse200), response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test DeleteModelHistory
        /// </summary>
        [Test]
        public void DeleteModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelHistoryID = null;
            //var response = instance.DeleteModelHistory(modelHistoryServerId, modelHistoryID);
            //Assert.IsInstanceOf(typeof(InlineResponse200), response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test DeleteModelInstance
        /// </summary>
        [Test]
        public void DeleteModelInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelInstanceID = null;
            //instance.DeleteModelInstance(modelHistoryServerId, modelInstanceID);
            
        }
        
        /// <summary>
        /// Test DeleteResourceById
        /// </summary>
        [Test]
        public void DeleteResourceByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceId = null;
            //var response = instance.DeleteResourceById(resourceId);
            //Assert.IsInstanceOf(typeof(Resource), response, "response is Resource");
        }
        
        /// <summary>
        /// Test DeleteResourceFromGroup
        /// </summary>
        [Test]
        public void DeleteResourceFromGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceGroupId = null;
            //long? resourceId = null;
            //instance.DeleteResourceFromGroup(resourceGroupId, resourceId);
            
        }
        
        /// <summary>
        /// Test DeleteResourceGroupById
        /// </summary>
        [Test]
        public void DeleteResourceGroupByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceGroupId = null;
            //var response = instance.DeleteResourceGroupById(resourceGroupId);
            //Assert.IsInstanceOf(typeof(ResourceGroup), response, "response is ResourceGroup");
        }
        
        /// <summary>
        /// Test DeployModel
        /// </summary>
        [Test]
        public void DeployModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //ImportModelRequest body = null;
            //var response = instance.DeployModel(deploymentId, body);
            //Assert.IsInstanceOf(typeof(ModelEntity), response, "response is ModelEntity");
        }
        
        /// <summary>
        /// Test DeploymentCreate
        /// </summary>
        [Test]
        public void DeploymentCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateDeploymentRequest body = null;
            //var response = instance.DeploymentCreate(body);
            //Assert.IsInstanceOf(typeof(DeploymentResponse), response, "response is DeploymentResponse");
        }
        
        /// <summary>
        /// Test DeploymentDelete
        /// </summary>
        [Test]
        public void DeploymentDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //var response = instance.DeploymentDelete(deploymentId);
            //Assert.IsInstanceOf(typeof(InlineResponse200), response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test DeploymentGet
        /// </summary>
        [Test]
        public void DeploymentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //var response = instance.DeploymentGet(deploymentId);
            //Assert.IsInstanceOf(typeof(DeploymentResponse), response, "response is DeploymentResponse");
        }
        
        /// <summary>
        /// Test Deployments
        /// </summary>
        [Test]
        public void DeploymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Deployments();
            //Assert.IsInstanceOf(typeof(List<DeploymentResponse>), response, "response is List<DeploymentResponse>");
        }
        
        /// <summary>
        /// Test Detectobjects
        /// </summary>
        [Test]
        public void DetectobjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //string id = null;
            //bool? needsPreprocessing = null;
            //float? threshold = null;
            //System.IO.Stream file = null;
            //var response = instance.Detectobjects(deploymentName, versionName, modelName, id, needsPreprocessing, threshold, file);
            //Assert.IsInstanceOf(typeof(DetectionResult), response, "response is DetectionResult");
        }
        
        /// <summary>
        /// Test DownloadJobOutputFile
        /// </summary>
        [Test]
        public void DownloadJobOutputFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? jobId = null;
            //DownloadOutputFileRequest downloadOutputFileRequest = null;
            //instance.DownloadJobOutputFile(jobId, downloadOutputFileRequest);
            
        }
        
        /// <summary>
        /// Test GenerateAuthToken
        /// </summary>
        [Test]
        public void GenerateAuthTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenGenerateRequest tokenGenerateRequest = null;
            //var response = instance.GenerateAuthToken(tokenGenerateRequest);
            //Assert.IsInstanceOf(typeof(Token), response, "response is Token");
        }
        
        /// <summary>
        /// Test GetAllJobs
        /// </summary>
        [Test]
        public void GetAllJobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllJobs();
            //Assert.IsInstanceOf(typeof(List<JobEntity>), response, "response is List<JobEntity>");
        }
        
        /// <summary>
        /// Test GetArray
        /// </summary>
        [Test]
        public void GetArrayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string arrayType = null;
            //instance.GetArray(accept, arrayType);
            
        }
        
        /// <summary>
        /// Test GetArrayIndices
        /// </summary>
        [Test]
        public void GetArrayIndicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string accept = null;
            //string arrayType = null;
            //string input = null;
            //instance.GetArrayIndices(contentType, accept, arrayType, input);
            
        }
        
        /// <summary>
        /// Test GetArrayRange
        /// </summary>
        [Test]
        public void GetArrayRangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string arrayType = null;
            //int? from = null;
            //int? to = null;
            //instance.GetArrayRange(accept, arrayType, from, to);
            
        }
        
        /// <summary>
        /// Test GetAuthPolicy
        /// </summary>
        [Test]
        public void GetAuthPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAuthPolicy();
            //Assert.IsInstanceOf(typeof(AuthPolicy), response, "response is AuthPolicy");
        }
        
        /// <summary>
        /// Test GetBestModelAmongModelIds
        /// </summary>
        [Test]
        public void GetBestModelAmongModelIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //BestModel bestModel = null;
            //var response = instance.GetBestModelAmongModelIds(modelHistoryServerId, bestModel);
            //Assert.IsInstanceOf(typeof(ModelInstanceEntity), response, "response is ModelInstanceEntity");
        }
        
        /// <summary>
        /// Test GetCredentialsById
        /// </summary>
        [Test]
        public void GetCredentialsByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? credentialId = null;
            //var response = instance.GetCredentialsById(credentialId);
            //Assert.IsInstanceOf(typeof(ResourceCredentials), response, "response is ResourceCredentials");
        }
        
        /// <summary>
        /// Test GetCurrentModel
        /// </summary>
        [Test]
        public void GetCurrentModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.GetCurrentModel();
            
        }
        
        /// <summary>
        /// Test GetEvaluationForModelID
        /// </summary>
        [Test]
        public void GetEvaluationForModelIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelInstanceID = null;
            //var response = instance.GetEvaluationForModelID(modelHistoryServerId, modelInstanceID);
            //Assert.IsInstanceOf(typeof(List<EvaluationResultsEntity>), response, "response is List<EvaluationResultsEntity>");
        }
        
        /// <summary>
        /// Test GetExamplesForMinibatch
        /// </summary>
        [Test]
        public void GetExamplesForMinibatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string minibatchId = null;
            //var response = instance.GetExamplesForMinibatch(modelHistoryServerId, minibatchId);
            //Assert.IsInstanceOf(typeof(List<ExampleEntity>), response, "response is List<ExampleEntity>");
        }
        
        /// <summary>
        /// Test GetExperiment
        /// </summary>
        [Test]
        public void GetExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string experimentID = null;
            //var response = instance.GetExperiment(modelHistoryServerId, experimentID);
            //Assert.IsInstanceOf(typeof(ExperimentEntity), response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test GetExperimentsForModelHistory
        /// </summary>
        [Test]
        public void GetExperimentsForModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelHistoryID = null;
            //var response = instance.GetExperimentsForModelHistory(modelHistoryServerId, modelHistoryID);
            //Assert.IsInstanceOf(typeof(List<ExperimentEntity>), response, "response is List<ExperimentEntity>");
        }
        
        /// <summary>
        /// Test GetJobById
        /// </summary>
        [Test]
        public void GetJobByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? jobIdOrType = null;
            //var response = instance.GetJobById(jobIdOrType);
            //Assert.IsInstanceOf(typeof(JobEntity), response, "response is JobEntity");
        }
        
        /// <summary>
        /// Test GetLastEvaluation
        /// </summary>
        [Test]
        public void GetLastEvaluationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetLastEvaluation();
            //Assert.IsInstanceOf(typeof(EvaluationResultsEntity), response, "response is EvaluationResultsEntity");
        }
        
        /// <summary>
        /// Test GetMinibatch
        /// </summary>
        [Test]
        public void GetMinibatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string minibatchId = null;
            //var response = instance.GetMinibatch(modelHistoryServerId, minibatchId);
            //Assert.IsInstanceOf(typeof(MinibatchEntity), response, "response is MinibatchEntity");
        }
        
        /// <summary>
        /// Test GetModelDetails
        /// </summary>
        [Test]
        public void GetModelDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string modelId = null;
            //var response = instance.GetModelDetails(deploymentId, modelId);
            //Assert.IsInstanceOf(typeof(ModelEntity), response, "response is ModelEntity");
        }
        
        /// <summary>
        /// Test GetModelHistory
        /// </summary>
        [Test]
        public void GetModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelHistoryID = null;
            //var response = instance.GetModelHistory(modelHistoryServerId, modelHistoryID);
            //Assert.IsInstanceOf(typeof(ModelHistoryEntity), response, "response is ModelHistoryEntity");
        }
        
        /// <summary>
        /// Test GetModelInstance
        /// </summary>
        [Test]
        public void GetModelInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelInstanceID = null;
            //var response = instance.GetModelInstance(modelHistoryServerId, modelInstanceID);
            //Assert.IsInstanceOf(typeof(ModelInstanceEntity), response, "response is ModelInstanceEntity");
        }
        
        /// <summary>
        /// Test GetModelsForExperiment
        /// </summary>
        [Test]
        public void GetModelsForExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string experimentID = null;
            //var response = instance.GetModelsForExperiment(modelHistoryServerId, experimentID);
            //Assert.IsInstanceOf(typeof(List<ModelInstanceEntity>), response, "response is List<ModelInstanceEntity>");
        }
        
        /// <summary>
        /// Test GetResourceById
        /// </summary>
        [Test]
        public void GetResourceByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceId = null;
            //var response = instance.GetResourceById(resourceId);
            //Assert.IsInstanceOf(typeof(Resource), response, "response is Resource");
        }
        
        /// <summary>
        /// Test GetResourceBySubType
        /// </summary>
        [Test]
        public void GetResourceBySubTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string resourceSubType = null;
            //var response = instance.GetResourceBySubType(resourceSubType);
            //Assert.IsInstanceOf(typeof(List<Resource>), response, "response is List<Resource>");
        }
        
        /// <summary>
        /// Test GetResourceByType
        /// </summary>
        [Test]
        public void GetResourceByTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string resourceType = null;
            //var response = instance.GetResourceByType(resourceType);
            //Assert.IsInstanceOf(typeof(List<Resource>), response, "response is List<Resource>");
        }
        
        /// <summary>
        /// Test GetResourceDetailsById
        /// </summary>
        [Test]
        public void GetResourceDetailsByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceId = null;
            //var response = instance.GetResourceDetailsById(resourceId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetResourceGroupById
        /// </summary>
        [Test]
        public void GetResourceGroupByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceGroupId = null;
            //var response = instance.GetResourceGroupById(resourceGroupId);
            //Assert.IsInstanceOf(typeof(ResourceGroup), response, "response is ResourceGroup");
        }
        
        /// <summary>
        /// Test GetResourceGroups
        /// </summary>
        [Test]
        public void GetResourceGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetResourceGroups();
            //Assert.IsInstanceOf(typeof(List<ResourceGroup>), response, "response is List<ResourceGroup>");
        }
        
        /// <summary>
        /// Test GetResources
        /// </summary>
        [Test]
        public void GetResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetResources();
            //Assert.IsInstanceOf(typeof(List<Resource>), response, "response is List<Resource>");
        }
        
        /// <summary>
        /// Test GetResourcesFromGroup
        /// </summary>
        [Test]
        public void GetResourcesFromGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? resourceGroupId = null;
            //var response = instance.GetResourcesFromGroup(resourceGroupId);
            //Assert.IsInstanceOf(typeof(List<Resource>), response, "response is List<Resource>");
        }
        
        /// <summary>
        /// Test GetRoles
        /// </summary>
        [Test]
        public void GetRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetRoles();
            //Assert.IsInstanceOf(typeof(List<Role>), response, "response is List<Role>");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.GetUser(userId);
            //Assert.IsInstanceOf(typeof(User), response, "response is User");
        }
        
        /// <summary>
        /// Test GetUserAuthTokens
        /// </summary>
        [Test]
        public void GetUserAuthTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //bool? onlyValid = null;
            //var response = instance.GetUserAuthTokens(userId, onlyValid);
            //Assert.IsInstanceOf(typeof(List<Token>), response, "response is List<Token>");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUsers();
            //Assert.IsInstanceOf(typeof(List<User>), response, "response is List<User>");
        }
        
        /// <summary>
        /// Test IsTraining
        /// </summary>
        [Test]
        public void IsTrainingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IsTraining();
            //Assert.IsInstanceOf(typeof(RetrainingStatus), response, "response is RetrainingStatus");
        }
        
        /// <summary>
        /// Test Jsonarray
        /// </summary>
        [Test]
        public void JsonarrayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //Prediction body = null;
            //var response = instance.Jsonarray(deploymentName, versionName, modelName, body);
            //Assert.IsInstanceOf(typeof(JsonArrayResponse), response, "response is JsonArrayResponse");
        }
        
        /// <summary>
        /// Test Knn
        /// </summary>
        [Test]
        public void KnnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string knnName = null;
            //NearestNeighborRequest body = null;
            //var response = instance.Knn(deploymentName, versionName, knnName, body);
            //Assert.IsInstanceOf(typeof(NearestNeighborsResults), response, "response is NearestNeighborsResults");
        }
        
        /// <summary>
        /// Test Knnnew
        /// </summary>
        [Test]
        public void KnnnewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string knnName = null;
            //Base64NDArrayBodyKNN body = null;
            //var response = instance.Knnnew(deploymentName, versionName, knnName, body);
            //Assert.IsInstanceOf(typeof(NearestNeighborsResults), response, "response is NearestNeighborsResults");
        }
        
        /// <summary>
        /// Test ListAllExperiments
        /// </summary>
        [Test]
        public void ListAllExperimentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //var response = instance.ListAllExperiments(modelHistoryServerId);
            //Assert.IsInstanceOf(typeof(List<ExperimentEntity>), response, "response is List<ExperimentEntity>");
        }
        
        /// <summary>
        /// Test Logfilepath
        /// </summary>
        [Test]
        public void LogfilepathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.Logfilepath(deploymentName, versionName, modelName);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test Login
        /// </summary>
        [Test]
        public void LoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LoginRequest loginRequest = null;
            //var response = instance.Login(loginRequest);
            //Assert.IsInstanceOf(typeof(LoginResponse), response, "response is LoginResponse");
        }
        
        /// <summary>
        /// Test Logs
        /// </summary>
        [Test]
        public void LogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //LogRequest logRequest = null;
            //var response = instance.Logs(deploymentName, versionName, modelName, logRequest);
            //Assert.IsInstanceOf(typeof(LogBatch), response, "response is LogBatch");
        }
        
        /// <summary>
        /// Test MetaGet
        /// </summary>
        [Test]
        public void MetaGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //var response = instance.MetaGet(deploymentName, versionName, modelName);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test MetaPost
        /// </summary>
        [Test]
        public void MetaPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //string body = null;
            //var response = instance.MetaPost(contentType, deploymentName, versionName, modelName, body);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test ModelStateChange
        /// </summary>
        [Test]
        public void ModelStateChangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string modelId = null;
            //SetState body = null;
            //var response = instance.ModelStateChange(deploymentId, modelId, body);
            //Assert.IsInstanceOf(typeof(ModelEntity), response, "response is ModelEntity");
        }
        
        /// <summary>
        /// Test Models
        /// </summary>
        [Test]
        public void ModelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //var response = instance.Models(deploymentId);
            //Assert.IsInstanceOf(typeof(List<ModelEntity>), response, "response is List<ModelEntity>");
        }
        
        /// <summary>
        /// Test Modelset
        /// </summary>
        [Test]
        public void ModelsetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //System.IO.Stream file = null;
            //var response = instance.Modelset(deploymentName, versionName, modelName, file);
            //Assert.IsInstanceOf(typeof(ModelStatus), response, "response is ModelStatus");
        }
        
        /// <summary>
        /// Test Modelupdate
        /// </summary>
        [Test]
        public void ModelupdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //System.IO.Stream file = null;
            //var response = instance.Modelupdate(deploymentName, versionName, modelName, file);
            //Assert.IsInstanceOf(typeof(ModelStatus), response, "response is ModelStatus");
        }
        
        /// <summary>
        /// Test Multiclassify
        /// </summary>
        [Test]
        public void MulticlassifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //Prediction body = null;
            //var response = instance.Multiclassify(deploymentName, versionName, modelName, body);
            //Assert.IsInstanceOf(typeof(MultiClassClassificationResult), response, "response is MultiClassClassificationResult");
        }
        
        /// <summary>
        /// Test Multipredict
        /// </summary>
        [Test]
        public void MultipredictTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //MultiPredictRequest body = null;
            //var response = instance.Multipredict(deploymentName, versionName, modelName, body);
            //Assert.IsInstanceOf(typeof(MultiPredictResponse), response, "response is MultiPredictResponse");
        }
        
        /// <summary>
        /// Test Multipredictimage
        /// </summary>
        [Test]
        public void MultipredictimageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //System.IO.Stream file = null;
            //string id = null;
            //bool? needsPreprocessing = null;
            //var response = instance.Multipredictimage(deploymentName, versionName, modelName, file, id, needsPreprocessing);
            //Assert.IsInstanceOf(typeof(MultiPredictResponse), response, "response is MultiPredictResponse");
        }
        
        /// <summary>
        /// Test NumRevisions
        /// </summary>
        [Test]
        public void NumRevisionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.NumRevisions();
            //Assert.IsInstanceOf(typeof(RevisionsWritten), response, "response is RevisionsWritten");
        }
        
        /// <summary>
        /// Test Predict
        /// </summary>
        [Test]
        public void PredictTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //Prediction body = null;
            //var response = instance.Predict(deploymentName, versionName, modelName, body);
            //Assert.IsInstanceOf(typeof(Prediction), response, "response is Prediction");
        }
        
        /// <summary>
        /// Test PredictError
        /// </summary>
        [Test]
        public void PredictErrorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string operation = null;
            //string inputType = null;
            //string inputData = null;
            //instance.PredictError(contentType, operation, inputType, inputData);
            
        }
        
        /// <summary>
        /// Test PredictV2File
        /// </summary>
        [Test]
        public void PredictV2FileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string operation = null;
            //string inputTypeFile = null;
            //System.IO.Stream inputData = null;
            //instance.PredictV2File(operation, inputTypeFile, inputData);
            
        }
        
        /// <summary>
        /// Test PredictV2Json
        /// </summary>
        [Test]
        public void PredictV2JsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string operation = null;
            //string inputTypeJson = null;
            //string inputData = null;
            //instance.PredictV2Json(contentType, operation, inputTypeJson, inputData);
            
        }
        
        /// <summary>
        /// Test Predictimage
        /// </summary>
        [Test]
        public void PredictimageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //System.IO.Stream image = null;
            //var response = instance.Predictimage(deploymentName, versionName, modelName, image);
            //Assert.IsInstanceOf(typeof(Prediction), response, "response is Prediction");
        }
        
        /// <summary>
        /// Test Predictwithpreprocess
        /// </summary>
        [Test]
        public void PredictwithpreprocessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //List<string> body = null;
            //var response = instance.Predictwithpreprocess(deploymentName, versionName, modelName, body);
            //Assert.IsInstanceOf(typeof(Prediction), response, "response is Prediction");
        }
        
        /// <summary>
        /// Test Predictwithpreprocessjson
        /// </summary>
        [Test]
        public void PredictwithpreprocessjsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string modelName = null;
            //List<string> body = null;
            //var response = instance.Predictwithpreprocessjson(deploymentName, versionName, modelName, body);
            //Assert.IsInstanceOf(typeof(JsonArrayResponse), response, "response is JsonArrayResponse");
        }
        
        /// <summary>
        /// Test RawPredictBinary
        /// </summary>
        [Test]
        public void RawPredictBinaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string inputType = null;
            //string outputType = null;
            //System.IO.Stream inputData = null;
            //instance.RawPredictBinary(inputType, outputType, inputData);
            
        }
        
        /// <summary>
        /// Test RefreshJobStatus
        /// </summary>
        [Test]
        public void RefreshJobStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? jobId = null;
            //var response = instance.RefreshJobStatus(jobId);
            //Assert.IsInstanceOf(typeof(JobEntity), response, "response is JobEntity");
        }
        
        /// <summary>
        /// Test RegisterUser
        /// </summary>
        [Test]
        public void RegisterUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User user = null;
            //var response = instance.RegisterUser(user);
            //Assert.IsInstanceOf(typeof(User), response, "response is User");
        }
        
        /// <summary>
        /// Test ReimportModel
        /// </summary>
        [Test]
        public void ReimportModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string modelId = null;
            //ImportModelRequest body = null;
            //var response = instance.ReimportModel(deploymentId, modelId, body);
            //Assert.IsInstanceOf(typeof(ModelEntity), response, "response is ModelEntity");
        }
        
        /// <summary>
        /// Test RevokeUserToken
        /// </summary>
        [Test]
        public void RevokeUserTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? tokenId = null;
            //var response = instance.RevokeUserToken(tokenId);
            //Assert.IsInstanceOf(typeof(Token), response, "response is Token");
        }
        
        /// <summary>
        /// Test Rollback
        /// </summary>
        [Test]
        public void RollbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? index = null;
            //var response = instance.Rollback(index);
            //Assert.IsInstanceOf(typeof(RollbackStatus), response, "response is RollbackStatus");
        }
        
        /// <summary>
        /// Test RunAJob
        /// </summary>
        [Test]
        public void RunAJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? jobId = null;
            //var response = instance.RunAJob(jobId);
            //Assert.IsInstanceOf(typeof(JobEntity), response, "response is JobEntity");
        }
        
        /// <summary>
        /// Test TransformCsv
        /// </summary>
        [Test]
        public void TransformCsvTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string transformName = null;
            //BatchCSVRecord batchCSVRecord = null;
            //var response = instance.TransformCsv(deploymentName, versionName, transformName, batchCSVRecord);
            //Assert.IsInstanceOf(typeof(BatchCSVRecord), response, "response is BatchCSVRecord");
        }
        
        /// <summary>
        /// Test Transformarray
        /// </summary>
        [Test]
        public void TransformarrayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string transformName = null;
            //BatchRecord batchRecord = null;
            //var response = instance.Transformarray(deploymentName, versionName, transformName, batchRecord);
            //Assert.IsInstanceOf(typeof(Base64NDArrayBody), response, "response is Base64NDArrayBody");
        }
        
        /// <summary>
        /// Test Transformimage
        /// </summary>
        [Test]
        public void TransformimageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string imageTransformName = null;
            //List<System.IO.Stream> files = null;
            //var response = instance.Transformimage(deploymentName, versionName, imageTransformName, files);
            //Assert.IsInstanceOf(typeof(Base64NDArrayBody), response, "response is Base64NDArrayBody");
        }
        
        /// <summary>
        /// Test TransformincrementalCsv
        /// </summary>
        [Test]
        public void TransformincrementalCsvTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string transformName = null;
            //SingleCSVRecord singleCSVRecord = null;
            //var response = instance.TransformincrementalCsv(deploymentName, versionName, transformName, singleCSVRecord);
            //Assert.IsInstanceOf(typeof(SingleCSVRecord), response, "response is SingleCSVRecord");
        }
        
        /// <summary>
        /// Test Transformincrementalarray
        /// </summary>
        [Test]
        public void TransformincrementalarrayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string transformName = null;
            //SingleRecord singleRecord = null;
            //var response = instance.Transformincrementalarray(deploymentName, versionName, transformName, singleRecord);
            //Assert.IsInstanceOf(typeof(Base64NDArrayBody), response, "response is Base64NDArrayBody");
        }
        
        /// <summary>
        /// Test Transformincrementalimage
        /// </summary>
        [Test]
        public void TransformincrementalimageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string imageTransformName = null;
            //System.IO.Stream file = null;
            //var response = instance.Transformincrementalimage(deploymentName, versionName, imageTransformName, file);
            //Assert.IsInstanceOf(typeof(Base64NDArrayBody), response, "response is Base64NDArrayBody");
        }
        
        /// <summary>
        /// Test TransformprocessGet
        /// </summary>
        [Test]
        public void TransformprocessGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string versionName = null;
            //string transformName = null;
            //var response = instance.TransformprocessGet(deploymentName, versionName, transformName);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test TransformprocessPost
        /// </summary>
        [Test]
        public void TransformprocessPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string deploymentName = null;
            //string versionName = null;
            //string transformName = null;
            //string transformProcess = null;
            //var response = instance.TransformprocessPost(contentType, deploymentName, versionName, transformName, transformProcess);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateAuthPolicy
        /// </summary>
        [Test]
        public void UpdateAuthPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AuthPolicy authPolicy = null;
            //var response = instance.UpdateAuthPolicy(authPolicy);
            //Assert.IsInstanceOf(typeof(AuthPolicy), response, "response is AuthPolicy");
        }
        
        /// <summary>
        /// Test UpdateBestModelForExperiment
        /// </summary>
        [Test]
        public void UpdateBestModelForExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //UpdateBestModel updateBestModel = null;
            //var response = instance.UpdateBestModelForExperiment(modelHistoryServerId, updateBestModel);
            //Assert.IsInstanceOf(typeof(ExperimentEntity), response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test UpdateExperiment
        /// </summary>
        [Test]
        public void UpdateExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string experimentID = null;
            //ExperimentEntity experimentEntity = null;
            //var response = instance.UpdateExperiment(modelHistoryServerId, experimentID, experimentEntity);
            //Assert.IsInstanceOf(typeof(ExperimentEntity), response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test UpdateModelHistory
        /// </summary>
        [Test]
        public void UpdateModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryServerId = null;
            //string modelHistoryID = null;
            //AddModelHistoryRequest updateModelHistoryRequest = null;
            //var response = instance.UpdateModelHistory(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest);
            //Assert.IsInstanceOf(typeof(ModelHistoryEntity), response, "response is ModelHistoryEntity");
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User user = null;
            //var response = instance.UpdateUser(user);
            //Assert.IsInstanceOf(typeof(User), response, "response is User");
        }
        
        /// <summary>
        /// Test Upload
        /// </summary>
        [Test]
        public void UploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //var response = instance.Upload(file);
            //Assert.IsInstanceOf(typeof(FileUploadList), response, "response is FileUploadList");
        }
        
    }

}
