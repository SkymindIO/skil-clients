/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ai.skymind.skil.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;

@ApiModel(description = "")
public class NearestNeighborRequest implements Serializable {
  
  @SerializedName("k")
  private Integer k = null;
  @SerializedName("inputIndex")
  private Integer inputIndex = null;

  /**
   * the number of results
   **/
  @ApiModelProperty(value = "the number of results")
  public Integer getK() {
    return k;
  }
  public void setK(Integer k) {
    this.k = k;
  }

  /**
   * the index of the EXISTING ndarray to run a search on
   **/
  @ApiModelProperty(value = "the index of the EXISTING ndarray to run a search on")
  public Integer getInputIndex() {
    return inputIndex;
  }
  public void setInputIndex(Integer inputIndex) {
    this.inputIndex = inputIndex;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NearestNeighborRequest nearestNeighborRequest = (NearestNeighborRequest) o;
    return (this.k == null ? nearestNeighborRequest.k == null : this.k.equals(nearestNeighborRequest.k)) &&
        (this.inputIndex == null ? nearestNeighborRequest.inputIndex == null : this.inputIndex.equals(nearestNeighborRequest.inputIndex));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.k == null ? 0: this.k.hashCode());
    result = 31 * result + (this.inputIndex == null ? 0: this.inputIndex.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class NearestNeighborRequest {\n");
    
    sb.append("  k: ").append(k).append("\n");
    sb.append("  inputIndex: ").append(inputIndex).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
