/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ai.skymind.skil;

import ai.skymind.ApiInvoker;
import ai.skymind.ApiException;
import ai.skymind.Pair;

import ai.skymind.skil.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import ai.skymind.skil.model.AddExampleRequest;
import ai.skymind.skil.model.AddModelHistoryRequest;
import ai.skymind.skil.model.AggregatePrediction;
import ai.skymind.skil.model.BestModel;
import ai.skymind.skil.model.EvaluationResultsEntity;
import ai.skymind.skil.model.ExampleEntity;
import ai.skymind.skil.model.ExperimentEntity;
import ai.skymind.skil.model.InlineResponse200;
import ai.skymind.skil.model.MinibatchEntity;
import ai.skymind.skil.model.ModelFeedBackRequest;
import ai.skymind.skil.model.ModelHistoryEntity;
import ai.skymind.skil.model.ModelInstanceEntity;
import ai.skymind.skil.model.UpdateBestModel;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ModelHistoryApi {
  String basePath = "http://localhost:9008";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Adds an evaluation result
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param evaluationResultsEntity The evaluation result entity
   * @return EvaluationResultsEntity
  */
  public EvaluationResultsEntity addEvaluationResult (String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = evaluationResultsEntity;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addEvaluationResult",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addEvaluationResult"));
    }
    // verify the required parameter 'evaluationResultsEntity' is set
    if (evaluationResultsEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'evaluationResultsEntity' when calling addEvaluationResult",
        new ApiException(400, "Missing the required parameter 'evaluationResultsEntity' when calling addEvaluationResult"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EvaluationResultsEntity) ApiInvoker.deserialize(localVarResponse, "", EvaluationResultsEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds an evaluation result
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param evaluationResultsEntity The evaluation result entity
  */
  public void addEvaluationResult (String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity, final Response.Listener<EvaluationResultsEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = evaluationResultsEntity;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addEvaluationResult",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addEvaluationResult"));
    }
    // verify the required parameter 'evaluationResultsEntity' is set
    if (evaluationResultsEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'evaluationResultsEntity' when calling addEvaluationResult",
        new ApiException(400, "Missing the required parameter 'evaluationResultsEntity' when calling addEvaluationResult"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EvaluationResultsEntity) ApiInvoker.deserialize(localVarResponse,  "", EvaluationResultsEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds a number of examples to a minibatch ID given an AddExampleRequest.
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size
   * @return AddExampleRequest
  */
  public AddExampleRequest addExampleForBatch (String modelHistoryServerId, AddExampleRequest addExampleRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = addExampleRequest;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addExampleForBatch",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addExampleForBatch"));
    }
    // verify the required parameter 'addExampleRequest' is set
    if (addExampleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addExampleRequest' when calling addExampleForBatch",
        new ApiException(400, "Missing the required parameter 'addExampleRequest' when calling addExampleForBatch"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/exampleForBatch".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AddExampleRequest) ApiInvoker.deserialize(localVarResponse, "", AddExampleRequest.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds a number of examples to a minibatch ID given an AddExampleRequest.
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size
  */
  public void addExampleForBatch (String modelHistoryServerId, AddExampleRequest addExampleRequest, final Response.Listener<AddExampleRequest> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = addExampleRequest;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addExampleForBatch",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addExampleForBatch"));
    }
    // verify the required parameter 'addExampleRequest' is set
    if (addExampleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addExampleRequest' when calling addExampleForBatch",
        new ApiException(400, "Missing the required parameter 'addExampleRequest' when calling addExampleForBatch"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/exampleForBatch".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AddExampleRequest) ApiInvoker.deserialize(localVarResponse,  "", AddExampleRequest.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds an example to a minibatch
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param exampleEntity The example to add to the minibatch
   * @return ExampleEntity
  */
  public ExampleEntity addExampleToMinibatch (String modelHistoryServerId, ExampleEntity exampleEntity) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = exampleEntity;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addExampleToMinibatch",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addExampleToMinibatch"));
    }
    // verify the required parameter 'exampleEntity' is set
    if (exampleEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exampleEntity' when calling addExampleToMinibatch",
        new ApiException(400, "Missing the required parameter 'exampleEntity' when calling addExampleToMinibatch"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/example".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ExampleEntity) ApiInvoker.deserialize(localVarResponse, "", ExampleEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds an example to a minibatch
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param exampleEntity The example to add to the minibatch
  */
  public void addExampleToMinibatch (String modelHistoryServerId, ExampleEntity exampleEntity, final Response.Listener<ExampleEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = exampleEntity;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addExampleToMinibatch",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addExampleToMinibatch"));
    }
    // verify the required parameter 'exampleEntity' is set
    if (exampleEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exampleEntity' when calling addExampleToMinibatch",
        new ApiException(400, "Missing the required parameter 'exampleEntity' when calling addExampleToMinibatch"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/example".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ExampleEntity) ApiInvoker.deserialize(localVarResponse,  "", ExampleEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add an experiment, given an experiment entity
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param experimentEntity The experiment entity to add
   * @return ExperimentEntity
  */
  public ExperimentEntity addExperiment (String modelHistoryServerId, ExperimentEntity experimentEntity) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = experimentEntity;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addExperiment",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addExperiment"));
    }
    // verify the required parameter 'experimentEntity' is set
    if (experimentEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'experimentEntity' when calling addExperiment",
        new ApiException(400, "Missing the required parameter 'experimentEntity' when calling addExperiment"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiment".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ExperimentEntity) ApiInvoker.deserialize(localVarResponse, "", ExperimentEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add an experiment, given an experiment entity
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param experimentEntity The experiment entity to add
  */
  public void addExperiment (String modelHistoryServerId, ExperimentEntity experimentEntity, final Response.Listener<ExperimentEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = experimentEntity;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addExperiment",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addExperiment"));
    }
    // verify the required parameter 'experimentEntity' is set
    if (experimentEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'experimentEntity' when calling addExperiment",
        new ApiException(400, "Missing the required parameter 'experimentEntity' when calling addExperiment"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiment".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ExperimentEntity) ApiInvoker.deserialize(localVarResponse,  "", ExperimentEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds a minibatch
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param minibatchEntity The minibatch entity to add
   * @return MinibatchEntity
  */
  public MinibatchEntity addMinibatch (String modelHistoryServerId, MinibatchEntity minibatchEntity) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = minibatchEntity;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addMinibatch",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addMinibatch"));
    }
    // verify the required parameter 'minibatchEntity' is set
    if (minibatchEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minibatchEntity' when calling addMinibatch",
        new ApiException(400, "Missing the required parameter 'minibatchEntity' when calling addMinibatch"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/minibatch".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MinibatchEntity) ApiInvoker.deserialize(localVarResponse, "", MinibatchEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds a minibatch
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param minibatchEntity The minibatch entity to add
  */
  public void addMinibatch (String modelHistoryServerId, MinibatchEntity minibatchEntity, final Response.Listener<MinibatchEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = minibatchEntity;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addMinibatch",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addMinibatch"));
    }
    // verify the required parameter 'minibatchEntity' is set
    if (minibatchEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minibatchEntity' when calling addMinibatch",
        new ApiException(400, "Missing the required parameter 'minibatchEntity' when calling addMinibatch"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/minibatch".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MinibatchEntity) ApiInvoker.deserialize(localVarResponse,  "", MinibatchEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds an evaluation feedback to the model against a given minibatch id.
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param modelFeedBackRequest The model feedback request object
   * @return ModelFeedBackRequest
  */
  public ModelFeedBackRequest addModelFeedback (String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = modelFeedBackRequest;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addModelFeedback",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addModelFeedback"));
    }
    // verify the required parameter 'modelFeedBackRequest' is set
    if (modelFeedBackRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelFeedBackRequest' when calling addModelFeedback",
        new ApiException(400, "Missing the required parameter 'modelFeedBackRequest' when calling addModelFeedback"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/feedback".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelFeedBackRequest) ApiInvoker.deserialize(localVarResponse, "", ModelFeedBackRequest.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds an evaluation feedback to the model against a given minibatch id.
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param modelFeedBackRequest The model feedback request object
  */
  public void addModelFeedback (String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest, final Response.Listener<ModelFeedBackRequest> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = modelFeedBackRequest;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addModelFeedback",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addModelFeedback"));
    }
    // verify the required parameter 'modelFeedBackRequest' is set
    if (modelFeedBackRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelFeedBackRequest' when calling addModelFeedback",
        new ApiException(400, "Missing the required parameter 'modelFeedBackRequest' when calling addModelFeedback"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/feedback".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelFeedBackRequest) ApiInvoker.deserialize(localVarResponse,  "", ModelFeedBackRequest.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add a model history / workspace
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param addModelHistoryRequest The model history request object
   * @return ModelHistoryEntity
  */
  public ModelHistoryEntity addModelHistory (String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = addModelHistoryRequest;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addModelHistory"));
    }
    // verify the required parameter 'addModelHistoryRequest' is set
    if (addModelHistoryRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addModelHistoryRequest' when calling addModelHistory",
        new ApiException(400, "Missing the required parameter 'addModelHistoryRequest' when calling addModelHistory"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/modelhistory".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelHistoryEntity) ApiInvoker.deserialize(localVarResponse, "", ModelHistoryEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add a model history / workspace
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param addModelHistoryRequest The model history request object
  */
  public void addModelHistory (String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest, final Response.Listener<ModelHistoryEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = addModelHistoryRequest;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addModelHistory"));
    }
    // verify the required parameter 'addModelHistoryRequest' is set
    if (addModelHistoryRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addModelHistoryRequest' when calling addModelHistory",
        new ApiException(400, "Missing the required parameter 'addModelHistoryRequest' when calling addModelHistory"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/modelhistory".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelHistoryEntity) ApiInvoker.deserialize(localVarResponse,  "", ModelHistoryEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds a model
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate
   * @return ModelInstanceEntity
  */
  public ModelInstanceEntity addModelInstance (String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = modelInstanceEntity;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addModelInstance",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addModelInstance"));
    }
    // verify the required parameter 'modelInstanceEntity' is set
    if (modelInstanceEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelInstanceEntity' when calling addModelInstance",
        new ApiException(400, "Missing the required parameter 'modelInstanceEntity' when calling addModelInstance"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelInstanceEntity) ApiInvoker.deserialize(localVarResponse, "", ModelInstanceEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds a model
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate
  */
  public void addModelInstance (String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity, final Response.Listener<ModelInstanceEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = modelInstanceEntity;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling addModelInstance",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling addModelInstance"));
    }
    // verify the required parameter 'modelInstanceEntity' is set
    if (modelInstanceEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelInstanceEntity' when calling addModelInstance",
        new ApiException(400, "Missing the required parameter 'modelInstanceEntity' when calling addModelInstance"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelInstanceEntity) ApiInvoker.deserialize(localVarResponse,  "", ModelInstanceEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Aggregates the evaluaition results of a model instance, based on the evaluation type
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate
   * @return EvaluationResultsEntity
  */
  public EvaluationResultsEntity aggregateModelResults (String modelHistoryServerId, AggregatePrediction aggregatePrediction) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = aggregatePrediction;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling aggregateModelResults",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling aggregateModelResults"));
    }
    // verify the required parameter 'aggregatePrediction' is set
    if (aggregatePrediction == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'aggregatePrediction' when calling aggregateModelResults",
        new ApiException(400, "Missing the required parameter 'aggregatePrediction' when calling aggregateModelResults"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/aggregateresults".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EvaluationResultsEntity) ApiInvoker.deserialize(localVarResponse, "", EvaluationResultsEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Aggregates the evaluaition results of a model instance, based on the evaluation type
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate
  */
  public void aggregateModelResults (String modelHistoryServerId, AggregatePrediction aggregatePrediction, final Response.Listener<EvaluationResultsEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = aggregatePrediction;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling aggregateModelResults",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling aggregateModelResults"));
    }
    // verify the required parameter 'aggregatePrediction' is set
    if (aggregatePrediction == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'aggregatePrediction' when calling aggregateModelResults",
        new ApiException(400, "Missing the required parameter 'aggregatePrediction' when calling aggregateModelResults"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/aggregateresults".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EvaluationResultsEntity) ApiInvoker.deserialize(localVarResponse,  "", EvaluationResultsEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates model History
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param modelHistoryEntity The model history entity
   * @return ModelHistoryEntity
  */
  public ModelHistoryEntity createModelHistory (String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = modelHistoryEntity;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling createModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling createModelHistory"));
    }
    // verify the required parameter 'modelHistoryEntity' is set
    if (modelHistoryEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryEntity' when calling createModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryEntity' when calling createModelHistory"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/revisions".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelHistoryEntity) ApiInvoker.deserialize(localVarResponse, "", ModelHistoryEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates model History
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param modelHistoryEntity The model history entity
  */
  public void createModelHistory (String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity, final Response.Listener<ModelHistoryEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = modelHistoryEntity;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling createModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling createModelHistory"));
    }
    // verify the required parameter 'modelHistoryEntity' is set
    if (modelHistoryEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryEntity' when calling createModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryEntity' when calling createModelHistory"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/revisions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelHistoryEntity) ApiInvoker.deserialize(localVarResponse,  "", ModelHistoryEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes an experiment, given an experiment entity
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param experimentID the GUID of the experiment to delete
   * @return InlineResponse200
  */
  public InlineResponse200 deleteExperiment (String modelHistoryServerId, String experimentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling deleteExperiment",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling deleteExperiment"));
    }
    // verify the required parameter 'experimentID' is set
    if (experimentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'experimentID' when calling deleteExperiment",
        new ApiException(400, "Missing the required parameter 'experimentID' when calling deleteExperiment"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "experimentID" + "\\}", apiInvoker.escapeString(experimentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes an experiment, given an experiment entity
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param experimentID the GUID of the experiment to delete
  */
  public void deleteExperiment (String modelHistoryServerId, String experimentID, final Response.Listener<InlineResponse200> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling deleteExperiment",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling deleteExperiment"));
    }
    // verify the required parameter 'experimentID' is set
    if (experimentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'experimentID' when calling deleteExperiment",
        new ApiException(400, "Missing the required parameter 'experimentID' when calling deleteExperiment"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "experimentID" + "\\}", apiInvoker.escapeString(experimentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse200) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse200.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes a model history / workspace, given its ID
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param modelHistoryID the GUID of the model history / workspace to delete
   * @return InlineResponse200
  */
  public InlineResponse200 deleteModelHistory (String modelHistoryServerId, String modelHistoryID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling deleteModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling deleteModelHistory"));
    }
    // verify the required parameter 'modelHistoryID' is set
    if (modelHistoryID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryID' when calling deleteModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryID' when calling deleteModelHistory"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelHistoryID" + "\\}", apiInvoker.escapeString(modelHistoryID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes a model history / workspace, given its ID
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param modelHistoryID the GUID of the model history / workspace to delete
  */
  public void deleteModelHistory (String modelHistoryServerId, String modelHistoryID, final Response.Listener<InlineResponse200> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling deleteModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling deleteModelHistory"));
    }
    // verify the required parameter 'modelHistoryID' is set
    if (modelHistoryID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryID' when calling deleteModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryID' when calling deleteModelHistory"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelHistoryID" + "\\}", apiInvoker.escapeString(modelHistoryID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse200) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse200.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes a model instance, given its ID
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param modelInstanceID GUID of the model instance to delete.
   * @return void
  */
  public void deleteModelInstance (String modelHistoryServerId, String modelInstanceID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling deleteModelInstance",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling deleteModelInstance"));
    }
    // verify the required parameter 'modelInstanceID' is set
    if (modelInstanceID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelInstanceID' when calling deleteModelInstance",
        new ApiException(400, "Missing the required parameter 'modelInstanceID' when calling deleteModelInstance"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelInstanceID" + "\\}", apiInvoker.escapeString(modelInstanceID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes a model instance, given its ID
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param modelInstanceID GUID of the model instance to delete.
  */
  public void deleteModelInstance (String modelHistoryServerId, String modelInstanceID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling deleteModelInstance",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling deleteModelInstance"));
    }
    // verify the required parameter 'modelInstanceID' is set
    if (modelInstanceID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelInstanceID' when calling deleteModelInstance",
        new ApiException(400, "Missing the required parameter 'modelInstanceID' when calling deleteModelInstance"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelInstanceID" + "\\}", apiInvoker.escapeString(modelInstanceID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the best model among the given model instance IDs, based on the evaluation type and column metric
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param bestModel Object encapsulating the model ids, eval type and column metric name
   * @return ModelInstanceEntity
  */
  public ModelInstanceEntity getBestModelAmongModelIds (String modelHistoryServerId, BestModel bestModel) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = bestModel;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getBestModelAmongModelIds",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getBestModelAmongModelIds"));
    }
    // verify the required parameter 'bestModel' is set
    if (bestModel == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'bestModel' when calling getBestModelAmongModelIds",
        new ApiException(400, "Missing the required parameter 'bestModel' when calling getBestModelAmongModelIds"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/best".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelInstanceEntity) ApiInvoker.deserialize(localVarResponse, "", ModelInstanceEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the best model among the given model instance IDs, based on the evaluation type and column metric
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param bestModel Object encapsulating the model ids, eval type and column metric name
  */
  public void getBestModelAmongModelIds (String modelHistoryServerId, BestModel bestModel, final Response.Listener<ModelInstanceEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = bestModel;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getBestModelAmongModelIds",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getBestModelAmongModelIds"));
    }
    // verify the required parameter 'bestModel' is set
    if (bestModel == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'bestModel' when calling getBestModelAmongModelIds",
        new ApiException(400, "Missing the required parameter 'bestModel' when calling getBestModelAmongModelIds"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/best".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelInstanceEntity) ApiInvoker.deserialize(localVarResponse,  "", ModelInstanceEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the list of evaluation results entity, given a model instance ID
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param modelInstanceID GUID of the model instance to get evaluation results for.
   * @return List<EvaluationResultsEntity>
  */
  public List<EvaluationResultsEntity> getEvaluationForModelID (String modelHistoryServerId, String modelInstanceID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getEvaluationForModelID",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getEvaluationForModelID"));
    }
    // verify the required parameter 'modelInstanceID' is set
    if (modelInstanceID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelInstanceID' when calling getEvaluationForModelID",
        new ApiException(400, "Missing the required parameter 'modelInstanceID' when calling getEvaluationForModelID"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelInstanceID" + "\\}", apiInvoker.escapeString(modelInstanceID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<EvaluationResultsEntity>) ApiInvoker.deserialize(localVarResponse, "array", EvaluationResultsEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the list of evaluation results entity, given a model instance ID
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param modelInstanceID GUID of the model instance to get evaluation results for.
  */
  public void getEvaluationForModelID (String modelHistoryServerId, String modelInstanceID, final Response.Listener<List<EvaluationResultsEntity>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getEvaluationForModelID",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getEvaluationForModelID"));
    }
    // verify the required parameter 'modelInstanceID' is set
    if (modelInstanceID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelInstanceID' when calling getEvaluationForModelID",
        new ApiException(400, "Missing the required parameter 'modelInstanceID' when calling getEvaluationForModelID"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelInstanceID" + "\\}", apiInvoker.escapeString(modelInstanceID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<EvaluationResultsEntity>) ApiInvoker.deserialize(localVarResponse,  "array", EvaluationResultsEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets all the examples for a minibatch ID
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param minibatchId The GUID of the minibatch
   * @return List<ExampleEntity>
  */
  public List<ExampleEntity> getExamplesForMinibatch (String modelHistoryServerId, String minibatchId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getExamplesForMinibatch",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getExamplesForMinibatch"));
    }
    // verify the required parameter 'minibatchId' is set
    if (minibatchId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minibatchId' when calling getExamplesForMinibatch",
        new ApiException(400, "Missing the required parameter 'minibatchId' when calling getExamplesForMinibatch"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/example/{minibatchId}".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "minibatchId" + "\\}", apiInvoker.escapeString(minibatchId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<ExampleEntity>) ApiInvoker.deserialize(localVarResponse, "array", ExampleEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets all the examples for a minibatch ID
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param minibatchId The GUID of the minibatch
  */
  public void getExamplesForMinibatch (String modelHistoryServerId, String minibatchId, final Response.Listener<List<ExampleEntity>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getExamplesForMinibatch",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getExamplesForMinibatch"));
    }
    // verify the required parameter 'minibatchId' is set
    if (minibatchId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minibatchId' when calling getExamplesForMinibatch",
        new ApiException(400, "Missing the required parameter 'minibatchId' when calling getExamplesForMinibatch"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/example/{minibatchId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "minibatchId" + "\\}", apiInvoker.escapeString(minibatchId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<ExampleEntity>) ApiInvoker.deserialize(localVarResponse,  "array", ExampleEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Obtain an experiment&#39;s details, given its ID
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param experimentID the GUID of the experiment to obtain
   * @return ExperimentEntity
  */
  public ExperimentEntity getExperiment (String modelHistoryServerId, String experimentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getExperiment",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getExperiment"));
    }
    // verify the required parameter 'experimentID' is set
    if (experimentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'experimentID' when calling getExperiment",
        new ApiException(400, "Missing the required parameter 'experimentID' when calling getExperiment"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "experimentID" + "\\}", apiInvoker.escapeString(experimentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ExperimentEntity) ApiInvoker.deserialize(localVarResponse, "", ExperimentEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Obtain an experiment&#39;s details, given its ID
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param experimentID the GUID of the experiment to obtain
  */
  public void getExperiment (String modelHistoryServerId, String experimentID, final Response.Listener<ExperimentEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getExperiment",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getExperiment"));
    }
    // verify the required parameter 'experimentID' is set
    if (experimentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'experimentID' when calling getExperiment",
        new ApiException(400, "Missing the required parameter 'experimentID' when calling getExperiment"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "experimentID" + "\\}", apiInvoker.escapeString(experimentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ExperimentEntity) ApiInvoker.deserialize(localVarResponse,  "", ExperimentEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Obtain all experiments for a model history / workspace
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param modelHistoryID the GUID of the model history / workspace
   * @return ExperimentEntity
  */
  public ExperimentEntity getExperimentsForModelHistory (String modelHistoryServerId, String modelHistoryID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getExperimentsForModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getExperimentsForModelHistory"));
    }
    // verify the required parameter 'modelHistoryID' is set
    if (modelHistoryID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryID' when calling getExperimentsForModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryID' when calling getExperimentsForModelHistory"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelHistoryID" + "\\}", apiInvoker.escapeString(modelHistoryID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ExperimentEntity) ApiInvoker.deserialize(localVarResponse, "", ExperimentEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Obtain all experiments for a model history / workspace
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param modelHistoryID the GUID of the model history / workspace
  */
  public void getExperimentsForModelHistory (String modelHistoryServerId, String modelHistoryID, final Response.Listener<ExperimentEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getExperimentsForModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getExperimentsForModelHistory"));
    }
    // verify the required parameter 'modelHistoryID' is set
    if (modelHistoryID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryID' when calling getExperimentsForModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryID' when calling getExperimentsForModelHistory"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelHistoryID" + "\\}", apiInvoker.escapeString(modelHistoryID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ExperimentEntity) ApiInvoker.deserialize(localVarResponse,  "", ExperimentEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a minibatch for the model
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param minibatchId The GUID of the minibatch
   * @return MinibatchEntity
  */
  public MinibatchEntity getMinibatch (String modelHistoryServerId, String minibatchId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getMinibatch",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getMinibatch"));
    }
    // verify the required parameter 'minibatchId' is set
    if (minibatchId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minibatchId' when calling getMinibatch",
        new ApiException(400, "Missing the required parameter 'minibatchId' when calling getMinibatch"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "minibatchId" + "\\}", apiInvoker.escapeString(minibatchId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MinibatchEntity) ApiInvoker.deserialize(localVarResponse, "", MinibatchEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a minibatch for the model
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param minibatchId The GUID of the minibatch
  */
  public void getMinibatch (String modelHistoryServerId, String minibatchId, final Response.Listener<MinibatchEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getMinibatch",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getMinibatch"));
    }
    // verify the required parameter 'minibatchId' is set
    if (minibatchId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minibatchId' when calling getMinibatch",
        new ApiException(400, "Missing the required parameter 'minibatchId' when calling getMinibatch"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "minibatchId" + "\\}", apiInvoker.escapeString(minibatchId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MinibatchEntity) ApiInvoker.deserialize(localVarResponse,  "", MinibatchEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a model history, given its ID
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param modelHistoryID GUID of the model history to get information of.
   * @return ModelHistoryEntity
  */
  public ModelHistoryEntity getModelHistory (String modelHistoryServerId, String modelHistoryID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getModelHistory"));
    }
    // verify the required parameter 'modelHistoryID' is set
    if (modelHistoryID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryID' when calling getModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryID' when calling getModelHistory"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelHistoryID" + "\\}", apiInvoker.escapeString(modelHistoryID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelHistoryEntity) ApiInvoker.deserialize(localVarResponse, "", ModelHistoryEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a model history, given its ID
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param modelHistoryID GUID of the model history to get information of.
  */
  public void getModelHistory (String modelHistoryServerId, String modelHistoryID, final Response.Listener<ModelHistoryEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getModelHistory"));
    }
    // verify the required parameter 'modelHistoryID' is set
    if (modelHistoryID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryID' when calling getModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryID' when calling getModelHistory"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelHistoryID" + "\\}", apiInvoker.escapeString(modelHistoryID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelHistoryEntity) ApiInvoker.deserialize(localVarResponse,  "", ModelHistoryEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a model instance, given its ID
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param modelInstanceID GUID of the model instance to get information of.
   * @return ModelInstanceEntity
  */
  public ModelInstanceEntity getModelInstance (String modelHistoryServerId, String modelInstanceID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getModelInstance",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getModelInstance"));
    }
    // verify the required parameter 'modelInstanceID' is set
    if (modelInstanceID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelInstanceID' when calling getModelInstance",
        new ApiException(400, "Missing the required parameter 'modelInstanceID' when calling getModelInstance"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelInstanceID" + "\\}", apiInvoker.escapeString(modelInstanceID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelInstanceEntity) ApiInvoker.deserialize(localVarResponse, "", ModelInstanceEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a model instance, given its ID
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param modelInstanceID GUID of the model instance to get information of.
  */
  public void getModelInstance (String modelHistoryServerId, String modelInstanceID, final Response.Listener<ModelInstanceEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getModelInstance",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getModelInstance"));
    }
    // verify the required parameter 'modelInstanceID' is set
    if (modelInstanceID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelInstanceID' when calling getModelInstance",
        new ApiException(400, "Missing the required parameter 'modelInstanceID' when calling getModelInstance"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelInstanceID" + "\\}", apiInvoker.escapeString(modelInstanceID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelInstanceEntity) ApiInvoker.deserialize(localVarResponse,  "", ModelInstanceEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Obtain a list of all the models for an experiment
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param experimentID the GUID of the experiment
   * @return List<ModelInstanceEntity>
  */
  public List<ModelInstanceEntity> getModelsForExperiment (String modelHistoryServerId, String experimentID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getModelsForExperiment",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getModelsForExperiment"));
    }
    // verify the required parameter 'experimentID' is set
    if (experimentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'experimentID' when calling getModelsForExperiment",
        new ApiException(400, "Missing the required parameter 'experimentID' when calling getModelsForExperiment"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}/models".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "experimentID" + "\\}", apiInvoker.escapeString(experimentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<ModelInstanceEntity>) ApiInvoker.deserialize(localVarResponse, "array", ModelInstanceEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Obtain a list of all the models for an experiment
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param experimentID the GUID of the experiment
  */
  public void getModelsForExperiment (String modelHistoryServerId, String experimentID, final Response.Listener<List<ModelInstanceEntity>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling getModelsForExperiment",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling getModelsForExperiment"));
    }
    // verify the required parameter 'experimentID' is set
    if (experimentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'experimentID' when calling getModelsForExperiment",
        new ApiException(400, "Missing the required parameter 'experimentID' when calling getModelsForExperiment"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}/models".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "experimentID" + "\\}", apiInvoker.escapeString(experimentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<ModelInstanceEntity>) ApiInvoker.deserialize(localVarResponse,  "array", ModelInstanceEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List all of the experiments in every model history / workspace
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @return List<ExperimentEntity>
  */
  public List<ExperimentEntity> listAllExperiments (String modelHistoryServerId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling listAllExperiments",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling listAllExperiments"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiments".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<ExperimentEntity>) ApiInvoker.deserialize(localVarResponse, "array", ExperimentEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List all of the experiments in every model history / workspace
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  */
  public void listAllExperiments (String modelHistoryServerId, final Response.Listener<List<ExperimentEntity>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling listAllExperiments",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling listAllExperiments"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiments".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<ExperimentEntity>) ApiInvoker.deserialize(localVarResponse,  "array", ExperimentEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the best model for an experiment
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param updateBestModel Model encapsulating the experiment id to update and the best model id.
   * @return ExperimentEntity
  */
  public ExperimentEntity updateBestModelForExperiment (String modelHistoryServerId, UpdateBestModel updateBestModel) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updateBestModel;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling updateBestModelForExperiment",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling updateBestModelForExperiment"));
    }
    // verify the required parameter 'updateBestModel' is set
    if (updateBestModel == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateBestModel' when calling updateBestModelForExperiment",
        new ApiException(400, "Missing the required parameter 'updateBestModel' when calling updateBestModelForExperiment"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiment/best".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ExperimentEntity) ApiInvoker.deserialize(localVarResponse, "", ExperimentEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the best model for an experiment
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param updateBestModel Model encapsulating the experiment id to update and the best model id.
  */
  public void updateBestModelForExperiment (String modelHistoryServerId, UpdateBestModel updateBestModel, final Response.Listener<ExperimentEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updateBestModel;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling updateBestModelForExperiment",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling updateBestModelForExperiment"));
    }
    // verify the required parameter 'updateBestModel' is set
    if (updateBestModel == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateBestModel' when calling updateBestModelForExperiment",
        new ApiException(400, "Missing the required parameter 'updateBestModel' when calling updateBestModelForExperiment"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiment/best".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ExperimentEntity) ApiInvoker.deserialize(localVarResponse,  "", ExperimentEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates an experiment, given an experiment entity
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param experimentID the GUID of the experiment to update
   * @param experimentEntity The experiment entity to update with
   * @return ExperimentEntity
  */
  public ExperimentEntity updateExperiment (String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = experimentEntity;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling updateExperiment",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling updateExperiment"));
    }
    // verify the required parameter 'experimentID' is set
    if (experimentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'experimentID' when calling updateExperiment",
        new ApiException(400, "Missing the required parameter 'experimentID' when calling updateExperiment"));
    }
    // verify the required parameter 'experimentEntity' is set
    if (experimentEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'experimentEntity' when calling updateExperiment",
        new ApiException(400, "Missing the required parameter 'experimentEntity' when calling updateExperiment"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "experimentID" + "\\}", apiInvoker.escapeString(experimentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ExperimentEntity) ApiInvoker.deserialize(localVarResponse, "", ExperimentEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates an experiment, given an experiment entity
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param experimentID the GUID of the experiment to update   * @param experimentEntity The experiment entity to update with
  */
  public void updateExperiment (String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity, final Response.Listener<ExperimentEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = experimentEntity;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling updateExperiment",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling updateExperiment"));
    }
    // verify the required parameter 'experimentID' is set
    if (experimentID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'experimentID' when calling updateExperiment",
        new ApiException(400, "Missing the required parameter 'experimentID' when calling updateExperiment"));
    }
    // verify the required parameter 'experimentEntity' is set
    if (experimentEntity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'experimentEntity' when calling updateExperiment",
        new ApiException(400, "Missing the required parameter 'experimentEntity' when calling updateExperiment"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "experimentID" + "\\}", apiInvoker.escapeString(experimentID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ExperimentEntity) ApiInvoker.deserialize(localVarResponse,  "", ExperimentEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update a model history / workspace
  * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
   * @param modelHistoryID the GUID of the model history / workspace to update
   * @param updateModelHistoryRequest The model history request object
   * @return ModelHistoryEntity
  */
  public ModelHistoryEntity updateModelHistory (String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updateModelHistoryRequest;
    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling updateModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling updateModelHistory"));
    }
    // verify the required parameter 'modelHistoryID' is set
    if (modelHistoryID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryID' when calling updateModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryID' when calling updateModelHistory"));
    }
    // verify the required parameter 'updateModelHistoryRequest' is set
    if (updateModelHistoryRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateModelHistoryRequest' when calling updateModelHistory",
        new ApiException(400, "Missing the required parameter 'updateModelHistoryRequest' when calling updateModelHistory"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}".replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelHistoryID" + "\\}", apiInvoker.escapeString(modelHistoryID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelHistoryEntity) ApiInvoker.deserialize(localVarResponse, "", ModelHistoryEntity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update a model history / workspace
   * 
   * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.   * @param modelHistoryID the GUID of the model history / workspace to update   * @param updateModelHistoryRequest The model history request object
  */
  public void updateModelHistory (String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest, final Response.Listener<ModelHistoryEntity> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updateModelHistoryRequest;

    // verify the required parameter 'modelHistoryServerId' is set
    if (modelHistoryServerId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryServerId' when calling updateModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryServerId' when calling updateModelHistory"));
    }
    // verify the required parameter 'modelHistoryID' is set
    if (modelHistoryID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelHistoryID' when calling updateModelHistory",
        new ApiException(400, "Missing the required parameter 'modelHistoryID' when calling updateModelHistory"));
    }
    // verify the required parameter 'updateModelHistoryRequest' is set
    if (updateModelHistoryRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateModelHistoryRequest' when calling updateModelHistory",
        new ApiException(400, "Missing the required parameter 'updateModelHistoryRequest' when calling updateModelHistory"));
    }

    // create path and map variables
    String path = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiInvoker.escapeString(modelHistoryServerId.toString())).replaceAll("\\{" + "modelHistoryID" + "\\}", apiInvoker.escapeString(modelHistoryID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelHistoryEntity) ApiInvoker.deserialize(localVarResponse,  "", ModelHistoryEntity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
