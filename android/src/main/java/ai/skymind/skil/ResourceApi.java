/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ai.skymind.skil;

import ai.skymind.ApiInvoker;
import ai.skymind.ApiException;
import ai.skymind.Pair;

import ai.skymind.skil.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import ai.skymind.skil.model.AddCredentialsRequest;
import ai.skymind.skil.model.AddResourceRequest;
import ai.skymind.skil.model.Resource;
import ai.skymind.skil.model.ResourceCredentials;
import ai.skymind.skil.model.ResourceGroup;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ResourceApi {
  String basePath = "http://localhost:9008";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Adds credentials
  * 
   * @param addCredentialsRequest Add credentials request object
   * @return ResourceCredentials
  */
  public ResourceCredentials addCredentials (AddCredentialsRequest addCredentialsRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = addCredentialsRequest;
    // verify the required parameter 'addCredentialsRequest' is set
    if (addCredentialsRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addCredentialsRequest' when calling addCredentials",
        new ApiException(400, "Missing the required parameter 'addCredentialsRequest' when calling addCredentials"));
    }

    // create path and map variables
    String path = "/resources/credentials";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResourceCredentials) ApiInvoker.deserialize(localVarResponse, "", ResourceCredentials.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds credentials
   * 
   * @param addCredentialsRequest Add credentials request object
  */
  public void addCredentials (AddCredentialsRequest addCredentialsRequest, final Response.Listener<ResourceCredentials> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = addCredentialsRequest;

    // verify the required parameter 'addCredentialsRequest' is set
    if (addCredentialsRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addCredentialsRequest' when calling addCredentials",
        new ApiException(400, "Missing the required parameter 'addCredentialsRequest' when calling addCredentials"));
    }

    // create path and map variables
    String path = "/resources/credentials".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResourceCredentials) ApiInvoker.deserialize(localVarResponse,  "", ResourceCredentials.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds a resource
  * 
   * @param addResourceRequest The Add resource request object
   * @return Object
  */
  public Object addResource (AddResourceRequest addResourceRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = addResourceRequest;
    // verify the required parameter 'addResourceRequest' is set
    if (addResourceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addResourceRequest' when calling addResource",
        new ApiException(400, "Missing the required parameter 'addResourceRequest' when calling addResource"));
    }

    // create path and map variables
    String path = "/resources/add/resource";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds a resource
   * 
   * @param addResourceRequest The Add resource request object
  */
  public void addResource (AddResourceRequest addResourceRequest, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = addResourceRequest;

    // verify the required parameter 'addResourceRequest' is set
    if (addResourceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addResourceRequest' when calling addResource",
        new ApiException(400, "Missing the required parameter 'addResourceRequest' when calling addResource"));
    }

    // create path and map variables
    String path = "/resources/add/resource".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds a resource group
  * 
   * @param groupName Name of the resource group
   * @return ResourceGroup
  */
  public ResourceGroup addResourceGroup (String groupName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = groupName;
    // verify the required parameter 'groupName' is set
    if (groupName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupName' when calling addResourceGroup",
        new ApiException(400, "Missing the required parameter 'groupName' when calling addResourceGroup"));
    }

    // create path and map variables
    String path = "/resources/add/group";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "text/plain; charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResourceGroup) ApiInvoker.deserialize(localVarResponse, "", ResourceGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds a resource group
   * 
   * @param groupName Name of the resource group
  */
  public void addResourceGroup (String groupName, final Response.Listener<ResourceGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = groupName;

    // verify the required parameter 'groupName' is set
    if (groupName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupName' when calling addResourceGroup",
        new ApiException(400, "Missing the required parameter 'groupName' when calling addResourceGroup"));
    }

    // create path and map variables
    String path = "/resources/add/group".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "text/plain; charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResourceGroup) ApiInvoker.deserialize(localVarResponse,  "", ResourceGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Adds a resource to a resource group
  * 
   * @param resourceGroupId ID of the resource group
   * @param resourceId ID of the resource
   * @return void
  */
  public void addResourceToGroup (Long resourceGroupId, Long resourceId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'resourceGroupId' is set
    if (resourceGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceGroupId' when calling addResourceToGroup",
        new ApiException(400, "Missing the required parameter 'resourceGroupId' when calling addResourceToGroup"));
    }
    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceId' when calling addResourceToGroup",
        new ApiException(400, "Missing the required parameter 'resourceId' when calling addResourceToGroup"));
    }

    // create path and map variables
    String path = "/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}".replaceAll("\\{" + "resourceGroupId" + "\\}", apiInvoker.escapeString(resourceGroupId.toString())).replaceAll("\\{" + "resourceId" + "\\}", apiInvoker.escapeString(resourceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Adds a resource to a resource group
   * 
   * @param resourceGroupId ID of the resource group   * @param resourceId ID of the resource
  */
  public void addResourceToGroup (Long resourceGroupId, Long resourceId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'resourceGroupId' is set
    if (resourceGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceGroupId' when calling addResourceToGroup",
        new ApiException(400, "Missing the required parameter 'resourceGroupId' when calling addResourceToGroup"));
    }
    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceId' when calling addResourceToGroup",
        new ApiException(400, "Missing the required parameter 'resourceId' when calling addResourceToGroup"));
    }

    // create path and map variables
    String path = "/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "resourceGroupId" + "\\}", apiInvoker.escapeString(resourceGroupId.toString())).replaceAll("\\{" + "resourceId" + "\\}", apiInvoker.escapeString(resourceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete credentials given an ID
  * 
   * @param credentialId Credentials ID
   * @return void
  */
  public void deleteCredentialsById (Long credentialId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'credentialId' is set
    if (credentialId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'credentialId' when calling deleteCredentialsById",
        new ApiException(400, "Missing the required parameter 'credentialId' when calling deleteCredentialsById"));
    }

    // create path and map variables
    String path = "/resources/credentials/{credentialId}".replaceAll("\\{" + "credentialId" + "\\}", apiInvoker.escapeString(credentialId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete credentials given an ID
   * 
   * @param credentialId Credentials ID
  */
  public void deleteCredentialsById (Long credentialId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'credentialId' is set
    if (credentialId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'credentialId' when calling deleteCredentialsById",
        new ApiException(400, "Missing the required parameter 'credentialId' when calling deleteCredentialsById"));
    }

    // create path and map variables
    String path = "/resources/credentials/{credentialId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "credentialId" + "\\}", apiInvoker.escapeString(credentialId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete the resource with the specified resource ID
  * 
   * @param resourceId ID of the resource
   * @return Resource
  */
  public Resource deleteResourceById (Long resourceId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceId' when calling deleteResourceById",
        new ApiException(400, "Missing the required parameter 'resourceId' when calling deleteResourceById"));
    }

    // create path and map variables
    String path = "/resources/remove/resource/{resourceId}".replaceAll("\\{" + "resourceId" + "\\}", apiInvoker.escapeString(resourceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Resource) ApiInvoker.deserialize(localVarResponse, "", Resource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete the resource with the specified resource ID
   * 
   * @param resourceId ID of the resource
  */
  public void deleteResourceById (Long resourceId, final Response.Listener<Resource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceId' when calling deleteResourceById",
        new ApiException(400, "Missing the required parameter 'resourceId' when calling deleteResourceById"));
    }

    // create path and map variables
    String path = "/resources/remove/resource/{resourceId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "resourceId" + "\\}", apiInvoker.escapeString(resourceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Resource) ApiInvoker.deserialize(localVarResponse,  "", Resource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Removes a resource from a resource group
  * 
   * @param resourceGroupId ID of the resource group
   * @param resourceId ID of the resource
   * @return void
  */
  public void deleteResourceFromGroup (Long resourceGroupId, Long resourceId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'resourceGroupId' is set
    if (resourceGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceGroupId' when calling deleteResourceFromGroup",
        new ApiException(400, "Missing the required parameter 'resourceGroupId' when calling deleteResourceFromGroup"));
    }
    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceId' when calling deleteResourceFromGroup",
        new ApiException(400, "Missing the required parameter 'resourceId' when calling deleteResourceFromGroup"));
    }

    // create path and map variables
    String path = "/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}".replaceAll("\\{" + "resourceGroupId" + "\\}", apiInvoker.escapeString(resourceGroupId.toString())).replaceAll("\\{" + "resourceId" + "\\}", apiInvoker.escapeString(resourceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Removes a resource from a resource group
   * 
   * @param resourceGroupId ID of the resource group   * @param resourceId ID of the resource
  */
  public void deleteResourceFromGroup (Long resourceGroupId, Long resourceId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'resourceGroupId' is set
    if (resourceGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceGroupId' when calling deleteResourceFromGroup",
        new ApiException(400, "Missing the required parameter 'resourceGroupId' when calling deleteResourceFromGroup"));
    }
    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceId' when calling deleteResourceFromGroup",
        new ApiException(400, "Missing the required parameter 'resourceId' when calling deleteResourceFromGroup"));
    }

    // create path and map variables
    String path = "/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "resourceGroupId" + "\\}", apiInvoker.escapeString(resourceGroupId.toString())).replaceAll("\\{" + "resourceId" + "\\}", apiInvoker.escapeString(resourceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete the resource group with the specified resource group ID
  * 
   * @param resourceGroupId ID of the resource group
   * @return ResourceGroup
  */
  public ResourceGroup deleteResourceGroupById (Long resourceGroupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'resourceGroupId' is set
    if (resourceGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceGroupId' when calling deleteResourceGroupById",
        new ApiException(400, "Missing the required parameter 'resourceGroupId' when calling deleteResourceGroupById"));
    }

    // create path and map variables
    String path = "/resources/remove/group/{resourceGroupId}".replaceAll("\\{" + "resourceGroupId" + "\\}", apiInvoker.escapeString(resourceGroupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResourceGroup) ApiInvoker.deserialize(localVarResponse, "", ResourceGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete the resource group with the specified resource group ID
   * 
   * @param resourceGroupId ID of the resource group
  */
  public void deleteResourceGroupById (Long resourceGroupId, final Response.Listener<ResourceGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'resourceGroupId' is set
    if (resourceGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceGroupId' when calling deleteResourceGroupById",
        new ApiException(400, "Missing the required parameter 'resourceGroupId' when calling deleteResourceGroupById"));
    }

    // create path and map variables
    String path = "/resources/remove/group/{resourceGroupId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "resourceGroupId" + "\\}", apiInvoker.escapeString(resourceGroupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResourceGroup) ApiInvoker.deserialize(localVarResponse,  "", ResourceGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get credentials given an ID
  * 
   * @param credentialId Credentials ID
   * @return ResourceCredentials
  */
  public ResourceCredentials getCredentialsById (Long credentialId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'credentialId' is set
    if (credentialId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'credentialId' when calling getCredentialsById",
        new ApiException(400, "Missing the required parameter 'credentialId' when calling getCredentialsById"));
    }

    // create path and map variables
    String path = "/resources/credentials/{credentialId}".replaceAll("\\{" + "credentialId" + "\\}", apiInvoker.escapeString(credentialId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResourceCredentials) ApiInvoker.deserialize(localVarResponse, "", ResourceCredentials.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get credentials given an ID
   * 
   * @param credentialId Credentials ID
  */
  public void getCredentialsById (Long credentialId, final Response.Listener<ResourceCredentials> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'credentialId' is set
    if (credentialId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'credentialId' when calling getCredentialsById",
        new ApiException(400, "Missing the required parameter 'credentialId' when calling getCredentialsById"));
    }

    // create path and map variables
    String path = "/resources/credentials/{credentialId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "credentialId" + "\\}", apiInvoker.escapeString(credentialId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResourceCredentials) ApiInvoker.deserialize(localVarResponse,  "", ResourceCredentials.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the resource with the specified resource ID
  * 
   * @param resourceId ID of the resource
   * @return Resource
  */
  public Resource getResourceById (Long resourceId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceId' when calling getResourceById",
        new ApiException(400, "Missing the required parameter 'resourceId' when calling getResourceById"));
    }

    // create path and map variables
    String path = "/resources/resource/{resourceId}".replaceAll("\\{" + "resourceId" + "\\}", apiInvoker.escapeString(resourceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Resource) ApiInvoker.deserialize(localVarResponse, "", Resource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the resource with the specified resource ID
   * 
   * @param resourceId ID of the resource
  */
  public void getResourceById (Long resourceId, final Response.Listener<Resource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceId' when calling getResourceById",
        new ApiException(400, "Missing the required parameter 'resourceId' when calling getResourceById"));
    }

    // create path and map variables
    String path = "/resources/resource/{resourceId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "resourceId" + "\\}", apiInvoker.escapeString(resourceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Resource) ApiInvoker.deserialize(localVarResponse,  "", Resource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all the resources with the specified resource subtype
  * 
   * @param resourceSubType Subtype of the resource
   * @return List<Resource>
  */
  public List<Resource> getResourceBySubType (String resourceSubType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'resourceSubType' is set
    if (resourceSubType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceSubType' when calling getResourceBySubType",
        new ApiException(400, "Missing the required parameter 'resourceSubType' when calling getResourceBySubType"));
    }

    // create path and map variables
    String path = "/resources/resources/subtype/{resourceSubType}".replaceAll("\\{" + "resourceSubType" + "\\}", apiInvoker.escapeString(resourceSubType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Resource>) ApiInvoker.deserialize(localVarResponse, "array", Resource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all the resources with the specified resource subtype
   * 
   * @param resourceSubType Subtype of the resource
  */
  public void getResourceBySubType (String resourceSubType, final Response.Listener<List<Resource>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'resourceSubType' is set
    if (resourceSubType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceSubType' when calling getResourceBySubType",
        new ApiException(400, "Missing the required parameter 'resourceSubType' when calling getResourceBySubType"));
    }

    // create path and map variables
    String path = "/resources/resources/subtype/{resourceSubType}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "resourceSubType" + "\\}", apiInvoker.escapeString(resourceSubType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Resource>) ApiInvoker.deserialize(localVarResponse,  "array", Resource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all the resources with the specified resource type
  * 
   * @param resourceType Type of the resource
   * @return List<Resource>
  */
  public List<Resource> getResourceByType (String resourceType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'resourceType' is set
    if (resourceType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceType' when calling getResourceByType",
        new ApiException(400, "Missing the required parameter 'resourceType' when calling getResourceByType"));
    }

    // create path and map variables
    String path = "/resources/resources/type/{resourceType}".replaceAll("\\{" + "resourceType" + "\\}", apiInvoker.escapeString(resourceType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Resource>) ApiInvoker.deserialize(localVarResponse, "array", Resource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all the resources with the specified resource type
   * 
   * @param resourceType Type of the resource
  */
  public void getResourceByType (String resourceType, final Response.Listener<List<Resource>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'resourceType' is set
    if (resourceType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceType' when calling getResourceByType",
        new ApiException(400, "Missing the required parameter 'resourceType' when calling getResourceByType"));
    }

    // create path and map variables
    String path = "/resources/resources/type/{resourceType}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "resourceType" + "\\}", apiInvoker.escapeString(resourceType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Resource>) ApiInvoker.deserialize(localVarResponse,  "array", Resource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the resource details with the specified resource ID
  * Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
   * @param resourceId ID of the resource
   * @return Object
  */
  public Object getResourceDetailsById (Long resourceId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceId' when calling getResourceDetailsById",
        new ApiException(400, "Missing the required parameter 'resourceId' when calling getResourceDetailsById"));
    }

    // create path and map variables
    String path = "/resources/details/{resourceId}".replaceAll("\\{" + "resourceId" + "\\}", apiInvoker.escapeString(resourceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the resource details with the specified resource ID
   * Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
   * @param resourceId ID of the resource
  */
  public void getResourceDetailsById (Long resourceId, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceId' when calling getResourceDetailsById",
        new ApiException(400, "Missing the required parameter 'resourceId' when calling getResourceDetailsById"));
    }

    // create path and map variables
    String path = "/resources/details/{resourceId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "resourceId" + "\\}", apiInvoker.escapeString(resourceId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the resource group with the specified resource group ID
  * 
   * @param resourceGroupId ID of the resource group
   * @return ResourceGroup
  */
  public ResourceGroup getResourceGroupById (Long resourceGroupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'resourceGroupId' is set
    if (resourceGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceGroupId' when calling getResourceGroupById",
        new ApiException(400, "Missing the required parameter 'resourceGroupId' when calling getResourceGroupById"));
    }

    // create path and map variables
    String path = "/resources/group/{resourceGroupId}".replaceAll("\\{" + "resourceGroupId" + "\\}", apiInvoker.escapeString(resourceGroupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ResourceGroup) ApiInvoker.deserialize(localVarResponse, "", ResourceGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the resource group with the specified resource group ID
   * 
   * @param resourceGroupId ID of the resource group
  */
  public void getResourceGroupById (Long resourceGroupId, final Response.Listener<ResourceGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'resourceGroupId' is set
    if (resourceGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceGroupId' when calling getResourceGroupById",
        new ApiException(400, "Missing the required parameter 'resourceGroupId' when calling getResourceGroupById"));
    }

    // create path and map variables
    String path = "/resources/group/{resourceGroupId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "resourceGroupId" + "\\}", apiInvoker.escapeString(resourceGroupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ResourceGroup) ApiInvoker.deserialize(localVarResponse,  "", ResourceGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a list of all the resource groups
  * 
   * @return List<ResourceGroup>
  */
  public List<ResourceGroup> getResourceGroups () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/resources/groups";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<ResourceGroup>) ApiInvoker.deserialize(localVarResponse, "array", ResourceGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a list of all the resource groups
   * 

  */
  public void getResourceGroups (final Response.Listener<List<ResourceGroup>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/resources/groups".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<ResourceGroup>) ApiInvoker.deserialize(localVarResponse,  "array", ResourceGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * A list of all known/registered resources, of all types
  * 
   * @return List<Resource>
  */
  public List<Resource> getResources () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/resources/resources";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Resource>) ApiInvoker.deserialize(localVarResponse, "array", Resource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * A list of all known/registered resources, of all types
   * 

  */
  public void getResources (final Response.Listener<List<Resource>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/resources/resources".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Resource>) ApiInvoker.deserialize(localVarResponse,  "array", Resource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all resources from a resource group
  * 
   * @param resourceGroupId ID of the resource group
   * @return List<Resource>
  */
  public List<Resource> getResourcesFromGroup (Long resourceGroupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'resourceGroupId' is set
    if (resourceGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceGroupId' when calling getResourcesFromGroup",
        new ApiException(400, "Missing the required parameter 'resourceGroupId' when calling getResourcesFromGroup"));
    }

    // create path and map variables
    String path = "/resources/group/{resourceGroupId}/resources".replaceAll("\\{" + "resourceGroupId" + "\\}", apiInvoker.escapeString(resourceGroupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Resource>) ApiInvoker.deserialize(localVarResponse, "array", Resource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all resources from a resource group
   * 
   * @param resourceGroupId ID of the resource group
  */
  public void getResourcesFromGroup (Long resourceGroupId, final Response.Listener<List<Resource>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'resourceGroupId' is set
    if (resourceGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resourceGroupId' when calling getResourcesFromGroup",
        new ApiException(400, "Missing the required parameter 'resourceGroupId' when calling getResourcesFromGroup"));
    }

    // create path and map variables
    String path = "/resources/group/{resourceGroupId}/resources".replaceAll("\\{format\\}","json").replaceAll("\\{" + "resourceGroupId" + "\\}", apiInvoker.escapeString(resourceGroupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Resource>) ApiInvoker.deserialize(localVarResponse,  "array", Resource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
