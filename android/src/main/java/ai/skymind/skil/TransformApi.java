/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ai.skymind.skil;

import ai.skymind.ApiInvoker;
import ai.skymind.ApiException;
import ai.skymind.Pair;

import ai.skymind.skil.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import ai.skymind.skil.model.Base64NDArrayBody;
import ai.skymind.skil.model.BatchCSVRecord;
import java.io.File;
import ai.skymind.skil.model.SingleCSVRecord;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TransformApi {
  String basePath = "http://localhost:9008";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
  * Takes a batch of SingleCSVRecord object and transforms it into the desired format
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param transformName ID or name of the deployed transform
   * @param batchCSVRecord The input batch of record arrays
   * @return BatchCSVRecord
  */
  public BatchCSVRecord transformCsv (String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = batchCSVRecord;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformCsv",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformCsv"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformCsv",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformCsv"));
    }
    // verify the required parameter 'transformName' is set
    if (transformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transformName' when calling transformCsv",
        new ApiException(400, "Missing the required parameter 'transformName' when calling transformCsv"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "transformName" + "\\}", apiInvoker.escapeString(transformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BatchCSVRecord) ApiInvoker.deserialize(localVarResponse, "", BatchCSVRecord.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
   * Takes a batch of SingleCSVRecord object and transforms it into the desired format
   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param transformName ID or name of the deployed transform   * @param batchCSVRecord The input batch of record arrays
  */
  public void transformCsv (String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord, final Response.Listener<BatchCSVRecord> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = batchCSVRecord;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformCsv",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformCsv"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformCsv",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformCsv"));
    }
    // verify the required parameter 'transformName' is set
    if (transformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transformName' when calling transformCsv",
        new ApiException(400, "Missing the required parameter 'transformName' when calling transformCsv"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "transformName" + "\\}", apiInvoker.escapeString(transformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BatchCSVRecord) ApiInvoker.deserialize(localVarResponse,  "", BatchCSVRecord.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Takes a batch input arrays and transforms it
  * 
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param transformName ID or name of the deployed transform
   * @param batchRecord The input batch of record arrays
   * @return Base64NDArrayBody
  */
  public Base64NDArrayBody transformarray (String deploymentName, String versionName, String transformName, Object batchRecord) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = batchRecord;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformarray",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformarray"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformarray",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformarray"));
    }
    // verify the required parameter 'transformName' is set
    if (transformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transformName' when calling transformarray",
        new ApiException(400, "Missing the required parameter 'transformName' when calling transformarray"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "transformName" + "\\}", apiInvoker.escapeString(transformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Base64NDArrayBody) ApiInvoker.deserialize(localVarResponse, "", Base64NDArrayBody.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Takes a batch input arrays and transforms it
   * 
   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param transformName ID or name of the deployed transform   * @param batchRecord The input batch of record arrays
  */
  public void transformarray (String deploymentName, String versionName, String transformName, Object batchRecord, final Response.Listener<Base64NDArrayBody> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = batchRecord;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformarray",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformarray"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformarray",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformarray"));
    }
    // verify the required parameter 'transformName' is set
    if (transformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transformName' when calling transformarray",
        new ApiException(400, "Missing the required parameter 'transformName' when calling transformarray"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "transformName" + "\\}", apiInvoker.escapeString(transformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Base64NDArrayBody) ApiInvoker.deserialize(localVarResponse,  "", Base64NDArrayBody.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Takes multiple multipart image file to transform and returns Base64NDArrayBody
  * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param imageTransformName ID or name of the deployed image transform
   * @param files The image files to upload
   * @return Base64NDArrayBody
  */
  public Base64NDArrayBody transformimage (String deploymentName, String versionName, String imageTransformName, List<byte[]> files) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformimage",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformimage"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformimage",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformimage"));
    }
    // verify the required parameter 'imageTransformName' is set
    if (imageTransformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageTransformName' when calling transformimage",
        new ApiException(400, "Missing the required parameter 'imageTransformName' when calling transformimage"));
    }
    // verify the required parameter 'files' is set
    if (files == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'files' when calling transformimage",
        new ApiException(400, "Missing the required parameter 'files' when calling transformimage"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "imageTransformName" + "\\}", apiInvoker.escapeString(imageTransformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (files != null) {
        localVarBuilder.addTextBody("files", ApiInvoker.parameterToString(files), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("files", ApiInvoker.parameterToString(files));
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Base64NDArrayBody) ApiInvoker.deserialize(localVarResponse, "", Base64NDArrayBody.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Takes multiple multipart image file to transform and returns Base64NDArrayBody
   * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param imageTransformName ID or name of the deployed image transform   * @param files The image files to upload
  */
  public void transformimage (String deploymentName, String versionName, String imageTransformName, List<byte[]> files, final Response.Listener<Base64NDArrayBody> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformimage",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformimage"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformimage",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformimage"));
    }
    // verify the required parameter 'imageTransformName' is set
    if (imageTransformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageTransformName' when calling transformimage",
        new ApiException(400, "Missing the required parameter 'imageTransformName' when calling transformimage"));
    }
    // verify the required parameter 'files' is set
    if (files == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'files' when calling transformimage",
        new ApiException(400, "Missing the required parameter 'files' when calling transformimage"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "imageTransformName" + "\\}", apiInvoker.escapeString(imageTransformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (files != null) {
        localVarBuilder.addTextBody("files", ApiInvoker.parameterToString(files), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("files", ApiInvoker.parameterToString(files));
    }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Base64NDArrayBody) ApiInvoker.deserialize(localVarResponse,  "", Base64NDArrayBody.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
  * Takes a SingleCSVRecord object and transforms it into the desired format
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param transformName ID or name of the deployed transform
   * @param singleCSVRecord The input record array
   * @return SingleCSVRecord
  */
  public SingleCSVRecord transformincrementalCsv (String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = singleCSVRecord;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformincrementalCsv",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformincrementalCsv"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformincrementalCsv",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformincrementalCsv"));
    }
    // verify the required parameter 'transformName' is set
    if (transformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transformName' when calling transformincrementalCsv",
        new ApiException(400, "Missing the required parameter 'transformName' when calling transformincrementalCsv"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "transformName" + "\\}", apiInvoker.escapeString(transformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SingleCSVRecord) ApiInvoker.deserialize(localVarResponse, "", SingleCSVRecord.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
   * Takes a SingleCSVRecord object and transforms it into the desired format
   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param transformName ID or name of the deployed transform   * @param singleCSVRecord The input record array
  */
  public void transformincrementalCsv (String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord, final Response.Listener<SingleCSVRecord> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = singleCSVRecord;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformincrementalCsv",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformincrementalCsv"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformincrementalCsv",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformincrementalCsv"));
    }
    // verify the required parameter 'transformName' is set
    if (transformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transformName' when calling transformincrementalCsv",
        new ApiException(400, "Missing the required parameter 'transformName' when calling transformincrementalCsv"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "transformName" + "\\}", apiInvoker.escapeString(transformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SingleCSVRecord) ApiInvoker.deserialize(localVarResponse,  "", SingleCSVRecord.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Same as /transformincremental but returns Base64NDArrayBody.
  * 
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param transformName ID or name of the deployed transform
   * @param singleRecord The input record array
   * @return Base64NDArrayBody
  */
  public Base64NDArrayBody transformincrementalarray (String deploymentName, String versionName, String transformName, Object singleRecord) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = singleRecord;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformincrementalarray",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformincrementalarray"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformincrementalarray",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformincrementalarray"));
    }
    // verify the required parameter 'transformName' is set
    if (transformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transformName' when calling transformincrementalarray",
        new ApiException(400, "Missing the required parameter 'transformName' when calling transformincrementalarray"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "transformName" + "\\}", apiInvoker.escapeString(transformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Base64NDArrayBody) ApiInvoker.deserialize(localVarResponse, "", Base64NDArrayBody.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Same as /transformincremental but returns Base64NDArrayBody.
   * 
   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param transformName ID or name of the deployed transform   * @param singleRecord The input record array
  */
  public void transformincrementalarray (String deploymentName, String versionName, String transformName, Object singleRecord, final Response.Listener<Base64NDArrayBody> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = singleRecord;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformincrementalarray",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformincrementalarray"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformincrementalarray",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformincrementalarray"));
    }
    // verify the required parameter 'transformName' is set
    if (transformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transformName' when calling transformincrementalarray",
        new ApiException(400, "Missing the required parameter 'transformName' when calling transformincrementalarray"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "transformName" + "\\}", apiInvoker.escapeString(transformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Base64NDArrayBody) ApiInvoker.deserialize(localVarResponse,  "", Base64NDArrayBody.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Takes a single multipart image file to transform and returns Base64NDArrayBody
  * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param imageTransformName ID or name of the deployed image transform
   * @param file The image file to upload
   * @return Base64NDArrayBody
  */
  public Base64NDArrayBody transformincrementalimage (String deploymentName, String versionName, String imageTransformName, File file) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformincrementalimage",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformincrementalimage"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformincrementalimage",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformincrementalimage"));
    }
    // verify the required parameter 'imageTransformName' is set
    if (imageTransformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageTransformName' when calling transformincrementalimage",
        new ApiException(400, "Missing the required parameter 'imageTransformName' when calling transformincrementalimage"));
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling transformincrementalimage",
        new ApiException(400, "Missing the required parameter 'file' when calling transformincrementalimage"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "imageTransformName" + "\\}", apiInvoker.escapeString(imageTransformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Base64NDArrayBody) ApiInvoker.deserialize(localVarResponse, "", Base64NDArrayBody.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Takes a single multipart image file to transform and returns Base64NDArrayBody
   * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param imageTransformName ID or name of the deployed image transform   * @param file The image file to upload
  */
  public void transformincrementalimage (String deploymentName, String versionName, String imageTransformName, File file, final Response.Listener<Base64NDArrayBody> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformincrementalimage",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformincrementalimage"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformincrementalimage",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformincrementalimage"));
    }
    // verify the required parameter 'imageTransformName' is set
    if (imageTransformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageTransformName' when calling transformincrementalimage",
        new ApiException(400, "Missing the required parameter 'imageTransformName' when calling transformincrementalimage"));
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling transformincrementalimage",
        new ApiException(400, "Missing the required parameter 'file' when calling transformincrementalimage"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "imageTransformName" + "\\}", apiInvoker.escapeString(imageTransformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Base64NDArrayBody) ApiInvoker.deserialize(localVarResponse,  "", Base64NDArrayBody.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the JSON string of the deployed transform process (CSV or Image)
  * 
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param transformName ID or name of the deployed transform
   * @return Object
  */
  public Object transformprocessGet (String deploymentName, String versionName, String transformName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformprocessGet",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformprocessGet"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformprocessGet",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformprocessGet"));
    }
    // verify the required parameter 'transformName' is set
    if (transformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transformName' when calling transformprocessGet",
        new ApiException(400, "Missing the required parameter 'transformName' when calling transformprocessGet"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "transformName" + "\\}", apiInvoker.escapeString(transformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the JSON string of the deployed transform process (CSV or Image)
   * 
   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param transformName ID or name of the deployed transform
  */
  public void transformprocessGet (String deploymentName, String versionName, String transformName, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformprocessGet",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformprocessGet"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformprocessGet",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformprocessGet"));
    }
    // verify the required parameter 'transformName' is set
    if (transformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transformName' when calling transformprocessGet",
        new ApiException(400, "Missing the required parameter 'transformName' when calling transformprocessGet"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "transformName" + "\\}", apiInvoker.escapeString(transformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Sets the deployed (CSV or Image) transform process through the provided JSON string
  * 
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param transformName ID or name of the deployed transform
   * @param transformProcess The transform process to set
   * @return Object
  */
  public Object transformprocessPost (String deploymentName, String versionName, String transformName, Object transformProcess) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = transformProcess;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformprocessPost",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformprocessPost"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformprocessPost",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformprocessPost"));
    }
    // verify the required parameter 'transformName' is set
    if (transformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transformName' when calling transformprocessPost",
        new ApiException(400, "Missing the required parameter 'transformName' when calling transformprocessPost"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "transformName" + "\\}", apiInvoker.escapeString(transformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Sets the deployed (CSV or Image) transform process through the provided JSON string
   * 
   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param transformName ID or name of the deployed transform   * @param transformProcess The transform process to set
  */
  public void transformprocessPost (String deploymentName, String versionName, String transformName, Object transformProcess, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = transformProcess;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling transformprocessPost",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling transformprocessPost"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling transformprocessPost",
        new ApiException(400, "Missing the required parameter 'versionName' when calling transformprocessPost"));
    }
    // verify the required parameter 'transformName' is set
    if (transformName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transformName' when calling transformprocessPost",
        new ApiException(400, "Missing the required parameter 'transformName' when calling transformprocessPost"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "transformName" + "\\}", apiInvoker.escapeString(transformName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
