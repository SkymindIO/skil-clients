/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ai.skymind.skil;

import ai.skymind.ApiInvoker;
import ai.skymind.ApiException;
import ai.skymind.Pair;

import ai.skymind.skil.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import ai.skymind.skil.model.Base64NDArrayBody;
import ai.skymind.skil.model.ClassificationResult;
import ai.skymind.skil.model.DetectionResult;
import java.io.File;
import ai.skymind.skil.model.JsonArrayResponse;
import java.util.*;
import ai.skymind.skil.model.LogBatch;
import ai.skymind.skil.model.LogRequest;
import ai.skymind.skil.model.MetaData;
import ai.skymind.skil.model.ModelStatus;
import ai.skymind.skil.model.MultiClassClassificationResult;
import ai.skymind.skil.model.MultiPredictRequest;
import ai.skymind.skil.model.MultiPredictResponse;
import ai.skymind.skil.model.Prediction;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class InferenceApi {
  String basePath = "http://localhost:9008";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Use the deployed model to classify the input
  * 
   * @param body The input NDArray
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return ClassificationResult
  */
  public ClassificationResult classify (Prediction body, String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling classify",
        new ApiException(400, "Missing the required parameter 'body' when calling classify"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling classify",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling classify"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling classify",
        new ApiException(400, "Missing the required parameter 'versionName' when calling classify"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling classify",
        new ApiException(400, "Missing the required parameter 'modelName' when calling classify"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classify".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ClassificationResult) ApiInvoker.deserialize(localVarResponse, "", ClassificationResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Use the deployed model to classify the input
   * 
   * @param body The input NDArray   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void classify (Prediction body, String deploymentName, String versionName, String modelName, final Response.Listener<ClassificationResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling classify",
        new ApiException(400, "Missing the required parameter 'body' when calling classify"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling classify",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling classify"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling classify",
        new ApiException(400, "Missing the required parameter 'versionName' when calling classify"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling classify",
        new ApiException(400, "Missing the required parameter 'modelName' when calling classify"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classify".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ClassificationResult) ApiInvoker.deserialize(localVarResponse,  "", ClassificationResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Same as /classify but returns the output as Base64NDArrayBody
  * 
   * @param body The input NDArray
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return Base64NDArrayBody
  */
  public Base64NDArrayBody classifyarray (Prediction body, String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'body' when calling classifyarray"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling classifyarray"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'versionName' when calling classifyarray"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'modelName' when calling classifyarray"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Base64NDArrayBody) ApiInvoker.deserialize(localVarResponse, "", Base64NDArrayBody.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Same as /classify but returns the output as Base64NDArrayBody
   * 
   * @param body The input NDArray   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void classifyarray (Prediction body, String deploymentName, String versionName, String modelName, final Response.Listener<Base64NDArrayBody> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'body' when calling classifyarray"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling classifyarray"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'versionName' when calling classifyarray"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'modelName' when calling classifyarray"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Base64NDArrayBody) ApiInvoker.deserialize(localVarResponse,  "", Base64NDArrayBody.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Use the deployed model to classify the input, using input image file from multipart form data.
  * 
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @param image The file to upload.
   * @return ClassificationResult
  */
  public ClassificationResult classifyimage (String deploymentName, String versionName, String modelName, File image) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling classifyimage",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling classifyimage"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling classifyimage",
        new ApiException(400, "Missing the required parameter 'versionName' when calling classifyimage"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling classifyimage",
        new ApiException(400, "Missing the required parameter 'modelName' when calling classifyimage"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ClassificationResult) ApiInvoker.deserialize(localVarResponse, "", ClassificationResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Use the deployed model to classify the input, using input image file from multipart form data.
   * 
   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model   * @param image The file to upload.
  */
  public void classifyimage (String deploymentName, String versionName, String modelName, File image, final Response.Listener<ClassificationResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling classifyimage",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling classifyimage"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling classifyimage",
        new ApiException(400, "Missing the required parameter 'versionName' when calling classifyimage"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling classifyimage",
        new ApiException(400, "Missing the required parameter 'modelName' when calling classifyimage"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ClassificationResult) ApiInvoker.deserialize(localVarResponse,  "", ClassificationResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Detect the objects, given a (input) prediction request
  * 
   * @param id the GUID for mapping the results in the detections
   * @param needsPreprocessing (true) if the image needs preprocessing
   * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.
   * @param file the image file to detect objects from
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return DetectionResult
  */
  public DetectionResult detectobjects (String id, Boolean needsPreprocessing, Float threshold, File file, String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'id' when calling detectobjects"));
    }
    // verify the required parameter 'needsPreprocessing' is set
    if (needsPreprocessing == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'needsPreprocessing' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'needsPreprocessing' when calling detectobjects"));
    }
    // verify the required parameter 'threshold' is set
    if (threshold == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threshold' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'threshold' when calling detectobjects"));
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'file' when calling detectobjects"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling detectobjects"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'versionName' when calling detectobjects"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'modelName' when calling detectobjects"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (id != null) {
        localVarBuilder.addTextBody("id", ApiInvoker.parameterToString(id), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (needsPreprocessing != null) {
        localVarBuilder.addTextBody("needsPreprocessing", ApiInvoker.parameterToString(needsPreprocessing), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (threshold != null) {
        localVarBuilder.addTextBody("threshold", ApiInvoker.parameterToString(threshold), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("id", ApiInvoker.parameterToString(id));
      formParams.put("needsPreprocessing", ApiInvoker.parameterToString(needsPreprocessing));
      formParams.put("threshold", ApiInvoker.parameterToString(threshold));
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DetectionResult) ApiInvoker.deserialize(localVarResponse, "", DetectionResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Detect the objects, given a (input) prediction request
   * 
   * @param id the GUID for mapping the results in the detections   * @param needsPreprocessing (true) if the image needs preprocessing   * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.   * @param file the image file to detect objects from   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void detectobjects (String id, Boolean needsPreprocessing, Float threshold, File file, String deploymentName, String versionName, String modelName, final Response.Listener<DetectionResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'id' when calling detectobjects"));
    }
    // verify the required parameter 'needsPreprocessing' is set
    if (needsPreprocessing == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'needsPreprocessing' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'needsPreprocessing' when calling detectobjects"));
    }
    // verify the required parameter 'threshold' is set
    if (threshold == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'threshold' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'threshold' when calling detectobjects"));
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'file' when calling detectobjects"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling detectobjects"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'versionName' when calling detectobjects"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling detectobjects",
        new ApiException(400, "Missing the required parameter 'modelName' when calling detectobjects"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (id != null) {
        localVarBuilder.addTextBody("id", ApiInvoker.parameterToString(id), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (needsPreprocessing != null) {
        localVarBuilder.addTextBody("needsPreprocessing", ApiInvoker.parameterToString(needsPreprocessing), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (threshold != null) {
        localVarBuilder.addTextBody("threshold", ApiInvoker.parameterToString(threshold), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("id", ApiInvoker.parameterToString(id));
formParams.put("needsPreprocessing", ApiInvoker.parameterToString(needsPreprocessing));
formParams.put("threshold", ApiInvoker.parameterToString(threshold));

    }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DetectionResult) ApiInvoker.deserialize(localVarResponse,  "", DetectionResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Run inference on the input and returns it as a JsonArrayResponse
  * 
   * @param body The input NDArray
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return JsonArrayResponse
  */
  public JsonArrayResponse jsonarray (Prediction body, String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'body' when calling jsonarray"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling jsonarray"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'versionName' when calling jsonarray"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'modelName' when calling jsonarray"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (JsonArrayResponse) ApiInvoker.deserialize(localVarResponse, "", JsonArrayResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Run inference on the input and returns it as a JsonArrayResponse
   * 
   * @param body The input NDArray   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void jsonarray (Prediction body, String deploymentName, String versionName, String modelName, final Response.Listener<JsonArrayResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'body' when calling jsonarray"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling jsonarray"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'versionName' when calling jsonarray"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'modelName' when calling jsonarray"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((JsonArrayResponse) ApiInvoker.deserialize(localVarResponse,  "", JsonArrayResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get logs file path
  * 
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return String
  */
  public String logfilepath (String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling logfilepath",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling logfilepath"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling logfilepath",
        new ApiException(400, "Missing the required parameter 'versionName' when calling logfilepath"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling logfilepath",
        new ApiException(400, "Missing the required parameter 'modelName' when calling logfilepath"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get logs file path
   * 
   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void logfilepath (String deploymentName, String versionName, String modelName, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling logfilepath",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling logfilepath"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling logfilepath",
        new ApiException(400, "Missing the required parameter 'versionName' when calling logfilepath"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling logfilepath",
        new ApiException(400, "Missing the required parameter 'modelName' when calling logfilepath"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get logs
  * 
   * @param body the the log request
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return LogBatch
  */
  public LogBatch logs (LogRequest body, String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling logs",
        new ApiException(400, "Missing the required parameter 'body' when calling logs"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling logs",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling logs"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling logs",
        new ApiException(400, "Missing the required parameter 'versionName' when calling logs"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling logs",
        new ApiException(400, "Missing the required parameter 'modelName' when calling logs"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logs".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LogBatch) ApiInvoker.deserialize(localVarResponse, "", LogBatch.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get logs
   * 
   * @param body the the log request   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void logs (LogRequest body, String deploymentName, String versionName, String modelName, final Response.Listener<LogBatch> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling logs",
        new ApiException(400, "Missing the required parameter 'body' when calling logs"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling logs",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling logs"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling logs",
        new ApiException(400, "Missing the required parameter 'versionName' when calling logs"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling logs",
        new ApiException(400, "Missing the required parameter 'modelName' when calling logs"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logs".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LogBatch) ApiInvoker.deserialize(localVarResponse,  "", LogBatch.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * this method can be used to get the meta data for the current model which set to the server
  * 
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return MetaData
  */
  public MetaData metaGet (String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling metaGet",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling metaGet"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling metaGet",
        new ApiException(400, "Missing the required parameter 'versionName' when calling metaGet"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling metaGet",
        new ApiException(400, "Missing the required parameter 'modelName' when calling metaGet"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MetaData) ApiInvoker.deserialize(localVarResponse, "", MetaData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * this method can be used to get the meta data for the current model which set to the server
   * 
   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void metaGet (String deploymentName, String versionName, String modelName, final Response.Listener<MetaData> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling metaGet",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling metaGet"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling metaGet",
        new ApiException(400, "Missing the required parameter 'versionName' when calling metaGet"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling metaGet",
        new ApiException(400, "Missing the required parameter 'modelName' when calling metaGet"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MetaData) ApiInvoker.deserialize(localVarResponse,  "", MetaData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * This method can be used to set meta data for the current model which is set to the server
  * 
   * @param body the meta data object
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return MetaData
  */
  public MetaData metaPost (MetaData body, String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling metaPost",
        new ApiException(400, "Missing the required parameter 'body' when calling metaPost"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling metaPost",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling metaPost"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling metaPost",
        new ApiException(400, "Missing the required parameter 'versionName' when calling metaPost"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling metaPost",
        new ApiException(400, "Missing the required parameter 'modelName' when calling metaPost"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MetaData) ApiInvoker.deserialize(localVarResponse, "", MetaData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * This method can be used to set meta data for the current model which is set to the server
   * 
   * @param body the meta data object   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void metaPost (MetaData body, String deploymentName, String versionName, String modelName, final Response.Listener<MetaData> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling metaPost",
        new ApiException(400, "Missing the required parameter 'body' when calling metaPost"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling metaPost",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling metaPost"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling metaPost",
        new ApiException(400, "Missing the required parameter 'versionName' when calling metaPost"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling metaPost",
        new ApiException(400, "Missing the required parameter 'modelName' when calling metaPost"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MetaData) ApiInvoker.deserialize(localVarResponse,  "", MetaData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set the model to be served
  * 
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @param file The model file to upload (.pb file)
   * @return ModelStatus
  */
  public ModelStatus modelset (String deploymentName, String versionName, String modelName, File file) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling modelset",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling modelset"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling modelset",
        new ApiException(400, "Missing the required parameter 'versionName' when calling modelset"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling modelset",
        new ApiException(400, "Missing the required parameter 'modelName' when calling modelset"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelStatus) ApiInvoker.deserialize(localVarResponse, "", ModelStatus.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set the model to be served
   * 
   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model   * @param file The model file to upload (.pb file)
  */
  public void modelset (String deploymentName, String versionName, String modelName, File file, final Response.Listener<ModelStatus> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling modelset",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling modelset"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling modelset",
        new ApiException(400, "Missing the required parameter 'versionName' when calling modelset"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling modelset",
        new ApiException(400, "Missing the required parameter 'modelName' when calling modelset"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelStatus) ApiInvoker.deserialize(localVarResponse,  "", ModelStatus.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update the model to be served
  * 
   * @param file The model file to update with (.pb file)
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return ModelStatus
  */
  public ModelStatus modelupdate (File file, String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling modelupdate",
        new ApiException(400, "Missing the required parameter 'file' when calling modelupdate"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling modelupdate",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling modelupdate"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling modelupdate",
        new ApiException(400, "Missing the required parameter 'versionName' when calling modelupdate"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling modelupdate",
        new ApiException(400, "Missing the required parameter 'modelName' when calling modelupdate"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelStatus) ApiInvoker.deserialize(localVarResponse, "", ModelStatus.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update the model to be served
   * 
   * @param file The model file to update with (.pb file)   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void modelupdate (File file, String deploymentName, String versionName, String modelName, final Response.Listener<ModelStatus> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling modelupdate",
        new ApiException(400, "Missing the required parameter 'file' when calling modelupdate"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling modelupdate",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling modelupdate"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling modelupdate",
        new ApiException(400, "Missing the required parameter 'versionName' when calling modelupdate"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling modelupdate",
        new ApiException(400, "Missing the required parameter 'modelName' when calling modelupdate"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelStatus) ApiInvoker.deserialize(localVarResponse,  "", ModelStatus.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Represents all of the labels for a given classification
  * 
   * @param body The input NDArray
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return MultiClassClassificationResult
  */
  public MultiClassClassificationResult multiclassify (Prediction body, String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'body' when calling multiclassify"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling multiclassify"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'versionName' when calling multiclassify"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'modelName' when calling multiclassify"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MultiClassClassificationResult) ApiInvoker.deserialize(localVarResponse, "", MultiClassClassificationResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Represents all of the labels for a given classification
   * 
   * @param body The input NDArray   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void multiclassify (Prediction body, String deploymentName, String versionName, String modelName, final Response.Listener<MultiClassClassificationResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'body' when calling multiclassify"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling multiclassify"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'versionName' when calling multiclassify"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'modelName' when calling multiclassify"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MultiClassClassificationResult) ApiInvoker.deserialize(localVarResponse,  "", MultiClassClassificationResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the output from the network, based on the given INDArray[] input
  * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
   * @param body The multiple input arrays with mask inputs to run inferences on
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return MultiPredictResponse
  */
  public MultiPredictResponse multipredict (MultiPredictRequest body, String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling multipredict",
        new ApiException(400, "Missing the required parameter 'body' when calling multipredict"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling multipredict",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling multipredict"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling multipredict",
        new ApiException(400, "Missing the required parameter 'versionName' when calling multipredict"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling multipredict",
        new ApiException(400, "Missing the required parameter 'modelName' when calling multipredict"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MultiPredictResponse) ApiInvoker.deserialize(localVarResponse, "", MultiPredictResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the output from the network, based on the given INDArray[] input
   * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
   * @param body The multiple input arrays with mask inputs to run inferences on   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void multipredict (MultiPredictRequest body, String deploymentName, String versionName, String modelName, final Response.Listener<MultiPredictResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling multipredict",
        new ApiException(400, "Missing the required parameter 'body' when calling multipredict"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling multipredict",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling multipredict"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling multipredict",
        new ApiException(400, "Missing the required parameter 'versionName' when calling multipredict"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling multipredict",
        new ApiException(400, "Missing the required parameter 'modelName' when calling multipredict"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MultiPredictResponse) ApiInvoker.deserialize(localVarResponse,  "", MultiPredictResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
  * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
   * @param file The image file to run the prediction on
   * @param id The id of the request (could be self generated)
   * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return MultiPredictResponse
  */
  public MultiPredictResponse multipredictimage (File file, String id, Boolean needsPreprocessing, String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling multipredictimage",
        new ApiException(400, "Missing the required parameter 'file' when calling multipredictimage"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling multipredictimage",
        new ApiException(400, "Missing the required parameter 'id' when calling multipredictimage"));
    }
    // verify the required parameter 'needsPreprocessing' is set
    if (needsPreprocessing == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'needsPreprocessing' when calling multipredictimage",
        new ApiException(400, "Missing the required parameter 'needsPreprocessing' when calling multipredictimage"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling multipredictimage",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling multipredictimage"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling multipredictimage",
        new ApiException(400, "Missing the required parameter 'versionName' when calling multipredictimage"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling multipredictimage",
        new ApiException(400, "Missing the required parameter 'modelName' when calling multipredictimage"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      if (id != null) {
        localVarBuilder.addTextBody("id", ApiInvoker.parameterToString(id), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (needsPreprocessing != null) {
        localVarBuilder.addTextBody("needs_preprocessing", ApiInvoker.parameterToString(needsPreprocessing), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("id", ApiInvoker.parameterToString(id));
      formParams.put("needs_preprocessing", ApiInvoker.parameterToString(needsPreprocessing));
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MultiPredictResponse) ApiInvoker.deserialize(localVarResponse, "", MultiPredictResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
   * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
   * @param file The image file to run the prediction on   * @param id The id of the request (could be self generated)   * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void multipredictimage (File file, String id, Boolean needsPreprocessing, String deploymentName, String versionName, String modelName, final Response.Listener<MultiPredictResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling multipredictimage",
        new ApiException(400, "Missing the required parameter 'file' when calling multipredictimage"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling multipredictimage",
        new ApiException(400, "Missing the required parameter 'id' when calling multipredictimage"));
    }
    // verify the required parameter 'needsPreprocessing' is set
    if (needsPreprocessing == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'needsPreprocessing' when calling multipredictimage",
        new ApiException(400, "Missing the required parameter 'needsPreprocessing' when calling multipredictimage"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling multipredictimage",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling multipredictimage"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling multipredictimage",
        new ApiException(400, "Missing the required parameter 'versionName' when calling multipredictimage"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling multipredictimage",
        new ApiException(400, "Missing the required parameter 'modelName' when calling multipredictimage"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      
      if (id != null) {
        localVarBuilder.addTextBody("id", ApiInvoker.parameterToString(id), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (needsPreprocessing != null) {
        localVarBuilder.addTextBody("needs_preprocessing", ApiInvoker.parameterToString(needsPreprocessing), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
formParams.put("id", ApiInvoker.parameterToString(id));
formParams.put("needs_preprocessing", ApiInvoker.parameterToString(needsPreprocessing));
    }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MultiPredictResponse) ApiInvoker.deserialize(localVarResponse,  "", MultiPredictResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Run inference on the input array.
  * 
   * @param body The input NDArray
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return Prediction
  */
  public Prediction predict (Prediction body, String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling predict",
        new ApiException(400, "Missing the required parameter 'body' when calling predict"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predict",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predict"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling predict",
        new ApiException(400, "Missing the required parameter 'versionName' when calling predict"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predict",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predict"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predict".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Prediction) ApiInvoker.deserialize(localVarResponse, "", Prediction.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Run inference on the input array.
   * 
   * @param body The input NDArray   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void predict (Prediction body, String deploymentName, String versionName, String modelName, final Response.Listener<Prediction> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling predict",
        new ApiException(400, "Missing the required parameter 'body' when calling predict"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predict",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predict"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling predict",
        new ApiException(400, "Missing the required parameter 'versionName' when calling predict"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predict",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predict"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predict".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Prediction) ApiInvoker.deserialize(localVarResponse,  "", Prediction.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Run inference on the input array, using input image file from multipart form data.
  * 
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @param image The file to upload.
   * @return Prediction
  */
  public Prediction predictimage (String deploymentName, String versionName, String modelName, File image) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predictimage",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predictimage"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling predictimage",
        new ApiException(400, "Missing the required parameter 'versionName' when calling predictimage"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predictimage",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predictimage"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Prediction) ApiInvoker.deserialize(localVarResponse, "", Prediction.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Run inference on the input array, using input image file from multipart form data.
   * 
   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model   * @param image The file to upload.
  */
  public void predictimage (String deploymentName, String versionName, String modelName, File image, final Response.Listener<Prediction> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predictimage",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predictimage"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling predictimage",
        new ApiException(400, "Missing the required parameter 'versionName' when calling predictimage"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predictimage",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predictimage"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Prediction) ApiInvoker.deserialize(localVarResponse,  "", Prediction.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Preprocesses the input and run inference on it
  * 
   * @param body The input array
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return Prediction
  */
  public Prediction predictwithpreprocess (List<String> body, String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'body' when calling predictwithpreprocess"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predictwithpreprocess"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'versionName' when calling predictwithpreprocess"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predictwithpreprocess"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Prediction) ApiInvoker.deserialize(localVarResponse, "", Prediction.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Preprocesses the input and run inference on it
   * 
   * @param body The input array   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void predictwithpreprocess (List<String> body, String deploymentName, String versionName, String modelName, final Response.Listener<Prediction> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'body' when calling predictwithpreprocess"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predictwithpreprocess"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'versionName' when calling predictwithpreprocess"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predictwithpreprocess"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Prediction) ApiInvoker.deserialize(localVarResponse,  "", Prediction.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
  * 
   * @param body The input array
   * @param deploymentName Name of the deployment group
   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;
   * @param modelName ID or name of the deployed model
   * @return JsonArrayResponse
  */
  public JsonArrayResponse predictwithpreprocessjson (List<String> body, String deploymentName, String versionName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'body' when calling predictwithpreprocessjson"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'versionName' when calling predictwithpreprocessjson"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predictwithpreprocessjson"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (JsonArrayResponse) ApiInvoker.deserialize(localVarResponse, "", JsonArrayResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
   * 
   * @param body The input array   * @param deploymentName Name of the deployment group   * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot;   * @param modelName ID or name of the deployed model
  */
  public void predictwithpreprocessjson (List<String> body, String deploymentName, String versionName, String modelName, final Response.Listener<JsonArrayResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'body' when calling predictwithpreprocessjson"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson"));
    }
    // verify the required parameter 'versionName' is set
    if (versionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'versionName' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'versionName' when calling predictwithpreprocessjson"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predictwithpreprocessjson"));
    }

    // create path and map variables
    String path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "versionName" + "\\}", apiInvoker.escapeString(versionName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((JsonArrayResponse) ApiInvoker.deserialize(localVarResponse,  "", JsonArrayResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
