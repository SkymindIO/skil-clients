=begin
#Endpoints

#Endpoints API for different services in SKIL

OpenAPI spec version: 1.2.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for SkilCient::JobApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'JobApi' do
  before do
    # run before each test
    @instance = SkilCient::JobApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of JobApi' do
    it 'should create an instance of JobApi' do
      expect(@instance).to be_instance_of(SkilCient::JobApi)
    end
  end

  # unit tests for create_job
  # Create a job
  # @param job_id_or_type Job Type
  # @param create_job_request Create job request object
  # @param [Hash] opts the optional parameters
  # @return [JobEntity]
  describe 'create_job test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_job_by_id
  # Deletes a job given its ID
  # @param job_id_or_type Job ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_job_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for download_job_output_file
  # Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
  # @param job_id Job ID
  # @param download_output_file_request Download output file request object
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'download_job_output_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_jobs
  # Get a list of all available jobs
  # @param [Hash] opts the optional parameters
  # @return [Array<JobEntity>]
  describe 'get_all_jobs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_job_by_id
  # Get a job by its ID
  # @param job_id_or_type Job ID
  # @param [Hash] opts the optional parameters
  # @return [JobEntity]
  describe 'get_job_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for refresh_job_status
  # Refresh the remote job status. Can be used for monitoring.
  # @param job_id Job ID
  # @param [Hash] opts the optional parameters
  # @return [JobEntity]
  describe 'refresh_job_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for run_a_job
  # Start running an (already created) job on the remote resource
  # @param job_id Job ID
  # @param [Hash] opts the optional parameters
  # @return [JobEntity]
  describe 'run_a_job test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
