=begin
#Endpoints

#Endpoints API for different services in SKIL

OpenAPI spec version: 1.2.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for SkilCient::InferenceApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'InferenceApi' do
  before do
    # run before each test
    @instance = SkilCient::InferenceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of InferenceApi' do
    it 'should create an instance of InferenceApi' do
      expect(@instance).to be_instance_of(SkilCient::InferenceApi)
    end
  end

  # unit tests for classify
  # Use the deployed model to classify the input
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [ClassificationResult]
  describe 'classify test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for classifyarray
  # Same as /classify but returns the output as Base64NDArrayBody
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [Base64NDArrayBody]
  describe 'classifyarray test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for classifyimage
  # Use the deployed model to classify the input, using input image file from multipart form data.
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @option opts [File] :image The file to upload.
  # @return [ClassificationResult]
  describe 'classifyimage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for detectobjects
  # Detect the objects, given a (input) prediction request
  # @param id the GUID for mapping the results in the detections
  # @param needs_preprocessing (true) if the image needs preprocessing
  # @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.
  # @param file the image file to detect objects from
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [DetectionResult]
  describe 'detectobjects test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for jsonarray
  # Run inference on the input and returns it as a JsonArrayResponse
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [JsonArrayResponse]
  describe 'jsonarray test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for logfilepath
  # Get logs file path
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'logfilepath test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for logs
  # Get logs
  # @param body the the log request
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [LogBatch]
  describe 'logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meta_get
  # this method can be used to get the meta data for the current model which set to the server
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [MetaData]
  describe 'meta_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meta_post
  # This method can be used to set meta data for the current model which is set to the server
  # @param body the meta data object
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [MetaData]
  describe 'meta_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for modelset
  # Set the model to be served
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file The model file to upload (.pb file)
  # @return [ModelStatus]
  describe 'modelset test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for modelupdate
  # Update the model to be served
  # @param file The model file to update with (.pb file)
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [ModelStatus]
  describe 'modelupdate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multiclassify
  # Represents all of the labels for a given classification
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [MultiClassClassificationResult]
  describe 'multiclassify test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multipredict
  # Get the output from the network, based on the given INDArray[] input
  # Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
  # @param body The multiple input arrays with mask inputs to run inferences on
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [MultiPredictResponse]
  describe 'multipredict test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multipredictimage
  # Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
  # Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
  # @param file The image file to run the prediction on
  # @param id The id of the request (could be self generated)
  # @param needs_preprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [MultiPredictResponse]
  describe 'multipredictimage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predict
  # Run inference on the input array.
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [Prediction]
  describe 'predict test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predictimage
  # Run inference on the input array, using input image file from multipart form data.
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @option opts [File] :image The file to upload.
  # @return [Prediction]
  describe 'predictimage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predictwithpreprocess
  # Preprocesses the input and run inference on it
  # @param body The input array
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [Prediction]
  describe 'predictwithpreprocess test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predictwithpreprocessjson
  # Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
  # @param body The input array
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [JsonArrayResponse]
  describe 'predictwithpreprocessjson test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
