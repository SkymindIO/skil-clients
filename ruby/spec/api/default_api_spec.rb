=begin
#Endpoints

#Endpoints API for different services in SKIL

OpenAPI spec version: 1.2.0-rc1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for SkilCient::DefaultApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @instance = SkilCient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@instance).to be_instance_of(SkilCient::DefaultApi)
    end
  end

  # unit tests for accumulated_results
  # Tells how many retraining examples have labels associated with them.
  # @param [Hash] opts the optional parameters
  # @return [AccumulatedResults]
  describe 'accumulated_results test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_credentials
  # Adds credentials
  # @param add_credentials_request Add credentials request object
  # @param [Hash] opts the optional parameters
  # @return [ResourceCredentials]
  describe 'add_credentials test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_evaluation_result
  # Adds an evaluation result
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param evaluation_results_entity The evaluation result entity
  # @param [Hash] opts the optional parameters
  # @return [EvaluationResultsEntity]
  describe 'add_evaluation_result test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_example_for_batch
  # Adds a number of examples to a minibatch ID given an AddExampleRequest.
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param add_example_request The add example request, encapsulating minibatch details and examples batch size
  # @param [Hash] opts the optional parameters
  # @return [AddExampleRequest]
  describe 'add_example_for_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_example_to_minibatch
  # Adds an example to a minibatch
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param example_entity The example to add to the minibatch
  # @param [Hash] opts the optional parameters
  # @return [ExampleEntity]
  describe 'add_example_to_minibatch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_experiment
  # Add an experiment, given an experiment entity
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param experiment_entity The experiment entity to add
  # @param [Hash] opts the optional parameters
  # @return [ExperimentEntity]
  describe 'add_experiment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_feedback_binary
  # @param id Batch ID to retrain the model with and get feedback for.
  # @param type The type of the labels array.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file The labels file to upload.
  # @return [FeedbackResponse]
  describe 'add_feedback_binary test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_feedback_json
  # Gets the retraining feedback for the given batch ID.
  # @param id Batch ID to retrain the model with and get feedback for.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Array<Float>>] :labels The associated labels (one-hot vectors) with the batch for retraining.
  # @return [FeedbackResponse]
  describe 'add_feedback_json test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_minibatch
  # Adds a minibatch
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param minibatch_entity The minibatch entity to add
  # @param [Hash] opts the optional parameters
  # @return [MinibatchEntity]
  describe 'add_minibatch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_model_feedback
  # Adds an evaluation feedback to the model against a given minibatch id.
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param model_feed_back_request The model feedback request object
  # @param [Hash] opts the optional parameters
  # @return [ModelFeedBackRequest]
  describe 'add_model_feedback test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_model_history
  # Add a model history / workspace
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param add_model_history_request The model history request object
  # @param [Hash] opts the optional parameters
  # @return [ModelHistoryEntity]
  describe 'add_model_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_model_instance
  # Adds a model
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param model_instance_entity The object encapsulating the model instance id and evaluation type to aggregate
  # @param [Hash] opts the optional parameters
  # @return [ModelInstanceEntity]
  describe 'add_model_instance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_resource
  # Adds a resource
  # @param add_resource_request The Add resource request object
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'add_resource test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_resource_group
  # Adds a resource group
  # @param group_name Name of the resource group
  # @param [Hash] opts the optional parameters
  # @return [ResourceGroup]
  describe 'add_resource_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_resource_to_group
  # Adds a resource to a resource group
  # @param resource_group_id ID of the resource group
  # @param resource_id ID of the resource
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'add_resource_to_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for aggregate_model_results
  # Aggregates the evaluaition results of a model instance, based on the evaluation type
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param aggregate_prediction The object encapsulating the model instance id and evaluation type to aggregate
  # @param [Hash] opts the optional parameters
  # @return [EvaluationResultsEntity]
  describe 'aggregate_model_results test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for change_user_password
  # Change user&#39;s password
  # @param user_id User&#39;s ID
  # @param change_password_request Password details.
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'change_user_password test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for classify
  # Use the deployed model to classify the input
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [ClassificationResult]
  describe 'classify test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for classifyarray
  # Same as /classify but returns the output as Base64NDArrayBody
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [Base64NDArrayBody]
  describe 'classifyarray test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for classifyimage
  # Use the deployed model to classify the input, using input image file from multipart form data.
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @option opts [File] :image The file to upload.
  # @return [ClassificationResult]
  describe 'classifyimage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clear_state
  # Clears the accumulated data for retraining.
  # @param [Hash] opts the optional parameters
  # @return [FeedbackResponse]
  describe 'clear_state test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_job
  # Create a job
  # @param job_id_or_type Job Type
  # @param create_job_request Create job request object
  # @param [Hash] opts the optional parameters
  # @return [JobEntity]
  describe 'create_job test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_model_history
  # Creates model History
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param model_history_entity The model history entity
  # @param [Hash] opts the optional parameters
  # @return [ModelHistoryEntity]
  describe 'create_model_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_credentials_by_id
  # Delete credentials given an ID
  # @param credential_id Credentials ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_credentials_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_experiment
  # Deletes an experiment, given an experiment entity
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param experiment_id the GUID of the experiment to delete
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse200]
  describe 'delete_experiment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_job_by_id
  # Deletes a job given its ID
  # @param job_id_or_type Job ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_job_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_model
  # Delete a model by deployment and model id
  # @param deployment_id ID deployment group
  # @param model_id the id of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse200]
  describe 'delete_model test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_model_history
  # Deletes a model history / workspace, given its ID
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param model_history_id the GUID of the model history / workspace to delete
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse200]
  describe 'delete_model_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_model_instance
  # Deletes a model instance, given its ID
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param model_instance_id GUID of the model instance to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_model_instance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_resource_by_id
  # Delete the resource with the specified resource ID
  # @param resource_id ID of the resource
  # @param [Hash] opts the optional parameters
  # @return [Resource]
  describe 'delete_resource_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_resource_from_group
  # Removes a resource from a resource group
  # @param resource_group_id ID of the resource group
  # @param resource_id ID of the resource
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_resource_from_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_resource_group_by_id
  # Delete the resource group with the specified resource group ID
  # @param resource_group_id ID of the resource group
  # @param [Hash] opts the optional parameters
  # @return [ResourceGroup]
  describe 'delete_resource_group_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for deploy_model
  # Deploy a model in a deployment group.
  # @param deployment_id ID deployment group
  # @param body the model import request
  # @param [Hash] opts the optional parameters
  # @return [ModelEntity]
  describe 'deploy_model test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for deployment_create
  # Create a new deployment group.
  # @param body the deployment request
  # @param [Hash] opts the optional parameters
  # @return [DeploymentResponse]
  describe 'deployment_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for deployment_delete
  # Delete a deployment by id
  # @param deployment_id Id of the deployment group
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse200]
  describe 'deployment_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for deployment_get
  # Get a deployment details by id
  # @param deployment_id Id of the deployment group
  # @param [Hash] opts the optional parameters
  # @return [DeploymentResponse]
  describe 'deployment_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for deployments
  # Get a list of deployments
  # @param [Hash] opts the optional parameters
  # @return [Array<DeploymentResponse>]
  describe 'deployments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for detectobjects
  # Detect the objects, given a (input) prediction request
  # @param id the GUID for mapping the results in the detections
  # @param needs_preprocessing (true) if the image needs preprocessing
  # @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.
  # @param file the image file to detect objects from
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [DetectionResult]
  describe 'detectobjects test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for download_job_output_file
  # Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
  # @param job_id Job ID
  # @param download_output_file_request Download output file request object
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'download_job_output_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_auth_token
  # Generate new auth token
  # @param token_generate_request Auth token details.
  # @param [Hash] opts the optional parameters
  # @return [Token]
  describe 'generate_auth_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_jobs
  # Get a list of all available jobs
  # @param [Hash] opts the optional parameters
  # @return [Array<JobEntity>]
  describe 'get_all_jobs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_array
  # Get the memory mapped array based on the array type.
  # The array is specified through a file path, in the configuration object, during model server deployment.
  # @param accept 
  # @param array_type The format in which the memory mapped array is returned.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_array test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_array_indices
  # Get the memory mapped array indices based on the array type.
  # @param content_type The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.
  # @param accept 
  # @param array_type Format in which the memory mapped array is returned in.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :input Input indices array
  # @return [nil]
  describe 'get_array_indices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_array_range
  # Get the memory mapped array within a range based on the array type.
  # @param accept 
  # @param array_type Format in which the memory mapped array is returned in.
  # @param from 
  # @param to 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_array_range test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_auth_policy
  # Get auth policy
  # @param [Hash] opts the optional parameters
  # @return [AuthPolicy]
  describe 'get_auth_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_best_model_among_model_ids
  # Gets the best model among the given model instance IDs, based on the evaluation type and column metric
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param best_model Object encapsulating the model ids, eval type and column metric name
  # @param [Hash] opts the optional parameters
  # @return [ModelInstanceEntity]
  describe 'get_best_model_among_model_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_credentials_by_id
  # Get credentials given an ID
  # @param credential_id Credentials ID
  # @param [Hash] opts the optional parameters
  # @return [ResourceCredentials]
  describe 'get_credentials_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_current_model
  # Returns the current model being used for retraining.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_current_model test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_evaluation_for_model_id
  # Gets the list of evaluation results entity, given a model instance ID
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param model_instance_id GUID of the model instance to get evaluation results for.
  # @param [Hash] opts the optional parameters
  # @return [Array<EvaluationResultsEntity>]
  describe 'get_evaluation_for_model_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_examples_for_minibatch
  # Gets all the examples for a minibatch ID
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param minibatch_id The GUID of the minibatch
  # @param [Hash] opts the optional parameters
  # @return [Array<ExampleEntity>]
  describe 'get_examples_for_minibatch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_experiment
  # Obtain an experiment&#39;s details, given its ID
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param experiment_id the GUID of the experiment to obtain
  # @param [Hash] opts the optional parameters
  # @return [ExperimentEntity]
  describe 'get_experiment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_experiments_for_model_history
  # Obtain all experiments for a model history / workspace
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param model_history_id the GUID of the model history / workspace
  # @param [Hash] opts the optional parameters
  # @return [Array<ExperimentEntity>]
  describe 'get_experiments_for_model_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_job_by_id
  # Get a job by its ID
  # @param job_id_or_type Job ID
  # @param [Hash] opts the optional parameters
  # @return [JobEntity]
  describe 'get_job_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_last_evaluation
  # Get the last evaluation specifications from the current model.
  # @param [Hash] opts the optional parameters
  # @return [EvaluationResultsEntity]
  describe 'get_last_evaluation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_minibatch
  # Gets a minibatch for the model
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param minibatch_id The GUID of the minibatch
  # @param [Hash] opts the optional parameters
  # @return [MinibatchEntity]
  describe 'get_minibatch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_details
  # Get model details
  # @param deployment_id ID deployment group
  # @param model_id the id of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [ModelEntity]
  describe 'get_model_details test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_history
  # Gets a model history, given its ID
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param model_history_id GUID of the model history to get information of.
  # @param [Hash] opts the optional parameters
  # @return [ModelHistoryEntity]
  describe 'get_model_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_instance
  # Gets a model instance, given its ID
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param model_instance_id GUID of the model instance to get information of.
  # @param [Hash] opts the optional parameters
  # @return [ModelInstanceEntity]
  describe 'get_model_instance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_models_for_experiment
  # Obtain a list of all the models for an experiment
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param experiment_id the GUID of the experiment
  # @param [Hash] opts the optional parameters
  # @return [Array<ModelInstanceEntity>]
  describe 'get_models_for_experiment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_resource_by_id
  # Get the resource with the specified resource ID
  # @param resource_id ID of the resource
  # @param [Hash] opts the optional parameters
  # @return [Resource]
  describe 'get_resource_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_resource_by_sub_type
  # Get all the resources with the specified resource subtype
  # @param resource_sub_type Subtype of the resource
  # @param [Hash] opts the optional parameters
  # @return [Array<Resource>]
  describe 'get_resource_by_sub_type test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_resource_by_type
  # Get all the resources with the specified resource type
  # @param resource_type Type of the resource
  # @param [Hash] opts the optional parameters
  # @return [Array<Resource>]
  describe 'get_resource_by_type test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_resource_details_by_id
  # Get the resource details with the specified resource ID
  # Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
  # @param resource_id ID of the resource
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_resource_details_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_resource_group_by_id
  # Get the resource group with the specified resource group ID
  # @param resource_group_id ID of the resource group
  # @param [Hash] opts the optional parameters
  # @return [ResourceGroup]
  describe 'get_resource_group_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_resource_groups
  # Get a list of all the resource groups
  # @param [Hash] opts the optional parameters
  # @return [Array<ResourceGroup>]
  describe 'get_resource_groups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_resources
  # A list of all known/registered resources, of all types
  # @param [Hash] opts the optional parameters
  # @return [Array<Resource>]
  describe 'get_resources test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_resources_from_group
  # Get all resources from a resource group
  # @param resource_group_id ID of the resource group
  # @param [Hash] opts the optional parameters
  # @return [Array<Resource>]
  describe 'get_resources_from_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_roles
  # Get all roles.
  # @param [Hash] opts the optional parameters
  # @return [Array<Role>]
  describe 'get_roles test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user
  # Get a user by user ID
  # @param user_id User&#39;s ID
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'get_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_auth_tokens
  # Get auth tokens for a user.
  # @param user_id User&#39;s ID
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :only_valid True if you only want the valid tokens.
  # @return [Array<Token>]
  describe 'get_user_auth_tokens test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_users
  # Get all users.
  # @param [Hash] opts the optional parameters
  # @return [Array<User>]
  describe 'get_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for is_training
  # Get the retraining status
  # @param [Hash] opts the optional parameters
  # @return [RetrainingStatus]
  describe 'is_training test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for jsonarray
  # Run inference on the input and returns it as a JsonArrayResponse
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [JsonArrayResponse]
  describe 'jsonarray test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for knn
  # Runs knn on the given index with the given k
  # Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param knn_name ID or name of the deployed knn
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [NearestNeighborsResults]
  describe 'knn test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for knnnew
  # Run a k nearest neighbors search on a NEW data point
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param knn_name ID or name of the deployed knn
  # @param body The input NDArray
  # @param [Hash] opts the optional parameters
  # @return [NearestNeighborsResults]
  describe 'knnnew test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_all_experiments
  # List all of the experiments in every model history / workspace
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param [Hash] opts the optional parameters
  # @return [Array<ExperimentEntity>]
  describe 'list_all_experiments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for logfilepath
  # Get logs file path
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'logfilepath test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for login
  # Post JSON credentials and obtain a JWT authorization token.
  # @param login_request Login credentials.
  # @param [Hash] opts the optional parameters
  # @return [LoginResponse]
  describe 'login test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for logs
  # Get logs
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param log_request The log object
  # @param [Hash] opts the optional parameters
  # @return [LogBatch]
  describe 'logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meta_get
  # this method can be used to get the meta data for the current model which set to the server
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [MetaData]
  describe 'meta_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for meta_post
  # This method can be used to set meta data for the current model which is set to the server
  # @param content_type The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;
  # @param body the meta data object
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [MetaData]
  describe 'meta_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for model_state_change
  # Modify the state (start/stop) of a deployed model
  # @param deployment_id ID deployment group
  # @param model_id the id of the deployed model
  # @param body the model state object
  # @param [Hash] opts the optional parameters
  # @return [ModelEntity]
  describe 'model_state_change test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for models
  # Retrieve a list of all the deployed models given a deployment id
  # @param deployment_id ID deployment group
  # @param [Hash] opts the optional parameters
  # @return [Array<ModelEntity>]
  describe 'models test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for modelset
  # Set the model to be served
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file The model file to upload (.pb file)
  # @return [ModelStatus]
  describe 'modelset test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for modelupdate
  # Update the model to be served
  # @param file The model file to update with (.pb file)
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [ModelStatus]
  describe 'modelupdate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multiclassify
  # Represents all of the labels for a given classification
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [MultiClassClassificationResult]
  describe 'multiclassify test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multipredict
  # Get the output from the network, based on the given INDArray[] input
  # Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
  # @param body The multiple input arrays with mask inputs to run inferences on
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [MultiPredictResponse]
  describe 'multipredict test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multipredictimage
  # Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
  # Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
  # @param file The image file to run the prediction on
  # @param id The id of the request (could be self generated)
  # @param needs_preprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [MultiPredictResponse]
  describe 'multipredictimage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for num_revisions
  # Gets the number of retrained models written with retraining.
  # @param [Hash] opts the optional parameters
  # @return [RevisionsWritten]
  describe 'num_revisions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predict
  # Run inference on the input array.
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [Prediction]
  describe 'predict test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predict_error
  # Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
  # These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
  # @param content_type The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.
  # @param operation Operation to perform on the input data.
  # @param input_type Type of the input data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :input_data 
  # @return [nil]
  describe 'predict_error test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predict_v2_file
  # Runs inference based on the input data. Output is defined relative to the output adapter specified.
  # @param operation The operation to perform on the input data. 
  # @param input_type_file Type of the input data. 
  # @param input_data The input data to run inference on.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'predict_v2_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predict_v2_json
  # Runs inference based on the input data. Output is defined relative to the output adapter specified.
  # @param content_type The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.
  # @param operation The operation to perform on the input data. 
  # @param input_type_json Type of the input data. 
  # @param input_data The input data to run inference on. (Specify a JSON string here)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'predict_v2_json test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predictimage
  # Run inference on the input array, using input image file from multipart form data.
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @option opts [File] :image The file to upload.
  # @return [Prediction]
  describe 'predictimage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predictwithpreprocess
  # Preprocesses the input and run inference on it
  # @param body The input array
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [Prediction]
  describe 'predictwithpreprocess test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predictwithpreprocessjson
  # Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
  # @param body The input array
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [JsonArrayResponse]
  describe 'predictwithpreprocessjson test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for raw_predict_binary
  # Runs inference based on the input data. Output is defined relative to the output adapter specified.
  # @param input_type Input data type.
  # @param output_type Binary output data type.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :input_data The input file to upload.
  # @return [nil]
  describe 'raw_predict_binary test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for refresh_job_status
  # Refresh the remote job status. Can be used for monitoring.
  # @param job_id Job ID
  # @param [Hash] opts the optional parameters
  # @return [JobEntity]
  describe 'refresh_job_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for register_user
  # Register a new user
  # @param user User details
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'register_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reimport_model
  # Reimport a model to a previous deployed model in a deployment
  # @param deployment_id ID deployment group
  # @param model_id the id of the deployed model
  # @param body the deployment request
  # @param [Hash] opts the optional parameters
  # @return [ModelEntity]
  describe 'reimport_model test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for revoke_user_token
  # Revoke a user token.
  # @param token_id Token ID
  # @param [Hash] opts the optional parameters
  # @return [Token]
  describe 'revoke_user_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rollback
  # Rollback to a previous revision of the model.
  # @param index Model revision index.
  # @param [Hash] opts the optional parameters
  # @return [RollbackStatus]
  describe 'rollback test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for run_a_job
  # Start running an (already created) job on the remote resource
  # @param job_id Job ID
  # @param [Hash] opts the optional parameters
  # @return [JobEntity]
  describe 'run_a_job test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transform_csv
  # Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
  # Takes a batch of SingleCSVRecord object and transforms it into the desired format
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param transform_name ID or name of the deployed transform
  # @param [Hash] opts the optional parameters
  # @option opts [BatchCSVRecord] :batch_csv_record The input batch of record arrays
  # @return [BatchCSVRecord]
  describe 'transform_csv test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transformarray
  # Takes a batch input arrays and transforms it
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param transform_name ID or name of the deployed transform
  # @param [Hash] opts the optional parameters
  # @option opts [BatchRecord] :batch_record The input batch of record arrays
  # @return [Base64NDArrayBody]
  describe 'transformarray test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transformimage
  # Takes multiple multipart image file to transform and returns Base64NDArrayBody
  # Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param image_transform_name ID or name of the deployed image transform
  # @param files The image files to upload
  # @param [Hash] opts the optional parameters
  # @return [Base64NDArrayBody]
  describe 'transformimage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transformincremental_csv
  # Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
  # Takes a SingleCSVRecord object and transforms it into the desired format
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param transform_name ID or name of the deployed transform
  # @param [Hash] opts the optional parameters
  # @option opts [SingleCSVRecord] :single_csv_record The input record array
  # @return [SingleCSVRecord]
  describe 'transformincremental_csv test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transformincrementalarray
  # Same as /transformincremental but returns Base64NDArrayBody.
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param transform_name ID or name of the deployed transform
  # @param [Hash] opts the optional parameters
  # @option opts [SingleRecord] :single_record The input record array
  # @return [Base64NDArrayBody]
  describe 'transformincrementalarray test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transformincrementalimage
  # Takes a single multipart image file to transform and returns Base64NDArrayBody
  # Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param image_transform_name ID or name of the deployed image transform
  # @param file The image file to upload
  # @param [Hash] opts the optional parameters
  # @return [Base64NDArrayBody]
  describe 'transformincrementalimage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transformprocess_get
  # Gets the JSON string of the deployed transform process (CSV or Image)
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param transform_name ID or name of the deployed transform
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'transformprocess_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transformprocess_post
  # Sets the deployed (CSV or Image) transform process through the provided JSON string
  # @param content_type The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;.
  # @param deployment_name Name of the deployment group
  # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
  # @param transform_name ID or name of the deployed transform
  # @param [Hash] opts the optional parameters
  # @option opts [String] :transform_process The transform process to set (Specify a JSON string here).
  # @return [Object]
  describe 'transformprocess_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_auth_policy
  # Update auth policy
  # @param auth_policy Auth policy object
  # @param [Hash] opts the optional parameters
  # @return [AuthPolicy]
  describe 'update_auth_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_best_model_for_experiment
  # Updates the best model for an experiment
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param update_best_model Model encapsulating the experiment id to update and the best model id.
  # @param [Hash] opts the optional parameters
  # @return [ExperimentEntity]
  describe 'update_best_model_for_experiment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_experiment
  # Updates an experiment, given an experiment entity
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param experiment_id the GUID of the experiment to update
  # @param experiment_entity The experiment entity to update with
  # @param [Hash] opts the optional parameters
  # @return [ExperimentEntity]
  describe 'update_experiment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_model_history
  # Update a model history / workspace
  # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
  # @param model_history_id the GUID of the model history / workspace to update
  # @param update_model_history_request The model history request object
  # @param [Hash] opts the optional parameters
  # @return [ModelHistoryEntity]
  describe 'update_model_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_user
  # Update a user
  # @param user User details
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'update_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload
  # Upload a model file to SKIL for import.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file The file to upload.
  # @return [FileUploadList]
  describe 'upload test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
