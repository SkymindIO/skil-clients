=begin
#Endpoints

#Endpoints API for different services in SKIL

OpenAPI spec version: 1.2.0-rc1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module SkilCient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Tells how many retraining examples have labels associated with them.
    # @param [Hash] opts the optional parameters
    # @return [AccumulatedResults]
    def accumulated_results(opts = {})
      data, _status_code, _headers = accumulated_results_with_http_info(opts)
      data
    end

    # Tells how many retraining examples have labels associated with them.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccumulatedResults, Fixnum, Hash)>] AccumulatedResults data, response status code and response headers
    def accumulated_results_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.accumulated_results ...'
      end
      # resource path
      local_var_path = '/accumulatedresults'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccumulatedResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#accumulated_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds credentials
    # @param add_credentials_request Add credentials request object
    # @param [Hash] opts the optional parameters
    # @return [ResourceCredentials]
    def add_credentials(add_credentials_request, opts = {})
      data, _status_code, _headers = add_credentials_with_http_info(add_credentials_request, opts)
      data
    end

    # Adds credentials
    # @param add_credentials_request Add credentials request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceCredentials, Fixnum, Hash)>] ResourceCredentials data, response status code and response headers
    def add_credentials_with_http_info(add_credentials_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_credentials ...'
      end
      # verify the required parameter 'add_credentials_request' is set
      if @api_client.config.client_side_validation && add_credentials_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_credentials_request' when calling DefaultApi.add_credentials"
      end
      # resource path
      local_var_path = '/resources/credentials'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_credentials_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceCredentials')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds an evaluation result
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param evaluation_results_entity The evaluation result entity
    # @param [Hash] opts the optional parameters
    # @return [EvaluationResultsEntity]
    def add_evaluation_result(model_history_server_id, evaluation_results_entity, opts = {})
      data, _status_code, _headers = add_evaluation_result_with_http_info(model_history_server_id, evaluation_results_entity, opts)
      data
    end

    # Adds an evaluation result
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param evaluation_results_entity The evaluation result entity
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationResultsEntity, Fixnum, Hash)>] EvaluationResultsEntity data, response status code and response headers
    def add_evaluation_result_with_http_info(model_history_server_id, evaluation_results_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_evaluation_result ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.add_evaluation_result"
      end
      # verify the required parameter 'evaluation_results_entity' is set
      if @api_client.config.client_side_validation && evaluation_results_entity.nil?
        fail ArgumentError, "Missing the required parameter 'evaluation_results_entity' when calling DefaultApi.add_evaluation_result"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/revisions/evaluations/'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(evaluation_results_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationResultsEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_evaluation_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a number of examples to a minibatch ID given an AddExampleRequest.
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param add_example_request The add example request, encapsulating minibatch details and examples batch size
    # @param [Hash] opts the optional parameters
    # @return [AddExampleRequest]
    def add_example_for_batch(model_history_server_id, add_example_request, opts = {})
      data, _status_code, _headers = add_example_for_batch_with_http_info(model_history_server_id, add_example_request, opts)
      data
    end

    # Adds a number of examples to a minibatch ID given an AddExampleRequest.
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param add_example_request The add example request, encapsulating minibatch details and examples batch size
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddExampleRequest, Fixnum, Hash)>] AddExampleRequest data, response status code and response headers
    def add_example_for_batch_with_http_info(model_history_server_id, add_example_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_example_for_batch ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.add_example_for_batch"
      end
      # verify the required parameter 'add_example_request' is set
      if @api_client.config.client_side_validation && add_example_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_example_request' when calling DefaultApi.add_example_for_batch"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/exampleForBatch'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_example_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddExampleRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_example_for_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds an example to a minibatch
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param example_entity The example to add to the minibatch
    # @param [Hash] opts the optional parameters
    # @return [ExampleEntity]
    def add_example_to_minibatch(model_history_server_id, example_entity, opts = {})
      data, _status_code, _headers = add_example_to_minibatch_with_http_info(model_history_server_id, example_entity, opts)
      data
    end

    # Adds an example to a minibatch
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param example_entity The example to add to the minibatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExampleEntity, Fixnum, Hash)>] ExampleEntity data, response status code and response headers
    def add_example_to_minibatch_with_http_info(model_history_server_id, example_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_example_to_minibatch ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.add_example_to_minibatch"
      end
      # verify the required parameter 'example_entity' is set
      if @api_client.config.client_side_validation && example_entity.nil?
        fail ArgumentError, "Missing the required parameter 'example_entity' when calling DefaultApi.add_example_to_minibatch"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/example'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(example_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExampleEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_example_to_minibatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add an experiment, given an experiment entity
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_entity The experiment entity to add
    # @param [Hash] opts the optional parameters
    # @return [ExperimentEntity]
    def add_experiment(model_history_server_id, experiment_entity, opts = {})
      data, _status_code, _headers = add_experiment_with_http_info(model_history_server_id, experiment_entity, opts)
      data
    end

    # Add an experiment, given an experiment entity
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_entity The experiment entity to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExperimentEntity, Fixnum, Hash)>] ExperimentEntity data, response status code and response headers
    def add_experiment_with_http_info(model_history_server_id, experiment_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_experiment ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.add_experiment"
      end
      # verify the required parameter 'experiment_entity' is set
      if @api_client.config.client_side_validation && experiment_entity.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_entity' when calling DefaultApi.add_experiment"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiment'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(experiment_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExperimentEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param id Batch ID to retrain the model with and get feedback for.
    # @param type The type of the labels array.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The labels file to upload.
    # @return [FeedbackResponse]
    def add_feedback_binary(id, type, opts = {})
      data, _status_code, _headers = add_feedback_binary_with_http_info(id, type, opts)
      data
    end

    # @param id Batch ID to retrain the model with and get feedback for.
    # @param type The type of the labels array.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The labels file to upload.
    # @return [Array<(FeedbackResponse, Fixnum, Hash)>] FeedbackResponse data, response status code and response headers
    def add_feedback_binary_with_http_info(id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_feedback_binary ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.add_feedback_binary"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DefaultApi.add_feedback_binary"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['numpy', 'nd4j'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of numpy, nd4j"
      end
      # resource path
      local_var_path = '/feedback/{id}/{type}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'type' + '}', type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FeedbackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_feedback_binary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the retraining feedback for the given batch ID.
    # @param id Batch ID to retrain the model with and get feedback for.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Array<Float>>] :labels The associated labels (one-hot vectors) with the batch for retraining.
    # @return [FeedbackResponse]
    def add_feedback_json(id, opts = {})
      data, _status_code, _headers = add_feedback_json_with_http_info(id, opts)
      data
    end

    # Gets the retraining feedback for the given batch ID.
    # @param id Batch ID to retrain the model with and get feedback for.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Array<Float>>] :labels The associated labels (one-hot vectors) with the batch for retraining.
    # @return [Array<(FeedbackResponse, Fixnum, Hash)>] FeedbackResponse data, response status code and response headers
    def add_feedback_json_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_feedback_json ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.add_feedback_json"
      end
      # resource path
      local_var_path = '/feedback/{id}/json'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'labels'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FeedbackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_feedback_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a minibatch
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param minibatch_entity The minibatch entity to add
    # @param [Hash] opts the optional parameters
    # @return [MinibatchEntity]
    def add_minibatch(model_history_server_id, minibatch_entity, opts = {})
      data, _status_code, _headers = add_minibatch_with_http_info(model_history_server_id, minibatch_entity, opts)
      data
    end

    # Adds a minibatch
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param minibatch_entity The minibatch entity to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(MinibatchEntity, Fixnum, Hash)>] MinibatchEntity data, response status code and response headers
    def add_minibatch_with_http_info(model_history_server_id, minibatch_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_minibatch ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.add_minibatch"
      end
      # verify the required parameter 'minibatch_entity' is set
      if @api_client.config.client_side_validation && minibatch_entity.nil?
        fail ArgumentError, "Missing the required parameter 'minibatch_entity' when calling DefaultApi.add_minibatch"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/minibatch'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(minibatch_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MinibatchEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_minibatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds an evaluation feedback to the model against a given minibatch id.
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_feed_back_request The model feedback request object
    # @param [Hash] opts the optional parameters
    # @return [ModelFeedBackRequest]
    def add_model_feedback(model_history_server_id, model_feed_back_request, opts = {})
      data, _status_code, _headers = add_model_feedback_with_http_info(model_history_server_id, model_feed_back_request, opts)
      data
    end

    # Adds an evaluation feedback to the model against a given minibatch id.
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_feed_back_request The model feedback request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelFeedBackRequest, Fixnum, Hash)>] ModelFeedBackRequest data, response status code and response headers
    def add_model_feedback_with_http_info(model_history_server_id, model_feed_back_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_model_feedback ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.add_model_feedback"
      end
      # verify the required parameter 'model_feed_back_request' is set
      if @api_client.config.client_side_validation && model_feed_back_request.nil?
        fail ArgumentError, "Missing the required parameter 'model_feed_back_request' when calling DefaultApi.add_model_feedback"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/feedback'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model_feed_back_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelFeedBackRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_model_feedback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param add_model_history_request The model history request object
    # @param [Hash] opts the optional parameters
    # @return [ModelHistoryEntity]
    def add_model_history(model_history_server_id, add_model_history_request, opts = {})
      data, _status_code, _headers = add_model_history_with_http_info(model_history_server_id, add_model_history_request, opts)
      data
    end

    # Add a model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param add_model_history_request The model history request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelHistoryEntity, Fixnum, Hash)>] ModelHistoryEntity data, response status code and response headers
    def add_model_history_with_http_info(model_history_server_id, add_model_history_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_model_history ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.add_model_history"
      end
      # verify the required parameter 'add_model_history_request' is set
      if @api_client.config.client_side_validation && add_model_history_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_model_history_request' when calling DefaultApi.add_model_history"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/modelhistory'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_model_history_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelHistoryEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_model_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a model
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_entity The object encapsulating the model instance id and evaluation type to aggregate
    # @param [Hash] opts the optional parameters
    # @return [ModelInstanceEntity]
    def add_model_instance(model_history_server_id, model_instance_entity, opts = {})
      data, _status_code, _headers = add_model_instance_with_http_info(model_history_server_id, model_instance_entity, opts)
      data
    end

    # Adds a model
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_entity The object encapsulating the model instance id and evaluation type to aggregate
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelInstanceEntity, Fixnum, Hash)>] ModelInstanceEntity data, response status code and response headers
    def add_model_instance_with_http_info(model_history_server_id, model_instance_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_model_instance ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.add_model_instance"
      end
      # verify the required parameter 'model_instance_entity' is set
      if @api_client.config.client_side_validation && model_instance_entity.nil?
        fail ArgumentError, "Missing the required parameter 'model_instance_entity' when calling DefaultApi.add_model_instance"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model_instance_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelInstanceEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_model_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a resource
    # @param add_resource_request The Add resource request object
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def add_resource(add_resource_request, opts = {})
      data, _status_code, _headers = add_resource_with_http_info(add_resource_request, opts)
      data
    end

    # Adds a resource
    # @param add_resource_request The Add resource request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def add_resource_with_http_info(add_resource_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_resource ...'
      end
      # verify the required parameter 'add_resource_request' is set
      if @api_client.config.client_side_validation && add_resource_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_request' when calling DefaultApi.add_resource"
      end
      # resource path
      local_var_path = '/resources/add/resource'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_resource_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a resource group
    # @param group_name Name of the resource group
    # @param [Hash] opts the optional parameters
    # @return [ResourceGroup]
    def add_resource_group(group_name, opts = {})
      data, _status_code, _headers = add_resource_group_with_http_info(group_name, opts)
      data
    end

    # Adds a resource group
    # @param group_name Name of the resource group
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceGroup, Fixnum, Hash)>] ResourceGroup data, response status code and response headers
    def add_resource_group_with_http_info(group_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_resource_group ...'
      end
      # verify the required parameter 'group_name' is set
      if @api_client.config.client_side_validation && group_name.nil?
        fail ArgumentError, "Missing the required parameter 'group_name' when calling DefaultApi.add_resource_group"
      end
      # resource path
      local_var_path = '/resources/add/group'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group_name)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_resource_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a resource to a resource group
    # @param resource_group_id ID of the resource group
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_resource_to_group(resource_group_id, resource_id, opts = {})
      add_resource_to_group_with_http_info(resource_group_id, resource_id, opts)
      nil
    end

    # Adds a resource to a resource group
    # @param resource_group_id ID of the resource group
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_resource_to_group_with_http_info(resource_group_id, resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_resource_to_group ...'
      end
      # verify the required parameter 'resource_group_id' is set
      if @api_client.config.client_side_validation && resource_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_group_id' when calling DefaultApi.add_resource_to_group"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling DefaultApi.add_resource_to_group"
      end
      # resource path
      local_var_path = '/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}'.sub('{' + 'resourceGroupId' + '}', resource_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_resource_to_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Aggregates the evaluaition results of a model instance, based on the evaluation type
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param aggregate_prediction The object encapsulating the model instance id and evaluation type to aggregate
    # @param [Hash] opts the optional parameters
    # @return [EvaluationResultsEntity]
    def aggregate_model_results(model_history_server_id, aggregate_prediction, opts = {})
      data, _status_code, _headers = aggregate_model_results_with_http_info(model_history_server_id, aggregate_prediction, opts)
      data
    end

    # Aggregates the evaluaition results of a model instance, based on the evaluation type
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param aggregate_prediction The object encapsulating the model instance id and evaluation type to aggregate
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationResultsEntity, Fixnum, Hash)>] EvaluationResultsEntity data, response status code and response headers
    def aggregate_model_results_with_http_info(model_history_server_id, aggregate_prediction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.aggregate_model_results ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.aggregate_model_results"
      end
      # verify the required parameter 'aggregate_prediction' is set
      if @api_client.config.client_side_validation && aggregate_prediction.nil?
        fail ArgumentError, "Missing the required parameter 'aggregate_prediction' when calling DefaultApi.aggregate_model_results"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/aggregateresults'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregate_prediction)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationResultsEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#aggregate_model_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change user's password
    # @param user_id User&#39;s ID
    # @param change_password_request Password details.
    # @param [Hash] opts the optional parameters
    # @return [User]
    def change_user_password(user_id, change_password_request, opts = {})
      data, _status_code, _headers = change_user_password_with_http_info(user_id, change_password_request, opts)
      data
    end

    # Change user&#39;s password
    # @param user_id User&#39;s ID
    # @param change_password_request Password details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def change_user_password_with_http_info(user_id, change_password_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.change_user_password ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.change_user_password"
      end
      # verify the required parameter 'change_password_request' is set
      if @api_client.config.client_side_validation && change_password_request.nil?
        fail ArgumentError, "Missing the required parameter 'change_password_request' when calling DefaultApi.change_user_password"
      end
      # resource path
      local_var_path = '/user/{userId}/password'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(change_password_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#change_user_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use the deployed model to classify the input
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [ClassificationResult]
    def classify(body, deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = classify_with_http_info(body, deployment_name, version_name, model_name, opts)
      data
    end

    # Use the deployed model to classify the input
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClassificationResult, Fixnum, Hash)>] ClassificationResult data, response status code and response headers
    def classify_with_http_info(body, deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.classify ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.classify"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.classify"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.classify"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.classify"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/classify'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClassificationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Same as /classify but returns the output as Base64NDArrayBody
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Base64NDArrayBody]
    def classifyarray(body, deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = classifyarray_with_http_info(body, deployment_name, version_name, model_name, opts)
      data
    end

    # Same as /classify but returns the output as Base64NDArrayBody
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(Base64NDArrayBody, Fixnum, Hash)>] Base64NDArrayBody data, response status code and response headers
    def classifyarray_with_http_info(body, deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.classifyarray ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.classifyarray"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.classifyarray"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.classifyarray"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.classifyarray"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64NDArrayBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classifyarray\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Use the deployed model to classify the input, using input image file from multipart form data.
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The file to upload.
    # @return [ClassificationResult]
    def classifyimage(deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = classifyimage_with_http_info(deployment_name, version_name, model_name, opts)
      data
    end

    # Use the deployed model to classify the input, using input image file from multipart form data.
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The file to upload.
    # @return [Array<(ClassificationResult, Fixnum, Hash)>] ClassificationResult data, response status code and response headers
    def classifyimage_with_http_info(deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.classifyimage ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.classifyimage"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.classifyimage"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.classifyimage"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['image'] = opts[:'image'] if !opts[:'image'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClassificationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classifyimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Clears the accumulated data for retraining.
    # @param [Hash] opts the optional parameters
    # @return [FeedbackResponse]
    def clear_state(opts = {})
      data, _status_code, _headers = clear_state_with_http_info(opts)
      data
    end

    # Clears the accumulated data for retraining.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeedbackResponse, Fixnum, Hash)>] FeedbackResponse data, response status code and response headers
    def clear_state_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.clear_state ...'
      end
      # resource path
      local_var_path = '/clear'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FeedbackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#clear_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a job
    # @param job_id_or_type Job Type
    # @param create_job_request Create job request object
    # @param [Hash] opts the optional parameters
    # @return [JobEntity]
    def create_job(job_id_or_type, create_job_request, opts = {})
      data, _status_code, _headers = create_job_with_http_info(job_id_or_type, create_job_request, opts)
      data
    end

    # Create a job
    # @param job_id_or_type Job Type
    # @param create_job_request Create job request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobEntity, Fixnum, Hash)>] JobEntity data, response status code and response headers
    def create_job_with_http_info(job_id_or_type, create_job_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_job ...'
      end
      # verify the required parameter 'job_id_or_type' is set
      if @api_client.config.client_side_validation && job_id_or_type.nil?
        fail ArgumentError, "Missing the required parameter 'job_id_or_type' when calling DefaultApi.create_job"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['TRAINING', 'INFERENCE'].include?(job_id_or_type)
        fail ArgumentError, "invalid value for 'job_id_or_type', must be one of TRAINING, INFERENCE"
      end
      # verify the required parameter 'create_job_request' is set
      if @api_client.config.client_side_validation && create_job_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_job_request' when calling DefaultApi.create_job"
      end
      # resource path
      local_var_path = '/jobs/{jobIdOrType}'.sub('{' + 'jobIdOrType' + '}', job_id_or_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_job_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates model History
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_entity The model history entity
    # @param [Hash] opts the optional parameters
    # @return [ModelHistoryEntity]
    def create_model_history(model_history_server_id, model_history_entity, opts = {})
      data, _status_code, _headers = create_model_history_with_http_info(model_history_server_id, model_history_entity, opts)
      data
    end

    # Creates model History
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_entity The model history entity
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelHistoryEntity, Fixnum, Hash)>] ModelHistoryEntity data, response status code and response headers
    def create_model_history_with_http_info(model_history_server_id, model_history_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_model_history ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.create_model_history"
      end
      # verify the required parameter 'model_history_entity' is set
      if @api_client.config.client_side_validation && model_history_entity.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_entity' when calling DefaultApi.create_model_history"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/revisions'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model_history_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelHistoryEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_model_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete credentials given an ID
    # @param credential_id Credentials ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_credentials_by_id(credential_id, opts = {})
      delete_credentials_by_id_with_http_info(credential_id, opts)
      nil
    end

    # Delete credentials given an ID
    # @param credential_id Credentials ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_credentials_by_id_with_http_info(credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_credentials_by_id ...'
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling DefaultApi.delete_credentials_by_id"
      end
      # resource path
      local_var_path = '/resources/credentials/{credentialId}'.sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_credentials_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an experiment, given an experiment entity
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment to delete
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def delete_experiment(model_history_server_id, experiment_id, opts = {})
      data, _status_code, _headers = delete_experiment_with_http_info(model_history_server_id, experiment_id, opts)
      data
    end

    # Deletes an experiment, given an experiment entity
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def delete_experiment_with_http_info(model_history_server_id, experiment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_experiment ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.delete_experiment"
      end
      # verify the required parameter 'experiment_id' is set
      if @api_client.config.client_side_validation && experiment_id.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_id' when calling DefaultApi.delete_experiment"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiment/{experimentID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'experimentID' + '}', experiment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a job given its ID
    # @param job_id_or_type Job ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_job_by_id(job_id_or_type, opts = {})
      delete_job_by_id_with_http_info(job_id_or_type, opts)
      nil
    end

    # Deletes a job given its ID
    # @param job_id_or_type Job ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_job_by_id_with_http_info(job_id_or_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_job_by_id ...'
      end
      # verify the required parameter 'job_id_or_type' is set
      if @api_client.config.client_side_validation && job_id_or_type.nil?
        fail ArgumentError, "Missing the required parameter 'job_id_or_type' when calling DefaultApi.delete_job_by_id"
      end
      # resource path
      local_var_path = '/jobs/{jobIdOrType}'.sub('{' + 'jobIdOrType' + '}', job_id_or_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_job_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a model by deployment and model id
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def delete_model(deployment_id, model_id, opts = {})
      data, _status_code, _headers = delete_model_with_http_info(deployment_id, model_id, opts)
      data
    end

    # Delete a model by deployment and model id
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def delete_model_with_http_info(deployment_id, model_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_model ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.delete_model"
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling DefaultApi.delete_model"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}/model/{modelId}'.sub('{' + 'deploymentId' + '}', deployment_id.to_s).sub('{' + 'modelId' + '}', model_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a model history / workspace, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id the GUID of the model history / workspace to delete
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def delete_model_history(model_history_server_id, model_history_id, opts = {})
      data, _status_code, _headers = delete_model_history_with_http_info(model_history_server_id, model_history_id, opts)
      data
    end

    # Deletes a model history / workspace, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id the GUID of the model history / workspace to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def delete_model_history_with_http_info(model_history_server_id, model_history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_model_history ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.delete_model_history"
      end
      # verify the required parameter 'model_history_id' is set
      if @api_client.config.client_side_validation && model_history_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_id' when calling DefaultApi.delete_model_history"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelHistoryID' + '}', model_history_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_model_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a model instance, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_id GUID of the model instance to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_model_instance(model_history_server_id, model_instance_id, opts = {})
      delete_model_instance_with_http_info(model_history_server_id, model_instance_id, opts)
      nil
    end

    # Deletes a model instance, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_id GUID of the model instance to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_model_instance_with_http_info(model_history_server_id, model_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_model_instance ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.delete_model_instance"
      end
      # verify the required parameter 'model_instance_id' is set
      if @api_client.config.client_side_validation && model_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_instance_id' when calling DefaultApi.delete_model_instance"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/{modelInstanceID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelInstanceID' + '}', model_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_model_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the resource with the specified resource ID
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Resource]
    def delete_resource_by_id(resource_id, opts = {})
      data, _status_code, _headers = delete_resource_by_id_with_http_info(resource_id, opts)
      data
    end

    # Delete the resource with the specified resource ID
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Resource, Fixnum, Hash)>] Resource data, response status code and response headers
    def delete_resource_by_id_with_http_info(resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_resource_by_id ...'
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling DefaultApi.delete_resource_by_id"
      end
      # resource path
      local_var_path = '/resources/remove/resource/{resourceId}'.sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Resource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_resource_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Removes a resource from a resource group
    # @param resource_group_id ID of the resource group
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_resource_from_group(resource_group_id, resource_id, opts = {})
      delete_resource_from_group_with_http_info(resource_group_id, resource_id, opts)
      nil
    end

    # Removes a resource from a resource group
    # @param resource_group_id ID of the resource group
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_resource_from_group_with_http_info(resource_group_id, resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_resource_from_group ...'
      end
      # verify the required parameter 'resource_group_id' is set
      if @api_client.config.client_side_validation && resource_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_group_id' when calling DefaultApi.delete_resource_from_group"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling DefaultApi.delete_resource_from_group"
      end
      # resource path
      local_var_path = '/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}'.sub('{' + 'resourceGroupId' + '}', resource_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_resource_from_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the resource group with the specified resource group ID
    # @param resource_group_id ID of the resource group
    # @param [Hash] opts the optional parameters
    # @return [ResourceGroup]
    def delete_resource_group_by_id(resource_group_id, opts = {})
      data, _status_code, _headers = delete_resource_group_by_id_with_http_info(resource_group_id, opts)
      data
    end

    # Delete the resource group with the specified resource group ID
    # @param resource_group_id ID of the resource group
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceGroup, Fixnum, Hash)>] ResourceGroup data, response status code and response headers
    def delete_resource_group_by_id_with_http_info(resource_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_resource_group_by_id ...'
      end
      # verify the required parameter 'resource_group_id' is set
      if @api_client.config.client_side_validation && resource_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_group_id' when calling DefaultApi.delete_resource_group_by_id"
      end
      # resource path
      local_var_path = '/resources/remove/group/{resourceGroupId}'.sub('{' + 'resourceGroupId' + '}', resource_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_resource_group_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deploy a model in a deployment group.
    # @param deployment_id ID deployment group
    # @param body the model import request
    # @param [Hash] opts the optional parameters
    # @return [ModelEntity]
    def deploy_model(deployment_id, body, opts = {})
      data, _status_code, _headers = deploy_model_with_http_info(deployment_id, body, opts)
      data
    end

    # Deploy a model in a deployment group.
    # @param deployment_id ID deployment group
    # @param body the model import request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelEntity, Fixnum, Hash)>] ModelEntity data, response status code and response headers
    def deploy_model_with_http_info(deployment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.deploy_model ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.deploy_model"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.deploy_model"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}/model'.sub('{' + 'deploymentId' + '}', deployment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#deploy_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new deployment group.
    # @param body the deployment request
    # @param [Hash] opts the optional parameters
    # @return [DeploymentResponse]
    def deployment_create(body, opts = {})
      data, _status_code, _headers = deployment_create_with_http_info(body, opts)
      data
    end

    # Create a new deployment group.
    # @param body the deployment request
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentResponse, Fixnum, Hash)>] DeploymentResponse data, response status code and response headers
    def deployment_create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.deployment_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.deployment_create"
      end
      # resource path
      local_var_path = '/deployment'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#deployment_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a deployment by id
    # @param deployment_id Id of the deployment group
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def deployment_delete(deployment_id, opts = {})
      data, _status_code, _headers = deployment_delete_with_http_info(deployment_id, opts)
      data
    end

    # Delete a deployment by id
    # @param deployment_id Id of the deployment group
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def deployment_delete_with_http_info(deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.deployment_delete ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.deployment_delete"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}'.sub('{' + 'deploymentId' + '}', deployment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#deployment_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a deployment details by id
    # @param deployment_id Id of the deployment group
    # @param [Hash] opts the optional parameters
    # @return [DeploymentResponse]
    def deployment_get(deployment_id, opts = {})
      data, _status_code, _headers = deployment_get_with_http_info(deployment_id, opts)
      data
    end

    # Get a deployment details by id
    # @param deployment_id Id of the deployment group
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentResponse, Fixnum, Hash)>] DeploymentResponse data, response status code and response headers
    def deployment_get_with_http_info(deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.deployment_get ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.deployment_get"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}'.sub('{' + 'deploymentId' + '}', deployment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#deployment_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of deployments
    # @param [Hash] opts the optional parameters
    # @return [Array<DeploymentResponse>]
    def deployments(opts = {})
      data, _status_code, _headers = deployments_with_http_info(opts)
      data
    end

    # Get a list of deployments
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DeploymentResponse>, Fixnum, Hash)>] Array<DeploymentResponse> data, response status code and response headers
    def deployments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.deployments ...'
      end
      # resource path
      local_var_path = '/deployments'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DeploymentResponse>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#deployments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Detect the objects, given a (input) prediction request
    # @param id the GUID for mapping the results in the detections
    # @param needs_preprocessing (true) if the image needs preprocessing
    # @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.
    # @param file the image file to detect objects from
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [DetectionResult]
    def detectobjects(id, needs_preprocessing, threshold, file, deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = detectobjects_with_http_info(id, needs_preprocessing, threshold, file, deployment_name, version_name, model_name, opts)
      data
    end

    # Detect the objects, given a (input) prediction request
    # @param id the GUID for mapping the results in the detections
    # @param needs_preprocessing (true) if the image needs preprocessing
    # @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.
    # @param file the image file to detect objects from
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetectionResult, Fixnum, Hash)>] DetectionResult data, response status code and response headers
    def detectobjects_with_http_info(id, needs_preprocessing, threshold, file, deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.detectobjects ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.detectobjects"
      end
      # verify the required parameter 'needs_preprocessing' is set
      if @api_client.config.client_side_validation && needs_preprocessing.nil?
        fail ArgumentError, "Missing the required parameter 'needs_preprocessing' when calling DefaultApi.detectobjects"
      end
      # verify the required parameter 'threshold' is set
      if @api_client.config.client_side_validation && threshold.nil?
        fail ArgumentError, "Missing the required parameter 'threshold' when calling DefaultApi.detectobjects"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DefaultApi.detectobjects"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.detectobjects"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.detectobjects"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.detectobjects"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['id'] = id
      form_params['needsPreprocessing'] = needs_preprocessing
      form_params['threshold'] = threshold
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetectionResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#detectobjects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download the output file from the job's execution. This will ONLY work if the job's run status is 'COMPLETE'.
    # @param job_id Job ID
    # @param download_output_file_request Download output file request object
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_job_output_file(job_id, download_output_file_request, opts = {})
      download_job_output_file_with_http_info(job_id, download_output_file_request, opts)
      nil
    end

    # Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
    # @param job_id Job ID
    # @param download_output_file_request Download output file request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_job_output_file_with_http_info(job_id, download_output_file_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.download_job_output_file ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.download_job_output_file"
      end
      # verify the required parameter 'download_output_file_request' is set
      if @api_client.config.client_side_validation && download_output_file_request.nil?
        fail ArgumentError, "Missing the required parameter 'download_output_file_request' when calling DefaultApi.download_job_output_file"
      end
      # resource path
      local_var_path = '/jobs/{jobId}/outputfile'.sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(download_output_file_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#download_job_output_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate new auth token
    # @param token_generate_request Auth token details.
    # @param [Hash] opts the optional parameters
    # @return [Token]
    def generate_auth_token(token_generate_request, opts = {})
      data, _status_code, _headers = generate_auth_token_with_http_info(token_generate_request, opts)
      data
    end

    # Generate new auth token
    # @param token_generate_request Auth token details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Token, Fixnum, Hash)>] Token data, response status code and response headers
    def generate_auth_token_with_http_info(token_generate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.generate_auth_token ...'
      end
      # verify the required parameter 'token_generate_request' is set
      if @api_client.config.client_side_validation && token_generate_request.nil?
        fail ArgumentError, "Missing the required parameter 'token_generate_request' when calling DefaultApi.generate_auth_token"
      end
      # resource path
      local_var_path = '/auth/token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(token_generate_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Token')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#generate_auth_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of all available jobs
    # @param [Hash] opts the optional parameters
    # @return [Array<JobEntity>]
    def get_all_jobs(opts = {})
      data, _status_code, _headers = get_all_jobs_with_http_info(opts)
      data
    end

    # Get a list of all available jobs
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<JobEntity>, Fixnum, Hash)>] Array<JobEntity> data, response status code and response headers
    def get_all_jobs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_all_jobs ...'
      end
      # resource path
      local_var_path = '/jobs'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<JobEntity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_all_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the memory mapped array based on the array type.
    # The array is specified through a file path, in the configuration object, during model server deployment.
    # @param accept 
    # @param array_type The format in which the memory mapped array is returned.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_array(accept, array_type, opts = {})
      get_array_with_http_info(accept, array_type, opts)
      nil
    end

    # Get the memory mapped array based on the array type.
    # The array is specified through a file path, in the configuration object, during model server deployment.
    # @param accept 
    # @param array_type The format in which the memory mapped array is returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_array_with_http_info(accept, array_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_array ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling DefaultApi.get_array"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['application/json', 'application/octet-stream'].include?(accept)
        fail ArgumentError, "invalid value for 'accept', must be one of application/json, application/octet-stream"
      end
      # verify the required parameter 'array_type' is set
      if @api_client.config.client_side_validation && array_type.nil?
        fail ArgumentError, "Missing the required parameter 'array_type' when calling DefaultApi.get_array"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'numpy', 'nd4j'].include?(array_type)
        fail ArgumentError, "invalid value for 'array_type', must be one of json, numpy, nd4j"
      end
      # resource path
      local_var_path = '/array/{arrayType}'.sub('{' + 'arrayType' + '}', array_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/octet-stream'])
      header_params[:'accept'] = accept

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_array\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the memory mapped array indices based on the array type.
    # @param content_type The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.
    # @param accept 
    # @param array_type Format in which the memory mapped array is returned in.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :input Input indices array
    # @return [nil]
    def get_array_indices(content_type, accept, array_type, opts = {})
      get_array_indices_with_http_info(content_type, accept, array_type, opts)
      nil
    end

    # Get the memory mapped array indices based on the array type.
    # @param content_type The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.
    # @param accept 
    # @param array_type Format in which the memory mapped array is returned in.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :input Input indices array
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_array_indices_with_http_info(content_type, accept, array_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_array_indices ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling DefaultApi.get_array_indices"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['application/json'].include?(content_type)
        fail ArgumentError, "invalid value for 'content_type', must be one of application/json"
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling DefaultApi.get_array_indices"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['application/json', 'application/octet-stream'].include?(accept)
        fail ArgumentError, "invalid value for 'accept', must be one of application/json, application/octet-stream"
      end
      # verify the required parameter 'array_type' is set
      if @api_client.config.client_side_validation && array_type.nil?
        fail ArgumentError, "Missing the required parameter 'array_type' when calling DefaultApi.get_array_indices"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'numpy', 'nd4j'].include?(array_type)
        fail ArgumentError, "invalid value for 'array_type', must be one of json, numpy, nd4j"
      end
      # resource path
      local_var_path = '/array/indices/{arrayType}'.sub('{' + 'arrayType' + '}', array_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])
      header_params[:'Content-Type'] = content_type
      header_params[:'accept'] = accept

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'input'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_array_indices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the memory mapped array within a range based on the array type.
    # @param accept 
    # @param array_type Format in which the memory mapped array is returned in.
    # @param from 
    # @param to 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_array_range(accept, array_type, from, to, opts = {})
      get_array_range_with_http_info(accept, array_type, from, to, opts)
      nil
    end

    # Get the memory mapped array within a range based on the array type.
    # @param accept 
    # @param array_type Format in which the memory mapped array is returned in.
    # @param from 
    # @param to 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_array_range_with_http_info(accept, array_type, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_array_range ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling DefaultApi.get_array_range"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['application/json', 'application/octet-stream'].include?(accept)
        fail ArgumentError, "invalid value for 'accept', must be one of application/json, application/octet-stream"
      end
      # verify the required parameter 'array_type' is set
      if @api_client.config.client_side_validation && array_type.nil?
        fail ArgumentError, "Missing the required parameter 'array_type' when calling DefaultApi.get_array_range"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'numpy', 'nd4j'].include?(array_type)
        fail ArgumentError, "invalid value for 'array_type', must be one of json, numpy, nd4j"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling DefaultApi.get_array_range"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling DefaultApi.get_array_range"
      end
      # resource path
      local_var_path = '/array/range/{from}/{to}/{arrayType}'.sub('{' + 'arrayType' + '}', array_type.to_s).sub('{' + 'from' + '}', from.to_s).sub('{' + 'to' + '}', to.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'accept'] = accept

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_array_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get auth policy
    # @param [Hash] opts the optional parameters
    # @return [AuthPolicy]
    def get_auth_policy(opts = {})
      data, _status_code, _headers = get_auth_policy_with_http_info(opts)
      data
    end

    # Get auth policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthPolicy, Fixnum, Hash)>] AuthPolicy data, response status code and response headers
    def get_auth_policy_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_auth_policy ...'
      end
      # resource path
      local_var_path = '/auth/policy'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AuthPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_auth_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the best model among the given model instance IDs, based on the evaluation type and column metric
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param best_model Object encapsulating the model ids, eval type and column metric name
    # @param [Hash] opts the optional parameters
    # @return [ModelInstanceEntity]
    def get_best_model_among_model_ids(model_history_server_id, best_model, opts = {})
      data, _status_code, _headers = get_best_model_among_model_ids_with_http_info(model_history_server_id, best_model, opts)
      data
    end

    # Gets the best model among the given model instance IDs, based on the evaluation type and column metric
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param best_model Object encapsulating the model ids, eval type and column metric name
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelInstanceEntity, Fixnum, Hash)>] ModelInstanceEntity data, response status code and response headers
    def get_best_model_among_model_ids_with_http_info(model_history_server_id, best_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_best_model_among_model_ids ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.get_best_model_among_model_ids"
      end
      # verify the required parameter 'best_model' is set
      if @api_client.config.client_side_validation && best_model.nil?
        fail ArgumentError, "Missing the required parameter 'best_model' when calling DefaultApi.get_best_model_among_model_ids"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/best'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(best_model)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelInstanceEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_best_model_among_model_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get credentials given an ID
    # @param credential_id Credentials ID
    # @param [Hash] opts the optional parameters
    # @return [ResourceCredentials]
    def get_credentials_by_id(credential_id, opts = {})
      data, _status_code, _headers = get_credentials_by_id_with_http_info(credential_id, opts)
      data
    end

    # Get credentials given an ID
    # @param credential_id Credentials ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceCredentials, Fixnum, Hash)>] ResourceCredentials data, response status code and response headers
    def get_credentials_by_id_with_http_info(credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_credentials_by_id ...'
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling DefaultApi.get_credentials_by_id"
      end
      # resource path
      local_var_path = '/resources/credentials/{credentialId}'.sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceCredentials')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_credentials_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the current model being used for retraining.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_current_model(opts = {})
      get_current_model_with_http_info(opts)
      nil
    end

    # Returns the current model being used for retraining.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_current_model_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_current_model ...'
      end
      # resource path
      local_var_path = '/model'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_current_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the list of evaluation results entity, given a model instance ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_id GUID of the model instance to get evaluation results for.
    # @param [Hash] opts the optional parameters
    # @return [Array<EvaluationResultsEntity>]
    def get_evaluation_for_model_id(model_history_server_id, model_instance_id, opts = {})
      data, _status_code, _headers = get_evaluation_for_model_id_with_http_info(model_history_server_id, model_instance_id, opts)
      data
    end

    # Gets the list of evaluation results entity, given a model instance ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_id GUID of the model instance to get evaluation results for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EvaluationResultsEntity>, Fixnum, Hash)>] Array<EvaluationResultsEntity> data, response status code and response headers
    def get_evaluation_for_model_id_with_http_info(model_history_server_id, model_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_evaluation_for_model_id ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.get_evaluation_for_model_id"
      end
      # verify the required parameter 'model_instance_id' is set
      if @api_client.config.client_side_validation && model_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_instance_id' when calling DefaultApi.get_evaluation_for_model_id"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelInstanceID' + '}', model_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<EvaluationResultsEntity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_evaluation_for_model_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets all the examples for a minibatch ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param minibatch_id The GUID of the minibatch
    # @param [Hash] opts the optional parameters
    # @return [Array<ExampleEntity>]
    def get_examples_for_minibatch(model_history_server_id, minibatch_id, opts = {})
      data, _status_code, _headers = get_examples_for_minibatch_with_http_info(model_history_server_id, minibatch_id, opts)
      data
    end

    # Gets all the examples for a minibatch ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param minibatch_id The GUID of the minibatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ExampleEntity>, Fixnum, Hash)>] Array<ExampleEntity> data, response status code and response headers
    def get_examples_for_minibatch_with_http_info(model_history_server_id, minibatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_examples_for_minibatch ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.get_examples_for_minibatch"
      end
      # verify the required parameter 'minibatch_id' is set
      if @api_client.config.client_side_validation && minibatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'minibatch_id' when calling DefaultApi.get_examples_for_minibatch"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/example/{minibatchId}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'minibatchId' + '}', minibatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ExampleEntity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_examples_for_minibatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtain an experiment's details, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment to obtain
    # @param [Hash] opts the optional parameters
    # @return [ExperimentEntity]
    def get_experiment(model_history_server_id, experiment_id, opts = {})
      data, _status_code, _headers = get_experiment_with_http_info(model_history_server_id, experiment_id, opts)
      data
    end

    # Obtain an experiment&#39;s details, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment to obtain
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExperimentEntity, Fixnum, Hash)>] ExperimentEntity data, response status code and response headers
    def get_experiment_with_http_info(model_history_server_id, experiment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_experiment ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.get_experiment"
      end
      # verify the required parameter 'experiment_id' is set
      if @api_client.config.client_side_validation && experiment_id.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_id' when calling DefaultApi.get_experiment"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiment/{experimentID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'experimentID' + '}', experiment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExperimentEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtain all experiments for a model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id the GUID of the model history / workspace
    # @param [Hash] opts the optional parameters
    # @return [ExperimentEntity]
    def get_experiments_for_model_history(model_history_server_id, model_history_id, opts = {})
      data, _status_code, _headers = get_experiments_for_model_history_with_http_info(model_history_server_id, model_history_id, opts)
      data
    end

    # Obtain all experiments for a model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id the GUID of the model history / workspace
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExperimentEntity, Fixnum, Hash)>] ExperimentEntity data, response status code and response headers
    def get_experiments_for_model_history_with_http_info(model_history_server_id, model_history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_experiments_for_model_history ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.get_experiments_for_model_history"
      end
      # verify the required parameter 'model_history_id' is set
      if @api_client.config.client_side_validation && model_history_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_id' when calling DefaultApi.get_experiments_for_model_history"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelHistoryID' + '}', model_history_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExperimentEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_experiments_for_model_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a job by its ID
    # @param job_id_or_type Job ID
    # @param [Hash] opts the optional parameters
    # @return [JobEntity]
    def get_job_by_id(job_id_or_type, opts = {})
      data, _status_code, _headers = get_job_by_id_with_http_info(job_id_or_type, opts)
      data
    end

    # Get a job by its ID
    # @param job_id_or_type Job ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobEntity, Fixnum, Hash)>] JobEntity data, response status code and response headers
    def get_job_by_id_with_http_info(job_id_or_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_job_by_id ...'
      end
      # verify the required parameter 'job_id_or_type' is set
      if @api_client.config.client_side_validation && job_id_or_type.nil?
        fail ArgumentError, "Missing the required parameter 'job_id_or_type' when calling DefaultApi.get_job_by_id"
      end
      # resource path
      local_var_path = '/jobs/{jobIdOrType}'.sub('{' + 'jobIdOrType' + '}', job_id_or_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_job_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the last evaluation specifications from the current model.
    # @param [Hash] opts the optional parameters
    # @return [EvaluationResultsEntity]
    def get_last_evaluation(opts = {})
      data, _status_code, _headers = get_last_evaluation_with_http_info(opts)
      data
    end

    # Get the last evaluation specifications from the current model.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationResultsEntity, Fixnum, Hash)>] EvaluationResultsEntity data, response status code and response headers
    def get_last_evaluation_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_last_evaluation ...'
      end
      # resource path
      local_var_path = '/lastevaluation'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationResultsEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_last_evaluation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets a minibatch for the model
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param minibatch_id The GUID of the minibatch
    # @param [Hash] opts the optional parameters
    # @return [MinibatchEntity]
    def get_minibatch(model_history_server_id, minibatch_id, opts = {})
      data, _status_code, _headers = get_minibatch_with_http_info(model_history_server_id, minibatch_id, opts)
      data
    end

    # Gets a minibatch for the model
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param minibatch_id The GUID of the minibatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(MinibatchEntity, Fixnum, Hash)>] MinibatchEntity data, response status code and response headers
    def get_minibatch_with_http_info(model_history_server_id, minibatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_minibatch ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.get_minibatch"
      end
      # verify the required parameter 'minibatch_id' is set
      if @api_client.config.client_side_validation && minibatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'minibatch_id' when calling DefaultApi.get_minibatch"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'minibatchId' + '}', minibatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MinibatchEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_minibatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get model details
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [ModelEntity]
    def get_model_details(deployment_id, model_id, opts = {})
      data, _status_code, _headers = get_model_details_with_http_info(deployment_id, model_id, opts)
      data
    end

    # Get model details
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelEntity, Fixnum, Hash)>] ModelEntity data, response status code and response headers
    def get_model_details_with_http_info(deployment_id, model_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_model_details ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.get_model_details"
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling DefaultApi.get_model_details"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}/model/{modelId}'.sub('{' + 'deploymentId' + '}', deployment_id.to_s).sub('{' + 'modelId' + '}', model_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_model_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets a model history, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id GUID of the model history to get information of.
    # @param [Hash] opts the optional parameters
    # @return [ModelHistoryEntity]
    def get_model_history(model_history_server_id, model_history_id, opts = {})
      data, _status_code, _headers = get_model_history_with_http_info(model_history_server_id, model_history_id, opts)
      data
    end

    # Gets a model history, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id GUID of the model history to get information of.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelHistoryEntity, Fixnum, Hash)>] ModelHistoryEntity data, response status code and response headers
    def get_model_history_with_http_info(model_history_server_id, model_history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_model_history ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.get_model_history"
      end
      # verify the required parameter 'model_history_id' is set
      if @api_client.config.client_side_validation && model_history_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_id' when calling DefaultApi.get_model_history"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelHistoryID' + '}', model_history_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelHistoryEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_model_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets a model instance, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_id GUID of the model instance to get information of.
    # @param [Hash] opts the optional parameters
    # @return [ModelInstanceEntity]
    def get_model_instance(model_history_server_id, model_instance_id, opts = {})
      data, _status_code, _headers = get_model_instance_with_http_info(model_history_server_id, model_instance_id, opts)
      data
    end

    # Gets a model instance, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_id GUID of the model instance to get information of.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelInstanceEntity, Fixnum, Hash)>] ModelInstanceEntity data, response status code and response headers
    def get_model_instance_with_http_info(model_history_server_id, model_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_model_instance ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.get_model_instance"
      end
      # verify the required parameter 'model_instance_id' is set
      if @api_client.config.client_side_validation && model_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_instance_id' when calling DefaultApi.get_model_instance"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/{modelInstanceID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelInstanceID' + '}', model_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelInstanceEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_model_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtain a list of all the models for an experiment
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment
    # @param [Hash] opts the optional parameters
    # @return [Array<ModelInstanceEntity>]
    def get_models_for_experiment(model_history_server_id, experiment_id, opts = {})
      data, _status_code, _headers = get_models_for_experiment_with_http_info(model_history_server_id, experiment_id, opts)
      data
    end

    # Obtain a list of all the models for an experiment
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ModelInstanceEntity>, Fixnum, Hash)>] Array<ModelInstanceEntity> data, response status code and response headers
    def get_models_for_experiment_with_http_info(model_history_server_id, experiment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_models_for_experiment ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.get_models_for_experiment"
      end
      # verify the required parameter 'experiment_id' is set
      if @api_client.config.client_side_validation && experiment_id.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_id' when calling DefaultApi.get_models_for_experiment"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiment/{experimentID}/models'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'experimentID' + '}', experiment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelInstanceEntity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_models_for_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the resource with the specified resource ID
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Resource]
    def get_resource_by_id(resource_id, opts = {})
      data, _status_code, _headers = get_resource_by_id_with_http_info(resource_id, opts)
      data
    end

    # Get the resource with the specified resource ID
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Resource, Fixnum, Hash)>] Resource data, response status code and response headers
    def get_resource_by_id_with_http_info(resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_resource_by_id ...'
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling DefaultApi.get_resource_by_id"
      end
      # resource path
      local_var_path = '/resources/resource/{resourceId}'.sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Resource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_resource_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all the resources with the specified resource subtype
    # @param resource_sub_type Subtype of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<Resource>]
    def get_resource_by_sub_type(resource_sub_type, opts = {})
      data, _status_code, _headers = get_resource_by_sub_type_with_http_info(resource_sub_type, opts)
      data
    end

    # Get all the resources with the specified resource subtype
    # @param resource_sub_type Subtype of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Resource>, Fixnum, Hash)>] Array<Resource> data, response status code and response headers
    def get_resource_by_sub_type_with_http_info(resource_sub_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_resource_by_sub_type ...'
      end
      # verify the required parameter 'resource_sub_type' is set
      if @api_client.config.client_side_validation && resource_sub_type.nil?
        fail ArgumentError, "Missing the required parameter 'resource_sub_type' when calling DefaultApi.get_resource_by_sub_type"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['EMR', 'S3', 'GoogleStorage', 'DataProc', 'HDInsight', 'AzureStorage', 'HDFS', 'YARN'].include?(resource_sub_type)
        fail ArgumentError, "invalid value for 'resource_sub_type', must be one of EMR, S3, GoogleStorage, DataProc, HDInsight, AzureStorage, HDFS, YARN"
      end
      # resource path
      local_var_path = '/resources/resources/subtype/{resourceSubType}'.sub('{' + 'resourceSubType' + '}', resource_sub_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Resource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_resource_by_sub_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all the resources with the specified resource type
    # @param resource_type Type of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<Resource>]
    def get_resource_by_type(resource_type, opts = {})
      data, _status_code, _headers = get_resource_by_type_with_http_info(resource_type, opts)
      data
    end

    # Get all the resources with the specified resource type
    # @param resource_type Type of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Resource>, Fixnum, Hash)>] Array<Resource> data, response status code and response headers
    def get_resource_by_type_with_http_info(resource_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_resource_by_type ...'
      end
      # verify the required parameter 'resource_type' is set
      if @api_client.config.client_side_validation && resource_type.nil?
        fail ArgumentError, "Missing the required parameter 'resource_type' when calling DefaultApi.get_resource_by_type"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['COMPUTE', 'STORAGE'].include?(resource_type)
        fail ArgumentError, "invalid value for 'resource_type', must be one of COMPUTE, STORAGE"
      end
      # resource path
      local_var_path = '/resources/resources/type/{resourceType}'.sub('{' + 'resourceType' + '}', resource_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Resource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_resource_by_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the resource details with the specified resource ID
    # Get the details for the resource, for the given ID. Note that a 'ResourceDetails' object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the 'Resource' object contains only general information (name, id, type, subtype). 
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_resource_details_by_id(resource_id, opts = {})
      data, _status_code, _headers = get_resource_details_by_id_with_http_info(resource_id, opts)
      data
    end

    # Get the resource details with the specified resource ID
    # Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_resource_details_by_id_with_http_info(resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_resource_details_by_id ...'
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling DefaultApi.get_resource_details_by_id"
      end
      # resource path
      local_var_path = '/resources/details/{resourceId}'.sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_resource_details_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the resource group with the specified resource group ID
    # @param resource_group_id ID of the resource group
    # @param [Hash] opts the optional parameters
    # @return [ResourceGroup]
    def get_resource_group_by_id(resource_group_id, opts = {})
      data, _status_code, _headers = get_resource_group_by_id_with_http_info(resource_group_id, opts)
      data
    end

    # Get the resource group with the specified resource group ID
    # @param resource_group_id ID of the resource group
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceGroup, Fixnum, Hash)>] ResourceGroup data, response status code and response headers
    def get_resource_group_by_id_with_http_info(resource_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_resource_group_by_id ...'
      end
      # verify the required parameter 'resource_group_id' is set
      if @api_client.config.client_side_validation && resource_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_group_id' when calling DefaultApi.get_resource_group_by_id"
      end
      # resource path
      local_var_path = '/resources/group/{resourceGroupId}'.sub('{' + 'resourceGroupId' + '}', resource_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_resource_group_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of all the resource groups
    # @param [Hash] opts the optional parameters
    # @return [Array<ResourceGroup>]
    def get_resource_groups(opts = {})
      data, _status_code, _headers = get_resource_groups_with_http_info(opts)
      data
    end

    # Get a list of all the resource groups
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ResourceGroup>, Fixnum, Hash)>] Array<ResourceGroup> data, response status code and response headers
    def get_resource_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_resource_groups ...'
      end
      # resource path
      local_var_path = '/resources/groups'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ResourceGroup>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_resource_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # A list of all known/registered resources, of all types
    # @param [Hash] opts the optional parameters
    # @return [Array<Resource>]
    def get_resources(opts = {})
      data, _status_code, _headers = get_resources_with_http_info(opts)
      data
    end

    # A list of all known/registered resources, of all types
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Resource>, Fixnum, Hash)>] Array<Resource> data, response status code and response headers
    def get_resources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_resources ...'
      end
      # resource path
      local_var_path = '/resources/resources'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Resource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all resources from a resource group
    # @param resource_group_id ID of the resource group
    # @param [Hash] opts the optional parameters
    # @return [Array<Resource>]
    def get_resources_from_group(resource_group_id, opts = {})
      data, _status_code, _headers = get_resources_from_group_with_http_info(resource_group_id, opts)
      data
    end

    # Get all resources from a resource group
    # @param resource_group_id ID of the resource group
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Resource>, Fixnum, Hash)>] Array<Resource> data, response status code and response headers
    def get_resources_from_group_with_http_info(resource_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_resources_from_group ...'
      end
      # verify the required parameter 'resource_group_id' is set
      if @api_client.config.client_side_validation && resource_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_group_id' when calling DefaultApi.get_resources_from_group"
      end
      # resource path
      local_var_path = '/resources/group/{resourceGroupId}/resources'.sub('{' + 'resourceGroupId' + '}', resource_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Resource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_resources_from_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all roles.
    # @param [Hash] opts the optional parameters
    # @return [Array<Role>]
    def get_roles(opts = {})
      data, _status_code, _headers = get_roles_with_http_info(opts)
      data
    end

    # Get all roles.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Role>, Fixnum, Hash)>] Array<Role> data, response status code and response headers
    def get_roles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_roles ...'
      end
      # resource path
      local_var_path = '/security/roles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Role>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a user by user ID
    # @param user_id User&#39;s ID
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_user(user_id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(user_id, opts)
      data
    end

    # Get a user by user ID
    # @param user_id User&#39;s ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def get_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.get_user"
      end
      # resource path
      local_var_path = '/user/{userId}'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get auth tokens for a user.
    # @param user_id User&#39;s ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :only_valid True if you only want the valid tokens.
    # @return [Array<Token>]
    def get_user_auth_tokens(user_id, opts = {})
      data, _status_code, _headers = get_user_auth_tokens_with_http_info(user_id, opts)
      data
    end

    # Get auth tokens for a user.
    # @param user_id User&#39;s ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :only_valid True if you only want the valid tokens.
    # @return [Array<(Array<Token>, Fixnum, Hash)>] Array<Token> data, response status code and response headers
    def get_user_auth_tokens_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_user_auth_tokens ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.get_user_auth_tokens"
      end
      # resource path
      local_var_path = '/auth/{userId}/tokens'.sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'onlyValid'] = opts[:'only_valid'] if !opts[:'only_valid'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Token>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_user_auth_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all users.
    # @param [Hash] opts the optional parameters
    # @return [Array<User>]
    def get_users(opts = {})
      data, _status_code, _headers = get_users_with_http_info(opts)
      data
    end

    # Get all users.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<User>, Fixnum, Hash)>] Array<User> data, response status code and response headers
    def get_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_users ...'
      end
      # resource path
      local_var_path = '/security/users'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<User>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the retraining status
    # @param [Hash] opts the optional parameters
    # @return [RetrainingStatus]
    def is_training(opts = {})
      data, _status_code, _headers = is_training_with_http_info(opts)
      data
    end

    # Get the retraining status
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrainingStatus, Fixnum, Hash)>] RetrainingStatus data, response status code and response headers
    def is_training_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.is_training ...'
      end
      # resource path
      local_var_path = '/istraining'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RetrainingStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#is_training\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run inference on the input and returns it as a JsonArrayResponse
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [JsonArrayResponse]
    def jsonarray(body, deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = jsonarray_with_http_info(body, deployment_name, version_name, model_name, opts)
      data
    end

    # Run inference on the input and returns it as a JsonArrayResponse
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonArrayResponse, Fixnum, Hash)>] JsonArrayResponse data, response status code and response headers
    def jsonarray_with_http_info(body, deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.jsonarray ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.jsonarray"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.jsonarray"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.jsonarray"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.jsonarray"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JsonArrayResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#jsonarray\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Runs knn on the given index with the given k
    # Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param knn_name ID or name of the deployed knn
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [NearestNeighborsResults]
    def knn(deployment_name, version_name, knn_name, body, opts = {})
      data, _status_code, _headers = knn_with_http_info(deployment_name, version_name, knn_name, body, opts)
      data
    end

    # Runs knn on the given index with the given k
    # Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param knn_name ID or name of the deployed knn
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NearestNeighborsResults, Fixnum, Hash)>] NearestNeighborsResults data, response status code and response headers
    def knn_with_http_info(deployment_name, version_name, knn_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.knn ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.knn"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.knn"
      end
      # verify the required parameter 'knn_name' is set
      if @api_client.config.client_side_validation && knn_name.nil?
        fail ArgumentError, "Missing the required parameter 'knn_name' when calling DefaultApi.knn"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.knn"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'knnName' + '}', knn_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NearestNeighborsResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#knn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run a k nearest neighbors search on a NEW data point
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param knn_name ID or name of the deployed knn
    # @param body The input NDArray
    # @param [Hash] opts the optional parameters
    # @return [NearestNeighborsResults]
    def knnnew(deployment_name, version_name, knn_name, body, opts = {})
      data, _status_code, _headers = knnnew_with_http_info(deployment_name, version_name, knn_name, body, opts)
      data
    end

    # Run a k nearest neighbors search on a NEW data point
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param knn_name ID or name of the deployed knn
    # @param body The input NDArray
    # @param [Hash] opts the optional parameters
    # @return [Array<(NearestNeighborsResults, Fixnum, Hash)>] NearestNeighborsResults data, response status code and response headers
    def knnnew_with_http_info(deployment_name, version_name, knn_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.knnnew ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.knnnew"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.knnnew"
      end
      # verify the required parameter 'knn_name' is set
      if @api_client.config.client_side_validation && knn_name.nil?
        fail ArgumentError, "Missing the required parameter 'knn_name' when calling DefaultApi.knnnew"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.knnnew"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'knnName' + '}', knn_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NearestNeighborsResults')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#knnnew\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all of the experiments in every model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<ExperimentEntity>]
    def list_all_experiments(model_history_server_id, opts = {})
      data, _status_code, _headers = list_all_experiments_with_http_info(model_history_server_id, opts)
      data
    end

    # List all of the experiments in every model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ExperimentEntity>, Fixnum, Hash)>] Array<ExperimentEntity> data, response status code and response headers
    def list_all_experiments_with_http_info(model_history_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_all_experiments ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.list_all_experiments"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiments'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ExperimentEntity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_all_experiments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get logs file path
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [String]
    def logfilepath(deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = logfilepath_with_http_info(deployment_name, version_name, model_name, opts)
      data
    end

    # Get logs file path
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def logfilepath_with_http_info(deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.logfilepath ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.logfilepath"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.logfilepath"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.logfilepath"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logfilepath\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Post JSON credentials and obtain a JWT authorization token.
    # @param login_request Login credentials.
    # @param [Hash] opts the optional parameters
    # @return [LoginResponse]
    def login(login_request, opts = {})
      data, _status_code, _headers = login_with_http_info(login_request, opts)
      data
    end

    # Post JSON credentials and obtain a JWT authorization token.
    # @param login_request Login credentials.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LoginResponse, Fixnum, Hash)>] LoginResponse data, response status code and response headers
    def login_with_http_info(login_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.login ...'
      end
      # verify the required parameter 'login_request' is set
      if @api_client.config.client_side_validation && login_request.nil?
        fail ArgumentError, "Missing the required parameter 'login_request' when calling DefaultApi.login"
      end
      # resource path
      local_var_path = '/login'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(login_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LoginResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get logs
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param log_request The log object
    # @param [Hash] opts the optional parameters
    # @return [LogBatch]
    def logs(deployment_name, version_name, model_name, log_request, opts = {})
      data, _status_code, _headers = logs_with_http_info(deployment_name, version_name, model_name, log_request, opts)
      data
    end

    # Get logs
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param log_request The log object
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogBatch, Fixnum, Hash)>] LogBatch data, response status code and response headers
    def logs_with_http_info(deployment_name, version_name, model_name, log_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.logs ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.logs"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.logs"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.logs"
      end
      # verify the required parameter 'log_request' is set
      if @api_client.config.client_side_validation && log_request.nil?
        fail ArgumentError, "Missing the required parameter 'log_request' when calling DefaultApi.logs"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/logs'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(log_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogBatch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # this method can be used to get the meta data for the current model which set to the server
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [MetaData]
    def meta_get(deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = meta_get_with_http_info(deployment_name, version_name, model_name, opts)
      data
    end

    # this method can be used to get the meta data for the current model which set to the server
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetaData, Fixnum, Hash)>] MetaData data, response status code and response headers
    def meta_get_with_http_info(deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.meta_get ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.meta_get"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.meta_get"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.meta_get"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MetaData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#meta_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # This method can be used to set meta data for the current model which is set to the server
    # @param content_type The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;
    # @param body the meta data object
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [MetaData]
    def meta_post(content_type, body, deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = meta_post_with_http_info(content_type, body, deployment_name, version_name, model_name, opts)
      data
    end

    # This method can be used to set meta data for the current model which is set to the server
    # @param content_type The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;
    # @param body the meta data object
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetaData, Fixnum, Hash)>] MetaData data, response status code and response headers
    def meta_post_with_http_info(content_type, body, deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.meta_post ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling DefaultApi.meta_post"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['application/json'].include?(content_type)
        fail ArgumentError, "invalid value for 'content_type', must be one of application/json"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.meta_post"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.meta_post"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.meta_post"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.meta_post"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MetaData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#meta_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify the state (start/stop) of a deployed model
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param body the model state object
    # @param [Hash] opts the optional parameters
    # @return [ModelEntity]
    def model_state_change(deployment_id, model_id, body, opts = {})
      data, _status_code, _headers = model_state_change_with_http_info(deployment_id, model_id, body, opts)
      data
    end

    # Modify the state (start/stop) of a deployed model
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param body the model state object
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelEntity, Fixnum, Hash)>] ModelEntity data, response status code and response headers
    def model_state_change_with_http_info(deployment_id, model_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.model_state_change ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.model_state_change"
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling DefaultApi.model_state_change"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.model_state_change"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}/model/{modelId}/state'.sub('{' + 'deploymentId' + '}', deployment_id.to_s).sub('{' + 'modelId' + '}', model_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#model_state_change\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of all the deployed models given a deployment id
    # @param deployment_id ID deployment group
    # @param [Hash] opts the optional parameters
    # @return [Array<ModelEntity>]
    def models(deployment_id, opts = {})
      data, _status_code, _headers = models_with_http_info(deployment_id, opts)
      data
    end

    # Retrieve a list of all the deployed models given a deployment id
    # @param deployment_id ID deployment group
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ModelEntity>, Fixnum, Hash)>] Array<ModelEntity> data, response status code and response headers
    def models_with_http_info(deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.models ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.models"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}/models'.sub('{' + 'deploymentId' + '}', deployment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelEntity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#models\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set the model to be served
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The model file to upload (.pb file)
    # @return [ModelStatus]
    def modelset(deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = modelset_with_http_info(deployment_name, version_name, model_name, opts)
      data
    end

    # Set the model to be served
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The model file to upload (.pb file)
    # @return [Array<(ModelStatus, Fixnum, Hash)>] ModelStatus data, response status code and response headers
    def modelset_with_http_info(deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.modelset ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.modelset"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.modelset"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.modelset"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#modelset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the model to be served
    # @param file The model file to update with (.pb file)
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [ModelStatus]
    def modelupdate(file, deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = modelupdate_with_http_info(file, deployment_name, version_name, model_name, opts)
      data
    end

    # Update the model to be served
    # @param file The model file to update with (.pb file)
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelStatus, Fixnum, Hash)>] ModelStatus data, response status code and response headers
    def modelupdate_with_http_info(file, deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.modelupdate ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DefaultApi.modelupdate"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.modelupdate"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.modelupdate"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.modelupdate"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#modelupdate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Represents all of the labels for a given classification
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [MultiClassClassificationResult]
    def multiclassify(body, deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = multiclassify_with_http_info(body, deployment_name, version_name, model_name, opts)
      data
    end

    # Represents all of the labels for a given classification
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiClassClassificationResult, Fixnum, Hash)>] MultiClassClassificationResult data, response status code and response headers
    def multiclassify_with_http_info(body, deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.multiclassify ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.multiclassify"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.multiclassify"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.multiclassify"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.multiclassify"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultiClassClassificationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#multiclassify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the output from the network, based on the given INDArray[] input
    # Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
    # @param body The multiple input arrays with mask inputs to run inferences on
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [MultiPredictResponse]
    def multipredict(body, deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = multipredict_with_http_info(body, deployment_name, version_name, model_name, opts)
      data
    end

    # Get the output from the network, based on the given INDArray[] input
    # Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
    # @param body The multiple input arrays with mask inputs to run inferences on
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiPredictResponse, Fixnum, Hash)>] MultiPredictResponse data, response status code and response headers
    def multipredict_with_http_info(body, deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.multipredict ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.multipredict"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.multipredict"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.multipredict"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.multipredict"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultiPredictResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#multipredict\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the output from the network using the given image file using the /multipredict endpoint's method
    # Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
    # @param file The image file to run the prediction on
    # @param id The id of the request (could be self generated)
    # @param needs_preprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [MultiPredictResponse]
    def multipredictimage(file, id, needs_preprocessing, deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = multipredictimage_with_http_info(file, id, needs_preprocessing, deployment_name, version_name, model_name, opts)
      data
    end

    # Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
    # Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
    # @param file The image file to run the prediction on
    # @param id The id of the request (could be self generated)
    # @param needs_preprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiPredictResponse, Fixnum, Hash)>] MultiPredictResponse data, response status code and response headers
    def multipredictimage_with_http_info(file, id, needs_preprocessing, deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.multipredictimage ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DefaultApi.multipredictimage"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.multipredictimage"
      end
      # verify the required parameter 'needs_preprocessing' is set
      if @api_client.config.client_side_validation && needs_preprocessing.nil?
        fail ArgumentError, "Missing the required parameter 'needs_preprocessing' when calling DefaultApi.multipredictimage"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.multipredictimage"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.multipredictimage"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.multipredictimage"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file
      form_params['id'] = id
      form_params['needs_preprocessing'] = needs_preprocessing

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultiPredictResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#multipredictimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the number of retrained models written with retraining.
    # @param [Hash] opts the optional parameters
    # @return [RevisionsWritten]
    def num_revisions(opts = {})
      data, _status_code, _headers = num_revisions_with_http_info(opts)
      data
    end

    # Gets the number of retrained models written with retraining.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RevisionsWritten, Fixnum, Hash)>] RevisionsWritten data, response status code and response headers
    def num_revisions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.num_revisions ...'
      end
      # resource path
      local_var_path = '/numrevisions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RevisionsWritten')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#num_revisions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run inference on the input array.
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Prediction]
    def predict(body, deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = predict_with_http_info(body, deployment_name, version_name, model_name, opts)
      data
    end

    # Run inference on the input array.
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(Prediction, Fixnum, Hash)>] Prediction data, response status code and response headers
    def predict_with_http_info(body, deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predict ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.predict"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.predict"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.predict"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.predict"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/predict'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prediction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
    # These \"error\" endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
    # @param content_type The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.
    # @param operation Operation to perform on the input data.
    # @param input_type Type of the input data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :input_data 
    # @return [nil]
    def predict_error(content_type, operation, input_type, opts = {})
      predict_error_with_http_info(content_type, operation, input_type, opts)
      nil
    end

    # Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
    # These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
    # @param content_type The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.
    # @param operation Operation to perform on the input data.
    # @param input_type Type of the input data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :input_data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def predict_error_with_http_info(content_type, operation, input_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predict_error ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling DefaultApi.predict_error"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['application/json'].include?(content_type)
        fail ArgumentError, "invalid value for 'content_type', must be one of application/json"
      end
      # verify the required parameter 'operation' is set
      if @api_client.config.client_side_validation && operation.nil?
        fail ArgumentError, "Missing the required parameter 'operation' when calling DefaultApi.predict_error"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['REGRESSION', 'CLASSIFICATION', 'RAW'].include?(operation)
        fail ArgumentError, "invalid value for 'operation', must be one of REGRESSION, CLASSIFICATION, RAW"
      end
      # verify the required parameter 'input_type' is set
      if @api_client.config.client_side_validation && input_type.nil?
        fail ArgumentError, "Missing the required parameter 'input_type' when calling DefaultApi.predict_error"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CSV', 'DICTIONARY', 'CSVPUBSUB', 'DICTIONARYPUBSUB'].include?(input_type)
        fail ArgumentError, "invalid value for 'input_type', must be one of CSV, DICTIONARY, CSVPUBSUB, DICTIONARYPUBSUB"
      end
      # resource path
      local_var_path = '/{operation}/{inputType}/error'.sub('{' + 'operation' + '}', operation.to_s).sub('{' + 'inputType' + '}', input_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'input_data'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict_error\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Runs inference based on the input data. Output is defined relative to the output adapter specified.
    # @param operation The operation to perform on the input data. 
    # @param input_type_file Type of the input data. 
    # @param input_data The input data to run inference on.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def predict_v2_file(operation, input_type_file, input_data, opts = {})
      predict_v2_file_with_http_info(operation, input_type_file, input_data, opts)
      nil
    end

    # Runs inference based on the input data. Output is defined relative to the output adapter specified.
    # @param operation The operation to perform on the input data. 
    # @param input_type_file Type of the input data. 
    # @param input_data The input data to run inference on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def predict_v2_file_with_http_info(operation, input_type_file, input_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predict_v2_file ...'
      end
      # verify the required parameter 'operation' is set
      if @api_client.config.client_side_validation && operation.nil?
        fail ArgumentError, "Missing the required parameter 'operation' when calling DefaultApi.predict_v2_file"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['REGRESSION', 'CLASSIFICATION', 'RAW', 'YOLO', 'SSD', 'RCNN'].include?(operation)
        fail ArgumentError, "invalid value for 'operation', must be one of REGRESSION, CLASSIFICATION, RAW, YOLO, SSD, RCNN"
      end
      # verify the required parameter 'input_type_file' is set
      if @api_client.config.client_side_validation && input_type_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_type_file' when calling DefaultApi.predict_v2_file"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['IMAGE', 'NUMPY', 'NDARRAY', 'JSON'].include?(input_type_file)
        fail ArgumentError, "invalid value for 'input_type_file', must be one of IMAGE, NUMPY, NDARRAY, JSON"
      end
      # verify the required parameter 'input_data' is set
      if @api_client.config.client_side_validation && input_data.nil?
        fail ArgumentError, "Missing the required parameter 'input_data' when calling DefaultApi.predict_v2_file"
      end
      # resource path
      local_var_path = '/{operation}/{inputTypeFile}'.sub('{' + 'operation' + '}', operation.to_s).sub('{' + 'inputTypeFile' + '}', input_type_file.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputData'] = input_data

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict_v2_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Runs inference based on the input data. Output is defined relative to the output adapter specified.
    # @param content_type The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.
    # @param operation The operation to perform on the input data. 
    # @param input_type_json Type of the input data. 
    # @param input_data The input data to run inference on. (Specify a JSON string here)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def predict_v2_json(content_type, operation, input_type_json, input_data, opts = {})
      predict_v2_json_with_http_info(content_type, operation, input_type_json, input_data, opts)
      nil
    end

    # Runs inference based on the input data. Output is defined relative to the output adapter specified.
    # @param content_type The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;.
    # @param operation The operation to perform on the input data. 
    # @param input_type_json Type of the input data. 
    # @param input_data The input data to run inference on. (Specify a JSON string here)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def predict_v2_json_with_http_info(content_type, operation, input_type_json, input_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predict_v2_json ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling DefaultApi.predict_v2_json"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['application/json'].include?(content_type)
        fail ArgumentError, "invalid value for 'content_type', must be one of application/json"
      end
      # verify the required parameter 'operation' is set
      if @api_client.config.client_side_validation && operation.nil?
        fail ArgumentError, "Missing the required parameter 'operation' when calling DefaultApi.predict_v2_json"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['REGRESSION', 'CLASSIFICATION', 'RAW'].include?(operation)
        fail ArgumentError, "invalid value for 'operation', must be one of REGRESSION, CLASSIFICATION, RAW"
      end
      # verify the required parameter 'input_type_json' is set
      if @api_client.config.client_side_validation && input_type_json.nil?
        fail ArgumentError, "Missing the required parameter 'input_type_json' when calling DefaultApi.predict_v2_json"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['CSV', 'DICTIONARY', 'CSVPUBSUB', 'DICTIONARYPUBSUB'].include?(input_type_json)
        fail ArgumentError, "invalid value for 'input_type_json', must be one of CSV, DICTIONARY, CSVPUBSUB, DICTIONARYPUBSUB"
      end
      # verify the required parameter 'input_data' is set
      if @api_client.config.client_side_validation && input_data.nil?
        fail ArgumentError, "Missing the required parameter 'input_data' when calling DefaultApi.predict_v2_json"
      end
      # resource path
      local_var_path = '/{operation}/{inputTypeJson}'.sub('{' + 'operation' + '}', operation.to_s).sub('{' + 'inputTypeJson' + '}', input_type_json.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(input_data)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict_v2_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run inference on the input array, using input image file from multipart form data.
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The file to upload.
    # @return [Prediction]
    def predictimage(deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = predictimage_with_http_info(deployment_name, version_name, model_name, opts)
      data
    end

    # Run inference on the input array, using input image file from multipart form data.
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The file to upload.
    # @return [Array<(Prediction, Fixnum, Hash)>] Prediction data, response status code and response headers
    def predictimage_with_http_info(deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predictimage ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.predictimage"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.predictimage"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.predictimage"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['image'] = opts[:'image'] if !opts[:'image'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prediction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predictimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Preprocesses the input and run inference on it
    # @param body The input array
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Prediction]
    def predictwithpreprocess(body, deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = predictwithpreprocess_with_http_info(body, deployment_name, version_name, model_name, opts)
      data
    end

    # Preprocesses the input and run inference on it
    # @param body The input array
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(Prediction, Fixnum, Hash)>] Prediction data, response status code and response headers
    def predictwithpreprocess_with_http_info(body, deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predictwithpreprocess ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.predictwithpreprocess"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.predictwithpreprocess"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.predictwithpreprocess"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.predictwithpreprocess"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prediction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predictwithpreprocess\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
    # @param body The input array
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [JsonArrayResponse]
    def predictwithpreprocessjson(body, deployment_name, version_name, model_name, opts = {})
      data, _status_code, _headers = predictwithpreprocessjson_with_http_info(body, deployment_name, version_name, model_name, opts)
      data
    end

    # Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
    # @param body The input array
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonArrayResponse, Fixnum, Hash)>] JsonArrayResponse data, response status code and response headers
    def predictwithpreprocessjson_with_http_info(body, deployment_name, version_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predictwithpreprocessjson ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.predictwithpreprocessjson"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.predictwithpreprocessjson"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.predictwithpreprocessjson"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.predictwithpreprocessjson"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JsonArrayResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predictwithpreprocessjson\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Runs inference based on the input data. Output is defined relative to the output adapter specified.
    # @param input_type Input data type.
    # @param output_type Binary output data type.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input_data The input file to upload.
    # @return [nil]
    def raw_predict_binary(input_type, output_type, opts = {})
      raw_predict_binary_with_http_info(input_type, output_type, opts)
      nil
    end

    # Runs inference based on the input data. Output is defined relative to the output adapter specified.
    # @param input_type Input data type.
    # @param output_type Binary output data type.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input_data The input file to upload.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def raw_predict_binary_with_http_info(input_type, output_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.raw_predict_binary ...'
      end
      # verify the required parameter 'input_type' is set
      if @api_client.config.client_side_validation && input_type.nil?
        fail ArgumentError, "Missing the required parameter 'input_type' when calling DefaultApi.raw_predict_binary"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['IMAGE', 'NUMPY', 'NDARRAY', 'JSON'].include?(input_type)
        fail ArgumentError, "invalid value for 'input_type', must be one of IMAGE, NUMPY, NDARRAY, JSON"
      end
      # verify the required parameter 'output_type' is set
      if @api_client.config.client_side_validation && output_type.nil?
        fail ArgumentError, "Missing the required parameter 'output_type' when calling DefaultApi.raw_predict_binary"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ND4J', 'NUMPY', 'ARROW', 'JSON'].include?(output_type)
        fail ArgumentError, "invalid value for 'output_type', must be one of ND4J, NUMPY, ARROW, JSON"
      end
      # resource path
      local_var_path = '/raw/{inputType}/{outputType}'.sub('{' + 'inputType' + '}', input_type.to_s).sub('{' + 'outputType' + '}', output_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['inputData'] = opts[:'input_data'] if !opts[:'input_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#raw_predict_binary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Refresh the remote job status. Can be used for monitoring.
    # @param job_id Job ID
    # @param [Hash] opts the optional parameters
    # @return [JobEntity]
    def refresh_job_status(job_id, opts = {})
      data, _status_code, _headers = refresh_job_status_with_http_info(job_id, opts)
      data
    end

    # Refresh the remote job status. Can be used for monitoring.
    # @param job_id Job ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobEntity, Fixnum, Hash)>] JobEntity data, response status code and response headers
    def refresh_job_status_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.refresh_job_status ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.refresh_job_status"
      end
      # resource path
      local_var_path = '/jobs/{jobId}/refresh'.sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#refresh_job_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Register a new user
    # @param user User details
    # @param [Hash] opts the optional parameters
    # @return [User]
    def register_user(user, opts = {})
      data, _status_code, _headers = register_user_with_http_info(user, opts)
      data
    end

    # Register a new user
    # @param user User details
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def register_user_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.register_user ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.register_user"
      end
      # resource path
      local_var_path = '/user/register'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#register_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reimport a model to a previous deployed model in a deployment
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param body the deployment request
    # @param [Hash] opts the optional parameters
    # @return [ModelEntity]
    def reimport_model(deployment_id, model_id, body, opts = {})
      data, _status_code, _headers = reimport_model_with_http_info(deployment_id, model_id, body, opts)
      data
    end

    # Reimport a model to a previous deployed model in a deployment
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param body the deployment request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelEntity, Fixnum, Hash)>] ModelEntity data, response status code and response headers
    def reimport_model_with_http_info(deployment_id, model_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reimport_model ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.reimport_model"
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling DefaultApi.reimport_model"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.reimport_model"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}/model/{modelId}'.sub('{' + 'deploymentId' + '}', deployment_id.to_s).sub('{' + 'modelId' + '}', model_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reimport_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Revoke a user token.
    # @param token_id Token ID
    # @param [Hash] opts the optional parameters
    # @return [Token]
    def revoke_user_token(token_id, opts = {})
      data, _status_code, _headers = revoke_user_token_with_http_info(token_id, opts)
      data
    end

    # Revoke a user token.
    # @param token_id Token ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Token, Fixnum, Hash)>] Token data, response status code and response headers
    def revoke_user_token_with_http_info(token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.revoke_user_token ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling DefaultApi.revoke_user_token"
      end
      # resource path
      local_var_path = '/auth/token/{tokenId}'.sub('{' + 'tokenId' + '}', token_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Token')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#revoke_user_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rollback to a previous revision of the model.
    # @param index Model revision index.
    # @param [Hash] opts the optional parameters
    # @return [RollbackStatus]
    def rollback(index, opts = {})
      data, _status_code, _headers = rollback_with_http_info(index, opts)
      data
    end

    # Rollback to a previous revision of the model.
    # @param index Model revision index.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RollbackStatus, Fixnum, Hash)>] RollbackStatus data, response status code and response headers
    def rollback_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.rollback ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling DefaultApi.rollback"
      end
      # resource path
      local_var_path = '/rollback/{index}'.sub('{' + 'index' + '}', index.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RollbackStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#rollback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Start running an (already created) job on the remote resource
    # @param job_id Job ID
    # @param [Hash] opts the optional parameters
    # @return [JobEntity]
    def run_a_job(job_id, opts = {})
      data, _status_code, _headers = run_a_job_with_http_info(job_id, opts)
      data
    end

    # Start running an (already created) job on the remote resource
    # @param job_id Job ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobEntity, Fixnum, Hash)>] JobEntity data, response status code and response headers
    def run_a_job_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.run_a_job ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling DefaultApi.run_a_job"
      end
      # resource path
      local_var_path = '/jobs/{jobId}/run'.sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#run_a_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
    # Takes a batch of SingleCSVRecord object and transforms it into the desired format
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [BatchCSVRecord] :batch_csv_record The input batch of record arrays
    # @return [BatchCSVRecord]
    def transform_csv(deployment_name, version_name, transform_name, opts = {})
      data, _status_code, _headers = transform_csv_with_http_info(deployment_name, version_name, transform_name, opts)
      data
    end

    # Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
    # Takes a batch of SingleCSVRecord object and transforms it into the desired format
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [BatchCSVRecord] :batch_csv_record The input batch of record arrays
    # @return [Array<(BatchCSVRecord, Fixnum, Hash)>] BatchCSVRecord data, response status code and response headers
    def transform_csv_with_http_info(deployment_name, version_name, transform_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transform_csv ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.transform_csv"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.transform_csv"
      end
      # verify the required parameter 'transform_name' is set
      if @api_client.config.client_side_validation && transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'transform_name' when calling DefaultApi.transform_csv"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'transformName' + '}', transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_csv_record'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchCSVRecord')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transform_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Takes a batch input arrays and transforms it
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [BatchRecord] :batch_record The input batch of record arrays
    # @return [Base64NDArrayBody]
    def transformarray(deployment_name, version_name, transform_name, opts = {})
      data, _status_code, _headers = transformarray_with_http_info(deployment_name, version_name, transform_name, opts)
      data
    end

    # Takes a batch input arrays and transforms it
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [BatchRecord] :batch_record The input batch of record arrays
    # @return [Array<(Base64NDArrayBody, Fixnum, Hash)>] Base64NDArrayBody data, response status code and response headers
    def transformarray_with_http_info(deployment_name, version_name, transform_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transformarray ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.transformarray"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.transformarray"
      end
      # verify the required parameter 'transform_name' is set
      if @api_client.config.client_side_validation && transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'transform_name' when calling DefaultApi.transformarray"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'transformName' + '}', transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_record'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64NDArrayBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transformarray\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Takes multiple multipart image file to transform and returns Base64NDArrayBody
    # Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param image_transform_name ID or name of the deployed image transform
    # @param files The image files to upload
    # @param [Hash] opts the optional parameters
    # @return [Base64NDArrayBody]
    def transformimage(deployment_name, version_name, image_transform_name, files, opts = {})
      data, _status_code, _headers = transformimage_with_http_info(deployment_name, version_name, image_transform_name, files, opts)
      data
    end

    # Takes multiple multipart image file to transform and returns Base64NDArrayBody
    # Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param image_transform_name ID or name of the deployed image transform
    # @param files The image files to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Base64NDArrayBody, Fixnum, Hash)>] Base64NDArrayBody data, response status code and response headers
    def transformimage_with_http_info(deployment_name, version_name, image_transform_name, files, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transformimage ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.transformimage"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.transformimage"
      end
      # verify the required parameter 'image_transform_name' is set
      if @api_client.config.client_side_validation && image_transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'image_transform_name' when calling DefaultApi.transformimage"
      end
      # verify the required parameter 'files' is set
      if @api_client.config.client_side_validation && files.nil?
        fail ArgumentError, "Missing the required parameter 'files' when calling DefaultApi.transformimage"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'imageTransformName' + '}', image_transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['files'] = @api_client.build_collection_param(files, :csv)

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64NDArrayBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transformimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
    # Takes a SingleCSVRecord object and transforms it into the desired format
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [SingleCSVRecord] :single_csv_record The input record array
    # @return [SingleCSVRecord]
    def transformincremental_csv(deployment_name, version_name, transform_name, opts = {})
      data, _status_code, _headers = transformincremental_csv_with_http_info(deployment_name, version_name, transform_name, opts)
      data
    end

    # Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
    # Takes a SingleCSVRecord object and transforms it into the desired format
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [SingleCSVRecord] :single_csv_record The input record array
    # @return [Array<(SingleCSVRecord, Fixnum, Hash)>] SingleCSVRecord data, response status code and response headers
    def transformincremental_csv_with_http_info(deployment_name, version_name, transform_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transformincremental_csv ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.transformincremental_csv"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.transformincremental_csv"
      end
      # verify the required parameter 'transform_name' is set
      if @api_client.config.client_side_validation && transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'transform_name' when calling DefaultApi.transformincremental_csv"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'transformName' + '}', transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'single_csv_record'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SingleCSVRecord')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transformincremental_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Same as /transformincremental but returns Base64NDArrayBody.
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [SingleRecord] :single_record The input record array
    # @return [Base64NDArrayBody]
    def transformincrementalarray(deployment_name, version_name, transform_name, opts = {})
      data, _status_code, _headers = transformincrementalarray_with_http_info(deployment_name, version_name, transform_name, opts)
      data
    end

    # Same as /transformincremental but returns Base64NDArrayBody.
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [SingleRecord] :single_record The input record array
    # @return [Array<(Base64NDArrayBody, Fixnum, Hash)>] Base64NDArrayBody data, response status code and response headers
    def transformincrementalarray_with_http_info(deployment_name, version_name, transform_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transformincrementalarray ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.transformincrementalarray"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.transformincrementalarray"
      end
      # verify the required parameter 'transform_name' is set
      if @api_client.config.client_side_validation && transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'transform_name' when calling DefaultApi.transformincrementalarray"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'transformName' + '}', transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'single_record'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64NDArrayBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transformincrementalarray\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Takes a single multipart image file to transform and returns Base64NDArrayBody
    # Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param image_transform_name ID or name of the deployed image transform
    # @param file The image file to upload
    # @param [Hash] opts the optional parameters
    # @return [Base64NDArrayBody]
    def transformincrementalimage(deployment_name, version_name, image_transform_name, file, opts = {})
      data, _status_code, _headers = transformincrementalimage_with_http_info(deployment_name, version_name, image_transform_name, file, opts)
      data
    end

    # Takes a single multipart image file to transform and returns Base64NDArrayBody
    # Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param image_transform_name ID or name of the deployed image transform
    # @param file The image file to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Base64NDArrayBody, Fixnum, Hash)>] Base64NDArrayBody data, response status code and response headers
    def transformincrementalimage_with_http_info(deployment_name, version_name, image_transform_name, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transformincrementalimage ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.transformincrementalimage"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.transformincrementalimage"
      end
      # verify the required parameter 'image_transform_name' is set
      if @api_client.config.client_side_validation && image_transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'image_transform_name' when calling DefaultApi.transformincrementalimage"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DefaultApi.transformincrementalimage"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'imageTransformName' + '}', image_transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64NDArrayBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transformincrementalimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the JSON string of the deployed transform process (CSV or Image)
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def transformprocess_get(deployment_name, version_name, transform_name, opts = {})
      data, _status_code, _headers = transformprocess_get_with_http_info(deployment_name, version_name, transform_name, opts)
      data
    end

    # Gets the JSON string of the deployed transform process (CSV or Image)
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def transformprocess_get_with_http_info(deployment_name, version_name, transform_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transformprocess_get ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.transformprocess_get"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.transformprocess_get"
      end
      # verify the required parameter 'transform_name' is set
      if @api_client.config.client_side_validation && transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'transform_name' when calling DefaultApi.transformprocess_get"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'transformName' + '}', transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transformprocess_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sets the deployed (CSV or Image) transform process through the provided JSON string
    # @param content_type The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;.
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transform_process The transform process to set (Specify a JSON string here).
    # @return [Object]
    def transformprocess_post(content_type, deployment_name, version_name, transform_name, opts = {})
      data, _status_code, _headers = transformprocess_post_with_http_info(content_type, deployment_name, version_name, transform_name, opts)
      data
    end

    # Sets the deployed (CSV or Image) transform process through the provided JSON string
    # @param content_type The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;.
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [String] :transform_process The transform process to set (Specify a JSON string here).
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def transformprocess_post_with_http_info(content_type, deployment_name, version_name, transform_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transformprocess_post ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling DefaultApi.transformprocess_post"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['application/json'].include?(content_type)
        fail ArgumentError, "invalid value for 'content_type', must be one of application/json"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.transformprocess_post"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling DefaultApi.transformprocess_post"
      end
      # verify the required parameter 'transform_name' is set
      if @api_client.config.client_side_validation && transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'transform_name' when calling DefaultApi.transformprocess_post"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'transformName' + '}', transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'transform_process'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transformprocess_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update auth policy
    # @param auth_policy Auth policy object
    # @param [Hash] opts the optional parameters
    # @return [AuthPolicy]
    def update_auth_policy(auth_policy, opts = {})
      data, _status_code, _headers = update_auth_policy_with_http_info(auth_policy, opts)
      data
    end

    # Update auth policy
    # @param auth_policy Auth policy object
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthPolicy, Fixnum, Hash)>] AuthPolicy data, response status code and response headers
    def update_auth_policy_with_http_info(auth_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_auth_policy ...'
      end
      # verify the required parameter 'auth_policy' is set
      if @api_client.config.client_side_validation && auth_policy.nil?
        fail ArgumentError, "Missing the required parameter 'auth_policy' when calling DefaultApi.update_auth_policy"
      end
      # resource path
      local_var_path = '/auth/policy'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(auth_policy)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AuthPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_auth_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the best model for an experiment
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param update_best_model Model encapsulating the experiment id to update and the best model id.
    # @param [Hash] opts the optional parameters
    # @return [ExperimentEntity]
    def update_best_model_for_experiment(model_history_server_id, update_best_model, opts = {})
      data, _status_code, _headers = update_best_model_for_experiment_with_http_info(model_history_server_id, update_best_model, opts)
      data
    end

    # Updates the best model for an experiment
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param update_best_model Model encapsulating the experiment id to update and the best model id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExperimentEntity, Fixnum, Hash)>] ExperimentEntity data, response status code and response headers
    def update_best_model_for_experiment_with_http_info(model_history_server_id, update_best_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_best_model_for_experiment ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.update_best_model_for_experiment"
      end
      # verify the required parameter 'update_best_model' is set
      if @api_client.config.client_side_validation && update_best_model.nil?
        fail ArgumentError, "Missing the required parameter 'update_best_model' when calling DefaultApi.update_best_model_for_experiment"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiment/best'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_best_model)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExperimentEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_best_model_for_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates an experiment, given an experiment entity
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment to update
    # @param experiment_entity The experiment entity to update with
    # @param [Hash] opts the optional parameters
    # @return [ExperimentEntity]
    def update_experiment(model_history_server_id, experiment_id, experiment_entity, opts = {})
      data, _status_code, _headers = update_experiment_with_http_info(model_history_server_id, experiment_id, experiment_entity, opts)
      data
    end

    # Updates an experiment, given an experiment entity
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment to update
    # @param experiment_entity The experiment entity to update with
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExperimentEntity, Fixnum, Hash)>] ExperimentEntity data, response status code and response headers
    def update_experiment_with_http_info(model_history_server_id, experiment_id, experiment_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_experiment ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.update_experiment"
      end
      # verify the required parameter 'experiment_id' is set
      if @api_client.config.client_side_validation && experiment_id.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_id' when calling DefaultApi.update_experiment"
      end
      # verify the required parameter 'experiment_entity' is set
      if @api_client.config.client_side_validation && experiment_entity.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_entity' when calling DefaultApi.update_experiment"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiment/{experimentID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'experimentID' + '}', experiment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(experiment_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExperimentEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id the GUID of the model history / workspace to update
    # @param update_model_history_request The model history request object
    # @param [Hash] opts the optional parameters
    # @return [ModelHistoryEntity]
    def update_model_history(model_history_server_id, model_history_id, update_model_history_request, opts = {})
      data, _status_code, _headers = update_model_history_with_http_info(model_history_server_id, model_history_id, update_model_history_request, opts)
      data
    end

    # Update a model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id the GUID of the model history / workspace to update
    # @param update_model_history_request The model history request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelHistoryEntity, Fixnum, Hash)>] ModelHistoryEntity data, response status code and response headers
    def update_model_history_with_http_info(model_history_server_id, model_history_id, update_model_history_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_model_history ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling DefaultApi.update_model_history"
      end
      # verify the required parameter 'model_history_id' is set
      if @api_client.config.client_side_validation && model_history_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_id' when calling DefaultApi.update_model_history"
      end
      # verify the required parameter 'update_model_history_request' is set
      if @api_client.config.client_side_validation && update_model_history_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_model_history_request' when calling DefaultApi.update_model_history"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelHistoryID' + '}', model_history_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_model_history_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelHistoryEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_model_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a user
    # @param user User details
    # @param [Hash] opts the optional parameters
    # @return [User]
    def update_user(user, opts = {})
      data, _status_code, _headers = update_user_with_http_info(user, opts)
      data
    end

    # Update a user
    # @param user User details
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def update_user_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_user ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.update_user"
      end
      # resource path
      local_var_path = '/user'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload a model file to SKIL for import.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The file to upload.
    # @return [FileUploadList]
    def upload(opts = {})
      data, _status_code, _headers = upload_with_http_info(opts)
      data
    end

    # Upload a model file to SKIL for import.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The file to upload.
    # @return [Array<(FileUploadList, Fixnum, Hash)>] FileUploadList data, response status code and response headers
    def upload_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.upload ...'
      end
      # resource path
      local_var_path = '/api/upload/model'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FileUploadList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
