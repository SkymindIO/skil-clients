=begin
#Endpoints

#Endpoints API for different services in SKIL

OpenAPI spec version: 1.2.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module SkilCient
  class DeploymentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a model by deployment and model id
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def delete_model(deployment_id, model_id, opts = {})
      data, _status_code, _headers = delete_model_with_http_info(deployment_id, model_id, opts)
      data
    end

    # Delete a model by deployment and model id
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def delete_model_with_http_info(deployment_id, model_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentApi.delete_model ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DeploymentApi.delete_model"
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling DeploymentApi.delete_model"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}/model/{modelId}'.sub('{' + 'deploymentId' + '}', deployment_id.to_s).sub('{' + 'modelId' + '}', model_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentApi#delete_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deploy a model in a deployment group.
    # @param deployment_id ID deployment group
    # @param body the model import request
    # @param [Hash] opts the optional parameters
    # @return [ModelEntity]
    def deploy_model(deployment_id, body, opts = {})
      data, _status_code, _headers = deploy_model_with_http_info(deployment_id, body, opts)
      data
    end

    # Deploy a model in a deployment group.
    # @param deployment_id ID deployment group
    # @param body the model import request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelEntity, Fixnum, Hash)>] ModelEntity data, response status code and response headers
    def deploy_model_with_http_info(deployment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentApi.deploy_model ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DeploymentApi.deploy_model"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DeploymentApi.deploy_model"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}/model'.sub('{' + 'deploymentId' + '}', deployment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentApi#deploy_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new deployment group.
    # @param body the deployment request
    # @param [Hash] opts the optional parameters
    # @return [DeploymentResponse]
    def deployment_create(body, opts = {})
      data, _status_code, _headers = deployment_create_with_http_info(body, opts)
      data
    end

    # Create a new deployment group.
    # @param body the deployment request
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentResponse, Fixnum, Hash)>] DeploymentResponse data, response status code and response headers
    def deployment_create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentApi.deployment_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DeploymentApi.deployment_create"
      end
      # resource path
      local_var_path = '/deployment'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentApi#deployment_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a deployment by id
    # @param deployment_id Id of the deployment group
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def deployment_delete(deployment_id, opts = {})
      data, _status_code, _headers = deployment_delete_with_http_info(deployment_id, opts)
      data
    end

    # Delete a deployment by id
    # @param deployment_id Id of the deployment group
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def deployment_delete_with_http_info(deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentApi.deployment_delete ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DeploymentApi.deployment_delete"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}'.sub('{' + 'deploymentId' + '}', deployment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentApi#deployment_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a deployment details by id
    # @param deployment_id Id of the deployment group
    # @param [Hash] opts the optional parameters
    # @return [DeploymentResponse]
    def deployment_get(deployment_id, opts = {})
      data, _status_code, _headers = deployment_get_with_http_info(deployment_id, opts)
      data
    end

    # Get a deployment details by id
    # @param deployment_id Id of the deployment group
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeploymentResponse, Fixnum, Hash)>] DeploymentResponse data, response status code and response headers
    def deployment_get_with_http_info(deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentApi.deployment_get ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DeploymentApi.deployment_get"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}'.sub('{' + 'deploymentId' + '}', deployment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeploymentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentApi#deployment_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of deployments
    # @param [Hash] opts the optional parameters
    # @return [Array<DeploymentResponse>]
    def deployments(opts = {})
      data, _status_code, _headers = deployments_with_http_info(opts)
      data
    end

    # Get a list of deployments
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DeploymentResponse>, Fixnum, Hash)>] Array<DeploymentResponse> data, response status code and response headers
    def deployments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentApi.deployments ...'
      end
      # resource path
      local_var_path = '/deployments'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DeploymentResponse>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentApi#deployments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify the state (start/stop) of a deployed model
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param body the model state object
    # @param [Hash] opts the optional parameters
    # @return [ModelEntity]
    def model_state_change(deployment_id, model_id, body, opts = {})
      data, _status_code, _headers = model_state_change_with_http_info(deployment_id, model_id, body, opts)
      data
    end

    # Modify the state (start/stop) of a deployed model
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param body the model state object
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelEntity, Fixnum, Hash)>] ModelEntity data, response status code and response headers
    def model_state_change_with_http_info(deployment_id, model_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentApi.model_state_change ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DeploymentApi.model_state_change"
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling DeploymentApi.model_state_change"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DeploymentApi.model_state_change"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}/model/{modelId}/state'.sub('{' + 'deploymentId' + '}', deployment_id.to_s).sub('{' + 'modelId' + '}', model_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentApi#model_state_change\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of all the deployed models given a deployment id
    # @param deployment_id ID deployment group
    # @param [Hash] opts the optional parameters
    # @return [Array<ModelEntity>]
    def models(deployment_id, opts = {})
      data, _status_code, _headers = models_with_http_info(deployment_id, opts)
      data
    end

    # Retrieve a list of all the deployed models given a deployment id
    # @param deployment_id ID deployment group
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ModelEntity>, Fixnum, Hash)>] Array<ModelEntity> data, response status code and response headers
    def models_with_http_info(deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentApi.models ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DeploymentApi.models"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}/models'.sub('{' + 'deploymentId' + '}', deployment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelEntity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentApi#models\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reimport a model to a previous deployed model in a deployment
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param body the deployment request
    # @param [Hash] opts the optional parameters
    # @return [ModelEntity]
    def reimport_model(deployment_id, model_id, body, opts = {})
      data, _status_code, _headers = reimport_model_with_http_info(deployment_id, model_id, body, opts)
      data
    end

    # Reimport a model to a previous deployed model in a deployment
    # @param deployment_id ID deployment group
    # @param model_id the id of the deployed model
    # @param body the deployment request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelEntity, Fixnum, Hash)>] ModelEntity data, response status code and response headers
    def reimport_model_with_http_info(deployment_id, model_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeploymentApi.reimport_model ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DeploymentApi.reimport_model"
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling DeploymentApi.reimport_model"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DeploymentApi.reimport_model"
      end
      # resource path
      local_var_path = '/deployment/{deploymentId}/model/{modelId}'.sub('{' + 'deploymentId' + '}', deployment_id.to_s).sub('{' + 'modelId' + '}', model_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeploymentApi#reimport_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
