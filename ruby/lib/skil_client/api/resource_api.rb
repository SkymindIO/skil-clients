=begin
#Endpoints

#Endpoints API for different services in SKIL

OpenAPI spec version: 1.2.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module SkilCient
  class ResourceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds credentials
    # @param add_credentials_request Add credentials request object
    # @param [Hash] opts the optional parameters
    # @return [ResourceCredentials]
    def add_credentials(add_credentials_request, opts = {})
      data, _status_code, _headers = add_credentials_with_http_info(add_credentials_request, opts)
      data
    end

    # Adds credentials
    # @param add_credentials_request Add credentials request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceCredentials, Fixnum, Hash)>] ResourceCredentials data, response status code and response headers
    def add_credentials_with_http_info(add_credentials_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.add_credentials ...'
      end
      # verify the required parameter 'add_credentials_request' is set
      if @api_client.config.client_side_validation && add_credentials_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_credentials_request' when calling ResourceApi.add_credentials"
      end
      # resource path
      local_var_path = '/resources/credentials'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_credentials_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceCredentials')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#add_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a resource
    # @param add_resource_request The Add resource request object
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def add_resource(add_resource_request, opts = {})
      data, _status_code, _headers = add_resource_with_http_info(add_resource_request, opts)
      data
    end

    # Adds a resource
    # @param add_resource_request The Add resource request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def add_resource_with_http_info(add_resource_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.add_resource ...'
      end
      # verify the required parameter 'add_resource_request' is set
      if @api_client.config.client_side_validation && add_resource_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_resource_request' when calling ResourceApi.add_resource"
      end
      # resource path
      local_var_path = '/resources/add/resource'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_resource_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#add_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a resource group
    # @param group_name Name of the resource group
    # @param [Hash] opts the optional parameters
    # @return [ResourceGroup]
    def add_resource_group(group_name, opts = {})
      data, _status_code, _headers = add_resource_group_with_http_info(group_name, opts)
      data
    end

    # Adds a resource group
    # @param group_name Name of the resource group
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceGroup, Fixnum, Hash)>] ResourceGroup data, response status code and response headers
    def add_resource_group_with_http_info(group_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.add_resource_group ...'
      end
      # verify the required parameter 'group_name' is set
      if @api_client.config.client_side_validation && group_name.nil?
        fail ArgumentError, "Missing the required parameter 'group_name' when calling ResourceApi.add_resource_group"
      end
      # resource path
      local_var_path = '/resources/add/group'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(group_name)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#add_resource_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a resource to a resource group
    # @param resource_group_id ID of the resource group
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_resource_to_group(resource_group_id, resource_id, opts = {})
      add_resource_to_group_with_http_info(resource_group_id, resource_id, opts)
      nil
    end

    # Adds a resource to a resource group
    # @param resource_group_id ID of the resource group
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_resource_to_group_with_http_info(resource_group_id, resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.add_resource_to_group ...'
      end
      # verify the required parameter 'resource_group_id' is set
      if @api_client.config.client_side_validation && resource_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_group_id' when calling ResourceApi.add_resource_to_group"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling ResourceApi.add_resource_to_group"
      end
      # resource path
      local_var_path = '/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}'.sub('{' + 'resourceGroupId' + '}', resource_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#add_resource_to_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete credentials given an ID
    # @param credential_id Credentials ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_credentials_by_id(credential_id, opts = {})
      delete_credentials_by_id_with_http_info(credential_id, opts)
      nil
    end

    # Delete credentials given an ID
    # @param credential_id Credentials ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_credentials_by_id_with_http_info(credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.delete_credentials_by_id ...'
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling ResourceApi.delete_credentials_by_id"
      end
      # resource path
      local_var_path = '/resources/credentials/{credentialId}'.sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#delete_credentials_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the resource with the specified resource ID
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Resource]
    def delete_resource_by_id(resource_id, opts = {})
      data, _status_code, _headers = delete_resource_by_id_with_http_info(resource_id, opts)
      data
    end

    # Delete the resource with the specified resource ID
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Resource, Fixnum, Hash)>] Resource data, response status code and response headers
    def delete_resource_by_id_with_http_info(resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.delete_resource_by_id ...'
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling ResourceApi.delete_resource_by_id"
      end
      # resource path
      local_var_path = '/resources/remove/resource/{resourceId}'.sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Resource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#delete_resource_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Removes a resource from a resource group
    # @param resource_group_id ID of the resource group
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_resource_from_group(resource_group_id, resource_id, opts = {})
      delete_resource_from_group_with_http_info(resource_group_id, resource_id, opts)
      nil
    end

    # Removes a resource from a resource group
    # @param resource_group_id ID of the resource group
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_resource_from_group_with_http_info(resource_group_id, resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.delete_resource_from_group ...'
      end
      # verify the required parameter 'resource_group_id' is set
      if @api_client.config.client_side_validation && resource_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_group_id' when calling ResourceApi.delete_resource_from_group"
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling ResourceApi.delete_resource_from_group"
      end
      # resource path
      local_var_path = '/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}'.sub('{' + 'resourceGroupId' + '}', resource_group_id.to_s).sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#delete_resource_from_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the resource group with the specified resource group ID
    # @param resource_group_id ID of the resource group
    # @param [Hash] opts the optional parameters
    # @return [ResourceGroup]
    def delete_resource_group_by_id(resource_group_id, opts = {})
      data, _status_code, _headers = delete_resource_group_by_id_with_http_info(resource_group_id, opts)
      data
    end

    # Delete the resource group with the specified resource group ID
    # @param resource_group_id ID of the resource group
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceGroup, Fixnum, Hash)>] ResourceGroup data, response status code and response headers
    def delete_resource_group_by_id_with_http_info(resource_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.delete_resource_group_by_id ...'
      end
      # verify the required parameter 'resource_group_id' is set
      if @api_client.config.client_side_validation && resource_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_group_id' when calling ResourceApi.delete_resource_group_by_id"
      end
      # resource path
      local_var_path = '/resources/remove/group/{resourceGroupId}'.sub('{' + 'resourceGroupId' + '}', resource_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#delete_resource_group_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get credentials given an ID
    # @param credential_id Credentials ID
    # @param [Hash] opts the optional parameters
    # @return [ResourceCredentials]
    def get_credentials_by_id(credential_id, opts = {})
      data, _status_code, _headers = get_credentials_by_id_with_http_info(credential_id, opts)
      data
    end

    # Get credentials given an ID
    # @param credential_id Credentials ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceCredentials, Fixnum, Hash)>] ResourceCredentials data, response status code and response headers
    def get_credentials_by_id_with_http_info(credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_credentials_by_id ...'
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling ResourceApi.get_credentials_by_id"
      end
      # resource path
      local_var_path = '/resources/credentials/{credentialId}'.sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceCredentials')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_credentials_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the resource with the specified resource ID
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Resource]
    def get_resource_by_id(resource_id, opts = {})
      data, _status_code, _headers = get_resource_by_id_with_http_info(resource_id, opts)
      data
    end

    # Get the resource with the specified resource ID
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Resource, Fixnum, Hash)>] Resource data, response status code and response headers
    def get_resource_by_id_with_http_info(resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resource_by_id ...'
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling ResourceApi.get_resource_by_id"
      end
      # resource path
      local_var_path = '/resources/resource/{resourceId}'.sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Resource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resource_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all the resources with the specified resource subtype
    # @param resource_sub_type Subtype of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<Resource>]
    def get_resource_by_sub_type(resource_sub_type, opts = {})
      data, _status_code, _headers = get_resource_by_sub_type_with_http_info(resource_sub_type, opts)
      data
    end

    # Get all the resources with the specified resource subtype
    # @param resource_sub_type Subtype of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Resource>, Fixnum, Hash)>] Array<Resource> data, response status code and response headers
    def get_resource_by_sub_type_with_http_info(resource_sub_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resource_by_sub_type ...'
      end
      # verify the required parameter 'resource_sub_type' is set
      if @api_client.config.client_side_validation && resource_sub_type.nil?
        fail ArgumentError, "Missing the required parameter 'resource_sub_type' when calling ResourceApi.get_resource_by_sub_type"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['EMR', 'S3', 'GoogleStorage', 'DataProc', 'HDInsight', 'AzureStorage', 'HDFS', 'YARN'].include?(resource_sub_type)
        fail ArgumentError, "invalid value for 'resource_sub_type', must be one of EMR, S3, GoogleStorage, DataProc, HDInsight, AzureStorage, HDFS, YARN"
      end
      # resource path
      local_var_path = '/resources/resources/subtype/{resourceSubType}'.sub('{' + 'resourceSubType' + '}', resource_sub_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Resource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resource_by_sub_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all the resources with the specified resource type
    # @param resource_type Type of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<Resource>]
    def get_resource_by_type(resource_type, opts = {})
      data, _status_code, _headers = get_resource_by_type_with_http_info(resource_type, opts)
      data
    end

    # Get all the resources with the specified resource type
    # @param resource_type Type of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Resource>, Fixnum, Hash)>] Array<Resource> data, response status code and response headers
    def get_resource_by_type_with_http_info(resource_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resource_by_type ...'
      end
      # verify the required parameter 'resource_type' is set
      if @api_client.config.client_side_validation && resource_type.nil?
        fail ArgumentError, "Missing the required parameter 'resource_type' when calling ResourceApi.get_resource_by_type"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['COMPUTE', 'STORAGE'].include?(resource_type)
        fail ArgumentError, "invalid value for 'resource_type', must be one of COMPUTE, STORAGE"
      end
      # resource path
      local_var_path = '/resources/resources/type/{resourceType}'.sub('{' + 'resourceType' + '}', resource_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Resource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resource_by_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the resource details with the specified resource ID
    # Get the details for the resource, for the given ID. Note that a 'ResourceDetails' object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the 'Resource' object contains only general information (name, id, type, subtype). 
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_resource_details_by_id(resource_id, opts = {})
      data, _status_code, _headers = get_resource_details_by_id_with_http_info(resource_id, opts)
      data
    end

    # Get the resource details with the specified resource ID
    # Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
    # @param resource_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_resource_details_by_id_with_http_info(resource_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resource_details_by_id ...'
      end
      # verify the required parameter 'resource_id' is set
      if @api_client.config.client_side_validation && resource_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_id' when calling ResourceApi.get_resource_details_by_id"
      end
      # resource path
      local_var_path = '/resources/details/{resourceId}'.sub('{' + 'resourceId' + '}', resource_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resource_details_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the resource group with the specified resource group ID
    # @param resource_group_id ID of the resource group
    # @param [Hash] opts the optional parameters
    # @return [ResourceGroup]
    def get_resource_group_by_id(resource_group_id, opts = {})
      data, _status_code, _headers = get_resource_group_by_id_with_http_info(resource_group_id, opts)
      data
    end

    # Get the resource group with the specified resource group ID
    # @param resource_group_id ID of the resource group
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceGroup, Fixnum, Hash)>] ResourceGroup data, response status code and response headers
    def get_resource_group_by_id_with_http_info(resource_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resource_group_by_id ...'
      end
      # verify the required parameter 'resource_group_id' is set
      if @api_client.config.client_side_validation && resource_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_group_id' when calling ResourceApi.get_resource_group_by_id"
      end
      # resource path
      local_var_path = '/resources/group/{resourceGroupId}'.sub('{' + 'resourceGroupId' + '}', resource_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resource_group_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of all the resource groups
    # @param [Hash] opts the optional parameters
    # @return [Array<ResourceGroup>]
    def get_resource_groups(opts = {})
      data, _status_code, _headers = get_resource_groups_with_http_info(opts)
      data
    end

    # Get a list of all the resource groups
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ResourceGroup>, Fixnum, Hash)>] Array<ResourceGroup> data, response status code and response headers
    def get_resource_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resource_groups ...'
      end
      # resource path
      local_var_path = '/resources/groups'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ResourceGroup>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resource_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # A list of all known/registered resources, of all types
    # @param [Hash] opts the optional parameters
    # @return [Array<Resource>]
    def get_resources(opts = {})
      data, _status_code, _headers = get_resources_with_http_info(opts)
      data
    end

    # A list of all known/registered resources, of all types
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Resource>, Fixnum, Hash)>] Array<Resource> data, response status code and response headers
    def get_resources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resources ...'
      end
      # resource path
      local_var_path = '/resources/resources'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Resource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all resources from a resource group
    # @param resource_group_id ID of the resource group
    # @param [Hash] opts the optional parameters
    # @return [Array<Resource>]
    def get_resources_from_group(resource_group_id, opts = {})
      data, _status_code, _headers = get_resources_from_group_with_http_info(resource_group_id, opts)
      data
    end

    # Get all resources from a resource group
    # @param resource_group_id ID of the resource group
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Resource>, Fixnum, Hash)>] Array<Resource> data, response status code and response headers
    def get_resources_from_group_with_http_info(resource_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resources_from_group ...'
      end
      # verify the required parameter 'resource_group_id' is set
      if @api_client.config.client_side_validation && resource_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'resource_group_id' when calling ResourceApi.get_resources_from_group"
      end
      # resource path
      local_var_path = '/resources/group/{resourceGroupId}/resources'.sub('{' + 'resourceGroupId' + '}', resource_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Resource>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resources_from_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
