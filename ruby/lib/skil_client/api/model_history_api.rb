=begin
#Endpoints

#Endpoints API for different services in SKIL

OpenAPI spec version: 1.2.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module SkilCient
  class ModelHistoryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds an evaluation result
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param evaluation_results_entity The evaluation result entity
    # @param [Hash] opts the optional parameters
    # @return [EvaluationResultsEntity]
    def add_evaluation_result(model_history_server_id, evaluation_results_entity, opts = {})
      data, _status_code, _headers = add_evaluation_result_with_http_info(model_history_server_id, evaluation_results_entity, opts)
      data
    end

    # Adds an evaluation result
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param evaluation_results_entity The evaluation result entity
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationResultsEntity, Fixnum, Hash)>] EvaluationResultsEntity data, response status code and response headers
    def add_evaluation_result_with_http_info(model_history_server_id, evaluation_results_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.add_evaluation_result ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.add_evaluation_result"
      end
      # verify the required parameter 'evaluation_results_entity' is set
      if @api_client.config.client_side_validation && evaluation_results_entity.nil?
        fail ArgumentError, "Missing the required parameter 'evaluation_results_entity' when calling ModelHistoryApi.add_evaluation_result"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/revisions/evaluations/'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(evaluation_results_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationResultsEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#add_evaluation_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a number of examples to a minibatch ID given an AddExampleRequest.
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param add_example_request The add example request, encapsulating minibatch details and examples batch size
    # @param [Hash] opts the optional parameters
    # @return [AddExampleRequest]
    def add_example_for_batch(model_history_server_id, add_example_request, opts = {})
      data, _status_code, _headers = add_example_for_batch_with_http_info(model_history_server_id, add_example_request, opts)
      data
    end

    # Adds a number of examples to a minibatch ID given an AddExampleRequest.
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param add_example_request The add example request, encapsulating minibatch details and examples batch size
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddExampleRequest, Fixnum, Hash)>] AddExampleRequest data, response status code and response headers
    def add_example_for_batch_with_http_info(model_history_server_id, add_example_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.add_example_for_batch ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.add_example_for_batch"
      end
      # verify the required parameter 'add_example_request' is set
      if @api_client.config.client_side_validation && add_example_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_example_request' when calling ModelHistoryApi.add_example_for_batch"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/exampleForBatch'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_example_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddExampleRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#add_example_for_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds an example to a minibatch
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param example_entity The example to add to the minibatch
    # @param [Hash] opts the optional parameters
    # @return [ExampleEntity]
    def add_example_to_minibatch(model_history_server_id, example_entity, opts = {})
      data, _status_code, _headers = add_example_to_minibatch_with_http_info(model_history_server_id, example_entity, opts)
      data
    end

    # Adds an example to a minibatch
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param example_entity The example to add to the minibatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExampleEntity, Fixnum, Hash)>] ExampleEntity data, response status code and response headers
    def add_example_to_minibatch_with_http_info(model_history_server_id, example_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.add_example_to_minibatch ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.add_example_to_minibatch"
      end
      # verify the required parameter 'example_entity' is set
      if @api_client.config.client_side_validation && example_entity.nil?
        fail ArgumentError, "Missing the required parameter 'example_entity' when calling ModelHistoryApi.add_example_to_minibatch"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/example'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(example_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExampleEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#add_example_to_minibatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add an experiment, given an experiment entity
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_entity The experiment entity to add
    # @param [Hash] opts the optional parameters
    # @return [ExperimentEntity]
    def add_experiment(model_history_server_id, experiment_entity, opts = {})
      data, _status_code, _headers = add_experiment_with_http_info(model_history_server_id, experiment_entity, opts)
      data
    end

    # Add an experiment, given an experiment entity
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_entity The experiment entity to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExperimentEntity, Fixnum, Hash)>] ExperimentEntity data, response status code and response headers
    def add_experiment_with_http_info(model_history_server_id, experiment_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.add_experiment ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.add_experiment"
      end
      # verify the required parameter 'experiment_entity' is set
      if @api_client.config.client_side_validation && experiment_entity.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_entity' when calling ModelHistoryApi.add_experiment"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiment'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(experiment_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExperimentEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#add_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a minibatch
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param minibatch_entity The minibatch entity to add
    # @param [Hash] opts the optional parameters
    # @return [MinibatchEntity]
    def add_minibatch(model_history_server_id, minibatch_entity, opts = {})
      data, _status_code, _headers = add_minibatch_with_http_info(model_history_server_id, minibatch_entity, opts)
      data
    end

    # Adds a minibatch
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param minibatch_entity The minibatch entity to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(MinibatchEntity, Fixnum, Hash)>] MinibatchEntity data, response status code and response headers
    def add_minibatch_with_http_info(model_history_server_id, minibatch_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.add_minibatch ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.add_minibatch"
      end
      # verify the required parameter 'minibatch_entity' is set
      if @api_client.config.client_side_validation && minibatch_entity.nil?
        fail ArgumentError, "Missing the required parameter 'minibatch_entity' when calling ModelHistoryApi.add_minibatch"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/minibatch'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(minibatch_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MinibatchEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#add_minibatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds an evaluation feedback to the model against a given minibatch id.
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_feed_back_request The model feedback request object
    # @param [Hash] opts the optional parameters
    # @return [ModelFeedBackRequest]
    def add_model_feedback(model_history_server_id, model_feed_back_request, opts = {})
      data, _status_code, _headers = add_model_feedback_with_http_info(model_history_server_id, model_feed_back_request, opts)
      data
    end

    # Adds an evaluation feedback to the model against a given minibatch id.
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_feed_back_request The model feedback request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelFeedBackRequest, Fixnum, Hash)>] ModelFeedBackRequest data, response status code and response headers
    def add_model_feedback_with_http_info(model_history_server_id, model_feed_back_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.add_model_feedback ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.add_model_feedback"
      end
      # verify the required parameter 'model_feed_back_request' is set
      if @api_client.config.client_side_validation && model_feed_back_request.nil?
        fail ArgumentError, "Missing the required parameter 'model_feed_back_request' when calling ModelHistoryApi.add_model_feedback"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/feedback'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model_feed_back_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelFeedBackRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#add_model_feedback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param add_model_history_request The model history request object
    # @param [Hash] opts the optional parameters
    # @return [ModelHistoryEntity]
    def add_model_history(model_history_server_id, add_model_history_request, opts = {})
      data, _status_code, _headers = add_model_history_with_http_info(model_history_server_id, add_model_history_request, opts)
      data
    end

    # Add a model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param add_model_history_request The model history request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelHistoryEntity, Fixnum, Hash)>] ModelHistoryEntity data, response status code and response headers
    def add_model_history_with_http_info(model_history_server_id, add_model_history_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.add_model_history ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.add_model_history"
      end
      # verify the required parameter 'add_model_history_request' is set
      if @api_client.config.client_side_validation && add_model_history_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_model_history_request' when calling ModelHistoryApi.add_model_history"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/modelhistory'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(add_model_history_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelHistoryEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#add_model_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a model
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_entity The object encapsulating the model instance id and evaluation type to aggregate
    # @param [Hash] opts the optional parameters
    # @return [ModelInstanceEntity]
    def add_model_instance(model_history_server_id, model_instance_entity, opts = {})
      data, _status_code, _headers = add_model_instance_with_http_info(model_history_server_id, model_instance_entity, opts)
      data
    end

    # Adds a model
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_entity The object encapsulating the model instance id and evaluation type to aggregate
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelInstanceEntity, Fixnum, Hash)>] ModelInstanceEntity data, response status code and response headers
    def add_model_instance_with_http_info(model_history_server_id, model_instance_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.add_model_instance ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.add_model_instance"
      end
      # verify the required parameter 'model_instance_entity' is set
      if @api_client.config.client_side_validation && model_instance_entity.nil?
        fail ArgumentError, "Missing the required parameter 'model_instance_entity' when calling ModelHistoryApi.add_model_instance"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model_instance_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelInstanceEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#add_model_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Aggregates the evaluaition results of a model instance, based on the evaluation type
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param aggregate_prediction The object encapsulating the model instance id and evaluation type to aggregate
    # @param [Hash] opts the optional parameters
    # @return [EvaluationResultsEntity]
    def aggregate_model_results(model_history_server_id, aggregate_prediction, opts = {})
      data, _status_code, _headers = aggregate_model_results_with_http_info(model_history_server_id, aggregate_prediction, opts)
      data
    end

    # Aggregates the evaluaition results of a model instance, based on the evaluation type
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param aggregate_prediction The object encapsulating the model instance id and evaluation type to aggregate
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationResultsEntity, Fixnum, Hash)>] EvaluationResultsEntity data, response status code and response headers
    def aggregate_model_results_with_http_info(model_history_server_id, aggregate_prediction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.aggregate_model_results ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.aggregate_model_results"
      end
      # verify the required parameter 'aggregate_prediction' is set
      if @api_client.config.client_side_validation && aggregate_prediction.nil?
        fail ArgumentError, "Missing the required parameter 'aggregate_prediction' when calling ModelHistoryApi.aggregate_model_results"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/aggregateresults'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregate_prediction)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationResultsEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#aggregate_model_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates model History
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_entity The model history entity
    # @param [Hash] opts the optional parameters
    # @return [ModelHistoryEntity]
    def create_model_history(model_history_server_id, model_history_entity, opts = {})
      data, _status_code, _headers = create_model_history_with_http_info(model_history_server_id, model_history_entity, opts)
      data
    end

    # Creates model History
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_entity The model history entity
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelHistoryEntity, Fixnum, Hash)>] ModelHistoryEntity data, response status code and response headers
    def create_model_history_with_http_info(model_history_server_id, model_history_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.create_model_history ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.create_model_history"
      end
      # verify the required parameter 'model_history_entity' is set
      if @api_client.config.client_side_validation && model_history_entity.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_entity' when calling ModelHistoryApi.create_model_history"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/revisions'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model_history_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelHistoryEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#create_model_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an experiment, given an experiment entity
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment to delete
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def delete_experiment(model_history_server_id, experiment_id, opts = {})
      data, _status_code, _headers = delete_experiment_with_http_info(model_history_server_id, experiment_id, opts)
      data
    end

    # Deletes an experiment, given an experiment entity
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def delete_experiment_with_http_info(model_history_server_id, experiment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.delete_experiment ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.delete_experiment"
      end
      # verify the required parameter 'experiment_id' is set
      if @api_client.config.client_side_validation && experiment_id.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_id' when calling ModelHistoryApi.delete_experiment"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiment/{experimentID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'experimentID' + '}', experiment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#delete_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a model history / workspace, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id the GUID of the model history / workspace to delete
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def delete_model_history(model_history_server_id, model_history_id, opts = {})
      data, _status_code, _headers = delete_model_history_with_http_info(model_history_server_id, model_history_id, opts)
      data
    end

    # Deletes a model history / workspace, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id the GUID of the model history / workspace to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def delete_model_history_with_http_info(model_history_server_id, model_history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.delete_model_history ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.delete_model_history"
      end
      # verify the required parameter 'model_history_id' is set
      if @api_client.config.client_side_validation && model_history_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_id' when calling ModelHistoryApi.delete_model_history"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelHistoryID' + '}', model_history_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#delete_model_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a model instance, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_id GUID of the model instance to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_model_instance(model_history_server_id, model_instance_id, opts = {})
      delete_model_instance_with_http_info(model_history_server_id, model_instance_id, opts)
      nil
    end

    # Deletes a model instance, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_id GUID of the model instance to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_model_instance_with_http_info(model_history_server_id, model_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.delete_model_instance ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.delete_model_instance"
      end
      # verify the required parameter 'model_instance_id' is set
      if @api_client.config.client_side_validation && model_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_instance_id' when calling ModelHistoryApi.delete_model_instance"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/{modelInstanceID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelInstanceID' + '}', model_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#delete_model_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the best model among the given model instance IDs, based on the evaluation type and column metric
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param best_model Object encapsulating the model ids, eval type and column metric name
    # @param [Hash] opts the optional parameters
    # @return [ModelInstanceEntity]
    def get_best_model_among_model_ids(model_history_server_id, best_model, opts = {})
      data, _status_code, _headers = get_best_model_among_model_ids_with_http_info(model_history_server_id, best_model, opts)
      data
    end

    # Gets the best model among the given model instance IDs, based on the evaluation type and column metric
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param best_model Object encapsulating the model ids, eval type and column metric name
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelInstanceEntity, Fixnum, Hash)>] ModelInstanceEntity data, response status code and response headers
    def get_best_model_among_model_ids_with_http_info(model_history_server_id, best_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.get_best_model_among_model_ids ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.get_best_model_among_model_ids"
      end
      # verify the required parameter 'best_model' is set
      if @api_client.config.client_side_validation && best_model.nil?
        fail ArgumentError, "Missing the required parameter 'best_model' when calling ModelHistoryApi.get_best_model_among_model_ids"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/best'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(best_model)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelInstanceEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#get_best_model_among_model_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the list of evaluation results entity, given a model instance ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_id GUID of the model instance to get evaluation results for.
    # @param [Hash] opts the optional parameters
    # @return [Array<EvaluationResultsEntity>]
    def get_evaluation_for_model_id(model_history_server_id, model_instance_id, opts = {})
      data, _status_code, _headers = get_evaluation_for_model_id_with_http_info(model_history_server_id, model_instance_id, opts)
      data
    end

    # Gets the list of evaluation results entity, given a model instance ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_id GUID of the model instance to get evaluation results for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EvaluationResultsEntity>, Fixnum, Hash)>] Array<EvaluationResultsEntity> data, response status code and response headers
    def get_evaluation_for_model_id_with_http_info(model_history_server_id, model_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.get_evaluation_for_model_id ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.get_evaluation_for_model_id"
      end
      # verify the required parameter 'model_instance_id' is set
      if @api_client.config.client_side_validation && model_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_instance_id' when calling ModelHistoryApi.get_evaluation_for_model_id"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelInstanceID' + '}', model_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<EvaluationResultsEntity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#get_evaluation_for_model_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets all the examples for a minibatch ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param minibatch_id The GUID of the minibatch
    # @param [Hash] opts the optional parameters
    # @return [Array<ExampleEntity>]
    def get_examples_for_minibatch(model_history_server_id, minibatch_id, opts = {})
      data, _status_code, _headers = get_examples_for_minibatch_with_http_info(model_history_server_id, minibatch_id, opts)
      data
    end

    # Gets all the examples for a minibatch ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param minibatch_id The GUID of the minibatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ExampleEntity>, Fixnum, Hash)>] Array<ExampleEntity> data, response status code and response headers
    def get_examples_for_minibatch_with_http_info(model_history_server_id, minibatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.get_examples_for_minibatch ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.get_examples_for_minibatch"
      end
      # verify the required parameter 'minibatch_id' is set
      if @api_client.config.client_side_validation && minibatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'minibatch_id' when calling ModelHistoryApi.get_examples_for_minibatch"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/example/{minibatchId}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'minibatchId' + '}', minibatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ExampleEntity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#get_examples_for_minibatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtain an experiment's details, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment to obtain
    # @param [Hash] opts the optional parameters
    # @return [ExperimentEntity]
    def get_experiment(model_history_server_id, experiment_id, opts = {})
      data, _status_code, _headers = get_experiment_with_http_info(model_history_server_id, experiment_id, opts)
      data
    end

    # Obtain an experiment&#39;s details, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment to obtain
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExperimentEntity, Fixnum, Hash)>] ExperimentEntity data, response status code and response headers
    def get_experiment_with_http_info(model_history_server_id, experiment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.get_experiment ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.get_experiment"
      end
      # verify the required parameter 'experiment_id' is set
      if @api_client.config.client_side_validation && experiment_id.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_id' when calling ModelHistoryApi.get_experiment"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiment/{experimentID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'experimentID' + '}', experiment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExperimentEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#get_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtain all experiments for a model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id the GUID of the model history / workspace
    # @param [Hash] opts the optional parameters
    # @return [ExperimentEntity]
    def get_experiments_for_model_history(model_history_server_id, model_history_id, opts = {})
      data, _status_code, _headers = get_experiments_for_model_history_with_http_info(model_history_server_id, model_history_id, opts)
      data
    end

    # Obtain all experiments for a model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id the GUID of the model history / workspace
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExperimentEntity, Fixnum, Hash)>] ExperimentEntity data, response status code and response headers
    def get_experiments_for_model_history_with_http_info(model_history_server_id, model_history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.get_experiments_for_model_history ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.get_experiments_for_model_history"
      end
      # verify the required parameter 'model_history_id' is set
      if @api_client.config.client_side_validation && model_history_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_id' when calling ModelHistoryApi.get_experiments_for_model_history"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelHistoryID' + '}', model_history_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExperimentEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#get_experiments_for_model_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets a minibatch for the model
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param minibatch_id The GUID of the minibatch
    # @param [Hash] opts the optional parameters
    # @return [MinibatchEntity]
    def get_minibatch(model_history_server_id, minibatch_id, opts = {})
      data, _status_code, _headers = get_minibatch_with_http_info(model_history_server_id, minibatch_id, opts)
      data
    end

    # Gets a minibatch for the model
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param minibatch_id The GUID of the minibatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(MinibatchEntity, Fixnum, Hash)>] MinibatchEntity data, response status code and response headers
    def get_minibatch_with_http_info(model_history_server_id, minibatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.get_minibatch ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.get_minibatch"
      end
      # verify the required parameter 'minibatch_id' is set
      if @api_client.config.client_side_validation && minibatch_id.nil?
        fail ArgumentError, "Missing the required parameter 'minibatch_id' when calling ModelHistoryApi.get_minibatch"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'minibatchId' + '}', minibatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MinibatchEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#get_minibatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets a model history, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id GUID of the model history to get information of.
    # @param [Hash] opts the optional parameters
    # @return [ModelHistoryEntity]
    def get_model_history(model_history_server_id, model_history_id, opts = {})
      data, _status_code, _headers = get_model_history_with_http_info(model_history_server_id, model_history_id, opts)
      data
    end

    # Gets a model history, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id GUID of the model history to get information of.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelHistoryEntity, Fixnum, Hash)>] ModelHistoryEntity data, response status code and response headers
    def get_model_history_with_http_info(model_history_server_id, model_history_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.get_model_history ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.get_model_history"
      end
      # verify the required parameter 'model_history_id' is set
      if @api_client.config.client_side_validation && model_history_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_id' when calling ModelHistoryApi.get_model_history"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelHistoryID' + '}', model_history_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelHistoryEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#get_model_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets a model instance, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_id GUID of the model instance to get information of.
    # @param [Hash] opts the optional parameters
    # @return [ModelInstanceEntity]
    def get_model_instance(model_history_server_id, model_instance_id, opts = {})
      data, _status_code, _headers = get_model_instance_with_http_info(model_history_server_id, model_instance_id, opts)
      data
    end

    # Gets a model instance, given its ID
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_instance_id GUID of the model instance to get information of.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelInstanceEntity, Fixnum, Hash)>] ModelInstanceEntity data, response status code and response headers
    def get_model_instance_with_http_info(model_history_server_id, model_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.get_model_instance ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.get_model_instance"
      end
      # verify the required parameter 'model_instance_id' is set
      if @api_client.config.client_side_validation && model_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_instance_id' when calling ModelHistoryApi.get_model_instance"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/model/{modelInstanceID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelInstanceID' + '}', model_instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelInstanceEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#get_model_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtain a list of all the models for an experiment
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment
    # @param [Hash] opts the optional parameters
    # @return [Array<ModelInstanceEntity>]
    def get_models_for_experiment(model_history_server_id, experiment_id, opts = {})
      data, _status_code, _headers = get_models_for_experiment_with_http_info(model_history_server_id, experiment_id, opts)
      data
    end

    # Obtain a list of all the models for an experiment
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ModelInstanceEntity>, Fixnum, Hash)>] Array<ModelInstanceEntity> data, response status code and response headers
    def get_models_for_experiment_with_http_info(model_history_server_id, experiment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.get_models_for_experiment ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.get_models_for_experiment"
      end
      # verify the required parameter 'experiment_id' is set
      if @api_client.config.client_side_validation && experiment_id.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_id' when calling ModelHistoryApi.get_models_for_experiment"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiment/{experimentID}/models'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'experimentID' + '}', experiment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModelInstanceEntity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#get_models_for_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all of the experiments in every model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<ExperimentEntity>]
    def list_all_experiments(model_history_server_id, opts = {})
      data, _status_code, _headers = list_all_experiments_with_http_info(model_history_server_id, opts)
      data
    end

    # List all of the experiments in every model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ExperimentEntity>, Fixnum, Hash)>] Array<ExperimentEntity> data, response status code and response headers
    def list_all_experiments_with_http_info(model_history_server_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.list_all_experiments ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.list_all_experiments"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiments'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ExperimentEntity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#list_all_experiments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the best model for an experiment
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param update_best_model Model encapsulating the experiment id to update and the best model id.
    # @param [Hash] opts the optional parameters
    # @return [ExperimentEntity]
    def update_best_model_for_experiment(model_history_server_id, update_best_model, opts = {})
      data, _status_code, _headers = update_best_model_for_experiment_with_http_info(model_history_server_id, update_best_model, opts)
      data
    end

    # Updates the best model for an experiment
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param update_best_model Model encapsulating the experiment id to update and the best model id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExperimentEntity, Fixnum, Hash)>] ExperimentEntity data, response status code and response headers
    def update_best_model_for_experiment_with_http_info(model_history_server_id, update_best_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.update_best_model_for_experiment ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.update_best_model_for_experiment"
      end
      # verify the required parameter 'update_best_model' is set
      if @api_client.config.client_side_validation && update_best_model.nil?
        fail ArgumentError, "Missing the required parameter 'update_best_model' when calling ModelHistoryApi.update_best_model_for_experiment"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiment/best'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_best_model)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExperimentEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#update_best_model_for_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates an experiment, given an experiment entity
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment to update
    # @param experiment_entity The experiment entity to update with
    # @param [Hash] opts the optional parameters
    # @return [ExperimentEntity]
    def update_experiment(model_history_server_id, experiment_id, experiment_entity, opts = {})
      data, _status_code, _headers = update_experiment_with_http_info(model_history_server_id, experiment_id, experiment_entity, opts)
      data
    end

    # Updates an experiment, given an experiment entity
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param experiment_id the GUID of the experiment to update
    # @param experiment_entity The experiment entity to update with
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExperimentEntity, Fixnum, Hash)>] ExperimentEntity data, response status code and response headers
    def update_experiment_with_http_info(model_history_server_id, experiment_id, experiment_entity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.update_experiment ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.update_experiment"
      end
      # verify the required parameter 'experiment_id' is set
      if @api_client.config.client_side_validation && experiment_id.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_id' when calling ModelHistoryApi.update_experiment"
      end
      # verify the required parameter 'experiment_entity' is set
      if @api_client.config.client_side_validation && experiment_entity.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_entity' when calling ModelHistoryApi.update_experiment"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/experiment/{experimentID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'experimentID' + '}', experiment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(experiment_entity)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExperimentEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#update_experiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id the GUID of the model history / workspace to update
    # @param update_model_history_request The model history request object
    # @param [Hash] opts the optional parameters
    # @return [ModelHistoryEntity]
    def update_model_history(model_history_server_id, model_history_id, update_model_history_request, opts = {})
      data, _status_code, _headers = update_model_history_with_http_info(model_history_server_id, model_history_id, update_model_history_request, opts)
      data
    end

    # Update a model history / workspace
    # @param model_history_server_id Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
    # @param model_history_id the GUID of the model history / workspace to update
    # @param update_model_history_request The model history request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelHistoryEntity, Fixnum, Hash)>] ModelHistoryEntity data, response status code and response headers
    def update_model_history_with_http_info(model_history_server_id, model_history_id, update_model_history_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelHistoryApi.update_model_history ...'
      end
      # verify the required parameter 'model_history_server_id' is set
      if @api_client.config.client_side_validation && model_history_server_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_server_id' when calling ModelHistoryApi.update_model_history"
      end
      # verify the required parameter 'model_history_id' is set
      if @api_client.config.client_side_validation && model_history_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_history_id' when calling ModelHistoryApi.update_model_history"
      end
      # verify the required parameter 'update_model_history_request' is set
      if @api_client.config.client_side_validation && update_model_history_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_model_history_request' when calling ModelHistoryApi.update_model_history"
      end
      # resource path
      local_var_path = '/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}'.sub('{' + 'modelHistoryServerId' + '}', model_history_server_id.to_s).sub('{' + 'modelHistoryID' + '}', model_history_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_model_history_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelHistoryEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelHistoryApi#update_model_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
