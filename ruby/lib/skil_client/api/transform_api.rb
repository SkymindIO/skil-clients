=begin
#Endpoints

#Endpoints API for different services in SKIL

OpenAPI spec version: 1.2.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module SkilCient
  class TransformApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
    # Takes a batch of SingleCSVRecord object and transforms it into the desired format
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [BatchCSVRecord] :batch_csv_record The input batch of record arrays
    # @return [BatchCSVRecord]
    def transform_csv(deployment_name, version_name, transform_name, opts = {})
      data, _status_code, _headers = transform_csv_with_http_info(deployment_name, version_name, transform_name, opts)
      data
    end

    # Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
    # Takes a batch of SingleCSVRecord object and transforms it into the desired format
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [BatchCSVRecord] :batch_csv_record The input batch of record arrays
    # @return [Array<(BatchCSVRecord, Fixnum, Hash)>] BatchCSVRecord data, response status code and response headers
    def transform_csv_with_http_info(deployment_name, version_name, transform_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransformApi.transform_csv ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling TransformApi.transform_csv"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling TransformApi.transform_csv"
      end
      # verify the required parameter 'transform_name' is set
      if @api_client.config.client_side_validation && transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'transform_name' when calling TransformApi.transform_csv"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'transformName' + '}', transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_csv_record'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchCSVRecord')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransformApi#transform_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Takes a batch input arrays and transforms it
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :batch_record The input batch of record arrays
    # @return [Base64NDArrayBody]
    def transformarray(deployment_name, version_name, transform_name, opts = {})
      data, _status_code, _headers = transformarray_with_http_info(deployment_name, version_name, transform_name, opts)
      data
    end

    # Takes a batch input arrays and transforms it
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :batch_record The input batch of record arrays
    # @return [Array<(Base64NDArrayBody, Fixnum, Hash)>] Base64NDArrayBody data, response status code and response headers
    def transformarray_with_http_info(deployment_name, version_name, transform_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransformApi.transformarray ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling TransformApi.transformarray"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling TransformApi.transformarray"
      end
      # verify the required parameter 'transform_name' is set
      if @api_client.config.client_side_validation && transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'transform_name' when calling TransformApi.transformarray"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'transformName' + '}', transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'batch_record'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64NDArrayBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransformApi#transformarray\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Takes multiple multipart image file to transform and returns Base64NDArrayBody
    # Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param image_transform_name ID or name of the deployed image transform
    # @param files The image files to upload
    # @param [Hash] opts the optional parameters
    # @return [Base64NDArrayBody]
    def transformimage(deployment_name, version_name, image_transform_name, files, opts = {})
      data, _status_code, _headers = transformimage_with_http_info(deployment_name, version_name, image_transform_name, files, opts)
      data
    end

    # Takes multiple multipart image file to transform and returns Base64NDArrayBody
    # Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param image_transform_name ID or name of the deployed image transform
    # @param files The image files to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Base64NDArrayBody, Fixnum, Hash)>] Base64NDArrayBody data, response status code and response headers
    def transformimage_with_http_info(deployment_name, version_name, image_transform_name, files, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransformApi.transformimage ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling TransformApi.transformimage"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling TransformApi.transformimage"
      end
      # verify the required parameter 'image_transform_name' is set
      if @api_client.config.client_side_validation && image_transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'image_transform_name' when calling TransformApi.transformimage"
      end
      # verify the required parameter 'files' is set
      if @api_client.config.client_side_validation && files.nil?
        fail ArgumentError, "Missing the required parameter 'files' when calling TransformApi.transformimage"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'imageTransformName' + '}', image_transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['files'] = @api_client.build_collection_param(files, :csv)

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64NDArrayBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransformApi#transformimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
    # Takes a SingleCSVRecord object and transforms it into the desired format
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [SingleCSVRecord] :single_csv_record The input record array
    # @return [SingleCSVRecord]
    def transformincremental_csv(deployment_name, version_name, transform_name, opts = {})
      data, _status_code, _headers = transformincremental_csv_with_http_info(deployment_name, version_name, transform_name, opts)
      data
    end

    # Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
    # Takes a SingleCSVRecord object and transforms it into the desired format
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [SingleCSVRecord] :single_csv_record The input record array
    # @return [Array<(SingleCSVRecord, Fixnum, Hash)>] SingleCSVRecord data, response status code and response headers
    def transformincremental_csv_with_http_info(deployment_name, version_name, transform_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransformApi.transformincremental_csv ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling TransformApi.transformincremental_csv"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling TransformApi.transformincremental_csv"
      end
      # verify the required parameter 'transform_name' is set
      if @api_client.config.client_side_validation && transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'transform_name' when calling TransformApi.transformincremental_csv"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'transformName' + '}', transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'single_csv_record'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SingleCSVRecord')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransformApi#transformincremental_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Same as /transformincremental but returns Base64NDArrayBody.
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :single_record The input record array
    # @return [Base64NDArrayBody]
    def transformincrementalarray(deployment_name, version_name, transform_name, opts = {})
      data, _status_code, _headers = transformincrementalarray_with_http_info(deployment_name, version_name, transform_name, opts)
      data
    end

    # Same as /transformincremental but returns Base64NDArrayBody.
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :single_record The input record array
    # @return [Array<(Base64NDArrayBody, Fixnum, Hash)>] Base64NDArrayBody data, response status code and response headers
    def transformincrementalarray_with_http_info(deployment_name, version_name, transform_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransformApi.transformincrementalarray ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling TransformApi.transformincrementalarray"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling TransformApi.transformincrementalarray"
      end
      # verify the required parameter 'transform_name' is set
      if @api_client.config.client_side_validation && transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'transform_name' when calling TransformApi.transformincrementalarray"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'transformName' + '}', transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'single_record'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64NDArrayBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransformApi#transformincrementalarray\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Takes a single multipart image file to transform and returns Base64NDArrayBody
    # Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param image_transform_name ID or name of the deployed image transform
    # @param file The image file to upload
    # @param [Hash] opts the optional parameters
    # @return [Base64NDArrayBody]
    def transformincrementalimage(deployment_name, version_name, image_transform_name, file, opts = {})
      data, _status_code, _headers = transformincrementalimage_with_http_info(deployment_name, version_name, image_transform_name, file, opts)
      data
    end

    # Takes a single multipart image file to transform and returns Base64NDArrayBody
    # Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param image_transform_name ID or name of the deployed image transform
    # @param file The image file to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Base64NDArrayBody, Fixnum, Hash)>] Base64NDArrayBody data, response status code and response headers
    def transformincrementalimage_with_http_info(deployment_name, version_name, image_transform_name, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransformApi.transformincrementalimage ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling TransformApi.transformincrementalimage"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling TransformApi.transformincrementalimage"
      end
      # verify the required parameter 'image_transform_name' is set
      if @api_client.config.client_side_validation && image_transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'image_transform_name' when calling TransformApi.transformincrementalimage"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling TransformApi.transformincrementalimage"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'imageTransformName' + '}', image_transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64NDArrayBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransformApi#transformincrementalimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the JSON string of the deployed transform process (CSV or Image)
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def transformprocess_get(deployment_name, version_name, transform_name, opts = {})
      data, _status_code, _headers = transformprocess_get_with_http_info(deployment_name, version_name, transform_name, opts)
      data
    end

    # Gets the JSON string of the deployed transform process (CSV or Image)
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def transformprocess_get_with_http_info(deployment_name, version_name, transform_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransformApi.transformprocess_get ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling TransformApi.transformprocess_get"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling TransformApi.transformprocess_get"
      end
      # verify the required parameter 'transform_name' is set
      if @api_client.config.client_side_validation && transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'transform_name' when calling TransformApi.transformprocess_get"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'transformName' + '}', transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransformApi#transformprocess_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sets the deployed (CSV or Image) transform process through the provided JSON string
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :transform_process The transform process to set
    # @return [Object]
    def transformprocess_post(deployment_name, version_name, transform_name, opts = {})
      data, _status_code, _headers = transformprocess_post_with_http_info(deployment_name, version_name, transform_name, opts)
      data
    end

    # Sets the deployed (CSV or Image) transform process through the provided JSON string
    # @param deployment_name Name of the deployment group
    # @param version_name Version name of the endpoint. The default value is \&quot;default\&quot;
    # @param transform_name ID or name of the deployed transform
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :transform_process The transform process to set
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def transformprocess_post_with_http_info(deployment_name, version_name, transform_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransformApi.transformprocess_post ...'
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling TransformApi.transformprocess_post"
      end
      # verify the required parameter 'version_name' is set
      if @api_client.config.client_side_validation && version_name.nil?
        fail ArgumentError, "Missing the required parameter 'version_name' when calling TransformApi.transformprocess_post"
      end
      # verify the required parameter 'transform_name' is set
      if @api_client.config.client_side_validation && transform_name.nil?
        fail ArgumentError, "Missing the required parameter 'transform_name' when calling TransformApi.transformprocess_post"
      end
      # resource path
      local_var_path = '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess'.sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'versionName' + '}', version_name.to_s).sub('{' + 'transformName' + '}', transform_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'transform_process'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransformApi#transformprocess_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
