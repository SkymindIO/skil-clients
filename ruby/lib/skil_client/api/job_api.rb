=begin
#Endpoints

#Endpoints API for different services in SKIL

OpenAPI spec version: 1.2.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module SkilCient
  class JobApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a job
    # @param job_id_or_type Job Type
    # @param create_job_request Create job request object
    # @param [Hash] opts the optional parameters
    # @return [JobEntity]
    def create_job(job_id_or_type, create_job_request, opts = {})
      data, _status_code, _headers = create_job_with_http_info(job_id_or_type, create_job_request, opts)
      data
    end

    # Create a job
    # @param job_id_or_type Job Type
    # @param create_job_request Create job request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobEntity, Fixnum, Hash)>] JobEntity data, response status code and response headers
    def create_job_with_http_info(job_id_or_type, create_job_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.create_job ...'
      end
      # verify the required parameter 'job_id_or_type' is set
      if @api_client.config.client_side_validation && job_id_or_type.nil?
        fail ArgumentError, "Missing the required parameter 'job_id_or_type' when calling JobApi.create_job"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['TRAINING', 'INFERENCE'].include?(job_id_or_type)
        fail ArgumentError, "invalid value for 'job_id_or_type', must be one of TRAINING, INFERENCE"
      end
      # verify the required parameter 'create_job_request' is set
      if @api_client.config.client_side_validation && create_job_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_job_request' when calling JobApi.create_job"
      end
      # resource path
      local_var_path = '/jobs/{jobIdOrType}'.sub('{' + 'jobIdOrType' + '}', job_id_or_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_job_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#create_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a job given its ID
    # @param job_id_or_type Job ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_job_by_id(job_id_or_type, opts = {})
      delete_job_by_id_with_http_info(job_id_or_type, opts)
      nil
    end

    # Deletes a job given its ID
    # @param job_id_or_type Job ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_job_by_id_with_http_info(job_id_or_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.delete_job_by_id ...'
      end
      # verify the required parameter 'job_id_or_type' is set
      if @api_client.config.client_side_validation && job_id_or_type.nil?
        fail ArgumentError, "Missing the required parameter 'job_id_or_type' when calling JobApi.delete_job_by_id"
      end
      # resource path
      local_var_path = '/jobs/{jobIdOrType}'.sub('{' + 'jobIdOrType' + '}', job_id_or_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#delete_job_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download the output file from the job's execution. This will ONLY work if the job's run status is 'COMPLETE'.
    # @param job_id Job ID
    # @param download_output_file_request Download output file request object
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_job_output_file(job_id, download_output_file_request, opts = {})
      download_job_output_file_with_http_info(job_id, download_output_file_request, opts)
      nil
    end

    # Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
    # @param job_id Job ID
    # @param download_output_file_request Download output file request object
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_job_output_file_with_http_info(job_id, download_output_file_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.download_job_output_file ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobApi.download_job_output_file"
      end
      # verify the required parameter 'download_output_file_request' is set
      if @api_client.config.client_side_validation && download_output_file_request.nil?
        fail ArgumentError, "Missing the required parameter 'download_output_file_request' when calling JobApi.download_job_output_file"
      end
      # resource path
      local_var_path = '/jobs/{jobId}/outputfile'.sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(download_output_file_request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#download_job_output_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of all available jobs
    # @param [Hash] opts the optional parameters
    # @return [Array<JobEntity>]
    def get_all_jobs(opts = {})
      data, _status_code, _headers = get_all_jobs_with_http_info(opts)
      data
    end

    # Get a list of all available jobs
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<JobEntity>, Fixnum, Hash)>] Array<JobEntity> data, response status code and response headers
    def get_all_jobs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.get_all_jobs ...'
      end
      # resource path
      local_var_path = '/jobs'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<JobEntity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#get_all_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a job by its ID
    # @param job_id_or_type Job ID
    # @param [Hash] opts the optional parameters
    # @return [JobEntity]
    def get_job_by_id(job_id_or_type, opts = {})
      data, _status_code, _headers = get_job_by_id_with_http_info(job_id_or_type, opts)
      data
    end

    # Get a job by its ID
    # @param job_id_or_type Job ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobEntity, Fixnum, Hash)>] JobEntity data, response status code and response headers
    def get_job_by_id_with_http_info(job_id_or_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.get_job_by_id ...'
      end
      # verify the required parameter 'job_id_or_type' is set
      if @api_client.config.client_side_validation && job_id_or_type.nil?
        fail ArgumentError, "Missing the required parameter 'job_id_or_type' when calling JobApi.get_job_by_id"
      end
      # resource path
      local_var_path = '/jobs/{jobIdOrType}'.sub('{' + 'jobIdOrType' + '}', job_id_or_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#get_job_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Refresh the remote job status. Can be used for monitoring.
    # @param job_id Job ID
    # @param [Hash] opts the optional parameters
    # @return [JobEntity]
    def refresh_job_status(job_id, opts = {})
      data, _status_code, _headers = refresh_job_status_with_http_info(job_id, opts)
      data
    end

    # Refresh the remote job status. Can be used for monitoring.
    # @param job_id Job ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobEntity, Fixnum, Hash)>] JobEntity data, response status code and response headers
    def refresh_job_status_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.refresh_job_status ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobApi.refresh_job_status"
      end
      # resource path
      local_var_path = '/jobs/{jobId}/refresh'.sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#refresh_job_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Start running an (already created) job on the remote resource
    # @param job_id Job ID
    # @param [Hash] opts the optional parameters
    # @return [JobEntity]
    def run_a_job(job_id, opts = {})
      data, _status_code, _headers = run_a_job_with_http_info(job_id, opts)
      data
    end

    # Start running an (already created) job on the remote resource
    # @param job_id Job ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobEntity, Fixnum, Hash)>] JobEntity data, response status code and response headers
    def run_a_job_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.run_a_job ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobApi.run_a_job"
      end
      # resource path
      local_var_path = '/jobs/{jobId}/run'.sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JobEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#run_a_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
