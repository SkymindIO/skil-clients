/*
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ai.skymind.skil;

import ai.skymind.ApiCallback;
import ai.skymind.ApiClient;
import ai.skymind.ApiException;
import ai.skymind.ApiResponse;
import ai.skymind.Configuration;
import ai.skymind.Pair;
import ai.skymind.ProgressRequestBody;
import ai.skymind.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ai.skymind.skil.model.Base64NDArrayBodyKNN;
import ai.skymind.skil.model.NearestNeighborRequest;
import ai.skymind.skil.model.NearestNeighborsResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KnnApi {
    private ApiClient apiClient;

    public KnnApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KnnApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for knn
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call knnCall(String deploymentName, String versionName, String knnName, NearestNeighborRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "knnName" + "\\}", apiClient.escapeString(knnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call knnValidateBeforeCall(String deploymentName, String versionName, String knnName, NearestNeighborRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling knn(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling knn(Async)");
        }
        
        // verify the required parameter 'knnName' is set
        if (knnName == null) {
            throw new ApiException("Missing the required parameter 'knnName' when calling knn(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling knn(Async)");
        }
        

        com.squareup.okhttp.Call call = knnCall(deploymentName, versionName, knnName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Runs knn on the given index with the given k
     * Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body  (required)
     * @return NearestNeighborsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NearestNeighborsResults knn(String deploymentName, String versionName, String knnName, NearestNeighborRequest body) throws ApiException {
        ApiResponse<NearestNeighborsResults> resp = knnWithHttpInfo(deploymentName, versionName, knnName, body);
        return resp.getData();
    }

    /**
     * Runs knn on the given index with the given k
     * Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body  (required)
     * @return ApiResponse&lt;NearestNeighborsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NearestNeighborsResults> knnWithHttpInfo(String deploymentName, String versionName, String knnName, NearestNeighborRequest body) throws ApiException {
        com.squareup.okhttp.Call call = knnValidateBeforeCall(deploymentName, versionName, knnName, body, null, null);
        Type localVarReturnType = new TypeToken<NearestNeighborsResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Runs knn on the given index with the given k (asynchronously)
     * Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call knnAsync(String deploymentName, String versionName, String knnName, NearestNeighborRequest body, final ApiCallback<NearestNeighborsResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = knnValidateBeforeCall(deploymentName, versionName, knnName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NearestNeighborsResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for knnnew
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body The input NDArray (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call knnnewCall(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "knnName" + "\\}", apiClient.escapeString(knnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call knnnewValidateBeforeCall(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling knnnew(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling knnnew(Async)");
        }
        
        // verify the required parameter 'knnName' is set
        if (knnName == null) {
            throw new ApiException("Missing the required parameter 'knnName' when calling knnnew(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling knnnew(Async)");
        }
        

        com.squareup.okhttp.Call call = knnnewCall(deploymentName, versionName, knnName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run a k nearest neighbors search on a NEW data point
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body The input NDArray (required)
     * @return NearestNeighborsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NearestNeighborsResults knnnew(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body) throws ApiException {
        ApiResponse<NearestNeighborsResults> resp = knnnewWithHttpInfo(deploymentName, versionName, knnName, body);
        return resp.getData();
    }

    /**
     * Run a k nearest neighbors search on a NEW data point
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body The input NDArray (required)
     * @return ApiResponse&lt;NearestNeighborsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NearestNeighborsResults> knnnewWithHttpInfo(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body) throws ApiException {
        com.squareup.okhttp.Call call = knnnewValidateBeforeCall(deploymentName, versionName, knnName, body, null, null);
        Type localVarReturnType = new TypeToken<NearestNeighborsResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run a k nearest neighbors search on a NEW data point (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body The input NDArray (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call knnnewAsync(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body, final ApiCallback<NearestNeighborsResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = knnnewValidateBeforeCall(deploymentName, versionName, knnName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NearestNeighborsResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
