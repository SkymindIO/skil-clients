/*
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ai.skymind.skil;

import ai.skymind.ApiCallback;
import ai.skymind.ApiClient;
import ai.skymind.ApiException;
import ai.skymind.ApiResponse;
import ai.skymind.Configuration;
import ai.skymind.Pair;
import ai.skymind.ProgressRequestBody;
import ai.skymind.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ai.skymind.skil.model.Base64NDArrayBody;
import ai.skymind.skil.model.BatchCSVRecord;
import java.io.File;
import ai.skymind.skil.model.SingleCSVRecord;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransformApi {
    private ApiClient apiClient;

    public TransformApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransformApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for transformCsv
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchCSVRecord The input batch of record arrays (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformCsvCall(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchCSVRecord;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", apiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformCsvValidateBeforeCall(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformCsv(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformCsv(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformCsv(Async)");
        }
        

        com.squareup.okhttp.Call call = transformCsvCall(deploymentName, versionName, transformName, batchCSVRecord, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
     * Takes a batch of SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchCSVRecord The input batch of record arrays (optional)
     * @return BatchCSVRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchCSVRecord transformCsv(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord) throws ApiException {
        ApiResponse<BatchCSVRecord> resp = transformCsvWithHttpInfo(deploymentName, versionName, transformName, batchCSVRecord);
        return resp.getData();
    }

    /**
     * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
     * Takes a batch of SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchCSVRecord The input batch of record arrays (optional)
     * @return ApiResponse&lt;BatchCSVRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchCSVRecord> transformCsvWithHttpInfo(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord) throws ApiException {
        com.squareup.okhttp.Call call = transformCsvValidateBeforeCall(deploymentName, versionName, transformName, batchCSVRecord, null, null);
        Type localVarReturnType = new TypeToken<BatchCSVRecord>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord (asynchronously)
     * Takes a batch of SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchCSVRecord The input batch of record arrays (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformCsvAsync(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord, final ApiCallback<BatchCSVRecord> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformCsvValidateBeforeCall(deploymentName, versionName, transformName, batchCSVRecord, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchCSVRecord>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformarray
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchRecord The input batch of record arrays (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformarrayCall(String deploymentName, String versionName, String transformName, Object batchRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchRecord;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", apiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformarrayValidateBeforeCall(String deploymentName, String versionName, String transformName, Object batchRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformarray(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformarray(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformarray(Async)");
        }
        

        com.squareup.okhttp.Call call = transformarrayCall(deploymentName, versionName, transformName, batchRecord, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Takes a batch input arrays and transforms it
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchRecord The input batch of record arrays (optional)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Base64NDArrayBody transformarray(String deploymentName, String versionName, String transformName, Object batchRecord) throws ApiException {
        ApiResponse<Base64NDArrayBody> resp = transformarrayWithHttpInfo(deploymentName, versionName, transformName, batchRecord);
        return resp.getData();
    }

    /**
     * Takes a batch input arrays and transforms it
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchRecord The input batch of record arrays (optional)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Base64NDArrayBody> transformarrayWithHttpInfo(String deploymentName, String versionName, String transformName, Object batchRecord) throws ApiException {
        com.squareup.okhttp.Call call = transformarrayValidateBeforeCall(deploymentName, versionName, transformName, batchRecord, null, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Takes a batch input arrays and transforms it (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchRecord The input batch of record arrays (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformarrayAsync(String deploymentName, String versionName, String transformName, Object batchRecord, final ApiCallback<Base64NDArrayBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformarrayValidateBeforeCall(deploymentName, versionName, transformName, batchRecord, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformimage
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param files The image files to upload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformimageCall(String deploymentName, String versionName, String imageTransformName, List<byte[]> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "imageTransformName" + "\\}", apiClient.escapeString(imageTransformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformimageValidateBeforeCall(String deploymentName, String versionName, String imageTransformName, List<byte[]> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformimage(Async)");
        }
        
        // verify the required parameter 'imageTransformName' is set
        if (imageTransformName == null) {
            throw new ApiException("Missing the required parameter 'imageTransformName' when calling transformimage(Async)");
        }
        
        // verify the required parameter 'files' is set
        if (files == null) {
            throw new ApiException("Missing the required parameter 'files' when calling transformimage(Async)");
        }
        

        com.squareup.okhttp.Call call = transformimageCall(deploymentName, versionName, imageTransformName, files, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Takes multiple multipart image file to transform and returns Base64NDArrayBody
     * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param files The image files to upload (required)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Base64NDArrayBody transformimage(String deploymentName, String versionName, String imageTransformName, List<byte[]> files) throws ApiException {
        ApiResponse<Base64NDArrayBody> resp = transformimageWithHttpInfo(deploymentName, versionName, imageTransformName, files);
        return resp.getData();
    }

    /**
     * Takes multiple multipart image file to transform and returns Base64NDArrayBody
     * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param files The image files to upload (required)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Base64NDArrayBody> transformimageWithHttpInfo(String deploymentName, String versionName, String imageTransformName, List<byte[]> files) throws ApiException {
        com.squareup.okhttp.Call call = transformimageValidateBeforeCall(deploymentName, versionName, imageTransformName, files, null, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Takes multiple multipart image file to transform and returns Base64NDArrayBody (asynchronously)
     * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param files The image files to upload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformimageAsync(String deploymentName, String versionName, String imageTransformName, List<byte[]> files, final ApiCallback<Base64NDArrayBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformimageValidateBeforeCall(deploymentName, versionName, imageTransformName, files, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformincrementalCsv
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleCSVRecord The input record array (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformincrementalCsvCall(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = singleCSVRecord;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", apiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformincrementalCsvValidateBeforeCall(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformincrementalCsv(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformincrementalCsv(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformincrementalCsv(Async)");
        }
        

        com.squareup.okhttp.Call call = transformincrementalCsvCall(deploymentName, versionName, transformName, singleCSVRecord, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
     * Takes a SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleCSVRecord The input record array (optional)
     * @return SingleCSVRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleCSVRecord transformincrementalCsv(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord) throws ApiException {
        ApiResponse<SingleCSVRecord> resp = transformincrementalCsvWithHttpInfo(deploymentName, versionName, transformName, singleCSVRecord);
        return resp.getData();
    }

    /**
     * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
     * Takes a SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleCSVRecord The input record array (optional)
     * @return ApiResponse&lt;SingleCSVRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleCSVRecord> transformincrementalCsvWithHttpInfo(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord) throws ApiException {
        com.squareup.okhttp.Call call = transformincrementalCsvValidateBeforeCall(deploymentName, versionName, transformName, singleCSVRecord, null, null);
        Type localVarReturnType = new TypeToken<SingleCSVRecord>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord (asynchronously)
     * Takes a SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleCSVRecord The input record array (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformincrementalCsvAsync(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord, final ApiCallback<SingleCSVRecord> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformincrementalCsvValidateBeforeCall(deploymentName, versionName, transformName, singleCSVRecord, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleCSVRecord>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformincrementalarray
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleRecord The input record array (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformincrementalarrayCall(String deploymentName, String versionName, String transformName, Object singleRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = singleRecord;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", apiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformincrementalarrayValidateBeforeCall(String deploymentName, String versionName, String transformName, Object singleRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformincrementalarray(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformincrementalarray(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformincrementalarray(Async)");
        }
        

        com.squareup.okhttp.Call call = transformincrementalarrayCall(deploymentName, versionName, transformName, singleRecord, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Same as /transformincremental but returns Base64NDArrayBody.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleRecord The input record array (optional)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Base64NDArrayBody transformincrementalarray(String deploymentName, String versionName, String transformName, Object singleRecord) throws ApiException {
        ApiResponse<Base64NDArrayBody> resp = transformincrementalarrayWithHttpInfo(deploymentName, versionName, transformName, singleRecord);
        return resp.getData();
    }

    /**
     * Same as /transformincremental but returns Base64NDArrayBody.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleRecord The input record array (optional)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Base64NDArrayBody> transformincrementalarrayWithHttpInfo(String deploymentName, String versionName, String transformName, Object singleRecord) throws ApiException {
        com.squareup.okhttp.Call call = transformincrementalarrayValidateBeforeCall(deploymentName, versionName, transformName, singleRecord, null, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Same as /transformincremental but returns Base64NDArrayBody. (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleRecord The input record array (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformincrementalarrayAsync(String deploymentName, String versionName, String transformName, Object singleRecord, final ApiCallback<Base64NDArrayBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformincrementalarrayValidateBeforeCall(deploymentName, versionName, transformName, singleRecord, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformincrementalimage
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param file The image file to upload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformincrementalimageCall(String deploymentName, String versionName, String imageTransformName, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "imageTransformName" + "\\}", apiClient.escapeString(imageTransformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformincrementalimageValidateBeforeCall(String deploymentName, String versionName, String imageTransformName, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformincrementalimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformincrementalimage(Async)");
        }
        
        // verify the required parameter 'imageTransformName' is set
        if (imageTransformName == null) {
            throw new ApiException("Missing the required parameter 'imageTransformName' when calling transformincrementalimage(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling transformincrementalimage(Async)");
        }
        

        com.squareup.okhttp.Call call = transformincrementalimageCall(deploymentName, versionName, imageTransformName, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Takes a single multipart image file to transform and returns Base64NDArrayBody
     * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param file The image file to upload (required)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Base64NDArrayBody transformincrementalimage(String deploymentName, String versionName, String imageTransformName, File file) throws ApiException {
        ApiResponse<Base64NDArrayBody> resp = transformincrementalimageWithHttpInfo(deploymentName, versionName, imageTransformName, file);
        return resp.getData();
    }

    /**
     * Takes a single multipart image file to transform and returns Base64NDArrayBody
     * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param file The image file to upload (required)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Base64NDArrayBody> transformincrementalimageWithHttpInfo(String deploymentName, String versionName, String imageTransformName, File file) throws ApiException {
        com.squareup.okhttp.Call call = transformincrementalimageValidateBeforeCall(deploymentName, versionName, imageTransformName, file, null, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Takes a single multipart image file to transform and returns Base64NDArrayBody (asynchronously)
     * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param file The image file to upload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformincrementalimageAsync(String deploymentName, String versionName, String imageTransformName, File file, final ApiCallback<Base64NDArrayBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformincrementalimageValidateBeforeCall(deploymentName, versionName, imageTransformName, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformprocessGet
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformprocessGetCall(String deploymentName, String versionName, String transformName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", apiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformprocessGetValidateBeforeCall(String deploymentName, String versionName, String transformName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformprocessGet(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformprocessGet(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformprocessGet(Async)");
        }
        

        com.squareup.okhttp.Call call = transformprocessGetCall(deploymentName, versionName, transformName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the JSON string of the deployed transform process (CSV or Image)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object transformprocessGet(String deploymentName, String versionName, String transformName) throws ApiException {
        ApiResponse<Object> resp = transformprocessGetWithHttpInfo(deploymentName, versionName, transformName);
        return resp.getData();
    }

    /**
     * Gets the JSON string of the deployed transform process (CSV or Image)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> transformprocessGetWithHttpInfo(String deploymentName, String versionName, String transformName) throws ApiException {
        com.squareup.okhttp.Call call = transformprocessGetValidateBeforeCall(deploymentName, versionName, transformName, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the JSON string of the deployed transform process (CSV or Image) (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformprocessGetAsync(String deploymentName, String versionName, String transformName, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformprocessGetValidateBeforeCall(deploymentName, versionName, transformName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformprocessPost
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param transformProcess The transform process to set (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformprocessPostCall(String deploymentName, String versionName, String transformName, Object transformProcess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transformProcess;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", apiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformprocessPostValidateBeforeCall(String deploymentName, String versionName, String transformName, Object transformProcess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformprocessPost(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformprocessPost(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformprocessPost(Async)");
        }
        

        com.squareup.okhttp.Call call = transformprocessPostCall(deploymentName, versionName, transformName, transformProcess, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sets the deployed (CSV or Image) transform process through the provided JSON string
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param transformProcess The transform process to set (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object transformprocessPost(String deploymentName, String versionName, String transformName, Object transformProcess) throws ApiException {
        ApiResponse<Object> resp = transformprocessPostWithHttpInfo(deploymentName, versionName, transformName, transformProcess);
        return resp.getData();
    }

    /**
     * Sets the deployed (CSV or Image) transform process through the provided JSON string
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param transformProcess The transform process to set (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> transformprocessPostWithHttpInfo(String deploymentName, String versionName, String transformName, Object transformProcess) throws ApiException {
        com.squareup.okhttp.Call call = transformprocessPostValidateBeforeCall(deploymentName, versionName, transformName, transformProcess, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets the deployed (CSV or Image) transform process through the provided JSON string (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param transformProcess The transform process to set (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformprocessPostAsync(String deploymentName, String versionName, String transformName, Object transformProcess, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformprocessPostValidateBeforeCall(deploymentName, versionName, transformName, transformProcess, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
