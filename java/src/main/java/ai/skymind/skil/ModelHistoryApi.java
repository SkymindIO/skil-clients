/*
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ai.skymind.skil;

import ai.skymind.ApiCallback;
import ai.skymind.ApiClient;
import ai.skymind.ApiException;
import ai.skymind.ApiResponse;
import ai.skymind.Configuration;
import ai.skymind.Pair;
import ai.skymind.ProgressRequestBody;
import ai.skymind.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ai.skymind.skil.model.AddExampleRequest;
import ai.skymind.skil.model.AddModelHistoryRequest;
import ai.skymind.skil.model.AggregatePrediction;
import ai.skymind.skil.model.BestModel;
import ai.skymind.skil.model.EvaluationResultsEntity;
import ai.skymind.skil.model.ExampleEntity;
import ai.skymind.skil.model.ExperimentEntity;
import ai.skymind.skil.model.InlineResponse200;
import ai.skymind.skil.model.MinibatchEntity;
import ai.skymind.skil.model.ModelFeedBackRequest;
import ai.skymind.skil.model.ModelHistoryEntity;
import ai.skymind.skil.model.ModelInstanceEntity;
import ai.skymind.skil.model.UpdateBestModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModelHistoryApi {
    private ApiClient apiClient;

    public ModelHistoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModelHistoryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addEvaluationResult
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param evaluationResultsEntity The evaluation result entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addEvaluationResultCall(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = evaluationResultsEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addEvaluationResultValidateBeforeCall(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addEvaluationResult(Async)");
        }
        
        // verify the required parameter 'evaluationResultsEntity' is set
        if (evaluationResultsEntity == null) {
            throw new ApiException("Missing the required parameter 'evaluationResultsEntity' when calling addEvaluationResult(Async)");
        }
        

        com.squareup.okhttp.Call call = addEvaluationResultCall(modelHistoryServerId, evaluationResultsEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds an evaluation result
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param evaluationResultsEntity The evaluation result entity (required)
     * @return EvaluationResultsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EvaluationResultsEntity addEvaluationResult(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity) throws ApiException {
        ApiResponse<EvaluationResultsEntity> resp = addEvaluationResultWithHttpInfo(modelHistoryServerId, evaluationResultsEntity);
        return resp.getData();
    }

    /**
     * Adds an evaluation result
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param evaluationResultsEntity The evaluation result entity (required)
     * @return ApiResponse&lt;EvaluationResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EvaluationResultsEntity> addEvaluationResultWithHttpInfo(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity) throws ApiException {
        com.squareup.okhttp.Call call = addEvaluationResultValidateBeforeCall(modelHistoryServerId, evaluationResultsEntity, null, null);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds an evaluation result (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param evaluationResultsEntity The evaluation result entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addEvaluationResultAsync(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity, final ApiCallback<EvaluationResultsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addEvaluationResultValidateBeforeCall(modelHistoryServerId, evaluationResultsEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addExampleForBatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExampleForBatchCall(String modelHistoryServerId, AddExampleRequest addExampleRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addExampleRequest;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/exampleForBatch"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addExampleForBatchValidateBeforeCall(String modelHistoryServerId, AddExampleRequest addExampleRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addExampleForBatch(Async)");
        }
        
        // verify the required parameter 'addExampleRequest' is set
        if (addExampleRequest == null) {
            throw new ApiException("Missing the required parameter 'addExampleRequest' when calling addExampleForBatch(Async)");
        }
        

        com.squareup.okhttp.Call call = addExampleForBatchCall(modelHistoryServerId, addExampleRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds a number of examples to a minibatch ID given an AddExampleRequest.
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size (required)
     * @return AddExampleRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddExampleRequest addExampleForBatch(String modelHistoryServerId, AddExampleRequest addExampleRequest) throws ApiException {
        ApiResponse<AddExampleRequest> resp = addExampleForBatchWithHttpInfo(modelHistoryServerId, addExampleRequest);
        return resp.getData();
    }

    /**
     * Adds a number of examples to a minibatch ID given an AddExampleRequest.
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size (required)
     * @return ApiResponse&lt;AddExampleRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddExampleRequest> addExampleForBatchWithHttpInfo(String modelHistoryServerId, AddExampleRequest addExampleRequest) throws ApiException {
        com.squareup.okhttp.Call call = addExampleForBatchValidateBeforeCall(modelHistoryServerId, addExampleRequest, null, null);
        Type localVarReturnType = new TypeToken<AddExampleRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a number of examples to a minibatch ID given an AddExampleRequest. (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExampleForBatchAsync(String modelHistoryServerId, AddExampleRequest addExampleRequest, final ApiCallback<AddExampleRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExampleForBatchValidateBeforeCall(modelHistoryServerId, addExampleRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddExampleRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addExampleToMinibatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param exampleEntity The example to add to the minibatch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExampleToMinibatchCall(String modelHistoryServerId, ExampleEntity exampleEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = exampleEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/example"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addExampleToMinibatchValidateBeforeCall(String modelHistoryServerId, ExampleEntity exampleEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addExampleToMinibatch(Async)");
        }
        
        // verify the required parameter 'exampleEntity' is set
        if (exampleEntity == null) {
            throw new ApiException("Missing the required parameter 'exampleEntity' when calling addExampleToMinibatch(Async)");
        }
        

        com.squareup.okhttp.Call call = addExampleToMinibatchCall(modelHistoryServerId, exampleEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds an example to a minibatch
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param exampleEntity The example to add to the minibatch (required)
     * @return ExampleEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExampleEntity addExampleToMinibatch(String modelHistoryServerId, ExampleEntity exampleEntity) throws ApiException {
        ApiResponse<ExampleEntity> resp = addExampleToMinibatchWithHttpInfo(modelHistoryServerId, exampleEntity);
        return resp.getData();
    }

    /**
     * Adds an example to a minibatch
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param exampleEntity The example to add to the minibatch (required)
     * @return ApiResponse&lt;ExampleEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExampleEntity> addExampleToMinibatchWithHttpInfo(String modelHistoryServerId, ExampleEntity exampleEntity) throws ApiException {
        com.squareup.okhttp.Call call = addExampleToMinibatchValidateBeforeCall(modelHistoryServerId, exampleEntity, null, null);
        Type localVarReturnType = new TypeToken<ExampleEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds an example to a minibatch (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param exampleEntity The example to add to the minibatch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExampleToMinibatchAsync(String modelHistoryServerId, ExampleEntity exampleEntity, final ApiCallback<ExampleEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExampleToMinibatchValidateBeforeCall(modelHistoryServerId, exampleEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExampleEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentEntity The experiment entity to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExperimentCall(String modelHistoryServerId, ExperimentEntity experimentEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = experimentEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addExperimentValidateBeforeCall(String modelHistoryServerId, ExperimentEntity experimentEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addExperiment(Async)");
        }
        
        // verify the required parameter 'experimentEntity' is set
        if (experimentEntity == null) {
            throw new ApiException("Missing the required parameter 'experimentEntity' when calling addExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = addExperimentCall(modelHistoryServerId, experimentEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentEntity The experiment entity to add (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentEntity addExperiment(String modelHistoryServerId, ExperimentEntity experimentEntity) throws ApiException {
        ApiResponse<ExperimentEntity> resp = addExperimentWithHttpInfo(modelHistoryServerId, experimentEntity);
        return resp.getData();
    }

    /**
     * Add an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentEntity The experiment entity to add (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentEntity> addExperimentWithHttpInfo(String modelHistoryServerId, ExperimentEntity experimentEntity) throws ApiException {
        com.squareup.okhttp.Call call = addExperimentValidateBeforeCall(modelHistoryServerId, experimentEntity, null, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an experiment, given an experiment entity (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentEntity The experiment entity to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExperimentAsync(String modelHistoryServerId, ExperimentEntity experimentEntity, final ApiCallback<ExperimentEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExperimentValidateBeforeCall(modelHistoryServerId, experimentEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addMinibatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchEntity The minibatch entity to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addMinibatchCall(String modelHistoryServerId, MinibatchEntity minibatchEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = minibatchEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMinibatchValidateBeforeCall(String modelHistoryServerId, MinibatchEntity minibatchEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addMinibatch(Async)");
        }
        
        // verify the required parameter 'minibatchEntity' is set
        if (minibatchEntity == null) {
            throw new ApiException("Missing the required parameter 'minibatchEntity' when calling addMinibatch(Async)");
        }
        

        com.squareup.okhttp.Call call = addMinibatchCall(modelHistoryServerId, minibatchEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds a minibatch
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchEntity The minibatch entity to add (required)
     * @return MinibatchEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MinibatchEntity addMinibatch(String modelHistoryServerId, MinibatchEntity minibatchEntity) throws ApiException {
        ApiResponse<MinibatchEntity> resp = addMinibatchWithHttpInfo(modelHistoryServerId, minibatchEntity);
        return resp.getData();
    }

    /**
     * Adds a minibatch
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchEntity The minibatch entity to add (required)
     * @return ApiResponse&lt;MinibatchEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MinibatchEntity> addMinibatchWithHttpInfo(String modelHistoryServerId, MinibatchEntity minibatchEntity) throws ApiException {
        com.squareup.okhttp.Call call = addMinibatchValidateBeforeCall(modelHistoryServerId, minibatchEntity, null, null);
        Type localVarReturnType = new TypeToken<MinibatchEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a minibatch (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchEntity The minibatch entity to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMinibatchAsync(String modelHistoryServerId, MinibatchEntity minibatchEntity, final ApiCallback<MinibatchEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMinibatchValidateBeforeCall(modelHistoryServerId, minibatchEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MinibatchEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addModelFeedback
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelFeedBackRequest The model feedback request object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addModelFeedbackCall(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modelFeedBackRequest;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/feedback"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addModelFeedbackValidateBeforeCall(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addModelFeedback(Async)");
        }
        
        // verify the required parameter 'modelFeedBackRequest' is set
        if (modelFeedBackRequest == null) {
            throw new ApiException("Missing the required parameter 'modelFeedBackRequest' when calling addModelFeedback(Async)");
        }
        

        com.squareup.okhttp.Call call = addModelFeedbackCall(modelHistoryServerId, modelFeedBackRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds an evaluation feedback to the model against a given minibatch id.
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelFeedBackRequest The model feedback request object (required)
     * @return ModelFeedBackRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelFeedBackRequest addModelFeedback(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest) throws ApiException {
        ApiResponse<ModelFeedBackRequest> resp = addModelFeedbackWithHttpInfo(modelHistoryServerId, modelFeedBackRequest);
        return resp.getData();
    }

    /**
     * Adds an evaluation feedback to the model against a given minibatch id.
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelFeedBackRequest The model feedback request object (required)
     * @return ApiResponse&lt;ModelFeedBackRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelFeedBackRequest> addModelFeedbackWithHttpInfo(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest) throws ApiException {
        com.squareup.okhttp.Call call = addModelFeedbackValidateBeforeCall(modelHistoryServerId, modelFeedBackRequest, null, null);
        Type localVarReturnType = new TypeToken<ModelFeedBackRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds an evaluation feedback to the model against a given minibatch id. (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelFeedBackRequest The model feedback request object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addModelFeedbackAsync(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest, final ApiCallback<ModelFeedBackRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addModelFeedbackValidateBeforeCall(modelHistoryServerId, modelFeedBackRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelFeedBackRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addModelHistoryRequest The model history request object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addModelHistoryCall(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addModelHistoryRequest;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/modelhistory"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addModelHistoryValidateBeforeCall(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addModelHistory(Async)");
        }
        
        // verify the required parameter 'addModelHistoryRequest' is set
        if (addModelHistoryRequest == null) {
            throw new ApiException("Missing the required parameter 'addModelHistoryRequest' when calling addModelHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = addModelHistoryCall(modelHistoryServerId, addModelHistoryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addModelHistoryRequest The model history request object (required)
     * @return ModelHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelHistoryEntity addModelHistory(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest) throws ApiException {
        ApiResponse<ModelHistoryEntity> resp = addModelHistoryWithHttpInfo(modelHistoryServerId, addModelHistoryRequest);
        return resp.getData();
    }

    /**
     * Add a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addModelHistoryRequest The model history request object (required)
     * @return ApiResponse&lt;ModelHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelHistoryEntity> addModelHistoryWithHttpInfo(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest) throws ApiException {
        com.squareup.okhttp.Call call = addModelHistoryValidateBeforeCall(modelHistoryServerId, addModelHistoryRequest, null, null);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a model history / workspace (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addModelHistoryRequest The model history request object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addModelHistoryAsync(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest, final ApiCallback<ModelHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addModelHistoryValidateBeforeCall(modelHistoryServerId, addModelHistoryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addModelInstance
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addModelInstanceCall(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modelInstanceEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addModelInstanceValidateBeforeCall(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addModelInstance(Async)");
        }
        
        // verify the required parameter 'modelInstanceEntity' is set
        if (modelInstanceEntity == null) {
            throw new ApiException("Missing the required parameter 'modelInstanceEntity' when calling addModelInstance(Async)");
        }
        

        com.squareup.okhttp.Call call = addModelInstanceCall(modelHistoryServerId, modelInstanceEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds a model
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @return ModelInstanceEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelInstanceEntity addModelInstance(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity) throws ApiException {
        ApiResponse<ModelInstanceEntity> resp = addModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceEntity);
        return resp.getData();
    }

    /**
     * Adds a model
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @return ApiResponse&lt;ModelInstanceEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelInstanceEntity> addModelInstanceWithHttpInfo(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity) throws ApiException {
        com.squareup.okhttp.Call call = addModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceEntity, null, null);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a model (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addModelInstanceAsync(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity, final ApiCallback<ModelInstanceEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aggregateModelResults
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aggregateModelResultsCall(String modelHistoryServerId, AggregatePrediction aggregatePrediction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregatePrediction;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/aggregateresults"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aggregateModelResultsValidateBeforeCall(String modelHistoryServerId, AggregatePrediction aggregatePrediction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling aggregateModelResults(Async)");
        }
        
        // verify the required parameter 'aggregatePrediction' is set
        if (aggregatePrediction == null) {
            throw new ApiException("Missing the required parameter 'aggregatePrediction' when calling aggregateModelResults(Async)");
        }
        

        com.squareup.okhttp.Call call = aggregateModelResultsCall(modelHistoryServerId, aggregatePrediction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Aggregates the evaluaition results of a model instance, based on the evaluation type
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @return EvaluationResultsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EvaluationResultsEntity aggregateModelResults(String modelHistoryServerId, AggregatePrediction aggregatePrediction) throws ApiException {
        ApiResponse<EvaluationResultsEntity> resp = aggregateModelResultsWithHttpInfo(modelHistoryServerId, aggregatePrediction);
        return resp.getData();
    }

    /**
     * Aggregates the evaluaition results of a model instance, based on the evaluation type
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @return ApiResponse&lt;EvaluationResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EvaluationResultsEntity> aggregateModelResultsWithHttpInfo(String modelHistoryServerId, AggregatePrediction aggregatePrediction) throws ApiException {
        com.squareup.okhttp.Call call = aggregateModelResultsValidateBeforeCall(modelHistoryServerId, aggregatePrediction, null, null);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Aggregates the evaluaition results of a model instance, based on the evaluation type (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aggregateModelResultsAsync(String modelHistoryServerId, AggregatePrediction aggregatePrediction, final ApiCallback<EvaluationResultsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aggregateModelResultsValidateBeforeCall(modelHistoryServerId, aggregatePrediction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryEntity The model history entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createModelHistoryCall(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modelHistoryEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/revisions"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createModelHistoryValidateBeforeCall(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling createModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryEntity' is set
        if (modelHistoryEntity == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryEntity' when calling createModelHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = createModelHistoryCall(modelHistoryServerId, modelHistoryEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates model History
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryEntity The model history entity (required)
     * @return ModelHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelHistoryEntity createModelHistory(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity) throws ApiException {
        ApiResponse<ModelHistoryEntity> resp = createModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryEntity);
        return resp.getData();
    }

    /**
     * Creates model History
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryEntity The model history entity (required)
     * @return ApiResponse&lt;ModelHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelHistoryEntity> createModelHistoryWithHttpInfo(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity) throws ApiException {
        com.squareup.okhttp.Call call = createModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryEntity, null, null);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates model History (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryEntity The model history entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createModelHistoryAsync(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity, final ApiCallback<ModelHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentCall(String modelHistoryServerId, String experimentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "experimentID" + "\\}", apiClient.escapeString(experimentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExperimentValidateBeforeCall(String modelHistoryServerId, String experimentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling deleteExperiment(Async)");
        }
        
        // verify the required parameter 'experimentID' is set
        if (experimentID == null) {
            throw new ApiException("Missing the required parameter 'experimentID' when calling deleteExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExperimentCall(modelHistoryServerId, experimentID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to delete (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 deleteExperiment(String modelHistoryServerId, String experimentID) throws ApiException {
        ApiResponse<InlineResponse200> resp = deleteExperimentWithHttpInfo(modelHistoryServerId, experimentID);
        return resp.getData();
    }

    /**
     * Deletes an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to delete (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> deleteExperimentWithHttpInfo(String modelHistoryServerId, String experimentID) throws ApiException {
        com.squareup.okhttp.Call call = deleteExperimentValidateBeforeCall(modelHistoryServerId, experimentID, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes an experiment, given an experiment entity (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentAsync(String modelHistoryServerId, String experimentID, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExperimentValidateBeforeCall(modelHistoryServerId, experimentID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteModelHistoryCall(String modelHistoryServerId, String modelHistoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelHistoryID" + "\\}", apiClient.escapeString(modelHistoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteModelHistoryValidateBeforeCall(String modelHistoryServerId, String modelHistoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling deleteModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryID' is set
        if (modelHistoryID == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryID' when calling deleteModelHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteModelHistoryCall(modelHistoryServerId, modelHistoryID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a model history / workspace, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to delete (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 deleteModelHistory(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        ApiResponse<InlineResponse200> resp = deleteModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
        return resp.getData();
    }

    /**
     * Deletes a model history / workspace, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to delete (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> deleteModelHistoryWithHttpInfo(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        com.squareup.okhttp.Call call = deleteModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a model history / workspace, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteModelHistoryAsync(String modelHistoryServerId, String modelHistoryID, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteModelInstance
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteModelInstanceCall(String modelHistoryServerId, String modelInstanceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelInstanceID" + "\\}", apiClient.escapeString(modelInstanceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteModelInstanceValidateBeforeCall(String modelHistoryServerId, String modelInstanceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling deleteModelInstance(Async)");
        }
        
        // verify the required parameter 'modelInstanceID' is set
        if (modelInstanceID == null) {
            throw new ApiException("Missing the required parameter 'modelInstanceID' when calling deleteModelInstance(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteModelInstanceCall(modelHistoryServerId, modelInstanceID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a model instance, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteModelInstance(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        deleteModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceID);
    }

    /**
     * Deletes a model instance, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteModelInstanceWithHttpInfo(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        com.squareup.okhttp.Call call = deleteModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceID, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a model instance, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteModelInstanceAsync(String modelHistoryServerId, String modelInstanceID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBestModelAmongModelIds
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param bestModel Object encapsulating the model ids, eval type and column metric name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBestModelAmongModelIdsCall(String modelHistoryServerId, BestModel bestModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bestModel;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/best"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBestModelAmongModelIdsValidateBeforeCall(String modelHistoryServerId, BestModel bestModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getBestModelAmongModelIds(Async)");
        }
        
        // verify the required parameter 'bestModel' is set
        if (bestModel == null) {
            throw new ApiException("Missing the required parameter 'bestModel' when calling getBestModelAmongModelIds(Async)");
        }
        

        com.squareup.okhttp.Call call = getBestModelAmongModelIdsCall(modelHistoryServerId, bestModel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the best model among the given model instance IDs, based on the evaluation type and column metric
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param bestModel Object encapsulating the model ids, eval type and column metric name (required)
     * @return ModelInstanceEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelInstanceEntity getBestModelAmongModelIds(String modelHistoryServerId, BestModel bestModel) throws ApiException {
        ApiResponse<ModelInstanceEntity> resp = getBestModelAmongModelIdsWithHttpInfo(modelHistoryServerId, bestModel);
        return resp.getData();
    }

    /**
     * Gets the best model among the given model instance IDs, based on the evaluation type and column metric
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param bestModel Object encapsulating the model ids, eval type and column metric name (required)
     * @return ApiResponse&lt;ModelInstanceEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelInstanceEntity> getBestModelAmongModelIdsWithHttpInfo(String modelHistoryServerId, BestModel bestModel) throws ApiException {
        com.squareup.okhttp.Call call = getBestModelAmongModelIdsValidateBeforeCall(modelHistoryServerId, bestModel, null, null);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the best model among the given model instance IDs, based on the evaluation type and column metric (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param bestModel Object encapsulating the model ids, eval type and column metric name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBestModelAmongModelIdsAsync(String modelHistoryServerId, BestModel bestModel, final ApiCallback<ModelInstanceEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBestModelAmongModelIdsValidateBeforeCall(modelHistoryServerId, bestModel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEvaluationForModelID
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get evaluation results for. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEvaluationForModelIDCall(String modelHistoryServerId, String modelInstanceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelInstanceID" + "\\}", apiClient.escapeString(modelInstanceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEvaluationForModelIDValidateBeforeCall(String modelHistoryServerId, String modelInstanceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getEvaluationForModelID(Async)");
        }
        
        // verify the required parameter 'modelInstanceID' is set
        if (modelInstanceID == null) {
            throw new ApiException("Missing the required parameter 'modelInstanceID' when calling getEvaluationForModelID(Async)");
        }
        

        com.squareup.okhttp.Call call = getEvaluationForModelIDCall(modelHistoryServerId, modelInstanceID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the list of evaluation results entity, given a model instance ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get evaluation results for. (required)
     * @return List&lt;EvaluationResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EvaluationResultsEntity> getEvaluationForModelID(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        ApiResponse<List<EvaluationResultsEntity>> resp = getEvaluationForModelIDWithHttpInfo(modelHistoryServerId, modelInstanceID);
        return resp.getData();
    }

    /**
     * Gets the list of evaluation results entity, given a model instance ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get evaluation results for. (required)
     * @return ApiResponse&lt;List&lt;EvaluationResultsEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EvaluationResultsEntity>> getEvaluationForModelIDWithHttpInfo(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        com.squareup.okhttp.Call call = getEvaluationForModelIDValidateBeforeCall(modelHistoryServerId, modelInstanceID, null, null);
        Type localVarReturnType = new TypeToken<List<EvaluationResultsEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the list of evaluation results entity, given a model instance ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get evaluation results for. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEvaluationForModelIDAsync(String modelHistoryServerId, String modelInstanceID, final ApiCallback<List<EvaluationResultsEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEvaluationForModelIDValidateBeforeCall(modelHistoryServerId, modelInstanceID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EvaluationResultsEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExamplesForMinibatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExamplesForMinibatchCall(String modelHistoryServerId, String minibatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/example/{minibatchId}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "minibatchId" + "\\}", apiClient.escapeString(minibatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExamplesForMinibatchValidateBeforeCall(String modelHistoryServerId, String minibatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getExamplesForMinibatch(Async)");
        }
        
        // verify the required parameter 'minibatchId' is set
        if (minibatchId == null) {
            throw new ApiException("Missing the required parameter 'minibatchId' when calling getExamplesForMinibatch(Async)");
        }
        

        com.squareup.okhttp.Call call = getExamplesForMinibatchCall(modelHistoryServerId, minibatchId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all the examples for a minibatch ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @return List&lt;ExampleEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExampleEntity> getExamplesForMinibatch(String modelHistoryServerId, String minibatchId) throws ApiException {
        ApiResponse<List<ExampleEntity>> resp = getExamplesForMinibatchWithHttpInfo(modelHistoryServerId, minibatchId);
        return resp.getData();
    }

    /**
     * Gets all the examples for a minibatch ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @return ApiResponse&lt;List&lt;ExampleEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExampleEntity>> getExamplesForMinibatchWithHttpInfo(String modelHistoryServerId, String minibatchId) throws ApiException {
        com.squareup.okhttp.Call call = getExamplesForMinibatchValidateBeforeCall(modelHistoryServerId, minibatchId, null, null);
        Type localVarReturnType = new TypeToken<List<ExampleEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all the examples for a minibatch ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExamplesForMinibatchAsync(String modelHistoryServerId, String minibatchId, final ApiCallback<List<ExampleEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExamplesForMinibatchValidateBeforeCall(modelHistoryServerId, minibatchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExampleEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to obtain (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExperimentCall(String modelHistoryServerId, String experimentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "experimentID" + "\\}", apiClient.escapeString(experimentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExperimentValidateBeforeCall(String modelHistoryServerId, String experimentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getExperiment(Async)");
        }
        
        // verify the required parameter 'experimentID' is set
        if (experimentID == null) {
            throw new ApiException("Missing the required parameter 'experimentID' when calling getExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = getExperimentCall(modelHistoryServerId, experimentID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Obtain an experiment&#39;s details, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to obtain (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentEntity getExperiment(String modelHistoryServerId, String experimentID) throws ApiException {
        ApiResponse<ExperimentEntity> resp = getExperimentWithHttpInfo(modelHistoryServerId, experimentID);
        return resp.getData();
    }

    /**
     * Obtain an experiment&#39;s details, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to obtain (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentEntity> getExperimentWithHttpInfo(String modelHistoryServerId, String experimentID) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentValidateBeforeCall(modelHistoryServerId, experimentID, null, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtain an experiment&#39;s details, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to obtain (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentAsync(String modelHistoryServerId, String experimentID, final ApiCallback<ExperimentEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentValidateBeforeCall(modelHistoryServerId, experimentID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExperimentsForModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExperimentsForModelHistoryCall(String modelHistoryServerId, String modelHistoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelHistoryID" + "\\}", apiClient.escapeString(modelHistoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExperimentsForModelHistoryValidateBeforeCall(String modelHistoryServerId, String modelHistoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getExperimentsForModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryID' is set
        if (modelHistoryID == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryID' when calling getExperimentsForModelHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = getExperimentsForModelHistoryCall(modelHistoryServerId, modelHistoryID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Obtain all experiments for a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentEntity getExperimentsForModelHistory(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        ApiResponse<ExperimentEntity> resp = getExperimentsForModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
        return resp.getData();
    }

    /**
     * Obtain all experiments for a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentEntity> getExperimentsForModelHistoryWithHttpInfo(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentsForModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, null, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtain all experiments for a model history / workspace (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentsForModelHistoryAsync(String modelHistoryServerId, String modelHistoryID, final ApiCallback<ExperimentEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentsForModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMinibatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMinibatchCall(String modelHistoryServerId, String minibatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "minibatchId" + "\\}", apiClient.escapeString(minibatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMinibatchValidateBeforeCall(String modelHistoryServerId, String minibatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getMinibatch(Async)");
        }
        
        // verify the required parameter 'minibatchId' is set
        if (minibatchId == null) {
            throw new ApiException("Missing the required parameter 'minibatchId' when calling getMinibatch(Async)");
        }
        

        com.squareup.okhttp.Call call = getMinibatchCall(modelHistoryServerId, minibatchId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a minibatch for the model
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @return MinibatchEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MinibatchEntity getMinibatch(String modelHistoryServerId, String minibatchId) throws ApiException {
        ApiResponse<MinibatchEntity> resp = getMinibatchWithHttpInfo(modelHistoryServerId, minibatchId);
        return resp.getData();
    }

    /**
     * Gets a minibatch for the model
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @return ApiResponse&lt;MinibatchEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MinibatchEntity> getMinibatchWithHttpInfo(String modelHistoryServerId, String minibatchId) throws ApiException {
        com.squareup.okhttp.Call call = getMinibatchValidateBeforeCall(modelHistoryServerId, minibatchId, null, null);
        Type localVarReturnType = new TypeToken<MinibatchEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a minibatch for the model (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMinibatchAsync(String modelHistoryServerId, String minibatchId, final ApiCallback<MinibatchEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMinibatchValidateBeforeCall(modelHistoryServerId, minibatchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MinibatchEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID GUID of the model history to get information of. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelHistoryCall(String modelHistoryServerId, String modelHistoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelHistoryID" + "\\}", apiClient.escapeString(modelHistoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelHistoryValidateBeforeCall(String modelHistoryServerId, String modelHistoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryID' is set
        if (modelHistoryID == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryID' when calling getModelHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelHistoryCall(modelHistoryServerId, modelHistoryID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a model history, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID GUID of the model history to get information of. (required)
     * @return ModelHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelHistoryEntity getModelHistory(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        ApiResponse<ModelHistoryEntity> resp = getModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
        return resp.getData();
    }

    /**
     * Gets a model history, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID GUID of the model history to get information of. (required)
     * @return ApiResponse&lt;ModelHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelHistoryEntity> getModelHistoryWithHttpInfo(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        com.squareup.okhttp.Call call = getModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, null, null);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a model history, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID GUID of the model history to get information of. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelHistoryAsync(String modelHistoryServerId, String modelHistoryID, final ApiCallback<ModelHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelInstance
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get information of. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelInstanceCall(String modelHistoryServerId, String modelInstanceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelInstanceID" + "\\}", apiClient.escapeString(modelInstanceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelInstanceValidateBeforeCall(String modelHistoryServerId, String modelInstanceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getModelInstance(Async)");
        }
        
        // verify the required parameter 'modelInstanceID' is set
        if (modelInstanceID == null) {
            throw new ApiException("Missing the required parameter 'modelInstanceID' when calling getModelInstance(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelInstanceCall(modelHistoryServerId, modelInstanceID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a model instance, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get information of. (required)
     * @return ModelInstanceEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelInstanceEntity getModelInstance(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        ApiResponse<ModelInstanceEntity> resp = getModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceID);
        return resp.getData();
    }

    /**
     * Gets a model instance, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get information of. (required)
     * @return ApiResponse&lt;ModelInstanceEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelInstanceEntity> getModelInstanceWithHttpInfo(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        com.squareup.okhttp.Call call = getModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceID, null, null);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a model instance, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get information of. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelInstanceAsync(String modelHistoryServerId, String modelInstanceID, final ApiCallback<ModelInstanceEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelsForExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelsForExperimentCall(String modelHistoryServerId, String experimentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}/models"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "experimentID" + "\\}", apiClient.escapeString(experimentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelsForExperimentValidateBeforeCall(String modelHistoryServerId, String experimentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getModelsForExperiment(Async)");
        }
        
        // verify the required parameter 'experimentID' is set
        if (experimentID == null) {
            throw new ApiException("Missing the required parameter 'experimentID' when calling getModelsForExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelsForExperimentCall(modelHistoryServerId, experimentID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Obtain a list of all the models for an experiment
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment (required)
     * @return List&lt;ModelInstanceEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelInstanceEntity> getModelsForExperiment(String modelHistoryServerId, String experimentID) throws ApiException {
        ApiResponse<List<ModelInstanceEntity>> resp = getModelsForExperimentWithHttpInfo(modelHistoryServerId, experimentID);
        return resp.getData();
    }

    /**
     * Obtain a list of all the models for an experiment
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment (required)
     * @return ApiResponse&lt;List&lt;ModelInstanceEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelInstanceEntity>> getModelsForExperimentWithHttpInfo(String modelHistoryServerId, String experimentID) throws ApiException {
        com.squareup.okhttp.Call call = getModelsForExperimentValidateBeforeCall(modelHistoryServerId, experimentID, null, null);
        Type localVarReturnType = new TypeToken<List<ModelInstanceEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtain a list of all the models for an experiment (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelsForExperimentAsync(String modelHistoryServerId, String experimentID, final ApiCallback<List<ModelInstanceEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelsForExperimentValidateBeforeCall(modelHistoryServerId, experimentID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelInstanceEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAllExperiments
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAllExperimentsCall(String modelHistoryServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiments"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAllExperimentsValidateBeforeCall(String modelHistoryServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling listAllExperiments(Async)");
        }
        

        com.squareup.okhttp.Call call = listAllExperimentsCall(modelHistoryServerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all of the experiments in every model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @return List&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExperimentEntity> listAllExperiments(String modelHistoryServerId) throws ApiException {
        ApiResponse<List<ExperimentEntity>> resp = listAllExperimentsWithHttpInfo(modelHistoryServerId);
        return resp.getData();
    }

    /**
     * List all of the experiments in every model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @return ApiResponse&lt;List&lt;ExperimentEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExperimentEntity>> listAllExperimentsWithHttpInfo(String modelHistoryServerId) throws ApiException {
        com.squareup.okhttp.Call call = listAllExperimentsValidateBeforeCall(modelHistoryServerId, null, null);
        Type localVarReturnType = new TypeToken<List<ExperimentEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all of the experiments in every model history / workspace (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAllExperimentsAsync(String modelHistoryServerId, final ApiCallback<List<ExperimentEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAllExperimentsValidateBeforeCall(modelHistoryServerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExperimentEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBestModelForExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param updateBestModel Model encapsulating the experiment id to update and the best model id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBestModelForExperimentCall(String modelHistoryServerId, UpdateBestModel updateBestModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateBestModel;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/best"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBestModelForExperimentValidateBeforeCall(String modelHistoryServerId, UpdateBestModel updateBestModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling updateBestModelForExperiment(Async)");
        }
        
        // verify the required parameter 'updateBestModel' is set
        if (updateBestModel == null) {
            throw new ApiException("Missing the required parameter 'updateBestModel' when calling updateBestModelForExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBestModelForExperimentCall(modelHistoryServerId, updateBestModel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates the best model for an experiment
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param updateBestModel Model encapsulating the experiment id to update and the best model id. (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentEntity updateBestModelForExperiment(String modelHistoryServerId, UpdateBestModel updateBestModel) throws ApiException {
        ApiResponse<ExperimentEntity> resp = updateBestModelForExperimentWithHttpInfo(modelHistoryServerId, updateBestModel);
        return resp.getData();
    }

    /**
     * Updates the best model for an experiment
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param updateBestModel Model encapsulating the experiment id to update and the best model id. (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentEntity> updateBestModelForExperimentWithHttpInfo(String modelHistoryServerId, UpdateBestModel updateBestModel) throws ApiException {
        com.squareup.okhttp.Call call = updateBestModelForExperimentValidateBeforeCall(modelHistoryServerId, updateBestModel, null, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the best model for an experiment (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param updateBestModel Model encapsulating the experiment id to update and the best model id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBestModelForExperimentAsync(String modelHistoryServerId, UpdateBestModel updateBestModel, final ApiCallback<ExperimentEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBestModelForExperimentValidateBeforeCall(modelHistoryServerId, updateBestModel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to update (required)
     * @param experimentEntity The experiment entity to update with (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExperimentCall(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = experimentEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "experimentID" + "\\}", apiClient.escapeString(experimentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExperimentValidateBeforeCall(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling updateExperiment(Async)");
        }
        
        // verify the required parameter 'experimentID' is set
        if (experimentID == null) {
            throw new ApiException("Missing the required parameter 'experimentID' when calling updateExperiment(Async)");
        }
        
        // verify the required parameter 'experimentEntity' is set
        if (experimentEntity == null) {
            throw new ApiException("Missing the required parameter 'experimentEntity' when calling updateExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExperimentCall(modelHistoryServerId, experimentID, experimentEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to update (required)
     * @param experimentEntity The experiment entity to update with (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentEntity updateExperiment(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity) throws ApiException {
        ApiResponse<ExperimentEntity> resp = updateExperimentWithHttpInfo(modelHistoryServerId, experimentID, experimentEntity);
        return resp.getData();
    }

    /**
     * Updates an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to update (required)
     * @param experimentEntity The experiment entity to update with (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentEntity> updateExperimentWithHttpInfo(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity) throws ApiException {
        com.squareup.okhttp.Call call = updateExperimentValidateBeforeCall(modelHistoryServerId, experimentID, experimentEntity, null, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates an experiment, given an experiment entity (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to update (required)
     * @param experimentEntity The experiment entity to update with (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExperimentAsync(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity, final ApiCallback<ExperimentEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExperimentValidateBeforeCall(modelHistoryServerId, experimentID, experimentEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to update (required)
     * @param updateModelHistoryRequest The model history request object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateModelHistoryCall(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateModelHistoryRequest;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelHistoryID" + "\\}", apiClient.escapeString(modelHistoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateModelHistoryValidateBeforeCall(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling updateModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryID' is set
        if (modelHistoryID == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryID' when calling updateModelHistory(Async)");
        }
        
        // verify the required parameter 'updateModelHistoryRequest' is set
        if (updateModelHistoryRequest == null) {
            throw new ApiException("Missing the required parameter 'updateModelHistoryRequest' when calling updateModelHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = updateModelHistoryCall(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to update (required)
     * @param updateModelHistoryRequest The model history request object (required)
     * @return ModelHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelHistoryEntity updateModelHistory(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest) throws ApiException {
        ApiResponse<ModelHistoryEntity> resp = updateModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest);
        return resp.getData();
    }

    /**
     * Update a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to update (required)
     * @param updateModelHistoryRequest The model history request object (required)
     * @return ApiResponse&lt;ModelHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelHistoryEntity> updateModelHistoryWithHttpInfo(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest, null, null);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a model history / workspace (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to update (required)
     * @param updateModelHistoryRequest The model history request object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateModelHistoryAsync(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest, final ApiCallback<ModelHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
