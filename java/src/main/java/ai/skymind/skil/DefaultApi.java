/*
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ai.skymind.skil;

import ai.skymind.ApiCallback;
import ai.skymind.ApiClient;
import ai.skymind.ApiException;
import ai.skymind.ApiResponse;
import ai.skymind.Configuration;
import ai.skymind.Pair;
import ai.skymind.ProgressRequestBody;
import ai.skymind.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ai.skymind.skil.model.AccumulatedResults;
import ai.skymind.skil.model.AddCredentialsRequest;
import ai.skymind.skil.model.AddExampleRequest;
import ai.skymind.skil.model.AddModelHistoryRequest;
import ai.skymind.skil.model.AddResourceRequest;
import ai.skymind.skil.model.AggregatePrediction;
import ai.skymind.skil.model.AuthPolicy;
import ai.skymind.skil.model.Base64NDArrayBody;
import ai.skymind.skil.model.Base64NDArrayBodyKNN;
import ai.skymind.skil.model.BatchCSVRecord;
import ai.skymind.skil.model.BatchRecord;
import ai.skymind.skil.model.BestModel;
import ai.skymind.skil.model.ChangePasswordRequest;
import ai.skymind.skil.model.ClassificationResult;
import ai.skymind.skil.model.CreateDeploymentRequest;
import ai.skymind.skil.model.CreateJobRequest;
import ai.skymind.skil.model.DeploymentResponse;
import ai.skymind.skil.model.DetectionResult;
import ai.skymind.skil.model.DownloadOutputFileRequest;
import ai.skymind.skil.model.EvaluationResultsEntity;
import ai.skymind.skil.model.ExampleEntity;
import ai.skymind.skil.model.ExperimentEntity;
import ai.skymind.skil.model.FeedbackResponse;
import java.io.File;
import ai.skymind.skil.model.FileUploadList;
import ai.skymind.skil.model.ImportModelRequest;
import ai.skymind.skil.model.InlineResponse200;
import ai.skymind.skil.model.JobEntity;
import ai.skymind.skil.model.JsonArrayResponse;
import ai.skymind.skil.model.LogBatch;
import ai.skymind.skil.model.LogRequest;
import ai.skymind.skil.model.LoginRequest;
import ai.skymind.skil.model.LoginResponse;
import ai.skymind.skil.model.MetaData;
import ai.skymind.skil.model.MinibatchEntity;
import ai.skymind.skil.model.ModelEntity;
import ai.skymind.skil.model.ModelFeedBackRequest;
import ai.skymind.skil.model.ModelHistoryEntity;
import ai.skymind.skil.model.ModelInstanceEntity;
import ai.skymind.skil.model.ModelStatus;
import ai.skymind.skil.model.MultiClassClassificationResult;
import ai.skymind.skil.model.MultiPredictRequest;
import ai.skymind.skil.model.MultiPredictResponse;
import ai.skymind.skil.model.NearestNeighborRequest;
import ai.skymind.skil.model.NearestNeighborsResults;
import ai.skymind.skil.model.Prediction;
import ai.skymind.skil.model.Resource;
import ai.skymind.skil.model.ResourceCredentials;
import ai.skymind.skil.model.ResourceGroup;
import ai.skymind.skil.model.RetrainingStatus;
import ai.skymind.skil.model.RevisionsWritten;
import ai.skymind.skil.model.Role;
import ai.skymind.skil.model.RollbackStatus;
import ai.skymind.skil.model.SetState;
import ai.skymind.skil.model.SingleCSVRecord;
import ai.skymind.skil.model.SingleRecord;
import ai.skymind.skil.model.Token;
import ai.skymind.skil.model.TokenGenerateRequest;
import ai.skymind.skil.model.UpdateBestModel;
import ai.skymind.skil.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for accumulatedResults
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call accumulatedResultsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accumulatedresults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call accumulatedResultsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = accumulatedResultsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Tells how many retraining examples have labels associated with them.
     * 
     * @return AccumulatedResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccumulatedResults accumulatedResults() throws ApiException {
        ApiResponse<AccumulatedResults> resp = accumulatedResultsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Tells how many retraining examples have labels associated with them.
     * 
     * @return ApiResponse&lt;AccumulatedResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccumulatedResults> accumulatedResultsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = accumulatedResultsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AccumulatedResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Tells how many retraining examples have labels associated with them. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call accumulatedResultsAsync(final ApiCallback<AccumulatedResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = accumulatedResultsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccumulatedResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addCredentials
     * @param addCredentialsRequest Add credentials request object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCredentialsCall(AddCredentialsRequest addCredentialsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addCredentialsRequest;

        // create path and map variables
        String localVarPath = "/resources/credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCredentialsValidateBeforeCall(AddCredentialsRequest addCredentialsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addCredentialsRequest' is set
        if (addCredentialsRequest == null) {
            throw new ApiException("Missing the required parameter 'addCredentialsRequest' when calling addCredentials(Async)");
        }
        

        com.squareup.okhttp.Call call = addCredentialsCall(addCredentialsRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds credentials
     * 
     * @param addCredentialsRequest Add credentials request object (required)
     * @return ResourceCredentials
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceCredentials addCredentials(AddCredentialsRequest addCredentialsRequest) throws ApiException {
        ApiResponse<ResourceCredentials> resp = addCredentialsWithHttpInfo(addCredentialsRequest);
        return resp.getData();
    }

    /**
     * Adds credentials
     * 
     * @param addCredentialsRequest Add credentials request object (required)
     * @return ApiResponse&lt;ResourceCredentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceCredentials> addCredentialsWithHttpInfo(AddCredentialsRequest addCredentialsRequest) throws ApiException {
        com.squareup.okhttp.Call call = addCredentialsValidateBeforeCall(addCredentialsRequest, null, null);
        Type localVarReturnType = new TypeToken<ResourceCredentials>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds credentials (asynchronously)
     * 
     * @param addCredentialsRequest Add credentials request object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCredentialsAsync(AddCredentialsRequest addCredentialsRequest, final ApiCallback<ResourceCredentials> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCredentialsValidateBeforeCall(addCredentialsRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceCredentials>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addEvaluationResult
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param evaluationResultsEntity The evaluation result entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addEvaluationResultCall(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = evaluationResultsEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addEvaluationResultValidateBeforeCall(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addEvaluationResult(Async)");
        }
        
        // verify the required parameter 'evaluationResultsEntity' is set
        if (evaluationResultsEntity == null) {
            throw new ApiException("Missing the required parameter 'evaluationResultsEntity' when calling addEvaluationResult(Async)");
        }
        

        com.squareup.okhttp.Call call = addEvaluationResultCall(modelHistoryServerId, evaluationResultsEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds an evaluation result
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param evaluationResultsEntity The evaluation result entity (required)
     * @return EvaluationResultsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EvaluationResultsEntity addEvaluationResult(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity) throws ApiException {
        ApiResponse<EvaluationResultsEntity> resp = addEvaluationResultWithHttpInfo(modelHistoryServerId, evaluationResultsEntity);
        return resp.getData();
    }

    /**
     * Adds an evaluation result
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param evaluationResultsEntity The evaluation result entity (required)
     * @return ApiResponse&lt;EvaluationResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EvaluationResultsEntity> addEvaluationResultWithHttpInfo(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity) throws ApiException {
        com.squareup.okhttp.Call call = addEvaluationResultValidateBeforeCall(modelHistoryServerId, evaluationResultsEntity, null, null);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds an evaluation result (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param evaluationResultsEntity The evaluation result entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addEvaluationResultAsync(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity, final ApiCallback<EvaluationResultsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addEvaluationResultValidateBeforeCall(modelHistoryServerId, evaluationResultsEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addExampleForBatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExampleForBatchCall(String modelHistoryServerId, AddExampleRequest addExampleRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addExampleRequest;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/exampleForBatch"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addExampleForBatchValidateBeforeCall(String modelHistoryServerId, AddExampleRequest addExampleRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addExampleForBatch(Async)");
        }
        
        // verify the required parameter 'addExampleRequest' is set
        if (addExampleRequest == null) {
            throw new ApiException("Missing the required parameter 'addExampleRequest' when calling addExampleForBatch(Async)");
        }
        

        com.squareup.okhttp.Call call = addExampleForBatchCall(modelHistoryServerId, addExampleRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds a number of examples to a minibatch ID given an AddExampleRequest.
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size (required)
     * @return AddExampleRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddExampleRequest addExampleForBatch(String modelHistoryServerId, AddExampleRequest addExampleRequest) throws ApiException {
        ApiResponse<AddExampleRequest> resp = addExampleForBatchWithHttpInfo(modelHistoryServerId, addExampleRequest);
        return resp.getData();
    }

    /**
     * Adds a number of examples to a minibatch ID given an AddExampleRequest.
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size (required)
     * @return ApiResponse&lt;AddExampleRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddExampleRequest> addExampleForBatchWithHttpInfo(String modelHistoryServerId, AddExampleRequest addExampleRequest) throws ApiException {
        com.squareup.okhttp.Call call = addExampleForBatchValidateBeforeCall(modelHistoryServerId, addExampleRequest, null, null);
        Type localVarReturnType = new TypeToken<AddExampleRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a number of examples to a minibatch ID given an AddExampleRequest. (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExampleForBatchAsync(String modelHistoryServerId, AddExampleRequest addExampleRequest, final ApiCallback<AddExampleRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExampleForBatchValidateBeforeCall(modelHistoryServerId, addExampleRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddExampleRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addExampleToMinibatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param exampleEntity The example to add to the minibatch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExampleToMinibatchCall(String modelHistoryServerId, ExampleEntity exampleEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = exampleEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/example"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addExampleToMinibatchValidateBeforeCall(String modelHistoryServerId, ExampleEntity exampleEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addExampleToMinibatch(Async)");
        }
        
        // verify the required parameter 'exampleEntity' is set
        if (exampleEntity == null) {
            throw new ApiException("Missing the required parameter 'exampleEntity' when calling addExampleToMinibatch(Async)");
        }
        

        com.squareup.okhttp.Call call = addExampleToMinibatchCall(modelHistoryServerId, exampleEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds an example to a minibatch
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param exampleEntity The example to add to the minibatch (required)
     * @return ExampleEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExampleEntity addExampleToMinibatch(String modelHistoryServerId, ExampleEntity exampleEntity) throws ApiException {
        ApiResponse<ExampleEntity> resp = addExampleToMinibatchWithHttpInfo(modelHistoryServerId, exampleEntity);
        return resp.getData();
    }

    /**
     * Adds an example to a minibatch
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param exampleEntity The example to add to the minibatch (required)
     * @return ApiResponse&lt;ExampleEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExampleEntity> addExampleToMinibatchWithHttpInfo(String modelHistoryServerId, ExampleEntity exampleEntity) throws ApiException {
        com.squareup.okhttp.Call call = addExampleToMinibatchValidateBeforeCall(modelHistoryServerId, exampleEntity, null, null);
        Type localVarReturnType = new TypeToken<ExampleEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds an example to a minibatch (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param exampleEntity The example to add to the minibatch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExampleToMinibatchAsync(String modelHistoryServerId, ExampleEntity exampleEntity, final ApiCallback<ExampleEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExampleToMinibatchValidateBeforeCall(modelHistoryServerId, exampleEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExampleEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentEntity The experiment entity to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addExperimentCall(String modelHistoryServerId, ExperimentEntity experimentEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = experimentEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addExperimentValidateBeforeCall(String modelHistoryServerId, ExperimentEntity experimentEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addExperiment(Async)");
        }
        
        // verify the required parameter 'experimentEntity' is set
        if (experimentEntity == null) {
            throw new ApiException("Missing the required parameter 'experimentEntity' when calling addExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = addExperimentCall(modelHistoryServerId, experimentEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentEntity The experiment entity to add (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentEntity addExperiment(String modelHistoryServerId, ExperimentEntity experimentEntity) throws ApiException {
        ApiResponse<ExperimentEntity> resp = addExperimentWithHttpInfo(modelHistoryServerId, experimentEntity);
        return resp.getData();
    }

    /**
     * Add an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentEntity The experiment entity to add (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentEntity> addExperimentWithHttpInfo(String modelHistoryServerId, ExperimentEntity experimentEntity) throws ApiException {
        com.squareup.okhttp.Call call = addExperimentValidateBeforeCall(modelHistoryServerId, experimentEntity, null, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an experiment, given an experiment entity (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentEntity The experiment entity to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addExperimentAsync(String modelHistoryServerId, ExperimentEntity experimentEntity, final ApiCallback<ExperimentEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addExperimentValidateBeforeCall(modelHistoryServerId, experimentEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addFeedbackBinary
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param type The type of the labels array. (required)
     * @param file The labels file to upload. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFeedbackBinaryCall(String id, String type, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/feedback/{id}/{type}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFeedbackBinaryValidateBeforeCall(String id, String type, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addFeedbackBinary(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addFeedbackBinary(Async)");
        }
        

        com.squareup.okhttp.Call call = addFeedbackBinaryCall(id, type, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param type The type of the labels array. (required)
     * @param file The labels file to upload. (optional)
     * @return FeedbackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeedbackResponse addFeedbackBinary(String id, String type, File file) throws ApiException {
        ApiResponse<FeedbackResponse> resp = addFeedbackBinaryWithHttpInfo(id, type, file);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param type The type of the labels array. (required)
     * @param file The labels file to upload. (optional)
     * @return ApiResponse&lt;FeedbackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeedbackResponse> addFeedbackBinaryWithHttpInfo(String id, String type, File file) throws ApiException {
        com.squareup.okhttp.Call call = addFeedbackBinaryValidateBeforeCall(id, type, file, null, null);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param type The type of the labels array. (required)
     * @param file The labels file to upload. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFeedbackBinaryAsync(String id, String type, File file, final ApiCallback<FeedbackResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFeedbackBinaryValidateBeforeCall(id, type, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addFeedbackJson
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param labels The associated labels (one-hot vectors) with the batch for retraining. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFeedbackJsonCall(String id, List<List<Double>> labels, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = labels;

        // create path and map variables
        String localVarPath = "/feedback/{id}/json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFeedbackJsonValidateBeforeCall(String id, List<List<Double>> labels, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addFeedbackJson(Async)");
        }
        

        com.squareup.okhttp.Call call = addFeedbackJsonCall(id, labels, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the retraining feedback for the given batch ID.
     * 
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param labels The associated labels (one-hot vectors) with the batch for retraining. (optional)
     * @return FeedbackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeedbackResponse addFeedbackJson(String id, List<List<Double>> labels) throws ApiException {
        ApiResponse<FeedbackResponse> resp = addFeedbackJsonWithHttpInfo(id, labels);
        return resp.getData();
    }

    /**
     * Gets the retraining feedback for the given batch ID.
     * 
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param labels The associated labels (one-hot vectors) with the batch for retraining. (optional)
     * @return ApiResponse&lt;FeedbackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeedbackResponse> addFeedbackJsonWithHttpInfo(String id, List<List<Double>> labels) throws ApiException {
        com.squareup.okhttp.Call call = addFeedbackJsonValidateBeforeCall(id, labels, null, null);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the retraining feedback for the given batch ID. (asynchronously)
     * 
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param labels The associated labels (one-hot vectors) with the batch for retraining. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFeedbackJsonAsync(String id, List<List<Double>> labels, final ApiCallback<FeedbackResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFeedbackJsonValidateBeforeCall(id, labels, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addMinibatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchEntity The minibatch entity to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addMinibatchCall(String modelHistoryServerId, MinibatchEntity minibatchEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = minibatchEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMinibatchValidateBeforeCall(String modelHistoryServerId, MinibatchEntity minibatchEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addMinibatch(Async)");
        }
        
        // verify the required parameter 'minibatchEntity' is set
        if (minibatchEntity == null) {
            throw new ApiException("Missing the required parameter 'minibatchEntity' when calling addMinibatch(Async)");
        }
        

        com.squareup.okhttp.Call call = addMinibatchCall(modelHistoryServerId, minibatchEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds a minibatch
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchEntity The minibatch entity to add (required)
     * @return MinibatchEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MinibatchEntity addMinibatch(String modelHistoryServerId, MinibatchEntity minibatchEntity) throws ApiException {
        ApiResponse<MinibatchEntity> resp = addMinibatchWithHttpInfo(modelHistoryServerId, minibatchEntity);
        return resp.getData();
    }

    /**
     * Adds a minibatch
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchEntity The minibatch entity to add (required)
     * @return ApiResponse&lt;MinibatchEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MinibatchEntity> addMinibatchWithHttpInfo(String modelHistoryServerId, MinibatchEntity minibatchEntity) throws ApiException {
        com.squareup.okhttp.Call call = addMinibatchValidateBeforeCall(modelHistoryServerId, minibatchEntity, null, null);
        Type localVarReturnType = new TypeToken<MinibatchEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a minibatch (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchEntity The minibatch entity to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMinibatchAsync(String modelHistoryServerId, MinibatchEntity minibatchEntity, final ApiCallback<MinibatchEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMinibatchValidateBeforeCall(modelHistoryServerId, minibatchEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MinibatchEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addModelFeedback
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelFeedBackRequest The model feedback request object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addModelFeedbackCall(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modelFeedBackRequest;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/feedback"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addModelFeedbackValidateBeforeCall(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addModelFeedback(Async)");
        }
        
        // verify the required parameter 'modelFeedBackRequest' is set
        if (modelFeedBackRequest == null) {
            throw new ApiException("Missing the required parameter 'modelFeedBackRequest' when calling addModelFeedback(Async)");
        }
        

        com.squareup.okhttp.Call call = addModelFeedbackCall(modelHistoryServerId, modelFeedBackRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds an evaluation feedback to the model against a given minibatch id.
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelFeedBackRequest The model feedback request object (required)
     * @return ModelFeedBackRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelFeedBackRequest addModelFeedback(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest) throws ApiException {
        ApiResponse<ModelFeedBackRequest> resp = addModelFeedbackWithHttpInfo(modelHistoryServerId, modelFeedBackRequest);
        return resp.getData();
    }

    /**
     * Adds an evaluation feedback to the model against a given minibatch id.
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelFeedBackRequest The model feedback request object (required)
     * @return ApiResponse&lt;ModelFeedBackRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelFeedBackRequest> addModelFeedbackWithHttpInfo(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest) throws ApiException {
        com.squareup.okhttp.Call call = addModelFeedbackValidateBeforeCall(modelHistoryServerId, modelFeedBackRequest, null, null);
        Type localVarReturnType = new TypeToken<ModelFeedBackRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds an evaluation feedback to the model against a given minibatch id. (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelFeedBackRequest The model feedback request object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addModelFeedbackAsync(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest, final ApiCallback<ModelFeedBackRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addModelFeedbackValidateBeforeCall(modelHistoryServerId, modelFeedBackRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelFeedBackRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addModelHistoryRequest The model history request object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addModelHistoryCall(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addModelHistoryRequest;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/modelhistory"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addModelHistoryValidateBeforeCall(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addModelHistory(Async)");
        }
        
        // verify the required parameter 'addModelHistoryRequest' is set
        if (addModelHistoryRequest == null) {
            throw new ApiException("Missing the required parameter 'addModelHistoryRequest' when calling addModelHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = addModelHistoryCall(modelHistoryServerId, addModelHistoryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addModelHistoryRequest The model history request object (required)
     * @return ModelHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelHistoryEntity addModelHistory(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest) throws ApiException {
        ApiResponse<ModelHistoryEntity> resp = addModelHistoryWithHttpInfo(modelHistoryServerId, addModelHistoryRequest);
        return resp.getData();
    }

    /**
     * Add a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addModelHistoryRequest The model history request object (required)
     * @return ApiResponse&lt;ModelHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelHistoryEntity> addModelHistoryWithHttpInfo(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest) throws ApiException {
        com.squareup.okhttp.Call call = addModelHistoryValidateBeforeCall(modelHistoryServerId, addModelHistoryRequest, null, null);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a model history / workspace (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addModelHistoryRequest The model history request object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addModelHistoryAsync(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest, final ApiCallback<ModelHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addModelHistoryValidateBeforeCall(modelHistoryServerId, addModelHistoryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addModelInstance
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addModelInstanceCall(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modelInstanceEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addModelInstanceValidateBeforeCall(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addModelInstance(Async)");
        }
        
        // verify the required parameter 'modelInstanceEntity' is set
        if (modelInstanceEntity == null) {
            throw new ApiException("Missing the required parameter 'modelInstanceEntity' when calling addModelInstance(Async)");
        }
        

        com.squareup.okhttp.Call call = addModelInstanceCall(modelHistoryServerId, modelInstanceEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds a model
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @return ModelInstanceEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelInstanceEntity addModelInstance(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity) throws ApiException {
        ApiResponse<ModelInstanceEntity> resp = addModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceEntity);
        return resp.getData();
    }

    /**
     * Adds a model
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @return ApiResponse&lt;ModelInstanceEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelInstanceEntity> addModelInstanceWithHttpInfo(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity) throws ApiException {
        com.squareup.okhttp.Call call = addModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceEntity, null, null);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a model (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addModelInstanceAsync(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity, final ApiCallback<ModelInstanceEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addResource
     * @param addResourceRequest The Add resource request object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addResourceCall(AddResourceRequest addResourceRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addResourceRequest;

        // create path and map variables
        String localVarPath = "/resources/add/resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addResourceValidateBeforeCall(AddResourceRequest addResourceRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addResourceRequest' is set
        if (addResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'addResourceRequest' when calling addResource(Async)");
        }
        

        com.squareup.okhttp.Call call = addResourceCall(addResourceRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds a resource
     * 
     * @param addResourceRequest The Add resource request object (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object addResource(AddResourceRequest addResourceRequest) throws ApiException {
        ApiResponse<Object> resp = addResourceWithHttpInfo(addResourceRequest);
        return resp.getData();
    }

    /**
     * Adds a resource
     * 
     * @param addResourceRequest The Add resource request object (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> addResourceWithHttpInfo(AddResourceRequest addResourceRequest) throws ApiException {
        com.squareup.okhttp.Call call = addResourceValidateBeforeCall(addResourceRequest, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a resource (asynchronously)
     * 
     * @param addResourceRequest The Add resource request object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addResourceAsync(AddResourceRequest addResourceRequest, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addResourceValidateBeforeCall(addResourceRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addResourceGroup
     * @param groupName Name of the resource group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addResourceGroupCall(String groupName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupName;

        // create path and map variables
        String localVarPath = "/resources/add/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain; charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addResourceGroupValidateBeforeCall(String groupName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling addResourceGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = addResourceGroupCall(groupName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds a resource group
     * 
     * @param groupName Name of the resource group (required)
     * @return ResourceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceGroup addResourceGroup(String groupName) throws ApiException {
        ApiResponse<ResourceGroup> resp = addResourceGroupWithHttpInfo(groupName);
        return resp.getData();
    }

    /**
     * Adds a resource group
     * 
     * @param groupName Name of the resource group (required)
     * @return ApiResponse&lt;ResourceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceGroup> addResourceGroupWithHttpInfo(String groupName) throws ApiException {
        com.squareup.okhttp.Call call = addResourceGroupValidateBeforeCall(groupName, null, null);
        Type localVarReturnType = new TypeToken<ResourceGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a resource group (asynchronously)
     * 
     * @param groupName Name of the resource group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addResourceGroupAsync(String groupName, final ApiCallback<ResourceGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addResourceGroupValidateBeforeCall(groupName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addResourceToGroup
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addResourceToGroupCall(Long resourceGroupId, Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}"
            .replaceAll("\\{" + "resourceGroupId" + "\\}", apiClient.escapeString(resourceGroupId.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addResourceToGroupValidateBeforeCall(Long resourceGroupId, Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceGroupId' is set
        if (resourceGroupId == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupId' when calling addResourceToGroup(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling addResourceToGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = addResourceToGroupCall(resourceGroupId, resourceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds a resource to a resource group
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addResourceToGroup(Long resourceGroupId, Long resourceId) throws ApiException {
        addResourceToGroupWithHttpInfo(resourceGroupId, resourceId);
    }

    /**
     * Adds a resource to a resource group
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addResourceToGroupWithHttpInfo(Long resourceGroupId, Long resourceId) throws ApiException {
        com.squareup.okhttp.Call call = addResourceToGroupValidateBeforeCall(resourceGroupId, resourceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Adds a resource to a resource group (asynchronously)
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addResourceToGroupAsync(Long resourceGroupId, Long resourceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addResourceToGroupValidateBeforeCall(resourceGroupId, resourceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for aggregateModelResults
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aggregateModelResultsCall(String modelHistoryServerId, AggregatePrediction aggregatePrediction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregatePrediction;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/aggregateresults"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aggregateModelResultsValidateBeforeCall(String modelHistoryServerId, AggregatePrediction aggregatePrediction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling aggregateModelResults(Async)");
        }
        
        // verify the required parameter 'aggregatePrediction' is set
        if (aggregatePrediction == null) {
            throw new ApiException("Missing the required parameter 'aggregatePrediction' when calling aggregateModelResults(Async)");
        }
        

        com.squareup.okhttp.Call call = aggregateModelResultsCall(modelHistoryServerId, aggregatePrediction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Aggregates the evaluaition results of a model instance, based on the evaluation type
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @return EvaluationResultsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EvaluationResultsEntity aggregateModelResults(String modelHistoryServerId, AggregatePrediction aggregatePrediction) throws ApiException {
        ApiResponse<EvaluationResultsEntity> resp = aggregateModelResultsWithHttpInfo(modelHistoryServerId, aggregatePrediction);
        return resp.getData();
    }

    /**
     * Aggregates the evaluaition results of a model instance, based on the evaluation type
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @return ApiResponse&lt;EvaluationResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EvaluationResultsEntity> aggregateModelResultsWithHttpInfo(String modelHistoryServerId, AggregatePrediction aggregatePrediction) throws ApiException {
        com.squareup.okhttp.Call call = aggregateModelResultsValidateBeforeCall(modelHistoryServerId, aggregatePrediction, null, null);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Aggregates the evaluaition results of a model instance, based on the evaluation type (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aggregateModelResultsAsync(String modelHistoryServerId, AggregatePrediction aggregatePrediction, final ApiCallback<EvaluationResultsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aggregateModelResultsValidateBeforeCall(modelHistoryServerId, aggregatePrediction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for changeUserPassword
     * @param userId User&#39;s ID (required)
     * @param changePasswordRequest Password details. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeUserPasswordCall(String userId, ChangePasswordRequest changePasswordRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = changePasswordRequest;

        // create path and map variables
        String localVarPath = "/user/{userId}/password"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeUserPasswordValidateBeforeCall(String userId, ChangePasswordRequest changePasswordRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling changeUserPassword(Async)");
        }
        
        // verify the required parameter 'changePasswordRequest' is set
        if (changePasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'changePasswordRequest' when calling changeUserPassword(Async)");
        }
        

        com.squareup.okhttp.Call call = changeUserPasswordCall(userId, changePasswordRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Change user&#39;s password
     * 
     * @param userId User&#39;s ID (required)
     * @param changePasswordRequest Password details. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User changeUserPassword(String userId, ChangePasswordRequest changePasswordRequest) throws ApiException {
        ApiResponse<User> resp = changeUserPasswordWithHttpInfo(userId, changePasswordRequest);
        return resp.getData();
    }

    /**
     * Change user&#39;s password
     * 
     * @param userId User&#39;s ID (required)
     * @param changePasswordRequest Password details. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> changeUserPasswordWithHttpInfo(String userId, ChangePasswordRequest changePasswordRequest) throws ApiException {
        com.squareup.okhttp.Call call = changeUserPasswordValidateBeforeCall(userId, changePasswordRequest, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change user&#39;s password (asynchronously)
     * 
     * @param userId User&#39;s ID (required)
     * @param changePasswordRequest Password details. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeUserPasswordAsync(String userId, ChangePasswordRequest changePasswordRequest, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeUserPasswordValidateBeforeCall(userId, changePasswordRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for classify
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call classifyCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classify"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call classifyValidateBeforeCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling classify(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling classify(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling classify(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling classify(Async)");
        }
        

        com.squareup.okhttp.Call call = classifyCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Use the deployed model to classify the input
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ClassificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClassificationResult classify(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<ClassificationResult> resp = classifyWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Use the deployed model to classify the input
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;ClassificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClassificationResult> classifyWithHttpInfo(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = classifyValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<ClassificationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Use the deployed model to classify the input (asynchronously)
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call classifyAsync(Prediction body, String deploymentName, String versionName, String modelName, final ApiCallback<ClassificationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = classifyValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClassificationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for classifyarray
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call classifyarrayCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call classifyarrayValidateBeforeCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling classifyarray(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling classifyarray(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling classifyarray(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling classifyarray(Async)");
        }
        

        com.squareup.okhttp.Call call = classifyarrayCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Same as /classify but returns the output as Base64NDArrayBody
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Base64NDArrayBody classifyarray(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<Base64NDArrayBody> resp = classifyarrayWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Same as /classify but returns the output as Base64NDArrayBody
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Base64NDArrayBody> classifyarrayWithHttpInfo(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = classifyarrayValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Same as /classify but returns the output as Base64NDArrayBody (asynchronously)
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call classifyarrayAsync(Prediction body, String deploymentName, String versionName, String modelName, final ApiCallback<Base64NDArrayBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = classifyarrayValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for classifyimage
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call classifyimageCall(String deploymentName, String versionName, String modelName, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("image", image);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call classifyimageValidateBeforeCall(String deploymentName, String versionName, String modelName, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling classifyimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling classifyimage(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling classifyimage(Async)");
        }
        

        com.squareup.okhttp.Call call = classifyimageCall(deploymentName, versionName, modelName, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Use the deployed model to classify the input, using input image file from multipart form data.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @return ClassificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClassificationResult classifyimage(String deploymentName, String versionName, String modelName, File image) throws ApiException {
        ApiResponse<ClassificationResult> resp = classifyimageWithHttpInfo(deploymentName, versionName, modelName, image);
        return resp.getData();
    }

    /**
     * Use the deployed model to classify the input, using input image file from multipart form data.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @return ApiResponse&lt;ClassificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClassificationResult> classifyimageWithHttpInfo(String deploymentName, String versionName, String modelName, File image) throws ApiException {
        com.squareup.okhttp.Call call = classifyimageValidateBeforeCall(deploymentName, versionName, modelName, image, null, null);
        Type localVarReturnType = new TypeToken<ClassificationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Use the deployed model to classify the input, using input image file from multipart form data. (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call classifyimageAsync(String deploymentName, String versionName, String modelName, File image, final ApiCallback<ClassificationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = classifyimageValidateBeforeCall(deploymentName, versionName, modelName, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClassificationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for clearState
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clearStateCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clear";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clearStateValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = clearStateCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Clears the accumulated data for retraining.
     * 
     * @return FeedbackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FeedbackResponse clearState() throws ApiException {
        ApiResponse<FeedbackResponse> resp = clearStateWithHttpInfo();
        return resp.getData();
    }

    /**
     * Clears the accumulated data for retraining.
     * 
     * @return ApiResponse&lt;FeedbackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FeedbackResponse> clearStateWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = clearStateValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clears the accumulated data for retraining. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clearStateAsync(final ApiCallback<FeedbackResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clearStateValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createJob
     * @param jobIdOrType Job Type (required)
     * @param createJobRequest Create job request object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createJobCall(String jobIdOrType, CreateJobRequest createJobRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createJobRequest;

        // create path and map variables
        String localVarPath = "/jobs/{jobIdOrType}"
            .replaceAll("\\{" + "jobIdOrType" + "\\}", apiClient.escapeString(jobIdOrType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createJobValidateBeforeCall(String jobIdOrType, CreateJobRequest createJobRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobIdOrType' is set
        if (jobIdOrType == null) {
            throw new ApiException("Missing the required parameter 'jobIdOrType' when calling createJob(Async)");
        }
        
        // verify the required parameter 'createJobRequest' is set
        if (createJobRequest == null) {
            throw new ApiException("Missing the required parameter 'createJobRequest' when calling createJob(Async)");
        }
        

        com.squareup.okhttp.Call call = createJobCall(jobIdOrType, createJobRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a job
     * 
     * @param jobIdOrType Job Type (required)
     * @param createJobRequest Create job request object (required)
     * @return JobEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobEntity createJob(String jobIdOrType, CreateJobRequest createJobRequest) throws ApiException {
        ApiResponse<JobEntity> resp = createJobWithHttpInfo(jobIdOrType, createJobRequest);
        return resp.getData();
    }

    /**
     * Create a job
     * 
     * @param jobIdOrType Job Type (required)
     * @param createJobRequest Create job request object (required)
     * @return ApiResponse&lt;JobEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobEntity> createJobWithHttpInfo(String jobIdOrType, CreateJobRequest createJobRequest) throws ApiException {
        com.squareup.okhttp.Call call = createJobValidateBeforeCall(jobIdOrType, createJobRequest, null, null);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a job (asynchronously)
     * 
     * @param jobIdOrType Job Type (required)
     * @param createJobRequest Create job request object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createJobAsync(String jobIdOrType, CreateJobRequest createJobRequest, final ApiCallback<JobEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createJobValidateBeforeCall(jobIdOrType, createJobRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryEntity The model history entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createModelHistoryCall(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modelHistoryEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/revisions"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createModelHistoryValidateBeforeCall(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling createModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryEntity' is set
        if (modelHistoryEntity == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryEntity' when calling createModelHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = createModelHistoryCall(modelHistoryServerId, modelHistoryEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates model History
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryEntity The model history entity (required)
     * @return ModelHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelHistoryEntity createModelHistory(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity) throws ApiException {
        ApiResponse<ModelHistoryEntity> resp = createModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryEntity);
        return resp.getData();
    }

    /**
     * Creates model History
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryEntity The model history entity (required)
     * @return ApiResponse&lt;ModelHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelHistoryEntity> createModelHistoryWithHttpInfo(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity) throws ApiException {
        com.squareup.okhttp.Call call = createModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryEntity, null, null);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates model History (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryEntity The model history entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createModelHistoryAsync(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity, final ApiCallback<ModelHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCredentialsById
     * @param credentialId Credentials ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCredentialsByIdCall(Long credentialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/credentials/{credentialId}"
            .replaceAll("\\{" + "credentialId" + "\\}", apiClient.escapeString(credentialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCredentialsByIdValidateBeforeCall(Long credentialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'credentialId' is set
        if (credentialId == null) {
            throw new ApiException("Missing the required parameter 'credentialId' when calling deleteCredentialsById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCredentialsByIdCall(credentialId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete credentials given an ID
     * 
     * @param credentialId Credentials ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCredentialsById(Long credentialId) throws ApiException {
        deleteCredentialsByIdWithHttpInfo(credentialId);
    }

    /**
     * Delete credentials given an ID
     * 
     * @param credentialId Credentials ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCredentialsByIdWithHttpInfo(Long credentialId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCredentialsByIdValidateBeforeCall(credentialId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete credentials given an ID (asynchronously)
     * 
     * @param credentialId Credentials ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCredentialsByIdAsync(Long credentialId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCredentialsByIdValidateBeforeCall(credentialId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentCall(String modelHistoryServerId, String experimentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "experimentID" + "\\}", apiClient.escapeString(experimentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExperimentValidateBeforeCall(String modelHistoryServerId, String experimentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling deleteExperiment(Async)");
        }
        
        // verify the required parameter 'experimentID' is set
        if (experimentID == null) {
            throw new ApiException("Missing the required parameter 'experimentID' when calling deleteExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExperimentCall(modelHistoryServerId, experimentID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to delete (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 deleteExperiment(String modelHistoryServerId, String experimentID) throws ApiException {
        ApiResponse<InlineResponse200> resp = deleteExperimentWithHttpInfo(modelHistoryServerId, experimentID);
        return resp.getData();
    }

    /**
     * Deletes an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to delete (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> deleteExperimentWithHttpInfo(String modelHistoryServerId, String experimentID) throws ApiException {
        com.squareup.okhttp.Call call = deleteExperimentValidateBeforeCall(modelHistoryServerId, experimentID, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes an experiment, given an experiment entity (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentAsync(String modelHistoryServerId, String experimentID, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExperimentValidateBeforeCall(modelHistoryServerId, experimentID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteJobById
     * @param jobIdOrType Job ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJobByIdCall(Long jobIdOrType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobIdOrType}"
            .replaceAll("\\{" + "jobIdOrType" + "\\}", apiClient.escapeString(jobIdOrType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJobByIdValidateBeforeCall(Long jobIdOrType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobIdOrType' is set
        if (jobIdOrType == null) {
            throw new ApiException("Missing the required parameter 'jobIdOrType' when calling deleteJobById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteJobByIdCall(jobIdOrType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a job given its ID
     * 
     * @param jobIdOrType Job ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteJobById(Long jobIdOrType) throws ApiException {
        deleteJobByIdWithHttpInfo(jobIdOrType);
    }

    /**
     * Deletes a job given its ID
     * 
     * @param jobIdOrType Job ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteJobByIdWithHttpInfo(Long jobIdOrType) throws ApiException {
        com.squareup.okhttp.Call call = deleteJobByIdValidateBeforeCall(jobIdOrType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a job given its ID (asynchronously)
     * 
     * @param jobIdOrType Job ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJobByIdAsync(Long jobIdOrType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJobByIdValidateBeforeCall(jobIdOrType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteModel
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteModelCall(String deploymentId, String modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}/model/{modelId}"
            .replaceAll("\\{" + "deploymentId" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteModelValidateBeforeCall(String deploymentId, String modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deleteModel(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling deleteModel(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteModelCall(deploymentId, modelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a model by deployment and model id
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 deleteModel(String deploymentId, String modelId) throws ApiException {
        ApiResponse<InlineResponse200> resp = deleteModelWithHttpInfo(deploymentId, modelId);
        return resp.getData();
    }

    /**
     * Delete a model by deployment and model id
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> deleteModelWithHttpInfo(String deploymentId, String modelId) throws ApiException {
        com.squareup.okhttp.Call call = deleteModelValidateBeforeCall(deploymentId, modelId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a model by deployment and model id (asynchronously)
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteModelAsync(String deploymentId, String modelId, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteModelValidateBeforeCall(deploymentId, modelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteModelHistoryCall(String modelHistoryServerId, String modelHistoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelHistoryID" + "\\}", apiClient.escapeString(modelHistoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteModelHistoryValidateBeforeCall(String modelHistoryServerId, String modelHistoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling deleteModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryID' is set
        if (modelHistoryID == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryID' when calling deleteModelHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteModelHistoryCall(modelHistoryServerId, modelHistoryID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a model history / workspace, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to delete (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 deleteModelHistory(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        ApiResponse<InlineResponse200> resp = deleteModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
        return resp.getData();
    }

    /**
     * Deletes a model history / workspace, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to delete (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> deleteModelHistoryWithHttpInfo(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        com.squareup.okhttp.Call call = deleteModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a model history / workspace, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteModelHistoryAsync(String modelHistoryServerId, String modelHistoryID, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteModelInstance
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteModelInstanceCall(String modelHistoryServerId, String modelInstanceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelInstanceID" + "\\}", apiClient.escapeString(modelInstanceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteModelInstanceValidateBeforeCall(String modelHistoryServerId, String modelInstanceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling deleteModelInstance(Async)");
        }
        
        // verify the required parameter 'modelInstanceID' is set
        if (modelInstanceID == null) {
            throw new ApiException("Missing the required parameter 'modelInstanceID' when calling deleteModelInstance(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteModelInstanceCall(modelHistoryServerId, modelInstanceID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a model instance, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteModelInstance(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        deleteModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceID);
    }

    /**
     * Deletes a model instance, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteModelInstanceWithHttpInfo(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        com.squareup.okhttp.Call call = deleteModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceID, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a model instance, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteModelInstanceAsync(String modelHistoryServerId, String modelInstanceID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteResourceById
     * @param resourceId ID of the resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteResourceByIdCall(Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/remove/resource/{resourceId}"
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteResourceByIdValidateBeforeCall(Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling deleteResourceById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteResourceByIdCall(resourceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the resource with the specified resource ID
     * 
     * @param resourceId ID of the resource (required)
     * @return Resource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Resource deleteResourceById(Long resourceId) throws ApiException {
        ApiResponse<Resource> resp = deleteResourceByIdWithHttpInfo(resourceId);
        return resp.getData();
    }

    /**
     * Delete the resource with the specified resource ID
     * 
     * @param resourceId ID of the resource (required)
     * @return ApiResponse&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Resource> deleteResourceByIdWithHttpInfo(Long resourceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteResourceByIdValidateBeforeCall(resourceId, null, null);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete the resource with the specified resource ID (asynchronously)
     * 
     * @param resourceId ID of the resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteResourceByIdAsync(Long resourceId, final ApiCallback<Resource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteResourceByIdValidateBeforeCall(resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteResourceFromGroup
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteResourceFromGroupCall(Long resourceGroupId, Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}"
            .replaceAll("\\{" + "resourceGroupId" + "\\}", apiClient.escapeString(resourceGroupId.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteResourceFromGroupValidateBeforeCall(Long resourceGroupId, Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceGroupId' is set
        if (resourceGroupId == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupId' when calling deleteResourceFromGroup(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling deleteResourceFromGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteResourceFromGroupCall(resourceGroupId, resourceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Removes a resource from a resource group
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteResourceFromGroup(Long resourceGroupId, Long resourceId) throws ApiException {
        deleteResourceFromGroupWithHttpInfo(resourceGroupId, resourceId);
    }

    /**
     * Removes a resource from a resource group
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteResourceFromGroupWithHttpInfo(Long resourceGroupId, Long resourceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteResourceFromGroupValidateBeforeCall(resourceGroupId, resourceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a resource from a resource group (asynchronously)
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteResourceFromGroupAsync(Long resourceGroupId, Long resourceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteResourceFromGroupValidateBeforeCall(resourceGroupId, resourceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteResourceGroupById
     * @param resourceGroupId ID of the resource group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteResourceGroupByIdCall(Long resourceGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/remove/group/{resourceGroupId}"
            .replaceAll("\\{" + "resourceGroupId" + "\\}", apiClient.escapeString(resourceGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteResourceGroupByIdValidateBeforeCall(Long resourceGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceGroupId' is set
        if (resourceGroupId == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupId' when calling deleteResourceGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteResourceGroupByIdCall(resourceGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the resource group with the specified resource group ID
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @return ResourceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceGroup deleteResourceGroupById(Long resourceGroupId) throws ApiException {
        ApiResponse<ResourceGroup> resp = deleteResourceGroupByIdWithHttpInfo(resourceGroupId);
        return resp.getData();
    }

    /**
     * Delete the resource group with the specified resource group ID
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @return ApiResponse&lt;ResourceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceGroup> deleteResourceGroupByIdWithHttpInfo(Long resourceGroupId) throws ApiException {
        com.squareup.okhttp.Call call = deleteResourceGroupByIdValidateBeforeCall(resourceGroupId, null, null);
        Type localVarReturnType = new TypeToken<ResourceGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete the resource group with the specified resource group ID (asynchronously)
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteResourceGroupByIdAsync(Long resourceGroupId, final ApiCallback<ResourceGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteResourceGroupByIdValidateBeforeCall(resourceGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deployModel
     * @param deploymentId ID deployment group (required)
     * @param body the model import request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deployModelCall(String deploymentId, ImportModelRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}/model"
            .replaceAll("\\{" + "deploymentId" + "\\}", apiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deployModelValidateBeforeCall(String deploymentId, ImportModelRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deployModel(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deployModel(Async)");
        }
        

        com.squareup.okhttp.Call call = deployModelCall(deploymentId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deploy a model in a deployment group.
     * 
     * @param deploymentId ID deployment group (required)
     * @param body the model import request (required)
     * @return ModelEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelEntity deployModel(String deploymentId, ImportModelRequest body) throws ApiException {
        ApiResponse<ModelEntity> resp = deployModelWithHttpInfo(deploymentId, body);
        return resp.getData();
    }

    /**
     * Deploy a model in a deployment group.
     * 
     * @param deploymentId ID deployment group (required)
     * @param body the model import request (required)
     * @return ApiResponse&lt;ModelEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelEntity> deployModelWithHttpInfo(String deploymentId, ImportModelRequest body) throws ApiException {
        com.squareup.okhttp.Call call = deployModelValidateBeforeCall(deploymentId, body, null, null);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deploy a model in a deployment group. (asynchronously)
     * 
     * @param deploymentId ID deployment group (required)
     * @param body the model import request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deployModelAsync(String deploymentId, ImportModelRequest body, final ApiCallback<ModelEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deployModelValidateBeforeCall(deploymentId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deploymentCreate
     * @param body the deployment request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deploymentCreateCall(CreateDeploymentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deployment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deploymentCreateValidateBeforeCall(CreateDeploymentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deploymentCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = deploymentCreateCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new deployment group.
     * 
     * @param body the deployment request (required)
     * @return DeploymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResponse deploymentCreate(CreateDeploymentRequest body) throws ApiException {
        ApiResponse<DeploymentResponse> resp = deploymentCreateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new deployment group.
     * 
     * @param body the deployment request (required)
     * @return ApiResponse&lt;DeploymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResponse> deploymentCreateWithHttpInfo(CreateDeploymentRequest body) throws ApiException {
        com.squareup.okhttp.Call call = deploymentCreateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new deployment group. (asynchronously)
     * 
     * @param body the deployment request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deploymentCreateAsync(CreateDeploymentRequest body, final ApiCallback<DeploymentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deploymentCreateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deploymentDelete
     * @param deploymentId Id of the deployment group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deploymentDeleteCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}"
            .replaceAll("\\{" + "deploymentId" + "\\}", apiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deploymentDeleteValidateBeforeCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deploymentDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deploymentDeleteCall(deploymentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a deployment by id
     * 
     * @param deploymentId Id of the deployment group (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 deploymentDelete(String deploymentId) throws ApiException {
        ApiResponse<InlineResponse200> resp = deploymentDeleteWithHttpInfo(deploymentId);
        return resp.getData();
    }

    /**
     * Delete a deployment by id
     * 
     * @param deploymentId Id of the deployment group (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> deploymentDeleteWithHttpInfo(String deploymentId) throws ApiException {
        com.squareup.okhttp.Call call = deploymentDeleteValidateBeforeCall(deploymentId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a deployment by id (asynchronously)
     * 
     * @param deploymentId Id of the deployment group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deploymentDeleteAsync(String deploymentId, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deploymentDeleteValidateBeforeCall(deploymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deploymentGet
     * @param deploymentId Id of the deployment group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deploymentGetCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}"
            .replaceAll("\\{" + "deploymentId" + "\\}", apiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deploymentGetValidateBeforeCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deploymentGet(Async)");
        }
        

        com.squareup.okhttp.Call call = deploymentGetCall(deploymentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a deployment details by id
     * 
     * @param deploymentId Id of the deployment group (required)
     * @return DeploymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentResponse deploymentGet(String deploymentId) throws ApiException {
        ApiResponse<DeploymentResponse> resp = deploymentGetWithHttpInfo(deploymentId);
        return resp.getData();
    }

    /**
     * Get a deployment details by id
     * 
     * @param deploymentId Id of the deployment group (required)
     * @return ApiResponse&lt;DeploymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentResponse> deploymentGetWithHttpInfo(String deploymentId) throws ApiException {
        com.squareup.okhttp.Call call = deploymentGetValidateBeforeCall(deploymentId, null, null);
        Type localVarReturnType = new TypeToken<DeploymentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a deployment details by id (asynchronously)
     * 
     * @param deploymentId Id of the deployment group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deploymentGetAsync(String deploymentId, final ApiCallback<DeploymentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deploymentGetValidateBeforeCall(deploymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deployments
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deploymentsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deployments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deploymentsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deploymentsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of deployments
     * 
     * @return List&lt;DeploymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DeploymentResponse> deployments() throws ApiException {
        ApiResponse<List<DeploymentResponse>> resp = deploymentsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get a list of deployments
     * 
     * @return ApiResponse&lt;List&lt;DeploymentResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DeploymentResponse>> deploymentsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deploymentsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<DeploymentResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of deployments (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deploymentsAsync(final ApiCallback<List<DeploymentResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deploymentsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DeploymentResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for detectobjects
     * @param id the GUID for mapping the results in the detections (required)
     * @param needsPreprocessing (true) if the image needs preprocessing (required)
     * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. (required)
     * @param file the image file to detect objects from (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call detectobjectsCall(String id, Boolean needsPreprocessing, Float threshold, File file, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);
        if (needsPreprocessing != null)
        localVarFormParams.put("needsPreprocessing", needsPreprocessing);
        if (threshold != null)
        localVarFormParams.put("threshold", threshold);
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call detectobjectsValidateBeforeCall(String id, Boolean needsPreprocessing, Float threshold, File file, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'needsPreprocessing' is set
        if (needsPreprocessing == null) {
            throw new ApiException("Missing the required parameter 'needsPreprocessing' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'threshold' is set
        if (threshold == null) {
            throw new ApiException("Missing the required parameter 'threshold' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling detectobjects(Async)");
        }
        

        com.squareup.okhttp.Call call = detectobjectsCall(id, needsPreprocessing, threshold, file, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Detect the objects, given a (input) prediction request
     * 
     * @param id the GUID for mapping the results in the detections (required)
     * @param needsPreprocessing (true) if the image needs preprocessing (required)
     * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. (required)
     * @param file the image file to detect objects from (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return DetectionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DetectionResult detectobjects(String id, Boolean needsPreprocessing, Float threshold, File file, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<DetectionResult> resp = detectobjectsWithHttpInfo(id, needsPreprocessing, threshold, file, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Detect the objects, given a (input) prediction request
     * 
     * @param id the GUID for mapping the results in the detections (required)
     * @param needsPreprocessing (true) if the image needs preprocessing (required)
     * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. (required)
     * @param file the image file to detect objects from (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;DetectionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DetectionResult> detectobjectsWithHttpInfo(String id, Boolean needsPreprocessing, Float threshold, File file, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = detectobjectsValidateBeforeCall(id, needsPreprocessing, threshold, file, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<DetectionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Detect the objects, given a (input) prediction request (asynchronously)
     * 
     * @param id the GUID for mapping the results in the detections (required)
     * @param needsPreprocessing (true) if the image needs preprocessing (required)
     * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. (required)
     * @param file the image file to detect objects from (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call detectobjectsAsync(String id, Boolean needsPreprocessing, Float threshold, File file, String deploymentName, String versionName, String modelName, final ApiCallback<DetectionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = detectobjectsValidateBeforeCall(id, needsPreprocessing, threshold, file, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DetectionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for downloadJobOutputFile
     * @param jobId Job ID (required)
     * @param downloadOutputFileRequest Download output file request object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadJobOutputFileCall(Long jobId, DownloadOutputFileRequest downloadOutputFileRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = downloadOutputFileRequest;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/outputfile"
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadJobOutputFileValidateBeforeCall(Long jobId, DownloadOutputFileRequest downloadOutputFileRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling downloadJobOutputFile(Async)");
        }
        
        // verify the required parameter 'downloadOutputFileRequest' is set
        if (downloadOutputFileRequest == null) {
            throw new ApiException("Missing the required parameter 'downloadOutputFileRequest' when calling downloadJobOutputFile(Async)");
        }
        

        com.squareup.okhttp.Call call = downloadJobOutputFileCall(jobId, downloadOutputFileRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
     * 
     * @param jobId Job ID (required)
     * @param downloadOutputFileRequest Download output file request object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void downloadJobOutputFile(Long jobId, DownloadOutputFileRequest downloadOutputFileRequest) throws ApiException {
        downloadJobOutputFileWithHttpInfo(jobId, downloadOutputFileRequest);
    }

    /**
     * Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
     * 
     * @param jobId Job ID (required)
     * @param downloadOutputFileRequest Download output file request object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> downloadJobOutputFileWithHttpInfo(Long jobId, DownloadOutputFileRequest downloadOutputFileRequest) throws ApiException {
        com.squareup.okhttp.Call call = downloadJobOutputFileValidateBeforeCall(jobId, downloadOutputFileRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;. (asynchronously)
     * 
     * @param jobId Job ID (required)
     * @param downloadOutputFileRequest Download output file request object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadJobOutputFileAsync(Long jobId, DownloadOutputFileRequest downloadOutputFileRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadJobOutputFileValidateBeforeCall(jobId, downloadOutputFileRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for generateAuthToken
     * @param tokenGenerateRequest Auth token details. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generateAuthTokenCall(TokenGenerateRequest tokenGenerateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tokenGenerateRequest;

        // create path and map variables
        String localVarPath = "/auth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generateAuthTokenValidateBeforeCall(TokenGenerateRequest tokenGenerateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tokenGenerateRequest' is set
        if (tokenGenerateRequest == null) {
            throw new ApiException("Missing the required parameter 'tokenGenerateRequest' when calling generateAuthToken(Async)");
        }
        

        com.squareup.okhttp.Call call = generateAuthTokenCall(tokenGenerateRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Generate new auth token
     * 
     * @param tokenGenerateRequest Auth token details. (required)
     * @return Token
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Token generateAuthToken(TokenGenerateRequest tokenGenerateRequest) throws ApiException {
        ApiResponse<Token> resp = generateAuthTokenWithHttpInfo(tokenGenerateRequest);
        return resp.getData();
    }

    /**
     * Generate new auth token
     * 
     * @param tokenGenerateRequest Auth token details. (required)
     * @return ApiResponse&lt;Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Token> generateAuthTokenWithHttpInfo(TokenGenerateRequest tokenGenerateRequest) throws ApiException {
        com.squareup.okhttp.Call call = generateAuthTokenValidateBeforeCall(tokenGenerateRequest, null, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generate new auth token (asynchronously)
     * 
     * @param tokenGenerateRequest Auth token details. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateAuthTokenAsync(TokenGenerateRequest tokenGenerateRequest, final ApiCallback<Token> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateAuthTokenValidateBeforeCall(tokenGenerateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllJobs
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllJobsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllJobsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllJobsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of all available jobs
     * 
     * @return List&lt;JobEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JobEntity> getAllJobs() throws ApiException {
        ApiResponse<List<JobEntity>> resp = getAllJobsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get a list of all available jobs
     * 
     * @return ApiResponse&lt;List&lt;JobEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JobEntity>> getAllJobsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllJobsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<JobEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of all available jobs (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllJobsAsync(final ApiCallback<List<JobEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllJobsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JobEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getArray
     * @param accept  (required)
     * @param arrayType The format in which the memory mapped array is returned. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getArrayCall(String accept, String arrayType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/array/{arrayType}"
            .replaceAll("\\{" + "arrayType" + "\\}", apiClient.escapeString(arrayType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getArrayValidateBeforeCall(String accept, String arrayType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getArray(Async)");
        }
        
        // verify the required parameter 'arrayType' is set
        if (arrayType == null) {
            throw new ApiException("Missing the required parameter 'arrayType' when calling getArray(Async)");
        }
        

        com.squareup.okhttp.Call call = getArrayCall(accept, arrayType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the memory mapped array based on the array type.
     * The array is specified through a file path, in the configuration object, during model server deployment.
     * @param accept  (required)
     * @param arrayType The format in which the memory mapped array is returned. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getArray(String accept, String arrayType) throws ApiException {
        getArrayWithHttpInfo(accept, arrayType);
    }

    /**
     * Get the memory mapped array based on the array type.
     * The array is specified through a file path, in the configuration object, during model server deployment.
     * @param accept  (required)
     * @param arrayType The format in which the memory mapped array is returned. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getArrayWithHttpInfo(String accept, String arrayType) throws ApiException {
        com.squareup.okhttp.Call call = getArrayValidateBeforeCall(accept, arrayType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the memory mapped array based on the array type. (asynchronously)
     * The array is specified through a file path, in the configuration object, during model server deployment.
     * @param accept  (required)
     * @param arrayType The format in which the memory mapped array is returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getArrayAsync(String accept, String arrayType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getArrayValidateBeforeCall(accept, arrayType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getArrayIndices
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param input Input indices array (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getArrayIndicesCall(String contentType, String accept, String arrayType, String input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/array/indices/{arrayType}"
            .replaceAll("\\{" + "arrayType" + "\\}", apiClient.escapeString(arrayType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getArrayIndicesValidateBeforeCall(String contentType, String accept, String arrayType, String input, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getArrayIndices(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getArrayIndices(Async)");
        }
        
        // verify the required parameter 'arrayType' is set
        if (arrayType == null) {
            throw new ApiException("Missing the required parameter 'arrayType' when calling getArrayIndices(Async)");
        }
        

        com.squareup.okhttp.Call call = getArrayIndicesCall(contentType, accept, arrayType, input, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the memory mapped array indices based on the array type.
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param input Input indices array (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getArrayIndices(String contentType, String accept, String arrayType, String input) throws ApiException {
        getArrayIndicesWithHttpInfo(contentType, accept, arrayType, input);
    }

    /**
     * Get the memory mapped array indices based on the array type.
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param input Input indices array (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getArrayIndicesWithHttpInfo(String contentType, String accept, String arrayType, String input) throws ApiException {
        com.squareup.okhttp.Call call = getArrayIndicesValidateBeforeCall(contentType, accept, arrayType, input, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the memory mapped array indices based on the array type. (asynchronously)
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param input Input indices array (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getArrayIndicesAsync(String contentType, String accept, String arrayType, String input, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getArrayIndicesValidateBeforeCall(contentType, accept, arrayType, input, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getArrayRange
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param from  (required)
     * @param to  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getArrayRangeCall(String accept, String arrayType, Integer from, Integer to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/array/range/{from}/{to}/{arrayType}"
            .replaceAll("\\{" + "arrayType" + "\\}", apiClient.escapeString(arrayType.toString()))
            .replaceAll("\\{" + "from" + "\\}", apiClient.escapeString(from.toString()))
            .replaceAll("\\{" + "to" + "\\}", apiClient.escapeString(to.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getArrayRangeValidateBeforeCall(String accept, String arrayType, Integer from, Integer to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getArrayRange(Async)");
        }
        
        // verify the required parameter 'arrayType' is set
        if (arrayType == null) {
            throw new ApiException("Missing the required parameter 'arrayType' when calling getArrayRange(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getArrayRange(Async)");
        }
        
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getArrayRange(Async)");
        }
        

        com.squareup.okhttp.Call call = getArrayRangeCall(accept, arrayType, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the memory mapped array within a range based on the array type.
     * 
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param from  (required)
     * @param to  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getArrayRange(String accept, String arrayType, Integer from, Integer to) throws ApiException {
        getArrayRangeWithHttpInfo(accept, arrayType, from, to);
    }

    /**
     * Get the memory mapped array within a range based on the array type.
     * 
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param from  (required)
     * @param to  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getArrayRangeWithHttpInfo(String accept, String arrayType, Integer from, Integer to) throws ApiException {
        com.squareup.okhttp.Call call = getArrayRangeValidateBeforeCall(accept, arrayType, from, to, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the memory mapped array within a range based on the array type. (asynchronously)
     * 
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param from  (required)
     * @param to  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getArrayRangeAsync(String accept, String arrayType, Integer from, Integer to, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getArrayRangeValidateBeforeCall(accept, arrayType, from, to, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAuthPolicy
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthPolicyCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthPolicyValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAuthPolicyCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get auth policy
     * 
     * @return AuthPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthPolicy getAuthPolicy() throws ApiException {
        ApiResponse<AuthPolicy> resp = getAuthPolicyWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get auth policy
     * 
     * @return ApiResponse&lt;AuthPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthPolicy> getAuthPolicyWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAuthPolicyValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AuthPolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get auth policy (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthPolicyAsync(final ApiCallback<AuthPolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthPolicyValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthPolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBestModelAmongModelIds
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param bestModel Object encapsulating the model ids, eval type and column metric name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBestModelAmongModelIdsCall(String modelHistoryServerId, BestModel bestModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bestModel;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/best"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBestModelAmongModelIdsValidateBeforeCall(String modelHistoryServerId, BestModel bestModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getBestModelAmongModelIds(Async)");
        }
        
        // verify the required parameter 'bestModel' is set
        if (bestModel == null) {
            throw new ApiException("Missing the required parameter 'bestModel' when calling getBestModelAmongModelIds(Async)");
        }
        

        com.squareup.okhttp.Call call = getBestModelAmongModelIdsCall(modelHistoryServerId, bestModel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the best model among the given model instance IDs, based on the evaluation type and column metric
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param bestModel Object encapsulating the model ids, eval type and column metric name (required)
     * @return ModelInstanceEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelInstanceEntity getBestModelAmongModelIds(String modelHistoryServerId, BestModel bestModel) throws ApiException {
        ApiResponse<ModelInstanceEntity> resp = getBestModelAmongModelIdsWithHttpInfo(modelHistoryServerId, bestModel);
        return resp.getData();
    }

    /**
     * Gets the best model among the given model instance IDs, based on the evaluation type and column metric
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param bestModel Object encapsulating the model ids, eval type and column metric name (required)
     * @return ApiResponse&lt;ModelInstanceEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelInstanceEntity> getBestModelAmongModelIdsWithHttpInfo(String modelHistoryServerId, BestModel bestModel) throws ApiException {
        com.squareup.okhttp.Call call = getBestModelAmongModelIdsValidateBeforeCall(modelHistoryServerId, bestModel, null, null);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the best model among the given model instance IDs, based on the evaluation type and column metric (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param bestModel Object encapsulating the model ids, eval type and column metric name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBestModelAmongModelIdsAsync(String modelHistoryServerId, BestModel bestModel, final ApiCallback<ModelInstanceEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBestModelAmongModelIdsValidateBeforeCall(modelHistoryServerId, bestModel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCredentialsById
     * @param credentialId Credentials ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCredentialsByIdCall(Long credentialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/credentials/{credentialId}"
            .replaceAll("\\{" + "credentialId" + "\\}", apiClient.escapeString(credentialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCredentialsByIdValidateBeforeCall(Long credentialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'credentialId' is set
        if (credentialId == null) {
            throw new ApiException("Missing the required parameter 'credentialId' when calling getCredentialsById(Async)");
        }
        

        com.squareup.okhttp.Call call = getCredentialsByIdCall(credentialId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get credentials given an ID
     * 
     * @param credentialId Credentials ID (required)
     * @return ResourceCredentials
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceCredentials getCredentialsById(Long credentialId) throws ApiException {
        ApiResponse<ResourceCredentials> resp = getCredentialsByIdWithHttpInfo(credentialId);
        return resp.getData();
    }

    /**
     * Get credentials given an ID
     * 
     * @param credentialId Credentials ID (required)
     * @return ApiResponse&lt;ResourceCredentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceCredentials> getCredentialsByIdWithHttpInfo(Long credentialId) throws ApiException {
        com.squareup.okhttp.Call call = getCredentialsByIdValidateBeforeCall(credentialId, null, null);
        Type localVarReturnType = new TypeToken<ResourceCredentials>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get credentials given an ID (asynchronously)
     * 
     * @param credentialId Credentials ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCredentialsByIdAsync(Long credentialId, final ApiCallback<ResourceCredentials> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCredentialsByIdValidateBeforeCall(credentialId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceCredentials>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCurrentModel
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCurrentModelCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/model";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCurrentModelValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCurrentModelCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns the current model being used for retraining.
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getCurrentModel() throws ApiException {
        getCurrentModelWithHttpInfo();
    }

    /**
     * Returns the current model being used for retraining.
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getCurrentModelWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCurrentModelValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Returns the current model being used for retraining. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrentModelAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrentModelValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getEvaluationForModelID
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get evaluation results for. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEvaluationForModelIDCall(String modelHistoryServerId, String modelInstanceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelInstanceID" + "\\}", apiClient.escapeString(modelInstanceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEvaluationForModelIDValidateBeforeCall(String modelHistoryServerId, String modelInstanceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getEvaluationForModelID(Async)");
        }
        
        // verify the required parameter 'modelInstanceID' is set
        if (modelInstanceID == null) {
            throw new ApiException("Missing the required parameter 'modelInstanceID' when calling getEvaluationForModelID(Async)");
        }
        

        com.squareup.okhttp.Call call = getEvaluationForModelIDCall(modelHistoryServerId, modelInstanceID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the list of evaluation results entity, given a model instance ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get evaluation results for. (required)
     * @return List&lt;EvaluationResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EvaluationResultsEntity> getEvaluationForModelID(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        ApiResponse<List<EvaluationResultsEntity>> resp = getEvaluationForModelIDWithHttpInfo(modelHistoryServerId, modelInstanceID);
        return resp.getData();
    }

    /**
     * Gets the list of evaluation results entity, given a model instance ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get evaluation results for. (required)
     * @return ApiResponse&lt;List&lt;EvaluationResultsEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EvaluationResultsEntity>> getEvaluationForModelIDWithHttpInfo(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        com.squareup.okhttp.Call call = getEvaluationForModelIDValidateBeforeCall(modelHistoryServerId, modelInstanceID, null, null);
        Type localVarReturnType = new TypeToken<List<EvaluationResultsEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the list of evaluation results entity, given a model instance ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get evaluation results for. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEvaluationForModelIDAsync(String modelHistoryServerId, String modelInstanceID, final ApiCallback<List<EvaluationResultsEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEvaluationForModelIDValidateBeforeCall(modelHistoryServerId, modelInstanceID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EvaluationResultsEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExamplesForMinibatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExamplesForMinibatchCall(String modelHistoryServerId, String minibatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/example/{minibatchId}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "minibatchId" + "\\}", apiClient.escapeString(minibatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExamplesForMinibatchValidateBeforeCall(String modelHistoryServerId, String minibatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getExamplesForMinibatch(Async)");
        }
        
        // verify the required parameter 'minibatchId' is set
        if (minibatchId == null) {
            throw new ApiException("Missing the required parameter 'minibatchId' when calling getExamplesForMinibatch(Async)");
        }
        

        com.squareup.okhttp.Call call = getExamplesForMinibatchCall(modelHistoryServerId, minibatchId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all the examples for a minibatch ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @return List&lt;ExampleEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExampleEntity> getExamplesForMinibatch(String modelHistoryServerId, String minibatchId) throws ApiException {
        ApiResponse<List<ExampleEntity>> resp = getExamplesForMinibatchWithHttpInfo(modelHistoryServerId, minibatchId);
        return resp.getData();
    }

    /**
     * Gets all the examples for a minibatch ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @return ApiResponse&lt;List&lt;ExampleEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExampleEntity>> getExamplesForMinibatchWithHttpInfo(String modelHistoryServerId, String minibatchId) throws ApiException {
        com.squareup.okhttp.Call call = getExamplesForMinibatchValidateBeforeCall(modelHistoryServerId, minibatchId, null, null);
        Type localVarReturnType = new TypeToken<List<ExampleEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all the examples for a minibatch ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExamplesForMinibatchAsync(String modelHistoryServerId, String minibatchId, final ApiCallback<List<ExampleEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExamplesForMinibatchValidateBeforeCall(modelHistoryServerId, minibatchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExampleEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to obtain (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExperimentCall(String modelHistoryServerId, String experimentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "experimentID" + "\\}", apiClient.escapeString(experimentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExperimentValidateBeforeCall(String modelHistoryServerId, String experimentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getExperiment(Async)");
        }
        
        // verify the required parameter 'experimentID' is set
        if (experimentID == null) {
            throw new ApiException("Missing the required parameter 'experimentID' when calling getExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = getExperimentCall(modelHistoryServerId, experimentID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Obtain an experiment&#39;s details, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to obtain (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentEntity getExperiment(String modelHistoryServerId, String experimentID) throws ApiException {
        ApiResponse<ExperimentEntity> resp = getExperimentWithHttpInfo(modelHistoryServerId, experimentID);
        return resp.getData();
    }

    /**
     * Obtain an experiment&#39;s details, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to obtain (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentEntity> getExperimentWithHttpInfo(String modelHistoryServerId, String experimentID) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentValidateBeforeCall(modelHistoryServerId, experimentID, null, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtain an experiment&#39;s details, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to obtain (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentAsync(String modelHistoryServerId, String experimentID, final ApiCallback<ExperimentEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentValidateBeforeCall(modelHistoryServerId, experimentID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExperimentsForModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExperimentsForModelHistoryCall(String modelHistoryServerId, String modelHistoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelHistoryID" + "\\}", apiClient.escapeString(modelHistoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExperimentsForModelHistoryValidateBeforeCall(String modelHistoryServerId, String modelHistoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getExperimentsForModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryID' is set
        if (modelHistoryID == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryID' when calling getExperimentsForModelHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = getExperimentsForModelHistoryCall(modelHistoryServerId, modelHistoryID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Obtain all experiments for a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentEntity getExperimentsForModelHistory(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        ApiResponse<ExperimentEntity> resp = getExperimentsForModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
        return resp.getData();
    }

    /**
     * Obtain all experiments for a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentEntity> getExperimentsForModelHistoryWithHttpInfo(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentsForModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, null, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtain all experiments for a model history / workspace (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentsForModelHistoryAsync(String modelHistoryServerId, String modelHistoryID, final ApiCallback<ExperimentEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentsForModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobById
     * @param jobIdOrType Job ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobByIdCall(Long jobIdOrType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobIdOrType}"
            .replaceAll("\\{" + "jobIdOrType" + "\\}", apiClient.escapeString(jobIdOrType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobByIdValidateBeforeCall(Long jobIdOrType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobIdOrType' is set
        if (jobIdOrType == null) {
            throw new ApiException("Missing the required parameter 'jobIdOrType' when calling getJobById(Async)");
        }
        

        com.squareup.okhttp.Call call = getJobByIdCall(jobIdOrType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a job by its ID
     * 
     * @param jobIdOrType Job ID (required)
     * @return JobEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobEntity getJobById(Long jobIdOrType) throws ApiException {
        ApiResponse<JobEntity> resp = getJobByIdWithHttpInfo(jobIdOrType);
        return resp.getData();
    }

    /**
     * Get a job by its ID
     * 
     * @param jobIdOrType Job ID (required)
     * @return ApiResponse&lt;JobEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobEntity> getJobByIdWithHttpInfo(Long jobIdOrType) throws ApiException {
        com.squareup.okhttp.Call call = getJobByIdValidateBeforeCall(jobIdOrType, null, null);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a job by its ID (asynchronously)
     * 
     * @param jobIdOrType Job ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobByIdAsync(Long jobIdOrType, final ApiCallback<JobEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobByIdValidateBeforeCall(jobIdOrType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLastEvaluation
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLastEvaluationCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lastevaluation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLastEvaluationValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLastEvaluationCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the last evaluation specifications from the current model.
     * 
     * @return EvaluationResultsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EvaluationResultsEntity getLastEvaluation() throws ApiException {
        ApiResponse<EvaluationResultsEntity> resp = getLastEvaluationWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get the last evaluation specifications from the current model.
     * 
     * @return ApiResponse&lt;EvaluationResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EvaluationResultsEntity> getLastEvaluationWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getLastEvaluationValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the last evaluation specifications from the current model. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLastEvaluationAsync(final ApiCallback<EvaluationResultsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLastEvaluationValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMinibatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMinibatchCall(String modelHistoryServerId, String minibatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "minibatchId" + "\\}", apiClient.escapeString(minibatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMinibatchValidateBeforeCall(String modelHistoryServerId, String minibatchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getMinibatch(Async)");
        }
        
        // verify the required parameter 'minibatchId' is set
        if (minibatchId == null) {
            throw new ApiException("Missing the required parameter 'minibatchId' when calling getMinibatch(Async)");
        }
        

        com.squareup.okhttp.Call call = getMinibatchCall(modelHistoryServerId, minibatchId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a minibatch for the model
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @return MinibatchEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MinibatchEntity getMinibatch(String modelHistoryServerId, String minibatchId) throws ApiException {
        ApiResponse<MinibatchEntity> resp = getMinibatchWithHttpInfo(modelHistoryServerId, minibatchId);
        return resp.getData();
    }

    /**
     * Gets a minibatch for the model
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @return ApiResponse&lt;MinibatchEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MinibatchEntity> getMinibatchWithHttpInfo(String modelHistoryServerId, String minibatchId) throws ApiException {
        com.squareup.okhttp.Call call = getMinibatchValidateBeforeCall(modelHistoryServerId, minibatchId, null, null);
        Type localVarReturnType = new TypeToken<MinibatchEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a minibatch for the model (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMinibatchAsync(String modelHistoryServerId, String minibatchId, final ApiCallback<MinibatchEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMinibatchValidateBeforeCall(modelHistoryServerId, minibatchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MinibatchEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelDetails
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelDetailsCall(String deploymentId, String modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}/model/{modelId}"
            .replaceAll("\\{" + "deploymentId" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelDetailsValidateBeforeCall(String deploymentId, String modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling getModelDetails(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getModelDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelDetailsCall(deploymentId, modelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get model details
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @return ModelEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelEntity getModelDetails(String deploymentId, String modelId) throws ApiException {
        ApiResponse<ModelEntity> resp = getModelDetailsWithHttpInfo(deploymentId, modelId);
        return resp.getData();
    }

    /**
     * Get model details
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @return ApiResponse&lt;ModelEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelEntity> getModelDetailsWithHttpInfo(String deploymentId, String modelId) throws ApiException {
        com.squareup.okhttp.Call call = getModelDetailsValidateBeforeCall(deploymentId, modelId, null, null);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get model details (asynchronously)
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelDetailsAsync(String deploymentId, String modelId, final ApiCallback<ModelEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelDetailsValidateBeforeCall(deploymentId, modelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID GUID of the model history to get information of. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelHistoryCall(String modelHistoryServerId, String modelHistoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelHistoryID" + "\\}", apiClient.escapeString(modelHistoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelHistoryValidateBeforeCall(String modelHistoryServerId, String modelHistoryID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryID' is set
        if (modelHistoryID == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryID' when calling getModelHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelHistoryCall(modelHistoryServerId, modelHistoryID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a model history, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID GUID of the model history to get information of. (required)
     * @return ModelHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelHistoryEntity getModelHistory(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        ApiResponse<ModelHistoryEntity> resp = getModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
        return resp.getData();
    }

    /**
     * Gets a model history, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID GUID of the model history to get information of. (required)
     * @return ApiResponse&lt;ModelHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelHistoryEntity> getModelHistoryWithHttpInfo(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        com.squareup.okhttp.Call call = getModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, null, null);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a model history, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID GUID of the model history to get information of. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelHistoryAsync(String modelHistoryServerId, String modelHistoryID, final ApiCallback<ModelHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelInstance
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get information of. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelInstanceCall(String modelHistoryServerId, String modelInstanceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelInstanceID" + "\\}", apiClient.escapeString(modelInstanceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelInstanceValidateBeforeCall(String modelHistoryServerId, String modelInstanceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getModelInstance(Async)");
        }
        
        // verify the required parameter 'modelInstanceID' is set
        if (modelInstanceID == null) {
            throw new ApiException("Missing the required parameter 'modelInstanceID' when calling getModelInstance(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelInstanceCall(modelHistoryServerId, modelInstanceID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a model instance, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get information of. (required)
     * @return ModelInstanceEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelInstanceEntity getModelInstance(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        ApiResponse<ModelInstanceEntity> resp = getModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceID);
        return resp.getData();
    }

    /**
     * Gets a model instance, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get information of. (required)
     * @return ApiResponse&lt;ModelInstanceEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelInstanceEntity> getModelInstanceWithHttpInfo(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        com.squareup.okhttp.Call call = getModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceID, null, null);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a model instance, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get information of. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelInstanceAsync(String modelHistoryServerId, String modelInstanceID, final ApiCallback<ModelInstanceEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelsForExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModelsForExperimentCall(String modelHistoryServerId, String experimentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}/models"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "experimentID" + "\\}", apiClient.escapeString(experimentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelsForExperimentValidateBeforeCall(String modelHistoryServerId, String experimentID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getModelsForExperiment(Async)");
        }
        
        // verify the required parameter 'experimentID' is set
        if (experimentID == null) {
            throw new ApiException("Missing the required parameter 'experimentID' when calling getModelsForExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelsForExperimentCall(modelHistoryServerId, experimentID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Obtain a list of all the models for an experiment
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment (required)
     * @return List&lt;ModelInstanceEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelInstanceEntity> getModelsForExperiment(String modelHistoryServerId, String experimentID) throws ApiException {
        ApiResponse<List<ModelInstanceEntity>> resp = getModelsForExperimentWithHttpInfo(modelHistoryServerId, experimentID);
        return resp.getData();
    }

    /**
     * Obtain a list of all the models for an experiment
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment (required)
     * @return ApiResponse&lt;List&lt;ModelInstanceEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelInstanceEntity>> getModelsForExperimentWithHttpInfo(String modelHistoryServerId, String experimentID) throws ApiException {
        com.squareup.okhttp.Call call = getModelsForExperimentValidateBeforeCall(modelHistoryServerId, experimentID, null, null);
        Type localVarReturnType = new TypeToken<List<ModelInstanceEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtain a list of all the models for an experiment (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModelsForExperimentAsync(String modelHistoryServerId, String experimentID, final ApiCallback<List<ModelInstanceEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelsForExperimentValidateBeforeCall(modelHistoryServerId, experimentID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelInstanceEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResourceById
     * @param resourceId ID of the resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResourceByIdCall(Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/resource/{resourceId}"
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResourceByIdValidateBeforeCall(Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling getResourceById(Async)");
        }
        

        com.squareup.okhttp.Call call = getResourceByIdCall(resourceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the resource with the specified resource ID
     * 
     * @param resourceId ID of the resource (required)
     * @return Resource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Resource getResourceById(Long resourceId) throws ApiException {
        ApiResponse<Resource> resp = getResourceByIdWithHttpInfo(resourceId);
        return resp.getData();
    }

    /**
     * Get the resource with the specified resource ID
     * 
     * @param resourceId ID of the resource (required)
     * @return ApiResponse&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Resource> getResourceByIdWithHttpInfo(Long resourceId) throws ApiException {
        com.squareup.okhttp.Call call = getResourceByIdValidateBeforeCall(resourceId, null, null);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the resource with the specified resource ID (asynchronously)
     * 
     * @param resourceId ID of the resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResourceByIdAsync(Long resourceId, final ApiCallback<Resource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResourceByIdValidateBeforeCall(resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResourceBySubType
     * @param resourceSubType Subtype of the resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResourceBySubTypeCall(String resourceSubType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/resources/subtype/{resourceSubType}"
            .replaceAll("\\{" + "resourceSubType" + "\\}", apiClient.escapeString(resourceSubType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResourceBySubTypeValidateBeforeCall(String resourceSubType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceSubType' is set
        if (resourceSubType == null) {
            throw new ApiException("Missing the required parameter 'resourceSubType' when calling getResourceBySubType(Async)");
        }
        

        com.squareup.okhttp.Call call = getResourceBySubTypeCall(resourceSubType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all the resources with the specified resource subtype
     * 
     * @param resourceSubType Subtype of the resource (required)
     * @return List&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Resource> getResourceBySubType(String resourceSubType) throws ApiException {
        ApiResponse<List<Resource>> resp = getResourceBySubTypeWithHttpInfo(resourceSubType);
        return resp.getData();
    }

    /**
     * Get all the resources with the specified resource subtype
     * 
     * @param resourceSubType Subtype of the resource (required)
     * @return ApiResponse&lt;List&lt;Resource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Resource>> getResourceBySubTypeWithHttpInfo(String resourceSubType) throws ApiException {
        com.squareup.okhttp.Call call = getResourceBySubTypeValidateBeforeCall(resourceSubType, null, null);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all the resources with the specified resource subtype (asynchronously)
     * 
     * @param resourceSubType Subtype of the resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResourceBySubTypeAsync(String resourceSubType, final ApiCallback<List<Resource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResourceBySubTypeValidateBeforeCall(resourceSubType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResourceByType
     * @param resourceType Type of the resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResourceByTypeCall(String resourceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/resources/type/{resourceType}"
            .replaceAll("\\{" + "resourceType" + "\\}", apiClient.escapeString(resourceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResourceByTypeValidateBeforeCall(String resourceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling getResourceByType(Async)");
        }
        

        com.squareup.okhttp.Call call = getResourceByTypeCall(resourceType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all the resources with the specified resource type
     * 
     * @param resourceType Type of the resource (required)
     * @return List&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Resource> getResourceByType(String resourceType) throws ApiException {
        ApiResponse<List<Resource>> resp = getResourceByTypeWithHttpInfo(resourceType);
        return resp.getData();
    }

    /**
     * Get all the resources with the specified resource type
     * 
     * @param resourceType Type of the resource (required)
     * @return ApiResponse&lt;List&lt;Resource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Resource>> getResourceByTypeWithHttpInfo(String resourceType) throws ApiException {
        com.squareup.okhttp.Call call = getResourceByTypeValidateBeforeCall(resourceType, null, null);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all the resources with the specified resource type (asynchronously)
     * 
     * @param resourceType Type of the resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResourceByTypeAsync(String resourceType, final ApiCallback<List<Resource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResourceByTypeValidateBeforeCall(resourceType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResourceDetailsById
     * @param resourceId ID of the resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResourceDetailsByIdCall(Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/details/{resourceId}"
            .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResourceDetailsByIdValidateBeforeCall(Long resourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling getResourceDetailsById(Async)");
        }
        

        com.squareup.okhttp.Call call = getResourceDetailsByIdCall(resourceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the resource details with the specified resource ID
     * Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
     * @param resourceId ID of the resource (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getResourceDetailsById(Long resourceId) throws ApiException {
        ApiResponse<Object> resp = getResourceDetailsByIdWithHttpInfo(resourceId);
        return resp.getData();
    }

    /**
     * Get the resource details with the specified resource ID
     * Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
     * @param resourceId ID of the resource (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getResourceDetailsByIdWithHttpInfo(Long resourceId) throws ApiException {
        com.squareup.okhttp.Call call = getResourceDetailsByIdValidateBeforeCall(resourceId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the resource details with the specified resource ID (asynchronously)
     * Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
     * @param resourceId ID of the resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResourceDetailsByIdAsync(Long resourceId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResourceDetailsByIdValidateBeforeCall(resourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResourceGroupById
     * @param resourceGroupId ID of the resource group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResourceGroupByIdCall(Long resourceGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/group/{resourceGroupId}"
            .replaceAll("\\{" + "resourceGroupId" + "\\}", apiClient.escapeString(resourceGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResourceGroupByIdValidateBeforeCall(Long resourceGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceGroupId' is set
        if (resourceGroupId == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupId' when calling getResourceGroupById(Async)");
        }
        

        com.squareup.okhttp.Call call = getResourceGroupByIdCall(resourceGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the resource group with the specified resource group ID
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @return ResourceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceGroup getResourceGroupById(Long resourceGroupId) throws ApiException {
        ApiResponse<ResourceGroup> resp = getResourceGroupByIdWithHttpInfo(resourceGroupId);
        return resp.getData();
    }

    /**
     * Get the resource group with the specified resource group ID
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @return ApiResponse&lt;ResourceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceGroup> getResourceGroupByIdWithHttpInfo(Long resourceGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getResourceGroupByIdValidateBeforeCall(resourceGroupId, null, null);
        Type localVarReturnType = new TypeToken<ResourceGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the resource group with the specified resource group ID (asynchronously)
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResourceGroupByIdAsync(Long resourceGroupId, final ApiCallback<ResourceGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResourceGroupByIdValidateBeforeCall(resourceGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResourceGroups
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResourceGroupsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResourceGroupsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getResourceGroupsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of all the resource groups
     * 
     * @return List&lt;ResourceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ResourceGroup> getResourceGroups() throws ApiException {
        ApiResponse<List<ResourceGroup>> resp = getResourceGroupsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get a list of all the resource groups
     * 
     * @return ApiResponse&lt;List&lt;ResourceGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ResourceGroup>> getResourceGroupsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getResourceGroupsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ResourceGroup>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of all the resource groups (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResourceGroupsAsync(final ApiCallback<List<ResourceGroup>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResourceGroupsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ResourceGroup>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResources
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResourcesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResourcesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getResourcesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * A list of all known/registered resources, of all types
     * 
     * @return List&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Resource> getResources() throws ApiException {
        ApiResponse<List<Resource>> resp = getResourcesWithHttpInfo();
        return resp.getData();
    }

    /**
     * A list of all known/registered resources, of all types
     * 
     * @return ApiResponse&lt;List&lt;Resource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Resource>> getResourcesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getResourcesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * A list of all known/registered resources, of all types (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResourcesAsync(final ApiCallback<List<Resource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResourcesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResourcesFromGroup
     * @param resourceGroupId ID of the resource group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResourcesFromGroupCall(Long resourceGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/group/{resourceGroupId}/resources"
            .replaceAll("\\{" + "resourceGroupId" + "\\}", apiClient.escapeString(resourceGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResourcesFromGroupValidateBeforeCall(Long resourceGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resourceGroupId' is set
        if (resourceGroupId == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupId' when calling getResourcesFromGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = getResourcesFromGroupCall(resourceGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all resources from a resource group
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @return List&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Resource> getResourcesFromGroup(Long resourceGroupId) throws ApiException {
        ApiResponse<List<Resource>> resp = getResourcesFromGroupWithHttpInfo(resourceGroupId);
        return resp.getData();
    }

    /**
     * Get all resources from a resource group
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @return ApiResponse&lt;List&lt;Resource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Resource>> getResourcesFromGroupWithHttpInfo(Long resourceGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getResourcesFromGroupValidateBeforeCall(resourceGroupId, null, null);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all resources from a resource group (asynchronously)
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResourcesFromGroupAsync(Long resourceGroupId, final ApiCallback<List<Resource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResourcesFromGroupValidateBeforeCall(resourceGroupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRoles
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRolesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/security/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRolesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getRolesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all roles.
     * 
     * @return List&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Role> getRoles() throws ApiException {
        ApiResponse<List<Role>> resp = getRolesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all roles.
     * 
     * @return ApiResponse&lt;List&lt;Role&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Role>> getRolesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getRolesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all roles. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRolesAsync(final ApiCallback<List<Role>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRolesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUser
     * @param userId User&#39;s ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserCall(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a user by user ID
     * 
     * @param userId User&#39;s ID (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User getUser(String userId) throws ApiException {
        ApiResponse<User> resp = getUserWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Get a user by user ID
     * 
     * @param userId User&#39;s ID (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> getUserWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = getUserValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a user by user ID (asynchronously)
     * 
     * @param userId User&#39;s ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserAsync(String userId, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserAuthTokens
     * @param userId User&#39;s ID (required)
     * @param onlyValid True if you only want the valid tokens. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserAuthTokensCall(String userId, Boolean onlyValid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/{userId}/tokens"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (onlyValid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlyValid", onlyValid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserAuthTokensValidateBeforeCall(String userId, Boolean onlyValid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserAuthTokens(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserAuthTokensCall(userId, onlyValid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get auth tokens for a user.
     * 
     * @param userId User&#39;s ID (required)
     * @param onlyValid True if you only want the valid tokens. (optional)
     * @return List&lt;Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Token> getUserAuthTokens(String userId, Boolean onlyValid) throws ApiException {
        ApiResponse<List<Token>> resp = getUserAuthTokensWithHttpInfo(userId, onlyValid);
        return resp.getData();
    }

    /**
     * Get auth tokens for a user.
     * 
     * @param userId User&#39;s ID (required)
     * @param onlyValid True if you only want the valid tokens. (optional)
     * @return ApiResponse&lt;List&lt;Token&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Token>> getUserAuthTokensWithHttpInfo(String userId, Boolean onlyValid) throws ApiException {
        com.squareup.okhttp.Call call = getUserAuthTokensValidateBeforeCall(userId, onlyValid, null, null);
        Type localVarReturnType = new TypeToken<List<Token>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get auth tokens for a user. (asynchronously)
     * 
     * @param userId User&#39;s ID (required)
     * @param onlyValid True if you only want the valid tokens. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserAuthTokensAsync(String userId, Boolean onlyValid, final ApiCallback<List<Token>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserAuthTokensValidateBeforeCall(userId, onlyValid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Token>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsers
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/security/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getUsersCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all users.
     * 
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<User> getUsers() throws ApiException {
        ApiResponse<List<User>> resp = getUsersWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all users.
     * 
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<User>> getUsersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getUsersValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all users. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersAsync(final ApiCallback<List<User>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for isTraining
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call isTrainingCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/istraining";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call isTrainingValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = isTrainingCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the retraining status
     * 
     * @return RetrainingStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrainingStatus isTraining() throws ApiException {
        ApiResponse<RetrainingStatus> resp = isTrainingWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get the retraining status
     * 
     * @return ApiResponse&lt;RetrainingStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrainingStatus> isTrainingWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = isTrainingValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RetrainingStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the retraining status (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call isTrainingAsync(final ApiCallback<RetrainingStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = isTrainingValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrainingStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for jsonarray
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jsonarrayCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jsonarrayValidateBeforeCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling jsonarray(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling jsonarray(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling jsonarray(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling jsonarray(Async)");
        }
        

        com.squareup.okhttp.Call call = jsonarrayCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run inference on the input and returns it as a JsonArrayResponse
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return JsonArrayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JsonArrayResponse jsonarray(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<JsonArrayResponse> resp = jsonarrayWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Run inference on the input and returns it as a JsonArrayResponse
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;JsonArrayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JsonArrayResponse> jsonarrayWithHttpInfo(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = jsonarrayValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<JsonArrayResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run inference on the input and returns it as a JsonArrayResponse (asynchronously)
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jsonarrayAsync(Prediction body, String deploymentName, String versionName, String modelName, final ApiCallback<JsonArrayResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jsonarrayValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JsonArrayResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for knn
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call knnCall(String deploymentName, String versionName, String knnName, NearestNeighborRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "knnName" + "\\}", apiClient.escapeString(knnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call knnValidateBeforeCall(String deploymentName, String versionName, String knnName, NearestNeighborRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling knn(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling knn(Async)");
        }
        
        // verify the required parameter 'knnName' is set
        if (knnName == null) {
            throw new ApiException("Missing the required parameter 'knnName' when calling knn(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling knn(Async)");
        }
        

        com.squareup.okhttp.Call call = knnCall(deploymentName, versionName, knnName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Runs knn on the given index with the given k
     * Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body  (required)
     * @return NearestNeighborsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NearestNeighborsResults knn(String deploymentName, String versionName, String knnName, NearestNeighborRequest body) throws ApiException {
        ApiResponse<NearestNeighborsResults> resp = knnWithHttpInfo(deploymentName, versionName, knnName, body);
        return resp.getData();
    }

    /**
     * Runs knn on the given index with the given k
     * Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body  (required)
     * @return ApiResponse&lt;NearestNeighborsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NearestNeighborsResults> knnWithHttpInfo(String deploymentName, String versionName, String knnName, NearestNeighborRequest body) throws ApiException {
        com.squareup.okhttp.Call call = knnValidateBeforeCall(deploymentName, versionName, knnName, body, null, null);
        Type localVarReturnType = new TypeToken<NearestNeighborsResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Runs knn on the given index with the given k (asynchronously)
     * Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call knnAsync(String deploymentName, String versionName, String knnName, NearestNeighborRequest body, final ApiCallback<NearestNeighborsResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = knnValidateBeforeCall(deploymentName, versionName, knnName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NearestNeighborsResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for knnnew
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body The input NDArray (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call knnnewCall(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "knnName" + "\\}", apiClient.escapeString(knnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call knnnewValidateBeforeCall(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling knnnew(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling knnnew(Async)");
        }
        
        // verify the required parameter 'knnName' is set
        if (knnName == null) {
            throw new ApiException("Missing the required parameter 'knnName' when calling knnnew(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling knnnew(Async)");
        }
        

        com.squareup.okhttp.Call call = knnnewCall(deploymentName, versionName, knnName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run a k nearest neighbors search on a NEW data point
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body The input NDArray (required)
     * @return NearestNeighborsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NearestNeighborsResults knnnew(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body) throws ApiException {
        ApiResponse<NearestNeighborsResults> resp = knnnewWithHttpInfo(deploymentName, versionName, knnName, body);
        return resp.getData();
    }

    /**
     * Run a k nearest neighbors search on a NEW data point
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body The input NDArray (required)
     * @return ApiResponse&lt;NearestNeighborsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NearestNeighborsResults> knnnewWithHttpInfo(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body) throws ApiException {
        com.squareup.okhttp.Call call = knnnewValidateBeforeCall(deploymentName, versionName, knnName, body, null, null);
        Type localVarReturnType = new TypeToken<NearestNeighborsResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run a k nearest neighbors search on a NEW data point (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body The input NDArray (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call knnnewAsync(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body, final ApiCallback<NearestNeighborsResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = knnnewValidateBeforeCall(deploymentName, versionName, knnName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NearestNeighborsResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAllExperiments
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAllExperimentsCall(String modelHistoryServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiments"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAllExperimentsValidateBeforeCall(String modelHistoryServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling listAllExperiments(Async)");
        }
        

        com.squareup.okhttp.Call call = listAllExperimentsCall(modelHistoryServerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all of the experiments in every model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @return List&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExperimentEntity> listAllExperiments(String modelHistoryServerId) throws ApiException {
        ApiResponse<List<ExperimentEntity>> resp = listAllExperimentsWithHttpInfo(modelHistoryServerId);
        return resp.getData();
    }

    /**
     * List all of the experiments in every model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @return ApiResponse&lt;List&lt;ExperimentEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExperimentEntity>> listAllExperimentsWithHttpInfo(String modelHistoryServerId) throws ApiException {
        com.squareup.okhttp.Call call = listAllExperimentsValidateBeforeCall(modelHistoryServerId, null, null);
        Type localVarReturnType = new TypeToken<List<ExperimentEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all of the experiments in every model history / workspace (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAllExperimentsAsync(String modelHistoryServerId, final ApiCallback<List<ExperimentEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAllExperimentsValidateBeforeCall(modelHistoryServerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExperimentEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for logfilepath
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call logfilepathCall(String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call logfilepathValidateBeforeCall(String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling logfilepath(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling logfilepath(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling logfilepath(Async)");
        }
        

        com.squareup.okhttp.Call call = logfilepathCall(deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get logs file path
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String logfilepath(String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<String> resp = logfilepathWithHttpInfo(deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Get logs file path
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> logfilepathWithHttpInfo(String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = logfilepathValidateBeforeCall(deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get logs file path (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logfilepathAsync(String deploymentName, String versionName, String modelName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logfilepathValidateBeforeCall(deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for login
     * @param loginRequest Login credentials. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loginCall(LoginRequest loginRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = loginRequest;

        // create path and map variables
        String localVarPath = "/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loginValidateBeforeCall(LoginRequest loginRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loginRequest' is set
        if (loginRequest == null) {
            throw new ApiException("Missing the required parameter 'loginRequest' when calling login(Async)");
        }
        

        com.squareup.okhttp.Call call = loginCall(loginRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Post JSON credentials and obtain a JWT authorization token.
     * 
     * @param loginRequest Login credentials. (required)
     * @return LoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoginResponse login(LoginRequest loginRequest) throws ApiException {
        ApiResponse<LoginResponse> resp = loginWithHttpInfo(loginRequest);
        return resp.getData();
    }

    /**
     * Post JSON credentials and obtain a JWT authorization token.
     * 
     * @param loginRequest Login credentials. (required)
     * @return ApiResponse&lt;LoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoginResponse> loginWithHttpInfo(LoginRequest loginRequest) throws ApiException {
        com.squareup.okhttp.Call call = loginValidateBeforeCall(loginRequest, null, null);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Post JSON credentials and obtain a JWT authorization token. (asynchronously)
     * 
     * @param loginRequest Login credentials. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loginAsync(LoginRequest loginRequest, final ApiCallback<LoginResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loginValidateBeforeCall(loginRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for logs
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param logRequest The log object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call logsCall(String deploymentName, String versionName, String modelName, LogRequest logRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = logRequest;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logs"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call logsValidateBeforeCall(String deploymentName, String versionName, String modelName, LogRequest logRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling logs(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling logs(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling logs(Async)");
        }
        
        // verify the required parameter 'logRequest' is set
        if (logRequest == null) {
            throw new ApiException("Missing the required parameter 'logRequest' when calling logs(Async)");
        }
        

        com.squareup.okhttp.Call call = logsCall(deploymentName, versionName, modelName, logRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get logs
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param logRequest The log object (required)
     * @return LogBatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogBatch logs(String deploymentName, String versionName, String modelName, LogRequest logRequest) throws ApiException {
        ApiResponse<LogBatch> resp = logsWithHttpInfo(deploymentName, versionName, modelName, logRequest);
        return resp.getData();
    }

    /**
     * Get logs
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param logRequest The log object (required)
     * @return ApiResponse&lt;LogBatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogBatch> logsWithHttpInfo(String deploymentName, String versionName, String modelName, LogRequest logRequest) throws ApiException {
        com.squareup.okhttp.Call call = logsValidateBeforeCall(deploymentName, versionName, modelName, logRequest, null, null);
        Type localVarReturnType = new TypeToken<LogBatch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get logs (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param logRequest The log object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logsAsync(String deploymentName, String versionName, String modelName, LogRequest logRequest, final ApiCallback<LogBatch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logsValidateBeforeCall(deploymentName, versionName, modelName, logRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogBatch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for metaGet
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call metaGetCall(String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call metaGetValidateBeforeCall(String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling metaGet(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling metaGet(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling metaGet(Async)");
        }
        

        com.squareup.okhttp.Call call = metaGetCall(deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * this method can be used to get the meta data for the current model which set to the server
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return MetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetaData metaGet(String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<MetaData> resp = metaGetWithHttpInfo(deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * this method can be used to get the meta data for the current model which set to the server
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;MetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetaData> metaGetWithHttpInfo(String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = metaGetValidateBeforeCall(deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<MetaData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * this method can be used to get the meta data for the current model which set to the server (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call metaGetAsync(String deploymentName, String versionName, String modelName, final ApiCallback<MetaData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = metaGetValidateBeforeCall(deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetaData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for metaPost
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60; (required)
     * @param body the meta data object (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call metaPostCall(String contentType, String body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call metaPostValidateBeforeCall(String contentType, String body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling metaPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling metaPost(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling metaPost(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling metaPost(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling metaPost(Async)");
        }
        

        com.squareup.okhttp.Call call = metaPostCall(contentType, body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This method can be used to set meta data for the current model which is set to the server
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60; (required)
     * @param body the meta data object (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return MetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetaData metaPost(String contentType, String body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<MetaData> resp = metaPostWithHttpInfo(contentType, body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * This method can be used to set meta data for the current model which is set to the server
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60; (required)
     * @param body the meta data object (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;MetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetaData> metaPostWithHttpInfo(String contentType, String body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = metaPostValidateBeforeCall(contentType, body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<MetaData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This method can be used to set meta data for the current model which is set to the server (asynchronously)
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60; (required)
     * @param body the meta data object (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call metaPostAsync(String contentType, String body, String deploymentName, String versionName, String modelName, final ApiCallback<MetaData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = metaPostValidateBeforeCall(contentType, body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetaData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modelStateChange
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the model state object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modelStateChangeCall(String deploymentId, String modelId, SetState body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}/model/{modelId}/state"
            .replaceAll("\\{" + "deploymentId" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modelStateChangeValidateBeforeCall(String deploymentId, String modelId, SetState body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling modelStateChange(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelStateChange(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling modelStateChange(Async)");
        }
        

        com.squareup.okhttp.Call call = modelStateChangeCall(deploymentId, modelId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Modify the state (start/stop) of a deployed model
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the model state object (required)
     * @return ModelEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelEntity modelStateChange(String deploymentId, String modelId, SetState body) throws ApiException {
        ApiResponse<ModelEntity> resp = modelStateChangeWithHttpInfo(deploymentId, modelId, body);
        return resp.getData();
    }

    /**
     * Modify the state (start/stop) of a deployed model
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the model state object (required)
     * @return ApiResponse&lt;ModelEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelEntity> modelStateChangeWithHttpInfo(String deploymentId, String modelId, SetState body) throws ApiException {
        com.squareup.okhttp.Call call = modelStateChangeValidateBeforeCall(deploymentId, modelId, body, null, null);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Modify the state (start/stop) of a deployed model (asynchronously)
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the model state object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modelStateChangeAsync(String deploymentId, String modelId, SetState body, final ApiCallback<ModelEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modelStateChangeValidateBeforeCall(deploymentId, modelId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for models
     * @param deploymentId ID deployment group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modelsCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}/models"
            .replaceAll("\\{" + "deploymentId" + "\\}", apiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modelsValidateBeforeCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling models(Async)");
        }
        

        com.squareup.okhttp.Call call = modelsCall(deploymentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a list of all the deployed models given a deployment id
     * 
     * @param deploymentId ID deployment group (required)
     * @return List&lt;ModelEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelEntity> models(String deploymentId) throws ApiException {
        ApiResponse<List<ModelEntity>> resp = modelsWithHttpInfo(deploymentId);
        return resp.getData();
    }

    /**
     * Retrieve a list of all the deployed models given a deployment id
     * 
     * @param deploymentId ID deployment group (required)
     * @return ApiResponse&lt;List&lt;ModelEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelEntity>> modelsWithHttpInfo(String deploymentId) throws ApiException {
        com.squareup.okhttp.Call call = modelsValidateBeforeCall(deploymentId, null, null);
        Type localVarReturnType = new TypeToken<List<ModelEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of all the deployed models given a deployment id (asynchronously)
     * 
     * @param deploymentId ID deployment group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modelsAsync(String deploymentId, final ApiCallback<List<ModelEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modelsValidateBeforeCall(deploymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modelset
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to upload (.pb file) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modelsetCall(String deploymentName, String versionName, String modelName, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modelsetValidateBeforeCall(String deploymentName, String versionName, String modelName, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling modelset(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling modelset(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling modelset(Async)");
        }
        

        com.squareup.okhttp.Call call = modelsetCall(deploymentName, versionName, modelName, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set the model to be served
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to upload (.pb file) (optional)
     * @return ModelStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelStatus modelset(String deploymentName, String versionName, String modelName, File file) throws ApiException {
        ApiResponse<ModelStatus> resp = modelsetWithHttpInfo(deploymentName, versionName, modelName, file);
        return resp.getData();
    }

    /**
     * Set the model to be served
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to upload (.pb file) (optional)
     * @return ApiResponse&lt;ModelStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelStatus> modelsetWithHttpInfo(String deploymentName, String versionName, String modelName, File file) throws ApiException {
        com.squareup.okhttp.Call call = modelsetValidateBeforeCall(deploymentName, versionName, modelName, file, null, null);
        Type localVarReturnType = new TypeToken<ModelStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set the model to be served (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to upload (.pb file) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modelsetAsync(String deploymentName, String versionName, String modelName, File file, final ApiCallback<ModelStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modelsetValidateBeforeCall(deploymentName, versionName, modelName, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modelupdate
     * @param file The model file to update with (.pb file) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modelupdateCall(File file, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modelupdateValidateBeforeCall(File file, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling modelupdate(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling modelupdate(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling modelupdate(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling modelupdate(Async)");
        }
        

        com.squareup.okhttp.Call call = modelupdateCall(file, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the model to be served
     * 
     * @param file The model file to update with (.pb file) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ModelStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelStatus modelupdate(File file, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<ModelStatus> resp = modelupdateWithHttpInfo(file, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Update the model to be served
     * 
     * @param file The model file to update with (.pb file) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;ModelStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelStatus> modelupdateWithHttpInfo(File file, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = modelupdateValidateBeforeCall(file, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<ModelStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the model to be served (asynchronously)
     * 
     * @param file The model file to update with (.pb file) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modelupdateAsync(File file, String deploymentName, String versionName, String modelName, final ApiCallback<ModelStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modelupdateValidateBeforeCall(file, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for multiclassify
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call multiclassifyCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call multiclassifyValidateBeforeCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling multiclassify(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling multiclassify(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling multiclassify(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling multiclassify(Async)");
        }
        

        com.squareup.okhttp.Call call = multiclassifyCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Represents all of the labels for a given classification
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return MultiClassClassificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiClassClassificationResult multiclassify(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<MultiClassClassificationResult> resp = multiclassifyWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Represents all of the labels for a given classification
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;MultiClassClassificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiClassClassificationResult> multiclassifyWithHttpInfo(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = multiclassifyValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<MultiClassClassificationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Represents all of the labels for a given classification (asynchronously)
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call multiclassifyAsync(Prediction body, String deploymentName, String versionName, String modelName, final ApiCallback<MultiClassClassificationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = multiclassifyValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiClassClassificationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for multipredict
     * @param body The multiple input arrays with mask inputs to run inferences on (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call multipredictCall(MultiPredictRequest body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call multipredictValidateBeforeCall(MultiPredictRequest body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling multipredict(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling multipredict(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling multipredict(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling multipredict(Async)");
        }
        

        com.squareup.okhttp.Call call = multipredictCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the output from the network, based on the given INDArray[] input
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param body The multiple input arrays with mask inputs to run inferences on (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return MultiPredictResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiPredictResponse multipredict(MultiPredictRequest body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<MultiPredictResponse> resp = multipredictWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Get the output from the network, based on the given INDArray[] input
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param body The multiple input arrays with mask inputs to run inferences on (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;MultiPredictResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiPredictResponse> multipredictWithHttpInfo(MultiPredictRequest body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = multipredictValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<MultiPredictResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the output from the network, based on the given INDArray[] input (asynchronously)
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param body The multiple input arrays with mask inputs to run inferences on (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call multipredictAsync(MultiPredictRequest body, String deploymentName, String versionName, String modelName, final ApiCallback<MultiPredictResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = multipredictValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiPredictResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for multipredictimage
     * @param file The image file to run the prediction on (required)
     * @param id The id of the request (could be self generated) (required)
     * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call multipredictimageCall(File file, String id, Boolean needsPreprocessing, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);
        if (id != null)
        localVarFormParams.put("id", id);
        if (needsPreprocessing != null)
        localVarFormParams.put("needs_preprocessing", needsPreprocessing);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call multipredictimageValidateBeforeCall(File file, String id, Boolean needsPreprocessing, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'needsPreprocessing' is set
        if (needsPreprocessing == null) {
            throw new ApiException("Missing the required parameter 'needsPreprocessing' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling multipredictimage(Async)");
        }
        

        com.squareup.okhttp.Call call = multipredictimageCall(file, id, needsPreprocessing, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param file The image file to run the prediction on (required)
     * @param id The id of the request (could be self generated) (required)
     * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return MultiPredictResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiPredictResponse multipredictimage(File file, String id, Boolean needsPreprocessing, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<MultiPredictResponse> resp = multipredictimageWithHttpInfo(file, id, needsPreprocessing, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param file The image file to run the prediction on (required)
     * @param id The id of the request (could be self generated) (required)
     * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;MultiPredictResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiPredictResponse> multipredictimageWithHttpInfo(File file, String id, Boolean needsPreprocessing, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = multipredictimageValidateBeforeCall(file, id, needsPreprocessing, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<MultiPredictResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the output from the network using the given image file using the /multipredict endpoint&#39;s method (asynchronously)
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param file The image file to run the prediction on (required)
     * @param id The id of the request (could be self generated) (required)
     * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call multipredictimageAsync(File file, String id, Boolean needsPreprocessing, String deploymentName, String versionName, String modelName, final ApiCallback<MultiPredictResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = multipredictimageValidateBeforeCall(file, id, needsPreprocessing, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiPredictResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for numRevisions
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call numRevisionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/numrevisions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call numRevisionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = numRevisionsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the number of retrained models written with retraining.
     * 
     * @return RevisionsWritten
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RevisionsWritten numRevisions() throws ApiException {
        ApiResponse<RevisionsWritten> resp = numRevisionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets the number of retrained models written with retraining.
     * 
     * @return ApiResponse&lt;RevisionsWritten&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RevisionsWritten> numRevisionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = numRevisionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RevisionsWritten>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the number of retrained models written with retraining. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call numRevisionsAsync(final ApiCallback<RevisionsWritten> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = numRevisionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RevisionsWritten>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for predict
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predictCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predict"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predictValidateBeforeCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling predict(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling predict(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling predict(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling predict(Async)");
        }
        

        com.squareup.okhttp.Call call = predictCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run inference on the input array.
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return Prediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Prediction predict(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<Prediction> resp = predictWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Run inference on the input array.
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Prediction> predictWithHttpInfo(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = predictValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run inference on the input array. (asynchronously)
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predictAsync(Prediction body, String deploymentName, String versionName, String modelName, final ApiCallback<Prediction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predictValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for predictError
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation Operation to perform on the input data. (required)
     * @param inputType Type of the input data. (required)
     * @param inputData  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predictErrorCall(String contentType, String operation, String inputType, String inputData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inputData;

        // create path and map variables
        String localVarPath = "/{operation}/{inputType}/error"
            .replaceAll("\\{" + "operation" + "\\}", apiClient.escapeString(operation.toString()))
            .replaceAll("\\{" + "inputType" + "\\}", apiClient.escapeString(inputType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predictErrorValidateBeforeCall(String contentType, String operation, String inputType, String inputData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling predictError(Async)");
        }
        
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling predictError(Async)");
        }
        
        // verify the required parameter 'inputType' is set
        if (inputType == null) {
            throw new ApiException("Missing the required parameter 'inputType' when calling predictError(Async)");
        }
        

        com.squareup.okhttp.Call call = predictErrorCall(contentType, operation, inputType, inputData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
     * These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation Operation to perform on the input data. (required)
     * @param inputType Type of the input data. (required)
     * @param inputData  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void predictError(String contentType, String operation, String inputType, String inputData) throws ApiException {
        predictErrorWithHttpInfo(contentType, operation, inputType, inputData);
    }

    /**
     * Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
     * These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation Operation to perform on the input data. (required)
     * @param inputType Type of the input data. (required)
     * @param inputData  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> predictErrorWithHttpInfo(String contentType, String operation, String inputType, String inputData) throws ApiException {
        com.squareup.okhttp.Call call = predictErrorValidateBeforeCall(contentType, operation, inputType, inputData, null, null);
        return apiClient.execute(call);
    }

    /**
     * Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified. (asynchronously)
     * These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation Operation to perform on the input data. (required)
     * @param inputType Type of the input data. (required)
     * @param inputData  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predictErrorAsync(String contentType, String operation, String inputType, String inputData, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predictErrorValidateBeforeCall(contentType, operation, inputType, inputData, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for predictV2File
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeFile Type of the input data.  (required)
     * @param inputData The input data to run inference on. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predictV2FileCall(String operation, String inputTypeFile, File inputData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{operation}/{inputTypeFile}"
            .replaceAll("\\{" + "operation" + "\\}", apiClient.escapeString(operation.toString()))
            .replaceAll("\\{" + "inputTypeFile" + "\\}", apiClient.escapeString(inputTypeFile.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputData != null)
        localVarFormParams.put("inputData", inputData);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predictV2FileValidateBeforeCall(String operation, String inputTypeFile, File inputData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling predictV2File(Async)");
        }
        
        // verify the required parameter 'inputTypeFile' is set
        if (inputTypeFile == null) {
            throw new ApiException("Missing the required parameter 'inputTypeFile' when calling predictV2File(Async)");
        }
        
        // verify the required parameter 'inputData' is set
        if (inputData == null) {
            throw new ApiException("Missing the required parameter 'inputData' when calling predictV2File(Async)");
        }
        

        com.squareup.okhttp.Call call = predictV2FileCall(operation, inputTypeFile, inputData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * 
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeFile Type of the input data.  (required)
     * @param inputData The input data to run inference on. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void predictV2File(String operation, String inputTypeFile, File inputData) throws ApiException {
        predictV2FileWithHttpInfo(operation, inputTypeFile, inputData);
    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * 
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeFile Type of the input data.  (required)
     * @param inputData The input data to run inference on. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> predictV2FileWithHttpInfo(String operation, String inputTypeFile, File inputData) throws ApiException {
        com.squareup.okhttp.Call call = predictV2FileValidateBeforeCall(operation, inputTypeFile, inputData, null, null);
        return apiClient.execute(call);
    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified. (asynchronously)
     * 
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeFile Type of the input data.  (required)
     * @param inputData The input data to run inference on. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predictV2FileAsync(String operation, String inputTypeFile, File inputData, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predictV2FileValidateBeforeCall(operation, inputTypeFile, inputData, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for predictV2Json
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeJson Type of the input data.  (required)
     * @param inputData The input data to run inference on. (Specify a JSON string here) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predictV2JsonCall(String contentType, String operation, String inputTypeJson, String inputData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inputData;

        // create path and map variables
        String localVarPath = "/{operation}/{inputTypeJson}"
            .replaceAll("\\{" + "operation" + "\\}", apiClient.escapeString(operation.toString()))
            .replaceAll("\\{" + "inputTypeJson" + "\\}", apiClient.escapeString(inputTypeJson.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predictV2JsonValidateBeforeCall(String contentType, String operation, String inputTypeJson, String inputData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling predictV2Json(Async)");
        }
        
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling predictV2Json(Async)");
        }
        
        // verify the required parameter 'inputTypeJson' is set
        if (inputTypeJson == null) {
            throw new ApiException("Missing the required parameter 'inputTypeJson' when calling predictV2Json(Async)");
        }
        
        // verify the required parameter 'inputData' is set
        if (inputData == null) {
            throw new ApiException("Missing the required parameter 'inputData' when calling predictV2Json(Async)");
        }
        

        com.squareup.okhttp.Call call = predictV2JsonCall(contentType, operation, inputTypeJson, inputData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeJson Type of the input data.  (required)
     * @param inputData The input data to run inference on. (Specify a JSON string here) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void predictV2Json(String contentType, String operation, String inputTypeJson, String inputData) throws ApiException {
        predictV2JsonWithHttpInfo(contentType, operation, inputTypeJson, inputData);
    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeJson Type of the input data.  (required)
     * @param inputData The input data to run inference on. (Specify a JSON string here) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> predictV2JsonWithHttpInfo(String contentType, String operation, String inputTypeJson, String inputData) throws ApiException {
        com.squareup.okhttp.Call call = predictV2JsonValidateBeforeCall(contentType, operation, inputTypeJson, inputData, null, null);
        return apiClient.execute(call);
    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified. (asynchronously)
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeJson Type of the input data.  (required)
     * @param inputData The input data to run inference on. (Specify a JSON string here) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predictV2JsonAsync(String contentType, String operation, String inputTypeJson, String inputData, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predictV2JsonValidateBeforeCall(contentType, operation, inputTypeJson, inputData, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for predictimage
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predictimageCall(String deploymentName, String versionName, String modelName, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("image", image);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predictimageValidateBeforeCall(String deploymentName, String versionName, String modelName, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling predictimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling predictimage(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling predictimage(Async)");
        }
        

        com.squareup.okhttp.Call call = predictimageCall(deploymentName, versionName, modelName, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run inference on the input array, using input image file from multipart form data.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @return Prediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Prediction predictimage(String deploymentName, String versionName, String modelName, File image) throws ApiException {
        ApiResponse<Prediction> resp = predictimageWithHttpInfo(deploymentName, versionName, modelName, image);
        return resp.getData();
    }

    /**
     * Run inference on the input array, using input image file from multipart form data.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @return ApiResponse&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Prediction> predictimageWithHttpInfo(String deploymentName, String versionName, String modelName, File image) throws ApiException {
        com.squareup.okhttp.Call call = predictimageValidateBeforeCall(deploymentName, versionName, modelName, image, null, null);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run inference on the input array, using input image file from multipart form data. (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predictimageAsync(String deploymentName, String versionName, String modelName, File image, final ApiCallback<Prediction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predictimageValidateBeforeCall(deploymentName, versionName, modelName, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for predictwithpreprocess
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predictwithpreprocessCall(List<String> body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predictwithpreprocessValidateBeforeCall(List<String> body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling predictwithpreprocess(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling predictwithpreprocess(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling predictwithpreprocess(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling predictwithpreprocess(Async)");
        }
        

        com.squareup.okhttp.Call call = predictwithpreprocessCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Preprocesses the input and run inference on it
     * 
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return Prediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Prediction predictwithpreprocess(List<String> body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<Prediction> resp = predictwithpreprocessWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Preprocesses the input and run inference on it
     * 
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Prediction> predictwithpreprocessWithHttpInfo(List<String> body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = predictwithpreprocessValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Preprocesses the input and run inference on it (asynchronously)
     * 
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predictwithpreprocessAsync(List<String> body, String deploymentName, String versionName, String modelName, final ApiCallback<Prediction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predictwithpreprocessValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for predictwithpreprocessjson
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predictwithpreprocessjsonCall(List<String> body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predictwithpreprocessjsonValidateBeforeCall(List<String> body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling predictwithpreprocessjson(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling predictwithpreprocessjson(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling predictwithpreprocessjson(Async)");
        }
        

        com.squareup.okhttp.Call call = predictwithpreprocessjsonCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     * 
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return JsonArrayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JsonArrayResponse predictwithpreprocessjson(List<String> body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<JsonArrayResponse> resp = predictwithpreprocessjsonWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     * 
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;JsonArrayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JsonArrayResponse> predictwithpreprocessjsonWithHttpInfo(List<String> body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = predictwithpreprocessjsonValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<JsonArrayResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse (asynchronously)
     * 
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predictwithpreprocessjsonAsync(List<String> body, String deploymentName, String versionName, String modelName, final ApiCallback<JsonArrayResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predictwithpreprocessjsonValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JsonArrayResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rawPredictBinary
     * @param inputType Input data type. (required)
     * @param outputType Binary output data type. (required)
     * @param inputData The input file to upload. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rawPredictBinaryCall(String inputType, String outputType, File inputData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/raw/{inputType}/{outputType}"
            .replaceAll("\\{" + "inputType" + "\\}", apiClient.escapeString(inputType.toString()))
            .replaceAll("\\{" + "outputType" + "\\}", apiClient.escapeString(outputType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputData != null)
        localVarFormParams.put("inputData", inputData);

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rawPredictBinaryValidateBeforeCall(String inputType, String outputType, File inputData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'inputType' is set
        if (inputType == null) {
            throw new ApiException("Missing the required parameter 'inputType' when calling rawPredictBinary(Async)");
        }
        
        // verify the required parameter 'outputType' is set
        if (outputType == null) {
            throw new ApiException("Missing the required parameter 'outputType' when calling rawPredictBinary(Async)");
        }
        

        com.squareup.okhttp.Call call = rawPredictBinaryCall(inputType, outputType, inputData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * 
     * @param inputType Input data type. (required)
     * @param outputType Binary output data type. (required)
     * @param inputData The input file to upload. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void rawPredictBinary(String inputType, String outputType, File inputData) throws ApiException {
        rawPredictBinaryWithHttpInfo(inputType, outputType, inputData);
    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * 
     * @param inputType Input data type. (required)
     * @param outputType Binary output data type. (required)
     * @param inputData The input file to upload. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> rawPredictBinaryWithHttpInfo(String inputType, String outputType, File inputData) throws ApiException {
        com.squareup.okhttp.Call call = rawPredictBinaryValidateBeforeCall(inputType, outputType, inputData, null, null);
        return apiClient.execute(call);
    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified. (asynchronously)
     * 
     * @param inputType Input data type. (required)
     * @param outputType Binary output data type. (required)
     * @param inputData The input file to upload. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rawPredictBinaryAsync(String inputType, String outputType, File inputData, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rawPredictBinaryValidateBeforeCall(inputType, outputType, inputData, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for refreshJobStatus
     * @param jobId Job ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call refreshJobStatusCall(Long jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/refresh"
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call refreshJobStatusValidateBeforeCall(Long jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling refreshJobStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = refreshJobStatusCall(jobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Refresh the remote job status. Can be used for monitoring.
     * 
     * @param jobId Job ID (required)
     * @return JobEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobEntity refreshJobStatus(Long jobId) throws ApiException {
        ApiResponse<JobEntity> resp = refreshJobStatusWithHttpInfo(jobId);
        return resp.getData();
    }

    /**
     * Refresh the remote job status. Can be used for monitoring.
     * 
     * @param jobId Job ID (required)
     * @return ApiResponse&lt;JobEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobEntity> refreshJobStatusWithHttpInfo(Long jobId) throws ApiException {
        com.squareup.okhttp.Call call = refreshJobStatusValidateBeforeCall(jobId, null, null);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Refresh the remote job status. Can be used for monitoring. (asynchronously)
     * 
     * @param jobId Job ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call refreshJobStatusAsync(Long jobId, final ApiCallback<JobEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = refreshJobStatusValidateBeforeCall(jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerUser
     * @param user User details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerUserCall(User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/user/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerUserValidateBeforeCall(User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling registerUser(Async)");
        }
        

        com.squareup.okhttp.Call call = registerUserCall(user, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Register a new user
     * 
     * @param user User details (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User registerUser(User user) throws ApiException {
        ApiResponse<User> resp = registerUserWithHttpInfo(user);
        return resp.getData();
    }

    /**
     * Register a new user
     * 
     * @param user User details (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> registerUserWithHttpInfo(User user) throws ApiException {
        com.squareup.okhttp.Call call = registerUserValidateBeforeCall(user, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register a new user (asynchronously)
     * 
     * @param user User details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerUserAsync(User user, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerUserValidateBeforeCall(user, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reimportModel
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the deployment request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reimportModelCall(String deploymentId, String modelId, ImportModelRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}/model/{modelId}"
            .replaceAll("\\{" + "deploymentId" + "\\}", apiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "modelId" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reimportModelValidateBeforeCall(String deploymentId, String modelId, ImportModelRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling reimportModel(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling reimportModel(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reimportModel(Async)");
        }
        

        com.squareup.okhttp.Call call = reimportModelCall(deploymentId, modelId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Reimport a model to a previous deployed model in a deployment
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the deployment request (required)
     * @return ModelEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelEntity reimportModel(String deploymentId, String modelId, ImportModelRequest body) throws ApiException {
        ApiResponse<ModelEntity> resp = reimportModelWithHttpInfo(deploymentId, modelId, body);
        return resp.getData();
    }

    /**
     * Reimport a model to a previous deployed model in a deployment
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the deployment request (required)
     * @return ApiResponse&lt;ModelEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelEntity> reimportModelWithHttpInfo(String deploymentId, String modelId, ImportModelRequest body) throws ApiException {
        com.squareup.okhttp.Call call = reimportModelValidateBeforeCall(deploymentId, modelId, body, null, null);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reimport a model to a previous deployed model in a deployment (asynchronously)
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the deployment request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reimportModelAsync(String deploymentId, String modelId, ImportModelRequest body, final ApiCallback<ModelEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reimportModelValidateBeforeCall(deploymentId, modelId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for revokeUserToken
     * @param tokenId Token ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call revokeUserTokenCall(Long tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/token/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call revokeUserTokenValidateBeforeCall(Long tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling revokeUserToken(Async)");
        }
        

        com.squareup.okhttp.Call call = revokeUserTokenCall(tokenId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Revoke a user token.
     * 
     * @param tokenId Token ID (required)
     * @return Token
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Token revokeUserToken(Long tokenId) throws ApiException {
        ApiResponse<Token> resp = revokeUserTokenWithHttpInfo(tokenId);
        return resp.getData();
    }

    /**
     * Revoke a user token.
     * 
     * @param tokenId Token ID (required)
     * @return ApiResponse&lt;Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Token> revokeUserTokenWithHttpInfo(Long tokenId) throws ApiException {
        com.squareup.okhttp.Call call = revokeUserTokenValidateBeforeCall(tokenId, null, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Revoke a user token. (asynchronously)
     * 
     * @param tokenId Token ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revokeUserTokenAsync(Long tokenId, final ApiCallback<Token> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revokeUserTokenValidateBeforeCall(tokenId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rollback
     * @param index Model revision index. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rollbackCall(Integer index, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rollback/{index}"
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rollbackValidateBeforeCall(Integer index, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling rollback(Async)");
        }
        

        com.squareup.okhttp.Call call = rollbackCall(index, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Rollback to a previous revision of the model.
     * 
     * @param index Model revision index. (required)
     * @return RollbackStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RollbackStatus rollback(Integer index) throws ApiException {
        ApiResponse<RollbackStatus> resp = rollbackWithHttpInfo(index);
        return resp.getData();
    }

    /**
     * Rollback to a previous revision of the model.
     * 
     * @param index Model revision index. (required)
     * @return ApiResponse&lt;RollbackStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RollbackStatus> rollbackWithHttpInfo(Integer index) throws ApiException {
        com.squareup.okhttp.Call call = rollbackValidateBeforeCall(index, null, null);
        Type localVarReturnType = new TypeToken<RollbackStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Rollback to a previous revision of the model. (asynchronously)
     * 
     * @param index Model revision index. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rollbackAsync(Integer index, final ApiCallback<RollbackStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rollbackValidateBeforeCall(index, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RollbackStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runAJob
     * @param jobId Job ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runAJobCall(Long jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/run"
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runAJobValidateBeforeCall(Long jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling runAJob(Async)");
        }
        

        com.squareup.okhttp.Call call = runAJobCall(jobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Start running an (already created) job on the remote resource
     * 
     * @param jobId Job ID (required)
     * @return JobEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobEntity runAJob(Long jobId) throws ApiException {
        ApiResponse<JobEntity> resp = runAJobWithHttpInfo(jobId);
        return resp.getData();
    }

    /**
     * Start running an (already created) job on the remote resource
     * 
     * @param jobId Job ID (required)
     * @return ApiResponse&lt;JobEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobEntity> runAJobWithHttpInfo(Long jobId) throws ApiException {
        com.squareup.okhttp.Call call = runAJobValidateBeforeCall(jobId, null, null);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start running an (already created) job on the remote resource (asynchronously)
     * 
     * @param jobId Job ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runAJobAsync(Long jobId, final ApiCallback<JobEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runAJobValidateBeforeCall(jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformCsv
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchCSVRecord The input batch of record arrays (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformCsvCall(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchCSVRecord;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", apiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformCsvValidateBeforeCall(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformCsv(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformCsv(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformCsv(Async)");
        }
        

        com.squareup.okhttp.Call call = transformCsvCall(deploymentName, versionName, transformName, batchCSVRecord, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
     * Takes a batch of SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchCSVRecord The input batch of record arrays (optional)
     * @return BatchCSVRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchCSVRecord transformCsv(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord) throws ApiException {
        ApiResponse<BatchCSVRecord> resp = transformCsvWithHttpInfo(deploymentName, versionName, transformName, batchCSVRecord);
        return resp.getData();
    }

    /**
     * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
     * Takes a batch of SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchCSVRecord The input batch of record arrays (optional)
     * @return ApiResponse&lt;BatchCSVRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchCSVRecord> transformCsvWithHttpInfo(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord) throws ApiException {
        com.squareup.okhttp.Call call = transformCsvValidateBeforeCall(deploymentName, versionName, transformName, batchCSVRecord, null, null);
        Type localVarReturnType = new TypeToken<BatchCSVRecord>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord (asynchronously)
     * Takes a batch of SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchCSVRecord The input batch of record arrays (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformCsvAsync(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord, final ApiCallback<BatchCSVRecord> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformCsvValidateBeforeCall(deploymentName, versionName, transformName, batchCSVRecord, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchCSVRecord>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformarray
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchRecord The input batch of record arrays (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformarrayCall(String deploymentName, String versionName, String transformName, BatchRecord batchRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchRecord;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", apiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformarrayValidateBeforeCall(String deploymentName, String versionName, String transformName, BatchRecord batchRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformarray(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformarray(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformarray(Async)");
        }
        

        com.squareup.okhttp.Call call = transformarrayCall(deploymentName, versionName, transformName, batchRecord, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Takes a batch input arrays and transforms it
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchRecord The input batch of record arrays (optional)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Base64NDArrayBody transformarray(String deploymentName, String versionName, String transformName, BatchRecord batchRecord) throws ApiException {
        ApiResponse<Base64NDArrayBody> resp = transformarrayWithHttpInfo(deploymentName, versionName, transformName, batchRecord);
        return resp.getData();
    }

    /**
     * Takes a batch input arrays and transforms it
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchRecord The input batch of record arrays (optional)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Base64NDArrayBody> transformarrayWithHttpInfo(String deploymentName, String versionName, String transformName, BatchRecord batchRecord) throws ApiException {
        com.squareup.okhttp.Call call = transformarrayValidateBeforeCall(deploymentName, versionName, transformName, batchRecord, null, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Takes a batch input arrays and transforms it (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchRecord The input batch of record arrays (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformarrayAsync(String deploymentName, String versionName, String transformName, BatchRecord batchRecord, final ApiCallback<Base64NDArrayBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformarrayValidateBeforeCall(deploymentName, versionName, transformName, batchRecord, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformimage
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param files The image files to upload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformimageCall(String deploymentName, String versionName, String imageTransformName, List<byte[]> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "imageTransformName" + "\\}", apiClient.escapeString(imageTransformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformimageValidateBeforeCall(String deploymentName, String versionName, String imageTransformName, List<byte[]> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformimage(Async)");
        }
        
        // verify the required parameter 'imageTransformName' is set
        if (imageTransformName == null) {
            throw new ApiException("Missing the required parameter 'imageTransformName' when calling transformimage(Async)");
        }
        
        // verify the required parameter 'files' is set
        if (files == null) {
            throw new ApiException("Missing the required parameter 'files' when calling transformimage(Async)");
        }
        

        com.squareup.okhttp.Call call = transformimageCall(deploymentName, versionName, imageTransformName, files, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Takes multiple multipart image file to transform and returns Base64NDArrayBody
     * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param files The image files to upload (required)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Base64NDArrayBody transformimage(String deploymentName, String versionName, String imageTransformName, List<byte[]> files) throws ApiException {
        ApiResponse<Base64NDArrayBody> resp = transformimageWithHttpInfo(deploymentName, versionName, imageTransformName, files);
        return resp.getData();
    }

    /**
     * Takes multiple multipart image file to transform and returns Base64NDArrayBody
     * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param files The image files to upload (required)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Base64NDArrayBody> transformimageWithHttpInfo(String deploymentName, String versionName, String imageTransformName, List<byte[]> files) throws ApiException {
        com.squareup.okhttp.Call call = transformimageValidateBeforeCall(deploymentName, versionName, imageTransformName, files, null, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Takes multiple multipart image file to transform and returns Base64NDArrayBody (asynchronously)
     * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param files The image files to upload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformimageAsync(String deploymentName, String versionName, String imageTransformName, List<byte[]> files, final ApiCallback<Base64NDArrayBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformimageValidateBeforeCall(deploymentName, versionName, imageTransformName, files, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformincrementalCsv
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleCSVRecord The input record array (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformincrementalCsvCall(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = singleCSVRecord;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", apiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformincrementalCsvValidateBeforeCall(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformincrementalCsv(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformincrementalCsv(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformincrementalCsv(Async)");
        }
        

        com.squareup.okhttp.Call call = transformincrementalCsvCall(deploymentName, versionName, transformName, singleCSVRecord, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
     * Takes a SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleCSVRecord The input record array (optional)
     * @return SingleCSVRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleCSVRecord transformincrementalCsv(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord) throws ApiException {
        ApiResponse<SingleCSVRecord> resp = transformincrementalCsvWithHttpInfo(deploymentName, versionName, transformName, singleCSVRecord);
        return resp.getData();
    }

    /**
     * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
     * Takes a SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleCSVRecord The input record array (optional)
     * @return ApiResponse&lt;SingleCSVRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleCSVRecord> transformincrementalCsvWithHttpInfo(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord) throws ApiException {
        com.squareup.okhttp.Call call = transformincrementalCsvValidateBeforeCall(deploymentName, versionName, transformName, singleCSVRecord, null, null);
        Type localVarReturnType = new TypeToken<SingleCSVRecord>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord (asynchronously)
     * Takes a SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleCSVRecord The input record array (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformincrementalCsvAsync(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord, final ApiCallback<SingleCSVRecord> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformincrementalCsvValidateBeforeCall(deploymentName, versionName, transformName, singleCSVRecord, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleCSVRecord>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformincrementalarray
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleRecord The input record array (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformincrementalarrayCall(String deploymentName, String versionName, String transformName, SingleRecord singleRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = singleRecord;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", apiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformincrementalarrayValidateBeforeCall(String deploymentName, String versionName, String transformName, SingleRecord singleRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformincrementalarray(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformincrementalarray(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformincrementalarray(Async)");
        }
        

        com.squareup.okhttp.Call call = transformincrementalarrayCall(deploymentName, versionName, transformName, singleRecord, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Same as /transformincremental but returns Base64NDArrayBody.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleRecord The input record array (optional)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Base64NDArrayBody transformincrementalarray(String deploymentName, String versionName, String transformName, SingleRecord singleRecord) throws ApiException {
        ApiResponse<Base64NDArrayBody> resp = transformincrementalarrayWithHttpInfo(deploymentName, versionName, transformName, singleRecord);
        return resp.getData();
    }

    /**
     * Same as /transformincremental but returns Base64NDArrayBody.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleRecord The input record array (optional)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Base64NDArrayBody> transformincrementalarrayWithHttpInfo(String deploymentName, String versionName, String transformName, SingleRecord singleRecord) throws ApiException {
        com.squareup.okhttp.Call call = transformincrementalarrayValidateBeforeCall(deploymentName, versionName, transformName, singleRecord, null, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Same as /transformincremental but returns Base64NDArrayBody. (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleRecord The input record array (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformincrementalarrayAsync(String deploymentName, String versionName, String transformName, SingleRecord singleRecord, final ApiCallback<Base64NDArrayBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformincrementalarrayValidateBeforeCall(deploymentName, versionName, transformName, singleRecord, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformincrementalimage
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param file The image file to upload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformincrementalimageCall(String deploymentName, String versionName, String imageTransformName, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "imageTransformName" + "\\}", apiClient.escapeString(imageTransformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformincrementalimageValidateBeforeCall(String deploymentName, String versionName, String imageTransformName, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformincrementalimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformincrementalimage(Async)");
        }
        
        // verify the required parameter 'imageTransformName' is set
        if (imageTransformName == null) {
            throw new ApiException("Missing the required parameter 'imageTransformName' when calling transformincrementalimage(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling transformincrementalimage(Async)");
        }
        

        com.squareup.okhttp.Call call = transformincrementalimageCall(deploymentName, versionName, imageTransformName, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Takes a single multipart image file to transform and returns Base64NDArrayBody
     * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param file The image file to upload (required)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Base64NDArrayBody transformincrementalimage(String deploymentName, String versionName, String imageTransformName, File file) throws ApiException {
        ApiResponse<Base64NDArrayBody> resp = transformincrementalimageWithHttpInfo(deploymentName, versionName, imageTransformName, file);
        return resp.getData();
    }

    /**
     * Takes a single multipart image file to transform and returns Base64NDArrayBody
     * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param file The image file to upload (required)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Base64NDArrayBody> transformincrementalimageWithHttpInfo(String deploymentName, String versionName, String imageTransformName, File file) throws ApiException {
        com.squareup.okhttp.Call call = transformincrementalimageValidateBeforeCall(deploymentName, versionName, imageTransformName, file, null, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Takes a single multipart image file to transform and returns Base64NDArrayBody (asynchronously)
     * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param file The image file to upload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformincrementalimageAsync(String deploymentName, String versionName, String imageTransformName, File file, final ApiCallback<Base64NDArrayBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformincrementalimageValidateBeforeCall(deploymentName, versionName, imageTransformName, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformprocessGet
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformprocessGetCall(String deploymentName, String versionName, String transformName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", apiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformprocessGetValidateBeforeCall(String deploymentName, String versionName, String transformName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformprocessGet(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformprocessGet(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformprocessGet(Async)");
        }
        

        com.squareup.okhttp.Call call = transformprocessGetCall(deploymentName, versionName, transformName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the JSON string of the deployed transform process (CSV or Image)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object transformprocessGet(String deploymentName, String versionName, String transformName) throws ApiException {
        ApiResponse<Object> resp = transformprocessGetWithHttpInfo(deploymentName, versionName, transformName);
        return resp.getData();
    }

    /**
     * Gets the JSON string of the deployed transform process (CSV or Image)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> transformprocessGetWithHttpInfo(String deploymentName, String versionName, String transformName) throws ApiException {
        com.squareup.okhttp.Call call = transformprocessGetValidateBeforeCall(deploymentName, versionName, transformName, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the JSON string of the deployed transform process (CSV or Image) (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformprocessGetAsync(String deploymentName, String versionName, String transformName, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformprocessGetValidateBeforeCall(deploymentName, versionName, transformName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transformprocessPost
     * @param contentType The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;. (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param transformProcess The transform process to set (Specify a JSON string here). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transformprocessPostCall(String contentType, String deploymentName, String versionName, String transformName, String transformProcess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transformProcess;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", apiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transformprocessPostValidateBeforeCall(String contentType, String deploymentName, String versionName, String transformName, String transformProcess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling transformprocessPost(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformprocessPost(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformprocessPost(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformprocessPost(Async)");
        }
        

        com.squareup.okhttp.Call call = transformprocessPostCall(contentType, deploymentName, versionName, transformName, transformProcess, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sets the deployed (CSV or Image) transform process through the provided JSON string
     * 
     * @param contentType The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;. (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param transformProcess The transform process to set (Specify a JSON string here). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object transformprocessPost(String contentType, String deploymentName, String versionName, String transformName, String transformProcess) throws ApiException {
        ApiResponse<Object> resp = transformprocessPostWithHttpInfo(contentType, deploymentName, versionName, transformName, transformProcess);
        return resp.getData();
    }

    /**
     * Sets the deployed (CSV or Image) transform process through the provided JSON string
     * 
     * @param contentType The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;. (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param transformProcess The transform process to set (Specify a JSON string here). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> transformprocessPostWithHttpInfo(String contentType, String deploymentName, String versionName, String transformName, String transformProcess) throws ApiException {
        com.squareup.okhttp.Call call = transformprocessPostValidateBeforeCall(contentType, deploymentName, versionName, transformName, transformProcess, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets the deployed (CSV or Image) transform process through the provided JSON string (asynchronously)
     * 
     * @param contentType The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;. (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param transformProcess The transform process to set (Specify a JSON string here). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transformprocessPostAsync(String contentType, String deploymentName, String versionName, String transformName, String transformProcess, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transformprocessPostValidateBeforeCall(contentType, deploymentName, versionName, transformName, transformProcess, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAuthPolicy
     * @param authPolicy Auth policy object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAuthPolicyCall(AuthPolicy authPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authPolicy;

        // create path and map variables
        String localVarPath = "/auth/policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAuthPolicyValidateBeforeCall(AuthPolicy authPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authPolicy' is set
        if (authPolicy == null) {
            throw new ApiException("Missing the required parameter 'authPolicy' when calling updateAuthPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAuthPolicyCall(authPolicy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update auth policy
     * 
     * @param authPolicy Auth policy object (required)
     * @return AuthPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthPolicy updateAuthPolicy(AuthPolicy authPolicy) throws ApiException {
        ApiResponse<AuthPolicy> resp = updateAuthPolicyWithHttpInfo(authPolicy);
        return resp.getData();
    }

    /**
     * Update auth policy
     * 
     * @param authPolicy Auth policy object (required)
     * @return ApiResponse&lt;AuthPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthPolicy> updateAuthPolicyWithHttpInfo(AuthPolicy authPolicy) throws ApiException {
        com.squareup.okhttp.Call call = updateAuthPolicyValidateBeforeCall(authPolicy, null, null);
        Type localVarReturnType = new TypeToken<AuthPolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update auth policy (asynchronously)
     * 
     * @param authPolicy Auth policy object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAuthPolicyAsync(AuthPolicy authPolicy, final ApiCallback<AuthPolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAuthPolicyValidateBeforeCall(authPolicy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthPolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBestModelForExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param updateBestModel Model encapsulating the experiment id to update and the best model id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBestModelForExperimentCall(String modelHistoryServerId, UpdateBestModel updateBestModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateBestModel;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/best"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBestModelForExperimentValidateBeforeCall(String modelHistoryServerId, UpdateBestModel updateBestModel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling updateBestModelForExperiment(Async)");
        }
        
        // verify the required parameter 'updateBestModel' is set
        if (updateBestModel == null) {
            throw new ApiException("Missing the required parameter 'updateBestModel' when calling updateBestModelForExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBestModelForExperimentCall(modelHistoryServerId, updateBestModel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates the best model for an experiment
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param updateBestModel Model encapsulating the experiment id to update and the best model id. (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentEntity updateBestModelForExperiment(String modelHistoryServerId, UpdateBestModel updateBestModel) throws ApiException {
        ApiResponse<ExperimentEntity> resp = updateBestModelForExperimentWithHttpInfo(modelHistoryServerId, updateBestModel);
        return resp.getData();
    }

    /**
     * Updates the best model for an experiment
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param updateBestModel Model encapsulating the experiment id to update and the best model id. (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentEntity> updateBestModelForExperimentWithHttpInfo(String modelHistoryServerId, UpdateBestModel updateBestModel) throws ApiException {
        com.squareup.okhttp.Call call = updateBestModelForExperimentValidateBeforeCall(modelHistoryServerId, updateBestModel, null, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the best model for an experiment (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param updateBestModel Model encapsulating the experiment id to update and the best model id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBestModelForExperimentAsync(String modelHistoryServerId, UpdateBestModel updateBestModel, final ApiCallback<ExperimentEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBestModelForExperimentValidateBeforeCall(modelHistoryServerId, updateBestModel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to update (required)
     * @param experimentEntity The experiment entity to update with (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExperimentCall(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = experimentEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "experimentID" + "\\}", apiClient.escapeString(experimentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExperimentValidateBeforeCall(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling updateExperiment(Async)");
        }
        
        // verify the required parameter 'experimentID' is set
        if (experimentID == null) {
            throw new ApiException("Missing the required parameter 'experimentID' when calling updateExperiment(Async)");
        }
        
        // verify the required parameter 'experimentEntity' is set
        if (experimentEntity == null) {
            throw new ApiException("Missing the required parameter 'experimentEntity' when calling updateExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExperimentCall(modelHistoryServerId, experimentID, experimentEntity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to update (required)
     * @param experimentEntity The experiment entity to update with (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentEntity updateExperiment(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity) throws ApiException {
        ApiResponse<ExperimentEntity> resp = updateExperimentWithHttpInfo(modelHistoryServerId, experimentID, experimentEntity);
        return resp.getData();
    }

    /**
     * Updates an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to update (required)
     * @param experimentEntity The experiment entity to update with (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentEntity> updateExperimentWithHttpInfo(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity) throws ApiException {
        com.squareup.okhttp.Call call = updateExperimentValidateBeforeCall(modelHistoryServerId, experimentID, experimentEntity, null, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates an experiment, given an experiment entity (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to update (required)
     * @param experimentEntity The experiment entity to update with (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExperimentAsync(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity, final ApiCallback<ExperimentEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExperimentValidateBeforeCall(modelHistoryServerId, experimentID, experimentEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to update (required)
     * @param updateModelHistoryRequest The model history request object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateModelHistoryCall(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateModelHistoryRequest;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", apiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelHistoryID" + "\\}", apiClient.escapeString(modelHistoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateModelHistoryValidateBeforeCall(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling updateModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryID' is set
        if (modelHistoryID == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryID' when calling updateModelHistory(Async)");
        }
        
        // verify the required parameter 'updateModelHistoryRequest' is set
        if (updateModelHistoryRequest == null) {
            throw new ApiException("Missing the required parameter 'updateModelHistoryRequest' when calling updateModelHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = updateModelHistoryCall(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to update (required)
     * @param updateModelHistoryRequest The model history request object (required)
     * @return ModelHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelHistoryEntity updateModelHistory(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest) throws ApiException {
        ApiResponse<ModelHistoryEntity> resp = updateModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest);
        return resp.getData();
    }

    /**
     * Update a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to update (required)
     * @param updateModelHistoryRequest The model history request object (required)
     * @return ApiResponse&lt;ModelHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelHistoryEntity> updateModelHistoryWithHttpInfo(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest, null, null);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a model history / workspace (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to update (required)
     * @param updateModelHistoryRequest The model history request object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateModelHistoryAsync(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest, final ApiCallback<ModelHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUser
     * @param user User details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserCall(User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserValidateBeforeCall(User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling updateUser(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUserCall(user, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a user
     * 
     * @param user User details (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User updateUser(User user) throws ApiException {
        ApiResponse<User> resp = updateUserWithHttpInfo(user);
        return resp.getData();
    }

    /**
     * Update a user
     * 
     * @param user User details (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> updateUserWithHttpInfo(User user) throws ApiException {
        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(user, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a user (asynchronously)
     * 
     * @param user User details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserAsync(User user, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(user, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for upload
     * @param file The file to upload. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/upload/model";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadValidateBeforeCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = uploadCall(file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload a model file to SKIL for import.
     * 
     * @param file The file to upload. (optional)
     * @return FileUploadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileUploadList upload(File file) throws ApiException {
        ApiResponse<FileUploadList> resp = uploadWithHttpInfo(file);
        return resp.getData();
    }

    /**
     * Upload a model file to SKIL for import.
     * 
     * @param file The file to upload. (optional)
     * @return ApiResponse&lt;FileUploadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileUploadList> uploadWithHttpInfo(File file) throws ApiException {
        com.squareup.okhttp.Call call = uploadValidateBeforeCall(file, null, null);
        Type localVarReturnType = new TypeToken<FileUploadList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload a model file to SKIL for import. (asynchronously)
     * 
     * @param file The file to upload. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadAsync(File file, final ApiCallback<FileUploadList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadValidateBeforeCall(file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileUploadList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
