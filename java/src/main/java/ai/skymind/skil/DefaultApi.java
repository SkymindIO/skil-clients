/*
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.skymind.skil;

import ai.skymind.ApiCallback;
import ai.skymind.ApiClient;
import ai.skymind.ApiException;
import ai.skymind.ApiResponse;
import ai.skymind.Configuration;
import ai.skymind.Pair;
import ai.skymind.ProgressRequestBody;
import ai.skymind.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ai.skymind.skil.model.AccumulatedResults;
import ai.skymind.skil.model.AddCredentialsRequest;
import ai.skymind.skil.model.AddExampleRequest;
import ai.skymind.skil.model.AddModelHistoryRequest;
import ai.skymind.skil.model.AddResourceRequest;
import ai.skymind.skil.model.AggregatePrediction;
import ai.skymind.skil.model.AuthPolicy;
import ai.skymind.skil.model.Base64NDArrayBody;
import ai.skymind.skil.model.Base64NDArrayBodyKNN;
import ai.skymind.skil.model.BatchCSVRecord;
import ai.skymind.skil.model.BatchRecord;
import ai.skymind.skil.model.BestModel;
import ai.skymind.skil.model.ChangePasswordRequest;
import ai.skymind.skil.model.ClassificationResult;
import ai.skymind.skil.model.CreateDeploymentRequest;
import ai.skymind.skil.model.CreateJobRequest;
import ai.skymind.skil.model.DeploymentResponse;
import ai.skymind.skil.model.DetectionResult;
import ai.skymind.skil.model.DownloadOutputFileRequest;
import ai.skymind.skil.model.EvaluationResultsEntity;
import ai.skymind.skil.model.ExampleEntity;
import ai.skymind.skil.model.ExperimentEntity;
import ai.skymind.skil.model.FeedbackResponse;
import java.io.File;
import ai.skymind.skil.model.FileUploadList;
import ai.skymind.skil.model.ImportModelRequest;
import ai.skymind.skil.model.InlineResponse200;
import ai.skymind.skil.model.JobEntity;
import ai.skymind.skil.model.JsonArrayResponse;
import ai.skymind.skil.model.LogBatch;
import ai.skymind.skil.model.LogRequest;
import ai.skymind.skil.model.LoginRequest;
import ai.skymind.skil.model.LoginResponse;
import ai.skymind.skil.model.MinibatchEntity;
import ai.skymind.skil.model.ModelEntity;
import ai.skymind.skil.model.ModelFeedBackRequest;
import ai.skymind.skil.model.ModelHistoryEntity;
import ai.skymind.skil.model.ModelInstanceEntity;
import ai.skymind.skil.model.ModelStatus;
import ai.skymind.skil.model.MultiClassClassificationResult;
import ai.skymind.skil.model.MultiPredictRequest;
import ai.skymind.skil.model.MultiPredictResponse;
import ai.skymind.skil.model.NearestNeighborRequest;
import ai.skymind.skil.model.NearestNeighborsResults;
import ai.skymind.skil.model.Prediction;
import ai.skymind.skil.model.Resource;
import ai.skymind.skil.model.ResourceCredentials;
import ai.skymind.skil.model.ResourceGroup;
import ai.skymind.skil.model.RetrainingStatus;
import ai.skymind.skil.model.RevisionsWritten;
import ai.skymind.skil.model.Role;
import ai.skymind.skil.model.RollbackStatus;
import ai.skymind.skil.model.SetState;
import ai.skymind.skil.model.SingleCSVRecord;
import ai.skymind.skil.model.SingleRecord;
import ai.skymind.skil.model.Token;
import ai.skymind.skil.model.TokenGenerateRequest;
import ai.skymind.skil.model.UpdateBestModel;
import ai.skymind.skil.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for accumulatedResults
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the accumulated results currently in ememory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accumulatedResultsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/accumulatedresults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accumulatedResultsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accumulatedResultsCall(_callback);
        return localVarCall;

    }

    /**
     * Tells how many retraining examples have labels associated with them.
     * 
     * @return AccumulatedResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the accumulated results currently in ememory. </td><td>  -  </td></tr>
     </table>
     */
    public AccumulatedResults accumulatedResults() throws ApiException {
        ApiResponse<AccumulatedResults> localVarResp = accumulatedResultsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Tells how many retraining examples have labels associated with them.
     * 
     * @return ApiResponse&lt;AccumulatedResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the accumulated results currently in ememory. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccumulatedResults> accumulatedResultsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = accumulatedResultsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AccumulatedResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tells how many retraining examples have labels associated with them. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the accumulated results currently in ememory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accumulatedResultsAsync(final ApiCallback<AccumulatedResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = accumulatedResultsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AccumulatedResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCredentials
     * @param addCredentialsRequest Add credentials request object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created credentials object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCredentialsCall(AddCredentialsRequest addCredentialsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addCredentialsRequest;

        // create path and map variables
        String localVarPath = "/resources/credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCredentialsValidateBeforeCall(AddCredentialsRequest addCredentialsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'addCredentialsRequest' is set
        if (addCredentialsRequest == null) {
            throw new ApiException("Missing the required parameter 'addCredentialsRequest' when calling addCredentials(Async)");
        }
        

        okhttp3.Call localVarCall = addCredentialsCall(addCredentialsRequest, _callback);
        return localVarCall;

    }

    /**
     * Adds credentials
     * 
     * @param addCredentialsRequest Add credentials request object (required)
     * @return ResourceCredentials
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created credentials object </td><td>  -  </td></tr>
     </table>
     */
    public ResourceCredentials addCredentials(AddCredentialsRequest addCredentialsRequest) throws ApiException {
        ApiResponse<ResourceCredentials> localVarResp = addCredentialsWithHttpInfo(addCredentialsRequest);
        return localVarResp.getData();
    }

    /**
     * Adds credentials
     * 
     * @param addCredentialsRequest Add credentials request object (required)
     * @return ApiResponse&lt;ResourceCredentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created credentials object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceCredentials> addCredentialsWithHttpInfo(AddCredentialsRequest addCredentialsRequest) throws ApiException {
        okhttp3.Call localVarCall = addCredentialsValidateBeforeCall(addCredentialsRequest, null);
        Type localVarReturnType = new TypeToken<ResourceCredentials>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds credentials (asynchronously)
     * 
     * @param addCredentialsRequest Add credentials request object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created credentials object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCredentialsAsync(AddCredentialsRequest addCredentialsRequest, final ApiCallback<ResourceCredentials> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCredentialsValidateBeforeCall(addCredentialsRequest, _callback);
        Type localVarReturnType = new TypeToken<ResourceCredentials>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addEvaluationResult
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param evaluationResultsEntity The evaluation result entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added evaluation result entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addEvaluationResultCall(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = evaluationResultsEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEvaluationResultValidateBeforeCall(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addEvaluationResult(Async)");
        }
        
        // verify the required parameter 'evaluationResultsEntity' is set
        if (evaluationResultsEntity == null) {
            throw new ApiException("Missing the required parameter 'evaluationResultsEntity' when calling addEvaluationResult(Async)");
        }
        

        okhttp3.Call localVarCall = addEvaluationResultCall(modelHistoryServerId, evaluationResultsEntity, _callback);
        return localVarCall;

    }

    /**
     * Adds an evaluation result
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param evaluationResultsEntity The evaluation result entity (required)
     * @return EvaluationResultsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added evaluation result entity </td><td>  -  </td></tr>
     </table>
     */
    public EvaluationResultsEntity addEvaluationResult(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity) throws ApiException {
        ApiResponse<EvaluationResultsEntity> localVarResp = addEvaluationResultWithHttpInfo(modelHistoryServerId, evaluationResultsEntity);
        return localVarResp.getData();
    }

    /**
     * Adds an evaluation result
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param evaluationResultsEntity The evaluation result entity (required)
     * @return ApiResponse&lt;EvaluationResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added evaluation result entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EvaluationResultsEntity> addEvaluationResultWithHttpInfo(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity) throws ApiException {
        okhttp3.Call localVarCall = addEvaluationResultValidateBeforeCall(modelHistoryServerId, evaluationResultsEntity, null);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds an evaluation result (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param evaluationResultsEntity The evaluation result entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added evaluation result entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addEvaluationResultAsync(String modelHistoryServerId, EvaluationResultsEntity evaluationResultsEntity, final ApiCallback<EvaluationResultsEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEvaluationResultValidateBeforeCall(modelHistoryServerId, evaluationResultsEntity, _callback);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addExampleForBatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The add example request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExampleForBatchCall(String modelHistoryServerId, AddExampleRequest addExampleRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addExampleRequest;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/exampleForBatch"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExampleForBatchValidateBeforeCall(String modelHistoryServerId, AddExampleRequest addExampleRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addExampleForBatch(Async)");
        }
        
        // verify the required parameter 'addExampleRequest' is set
        if (addExampleRequest == null) {
            throw new ApiException("Missing the required parameter 'addExampleRequest' when calling addExampleForBatch(Async)");
        }
        

        okhttp3.Call localVarCall = addExampleForBatchCall(modelHistoryServerId, addExampleRequest, _callback);
        return localVarCall;

    }

    /**
     * Adds a number of examples to a minibatch ID given an AddExampleRequest.
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size (required)
     * @return AddExampleRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The add example request </td><td>  -  </td></tr>
     </table>
     */
    public AddExampleRequest addExampleForBatch(String modelHistoryServerId, AddExampleRequest addExampleRequest) throws ApiException {
        ApiResponse<AddExampleRequest> localVarResp = addExampleForBatchWithHttpInfo(modelHistoryServerId, addExampleRequest);
        return localVarResp.getData();
    }

    /**
     * Adds a number of examples to a minibatch ID given an AddExampleRequest.
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size (required)
     * @return ApiResponse&lt;AddExampleRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The add example request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddExampleRequest> addExampleForBatchWithHttpInfo(String modelHistoryServerId, AddExampleRequest addExampleRequest) throws ApiException {
        okhttp3.Call localVarCall = addExampleForBatchValidateBeforeCall(modelHistoryServerId, addExampleRequest, null);
        Type localVarReturnType = new TypeToken<AddExampleRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a number of examples to a minibatch ID given an AddExampleRequest. (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addExampleRequest The add example request, encapsulating minibatch details and examples batch size (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The add example request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExampleForBatchAsync(String modelHistoryServerId, AddExampleRequest addExampleRequest, final ApiCallback<AddExampleRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExampleForBatchValidateBeforeCall(modelHistoryServerId, addExampleRequest, _callback);
        Type localVarReturnType = new TypeToken<AddExampleRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addExampleToMinibatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param exampleEntity The example to add to the minibatch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added example entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExampleToMinibatchCall(String modelHistoryServerId, ExampleEntity exampleEntity, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = exampleEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/example"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExampleToMinibatchValidateBeforeCall(String modelHistoryServerId, ExampleEntity exampleEntity, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addExampleToMinibatch(Async)");
        }
        
        // verify the required parameter 'exampleEntity' is set
        if (exampleEntity == null) {
            throw new ApiException("Missing the required parameter 'exampleEntity' when calling addExampleToMinibatch(Async)");
        }
        

        okhttp3.Call localVarCall = addExampleToMinibatchCall(modelHistoryServerId, exampleEntity, _callback);
        return localVarCall;

    }

    /**
     * Adds an example to a minibatch
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param exampleEntity The example to add to the minibatch (required)
     * @return ExampleEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added example entity </td><td>  -  </td></tr>
     </table>
     */
    public ExampleEntity addExampleToMinibatch(String modelHistoryServerId, ExampleEntity exampleEntity) throws ApiException {
        ApiResponse<ExampleEntity> localVarResp = addExampleToMinibatchWithHttpInfo(modelHistoryServerId, exampleEntity);
        return localVarResp.getData();
    }

    /**
     * Adds an example to a minibatch
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param exampleEntity The example to add to the minibatch (required)
     * @return ApiResponse&lt;ExampleEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added example entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExampleEntity> addExampleToMinibatchWithHttpInfo(String modelHistoryServerId, ExampleEntity exampleEntity) throws ApiException {
        okhttp3.Call localVarCall = addExampleToMinibatchValidateBeforeCall(modelHistoryServerId, exampleEntity, null);
        Type localVarReturnType = new TypeToken<ExampleEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds an example to a minibatch (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param exampleEntity The example to add to the minibatch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added example entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExampleToMinibatchAsync(String modelHistoryServerId, ExampleEntity exampleEntity, final ApiCallback<ExampleEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExampleToMinibatchValidateBeforeCall(modelHistoryServerId, exampleEntity, _callback);
        Type localVarReturnType = new TypeToken<ExampleEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentEntity The experiment entity to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added experiment entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExperimentCall(String modelHistoryServerId, ExperimentEntity experimentEntity, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = experimentEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExperimentValidateBeforeCall(String modelHistoryServerId, ExperimentEntity experimentEntity, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addExperiment(Async)");
        }
        
        // verify the required parameter 'experimentEntity' is set
        if (experimentEntity == null) {
            throw new ApiException("Missing the required parameter 'experimentEntity' when calling addExperiment(Async)");
        }
        

        okhttp3.Call localVarCall = addExperimentCall(modelHistoryServerId, experimentEntity, _callback);
        return localVarCall;

    }

    /**
     * Add an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentEntity The experiment entity to add (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added experiment entity. </td><td>  -  </td></tr>
     </table>
     */
    public ExperimentEntity addExperiment(String modelHistoryServerId, ExperimentEntity experimentEntity) throws ApiException {
        ApiResponse<ExperimentEntity> localVarResp = addExperimentWithHttpInfo(modelHistoryServerId, experimentEntity);
        return localVarResp.getData();
    }

    /**
     * Add an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentEntity The experiment entity to add (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added experiment entity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExperimentEntity> addExperimentWithHttpInfo(String modelHistoryServerId, ExperimentEntity experimentEntity) throws ApiException {
        okhttp3.Call localVarCall = addExperimentValidateBeforeCall(modelHistoryServerId, experimentEntity, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an experiment, given an experiment entity (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentEntity The experiment entity to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added experiment entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExperimentAsync(String modelHistoryServerId, ExperimentEntity experimentEntity, final ApiCallback<ExperimentEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExperimentValidateBeforeCall(modelHistoryServerId, experimentEntity, _callback);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addFeedbackBinary
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param type The type of the labels array. (required)
     * @param file The labels file to upload. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The feedback response object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFeedbackBinaryCall(String id, String type, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/feedback/{id}/{type}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFeedbackBinaryValidateBeforeCall(String id, String type, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addFeedbackBinary(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addFeedbackBinary(Async)");
        }
        

        okhttp3.Call localVarCall = addFeedbackBinaryCall(id, type, file, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param type The type of the labels array. (required)
     * @param file The labels file to upload. (optional)
     * @return FeedbackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The feedback response object </td><td>  -  </td></tr>
     </table>
     */
    public FeedbackResponse addFeedbackBinary(String id, String type, File file) throws ApiException {
        ApiResponse<FeedbackResponse> localVarResp = addFeedbackBinaryWithHttpInfo(id, type, file);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param type The type of the labels array. (required)
     * @param file The labels file to upload. (optional)
     * @return ApiResponse&lt;FeedbackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The feedback response object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeedbackResponse> addFeedbackBinaryWithHttpInfo(String id, String type, File file) throws ApiException {
        okhttp3.Call localVarCall = addFeedbackBinaryValidateBeforeCall(id, type, file, null);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param type The type of the labels array. (required)
     * @param file The labels file to upload. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The feedback response object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFeedbackBinaryAsync(String id, String type, File file, final ApiCallback<FeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFeedbackBinaryValidateBeforeCall(id, type, file, _callback);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addFeedbackJson
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param labels The associated labels (one-hot vectors) with the batch for retraining. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The feedback response object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFeedbackJsonCall(String id, List<List<Double>> labels, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = labels;

        // create path and map variables
        String localVarPath = "/feedback/{id}/json"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFeedbackJsonValidateBeforeCall(String id, List<List<Double>> labels, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addFeedbackJson(Async)");
        }
        

        okhttp3.Call localVarCall = addFeedbackJsonCall(id, labels, _callback);
        return localVarCall;

    }

    /**
     * Gets the retraining feedback for the given batch ID.
     * 
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param labels The associated labels (one-hot vectors) with the batch for retraining. (optional)
     * @return FeedbackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The feedback response object </td><td>  -  </td></tr>
     </table>
     */
    public FeedbackResponse addFeedbackJson(String id, List<List<Double>> labels) throws ApiException {
        ApiResponse<FeedbackResponse> localVarResp = addFeedbackJsonWithHttpInfo(id, labels);
        return localVarResp.getData();
    }

    /**
     * Gets the retraining feedback for the given batch ID.
     * 
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param labels The associated labels (one-hot vectors) with the batch for retraining. (optional)
     * @return ApiResponse&lt;FeedbackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The feedback response object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeedbackResponse> addFeedbackJsonWithHttpInfo(String id, List<List<Double>> labels) throws ApiException {
        okhttp3.Call localVarCall = addFeedbackJsonValidateBeforeCall(id, labels, null);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the retraining feedback for the given batch ID. (asynchronously)
     * 
     * @param id Batch ID to retrain the model with and get feedback for. (required)
     * @param labels The associated labels (one-hot vectors) with the batch for retraining. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The feedback response object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFeedbackJsonAsync(String id, List<List<Double>> labels, final ApiCallback<FeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFeedbackJsonValidateBeforeCall(id, labels, _callback);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addMinibatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchEntity The minibatch entity to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added minibatch entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMinibatchCall(String modelHistoryServerId, MinibatchEntity minibatchEntity, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = minibatchEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMinibatchValidateBeforeCall(String modelHistoryServerId, MinibatchEntity minibatchEntity, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addMinibatch(Async)");
        }
        
        // verify the required parameter 'minibatchEntity' is set
        if (minibatchEntity == null) {
            throw new ApiException("Missing the required parameter 'minibatchEntity' when calling addMinibatch(Async)");
        }
        

        okhttp3.Call localVarCall = addMinibatchCall(modelHistoryServerId, minibatchEntity, _callback);
        return localVarCall;

    }

    /**
     * Adds a minibatch
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchEntity The minibatch entity to add (required)
     * @return MinibatchEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added minibatch entity </td><td>  -  </td></tr>
     </table>
     */
    public MinibatchEntity addMinibatch(String modelHistoryServerId, MinibatchEntity minibatchEntity) throws ApiException {
        ApiResponse<MinibatchEntity> localVarResp = addMinibatchWithHttpInfo(modelHistoryServerId, minibatchEntity);
        return localVarResp.getData();
    }

    /**
     * Adds a minibatch
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchEntity The minibatch entity to add (required)
     * @return ApiResponse&lt;MinibatchEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added minibatch entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MinibatchEntity> addMinibatchWithHttpInfo(String modelHistoryServerId, MinibatchEntity minibatchEntity) throws ApiException {
        okhttp3.Call localVarCall = addMinibatchValidateBeforeCall(modelHistoryServerId, minibatchEntity, null);
        Type localVarReturnType = new TypeToken<MinibatchEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a minibatch (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchEntity The minibatch entity to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added minibatch entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMinibatchAsync(String modelHistoryServerId, MinibatchEntity minibatchEntity, final ApiCallback<MinibatchEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMinibatchValidateBeforeCall(modelHistoryServerId, minibatchEntity, _callback);
        Type localVarReturnType = new TypeToken<MinibatchEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addModelFeedback
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelFeedBackRequest The model feedback request object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model feedback request object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addModelFeedbackCall(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = modelFeedBackRequest;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/feedback"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addModelFeedbackValidateBeforeCall(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addModelFeedback(Async)");
        }
        
        // verify the required parameter 'modelFeedBackRequest' is set
        if (modelFeedBackRequest == null) {
            throw new ApiException("Missing the required parameter 'modelFeedBackRequest' when calling addModelFeedback(Async)");
        }
        

        okhttp3.Call localVarCall = addModelFeedbackCall(modelHistoryServerId, modelFeedBackRequest, _callback);
        return localVarCall;

    }

    /**
     * Adds an evaluation feedback to the model against a given minibatch id.
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelFeedBackRequest The model feedback request object (required)
     * @return ModelFeedBackRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model feedback request object </td><td>  -  </td></tr>
     </table>
     */
    public ModelFeedBackRequest addModelFeedback(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest) throws ApiException {
        ApiResponse<ModelFeedBackRequest> localVarResp = addModelFeedbackWithHttpInfo(modelHistoryServerId, modelFeedBackRequest);
        return localVarResp.getData();
    }

    /**
     * Adds an evaluation feedback to the model against a given minibatch id.
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelFeedBackRequest The model feedback request object (required)
     * @return ApiResponse&lt;ModelFeedBackRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model feedback request object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFeedBackRequest> addModelFeedbackWithHttpInfo(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest) throws ApiException {
        okhttp3.Call localVarCall = addModelFeedbackValidateBeforeCall(modelHistoryServerId, modelFeedBackRequest, null);
        Type localVarReturnType = new TypeToken<ModelFeedBackRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds an evaluation feedback to the model against a given minibatch id. (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelFeedBackRequest The model feedback request object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The model feedback request object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addModelFeedbackAsync(String modelHistoryServerId, ModelFeedBackRequest modelFeedBackRequest, final ApiCallback<ModelFeedBackRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = addModelFeedbackValidateBeforeCall(modelHistoryServerId, modelFeedBackRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelFeedBackRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addModelHistoryRequest The model history request object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added model history entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addModelHistoryCall(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addModelHistoryRequest;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/modelhistory"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addModelHistoryValidateBeforeCall(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addModelHistory(Async)");
        }
        
        // verify the required parameter 'addModelHistoryRequest' is set
        if (addModelHistoryRequest == null) {
            throw new ApiException("Missing the required parameter 'addModelHistoryRequest' when calling addModelHistory(Async)");
        }
        

        okhttp3.Call localVarCall = addModelHistoryCall(modelHistoryServerId, addModelHistoryRequest, _callback);
        return localVarCall;

    }

    /**
     * Add a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addModelHistoryRequest The model history request object (required)
     * @return ModelHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added model history entity </td><td>  -  </td></tr>
     </table>
     */
    public ModelHistoryEntity addModelHistory(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest) throws ApiException {
        ApiResponse<ModelHistoryEntity> localVarResp = addModelHistoryWithHttpInfo(modelHistoryServerId, addModelHistoryRequest);
        return localVarResp.getData();
    }

    /**
     * Add a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addModelHistoryRequest The model history request object (required)
     * @return ApiResponse&lt;ModelHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added model history entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelHistoryEntity> addModelHistoryWithHttpInfo(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest) throws ApiException {
        okhttp3.Call localVarCall = addModelHistoryValidateBeforeCall(modelHistoryServerId, addModelHistoryRequest, null);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a model history / workspace (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param addModelHistoryRequest The model history request object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added model history entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addModelHistoryAsync(String modelHistoryServerId, AddModelHistoryRequest addModelHistoryRequest, final ApiCallback<ModelHistoryEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = addModelHistoryValidateBeforeCall(modelHistoryServerId, addModelHistoryRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addModelInstance
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added model instance entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addModelInstanceCall(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = modelInstanceEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addModelInstanceValidateBeforeCall(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling addModelInstance(Async)");
        }
        
        // verify the required parameter 'modelInstanceEntity' is set
        if (modelInstanceEntity == null) {
            throw new ApiException("Missing the required parameter 'modelInstanceEntity' when calling addModelInstance(Async)");
        }
        

        okhttp3.Call localVarCall = addModelInstanceCall(modelHistoryServerId, modelInstanceEntity, _callback);
        return localVarCall;

    }

    /**
     * Adds a model
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @return ModelInstanceEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added model instance entity </td><td>  -  </td></tr>
     </table>
     */
    public ModelInstanceEntity addModelInstance(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity) throws ApiException {
        ApiResponse<ModelInstanceEntity> localVarResp = addModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceEntity);
        return localVarResp.getData();
    }

    /**
     * Adds a model
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @return ApiResponse&lt;ModelInstanceEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added model instance entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInstanceEntity> addModelInstanceWithHttpInfo(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity) throws ApiException {
        okhttp3.Call localVarCall = addModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceEntity, null);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a model (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The added model instance entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addModelInstanceAsync(String modelHistoryServerId, ModelInstanceEntity modelInstanceEntity, final ApiCallback<ModelInstanceEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = addModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceEntity, _callback);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addResource
     * @param addResourceRequest The Add resource request object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> One of the resource details object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addResourceCall(AddResourceRequest addResourceRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addResourceRequest;

        // create path and map variables
        String localVarPath = "/resources/add/resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addResourceValidateBeforeCall(AddResourceRequest addResourceRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'addResourceRequest' is set
        if (addResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'addResourceRequest' when calling addResource(Async)");
        }
        

        okhttp3.Call localVarCall = addResourceCall(addResourceRequest, _callback);
        return localVarCall;

    }

    /**
     * Adds a resource
     * 
     * @param addResourceRequest The Add resource request object (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> One of the resource details object </td><td>  -  </td></tr>
     </table>
     */
    public Object addResource(AddResourceRequest addResourceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = addResourceWithHttpInfo(addResourceRequest);
        return localVarResp.getData();
    }

    /**
     * Adds a resource
     * 
     * @param addResourceRequest The Add resource request object (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> One of the resource details object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addResourceWithHttpInfo(AddResourceRequest addResourceRequest) throws ApiException {
        okhttp3.Call localVarCall = addResourceValidateBeforeCall(addResourceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a resource (asynchronously)
     * 
     * @param addResourceRequest The Add resource request object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> One of the resource details object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addResourceAsync(AddResourceRequest addResourceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addResourceValidateBeforeCall(addResourceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addResourceGroup
     * @param groupName Name of the resource group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created resource group object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addResourceGroupCall(String groupName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = groupName;

        // create path and map variables
        String localVarPath = "/resources/add/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain; charset=utf-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addResourceGroupValidateBeforeCall(String groupName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling addResourceGroup(Async)");
        }
        

        okhttp3.Call localVarCall = addResourceGroupCall(groupName, _callback);
        return localVarCall;

    }

    /**
     * Adds a resource group
     * 
     * @param groupName Name of the resource group (required)
     * @return ResourceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created resource group object </td><td>  -  </td></tr>
     </table>
     */
    public ResourceGroup addResourceGroup(String groupName) throws ApiException {
        ApiResponse<ResourceGroup> localVarResp = addResourceGroupWithHttpInfo(groupName);
        return localVarResp.getData();
    }

    /**
     * Adds a resource group
     * 
     * @param groupName Name of the resource group (required)
     * @return ApiResponse&lt;ResourceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created resource group object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceGroup> addResourceGroupWithHttpInfo(String groupName) throws ApiException {
        okhttp3.Call localVarCall = addResourceGroupValidateBeforeCall(groupName, null);
        Type localVarReturnType = new TypeToken<ResourceGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a resource group (asynchronously)
     * 
     * @param groupName Name of the resource group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created resource group object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addResourceGroupAsync(String groupName, final ApiCallback<ResourceGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = addResourceGroupValidateBeforeCall(groupName, _callback);
        Type localVarReturnType = new TypeToken<ResourceGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addResourceToGroup
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added resource to the resource group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addResourceToGroupCall(Long resourceGroupId, Long resourceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}"
            .replaceAll("\\{" + "resourceGroupId" + "\\}", localVarApiClient.escapeString(resourceGroupId.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addResourceToGroupValidateBeforeCall(Long resourceGroupId, Long resourceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'resourceGroupId' is set
        if (resourceGroupId == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupId' when calling addResourceToGroup(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling addResourceToGroup(Async)");
        }
        

        okhttp3.Call localVarCall = addResourceToGroupCall(resourceGroupId, resourceId, _callback);
        return localVarCall;

    }

    /**
     * Adds a resource to a resource group
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added resource to the resource group </td><td>  -  </td></tr>
     </table>
     */
    public void addResourceToGroup(Long resourceGroupId, Long resourceId) throws ApiException {
        addResourceToGroupWithHttpInfo(resourceGroupId, resourceId);
    }

    /**
     * Adds a resource to a resource group
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added resource to the resource group </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addResourceToGroupWithHttpInfo(Long resourceGroupId, Long resourceId) throws ApiException {
        okhttp3.Call localVarCall = addResourceToGroupValidateBeforeCall(resourceGroupId, resourceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds a resource to a resource group (asynchronously)
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added resource to the resource group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addResourceToGroupAsync(Long resourceGroupId, Long resourceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addResourceToGroupValidateBeforeCall(resourceGroupId, resourceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for aggregateModelResults
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Evaluation result entity contained the aggregated/merged results </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aggregateModelResultsCall(String modelHistoryServerId, AggregatePrediction aggregatePrediction, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = aggregatePrediction;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/aggregateresults"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aggregateModelResultsValidateBeforeCall(String modelHistoryServerId, AggregatePrediction aggregatePrediction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling aggregateModelResults(Async)");
        }
        
        // verify the required parameter 'aggregatePrediction' is set
        if (aggregatePrediction == null) {
            throw new ApiException("Missing the required parameter 'aggregatePrediction' when calling aggregateModelResults(Async)");
        }
        

        okhttp3.Call localVarCall = aggregateModelResultsCall(modelHistoryServerId, aggregatePrediction, _callback);
        return localVarCall;

    }

    /**
     * Aggregates the evaluaition results of a model instance, based on the evaluation type
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @return EvaluationResultsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Evaluation result entity contained the aggregated/merged results </td><td>  -  </td></tr>
     </table>
     */
    public EvaluationResultsEntity aggregateModelResults(String modelHistoryServerId, AggregatePrediction aggregatePrediction) throws ApiException {
        ApiResponse<EvaluationResultsEntity> localVarResp = aggregateModelResultsWithHttpInfo(modelHistoryServerId, aggregatePrediction);
        return localVarResp.getData();
    }

    /**
     * Aggregates the evaluaition results of a model instance, based on the evaluation type
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @return ApiResponse&lt;EvaluationResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Evaluation result entity contained the aggregated/merged results </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EvaluationResultsEntity> aggregateModelResultsWithHttpInfo(String modelHistoryServerId, AggregatePrediction aggregatePrediction) throws ApiException {
        okhttp3.Call localVarCall = aggregateModelResultsValidateBeforeCall(modelHistoryServerId, aggregatePrediction, null);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aggregates the evaluaition results of a model instance, based on the evaluation type (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Evaluation result entity contained the aggregated/merged results </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aggregateModelResultsAsync(String modelHistoryServerId, AggregatePrediction aggregatePrediction, final ApiCallback<EvaluationResultsEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = aggregateModelResultsValidateBeforeCall(modelHistoryServerId, aggregatePrediction, _callback);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeUserPassword
     * @param userId User&#39;s ID (required)
     * @param changePasswordRequest Password details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeUserPasswordCall(String userId, ChangePasswordRequest changePasswordRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = changePasswordRequest;

        // create path and map variables
        String localVarPath = "/user/{userId}/password"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeUserPasswordValidateBeforeCall(String userId, ChangePasswordRequest changePasswordRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling changeUserPassword(Async)");
        }
        
        // verify the required parameter 'changePasswordRequest' is set
        if (changePasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'changePasswordRequest' when calling changeUserPassword(Async)");
        }
        

        okhttp3.Call localVarCall = changeUserPasswordCall(userId, changePasswordRequest, _callback);
        return localVarCall;

    }

    /**
     * Change user&#39;s password
     * 
     * @param userId User&#39;s ID (required)
     * @param changePasswordRequest Password details. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated user. </td><td>  -  </td></tr>
     </table>
     */
    public User changeUserPassword(String userId, ChangePasswordRequest changePasswordRequest) throws ApiException {
        ApiResponse<User> localVarResp = changeUserPasswordWithHttpInfo(userId, changePasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Change user&#39;s password
     * 
     * @param userId User&#39;s ID (required)
     * @param changePasswordRequest Password details. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> changeUserPasswordWithHttpInfo(String userId, ChangePasswordRequest changePasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = changeUserPasswordValidateBeforeCall(userId, changePasswordRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change user&#39;s password (asynchronously)
     * 
     * @param userId User&#39;s ID (required)
     * @param changePasswordRequest Password details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeUserPasswordAsync(String userId, ChangePasswordRequest changePasswordRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeUserPasswordValidateBeforeCall(userId, changePasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classify
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyCall(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classify"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifyValidateBeforeCall(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling classify(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling classify(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling classify(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling classify(Async)");
        }
        

        okhttp3.Call localVarCall = classifyCall(deploymentName, versionName, modelName, body, _callback);
        return localVarCall;

    }

    /**
     * Use the deployed model to classify the input
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @return ClassificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationResult classify(String deploymentName, String versionName, String modelName, Prediction body) throws ApiException {
        ApiResponse<ClassificationResult> localVarResp = classifyWithHttpInfo(deploymentName, versionName, modelName, body);
        return localVarResp.getData();
    }

    /**
     * Use the deployed model to classify the input
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @return ApiResponse&lt;ClassificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationResult> classifyWithHttpInfo(String deploymentName, String versionName, String modelName, Prediction body) throws ApiException {
        okhttp3.Call localVarCall = classifyValidateBeforeCall(deploymentName, versionName, modelName, body, null);
        Type localVarReturnType = new TypeToken<ClassificationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Use the deployed model to classify the input (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyAsync(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback<ClassificationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifyValidateBeforeCall(deploymentName, versionName, modelName, body, _callback);
        Type localVarReturnType = new TypeToken<ClassificationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classifyarray
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyarrayCall(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifyarrayValidateBeforeCall(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling classifyarray(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling classifyarray(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling classifyarray(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling classifyarray(Async)");
        }
        

        okhttp3.Call localVarCall = classifyarrayCall(deploymentName, versionName, modelName, body, _callback);
        return localVarCall;

    }

    /**
     * Same as /classify but returns the output as Base64NDArrayBody
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public Base64NDArrayBody classifyarray(String deploymentName, String versionName, String modelName, Prediction body) throws ApiException {
        ApiResponse<Base64NDArrayBody> localVarResp = classifyarrayWithHttpInfo(deploymentName, versionName, modelName, body);
        return localVarResp.getData();
    }

    /**
     * Same as /classify but returns the output as Base64NDArrayBody
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Base64NDArrayBody> classifyarrayWithHttpInfo(String deploymentName, String versionName, String modelName, Prediction body) throws ApiException {
        okhttp3.Call localVarCall = classifyarrayValidateBeforeCall(deploymentName, versionName, modelName, body, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Same as /classify but returns the output as Base64NDArrayBody (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyarrayAsync(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback<Base64NDArrayBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifyarrayValidateBeforeCall(deploymentName, versionName, modelName, body, _callback);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classifyimage
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating classification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyimageCall(String deploymentName, String versionName, String modelName, File image, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null) {
            localVarFormParams.put("image", image);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifyimageValidateBeforeCall(String deploymentName, String versionName, String modelName, File image, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling classifyimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling classifyimage(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling classifyimage(Async)");
        }
        

        okhttp3.Call localVarCall = classifyimageCall(deploymentName, versionName, modelName, image, _callback);
        return localVarCall;

    }

    /**
     * Use the deployed model to classify the input, using input image file from multipart form data.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @return ClassificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating classification </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationResult classifyimage(String deploymentName, String versionName, String modelName, File image) throws ApiException {
        ApiResponse<ClassificationResult> localVarResp = classifyimageWithHttpInfo(deploymentName, versionName, modelName, image);
        return localVarResp.getData();
    }

    /**
     * Use the deployed model to classify the input, using input image file from multipart form data.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @return ApiResponse&lt;ClassificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating classification </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationResult> classifyimageWithHttpInfo(String deploymentName, String versionName, String modelName, File image) throws ApiException {
        okhttp3.Call localVarCall = classifyimageValidateBeforeCall(deploymentName, versionName, modelName, image, null);
        Type localVarReturnType = new TypeToken<ClassificationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Use the deployed model to classify the input, using input image file from multipart form data. (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating classification </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call classifyimageAsync(String deploymentName, String versionName, String modelName, File image, final ApiCallback<ClassificationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifyimageValidateBeforeCall(deploymentName, versionName, modelName, image, _callback);
        Type localVarReturnType = new TypeToken<ClassificationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearState
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The feedback response object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearStateCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/clear";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearStateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = clearStateCall(_callback);
        return localVarCall;

    }

    /**
     * Clears the accumulated data for retraining.
     * 
     * @return FeedbackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The feedback response object </td><td>  -  </td></tr>
     </table>
     */
    public FeedbackResponse clearState() throws ApiException {
        ApiResponse<FeedbackResponse> localVarResp = clearStateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Clears the accumulated data for retraining.
     * 
     * @return ApiResponse&lt;FeedbackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The feedback response object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeedbackResponse> clearStateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = clearStateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clears the accumulated data for retraining. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The feedback response object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearStateAsync(final ApiCallback<FeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearStateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<FeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createJob
     * @param jobIdOrType Job Type (required)
     * @param createJobRequest Create job request object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created job entity object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createJobCall(String jobIdOrType, CreateJobRequest createJobRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createJobRequest;

        // create path and map variables
        String localVarPath = "/jobs/{jobIdOrType}"
            .replaceAll("\\{" + "jobIdOrType" + "\\}", localVarApiClient.escapeString(jobIdOrType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createJobValidateBeforeCall(String jobIdOrType, CreateJobRequest createJobRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobIdOrType' is set
        if (jobIdOrType == null) {
            throw new ApiException("Missing the required parameter 'jobIdOrType' when calling createJob(Async)");
        }
        
        // verify the required parameter 'createJobRequest' is set
        if (createJobRequest == null) {
            throw new ApiException("Missing the required parameter 'createJobRequest' when calling createJob(Async)");
        }
        

        okhttp3.Call localVarCall = createJobCall(jobIdOrType, createJobRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a job
     * 
     * @param jobIdOrType Job Type (required)
     * @param createJobRequest Create job request object (required)
     * @return JobEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created job entity object </td><td>  -  </td></tr>
     </table>
     */
    public JobEntity createJob(String jobIdOrType, CreateJobRequest createJobRequest) throws ApiException {
        ApiResponse<JobEntity> localVarResp = createJobWithHttpInfo(jobIdOrType, createJobRequest);
        return localVarResp.getData();
    }

    /**
     * Create a job
     * 
     * @param jobIdOrType Job Type (required)
     * @param createJobRequest Create job request object (required)
     * @return ApiResponse&lt;JobEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created job entity object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobEntity> createJobWithHttpInfo(String jobIdOrType, CreateJobRequest createJobRequest) throws ApiException {
        okhttp3.Call localVarCall = createJobValidateBeforeCall(jobIdOrType, createJobRequest, null);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a job (asynchronously)
     * 
     * @param jobIdOrType Job Type (required)
     * @param createJobRequest Create job request object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created job entity object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createJobAsync(String jobIdOrType, CreateJobRequest createJobRequest, final ApiCallback<JobEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = createJobValidateBeforeCall(jobIdOrType, createJobRequest, _callback);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryEntity The model history entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created model history </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createModelHistoryCall(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = modelHistoryEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/revisions"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createModelHistoryValidateBeforeCall(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling createModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryEntity' is set
        if (modelHistoryEntity == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryEntity' when calling createModelHistory(Async)");
        }
        

        okhttp3.Call localVarCall = createModelHistoryCall(modelHistoryServerId, modelHistoryEntity, _callback);
        return localVarCall;

    }

    /**
     * Creates model History
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryEntity The model history entity (required)
     * @return ModelHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created model history </td><td>  -  </td></tr>
     </table>
     */
    public ModelHistoryEntity createModelHistory(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity) throws ApiException {
        ApiResponse<ModelHistoryEntity> localVarResp = createModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryEntity);
        return localVarResp.getData();
    }

    /**
     * Creates model History
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryEntity The model history entity (required)
     * @return ApiResponse&lt;ModelHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created model history </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelHistoryEntity> createModelHistoryWithHttpInfo(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity) throws ApiException {
        okhttp3.Call localVarCall = createModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryEntity, null);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates model History (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryEntity The model history entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created model history </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createModelHistoryAsync(String modelHistoryServerId, ModelHistoryEntity modelHistoryEntity, final ApiCallback<ModelHistoryEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = createModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryEntity, _callback);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCredentialsById
     * @param credentialId Credentials ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credentials successfully deteled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCredentialsByIdCall(Long credentialId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/credentials/{credentialId}"
            .replaceAll("\\{" + "credentialId" + "\\}", localVarApiClient.escapeString(credentialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCredentialsByIdValidateBeforeCall(Long credentialId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'credentialId' is set
        if (credentialId == null) {
            throw new ApiException("Missing the required parameter 'credentialId' when calling deleteCredentialsById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCredentialsByIdCall(credentialId, _callback);
        return localVarCall;

    }

    /**
     * Delete credentials given an ID
     * 
     * @param credentialId Credentials ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credentials successfully deteled </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCredentialsById(Long credentialId) throws ApiException {
        deleteCredentialsByIdWithHttpInfo(credentialId);
    }

    /**
     * Delete credentials given an ID
     * 
     * @param credentialId Credentials ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credentials successfully deteled </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCredentialsByIdWithHttpInfo(Long credentialId) throws ApiException {
        okhttp3.Call localVarCall = deleteCredentialsByIdValidateBeforeCall(credentialId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete credentials given an ID (asynchronously)
     * 
     * @param credentialId Credentials ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credentials successfully deteled </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCredentialsByIdAsync(Long credentialId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCredentialsByIdValidateBeforeCall(credentialId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Experiment deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Experiment no longer exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExperimentCall(String modelHistoryServerId, String experimentID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "experimentID" + "\\}", localVarApiClient.escapeString(experimentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExperimentValidateBeforeCall(String modelHistoryServerId, String experimentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling deleteExperiment(Async)");
        }
        
        // verify the required parameter 'experimentID' is set
        if (experimentID == null) {
            throw new ApiException("Missing the required parameter 'experimentID' when calling deleteExperiment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteExperimentCall(modelHistoryServerId, experimentID, _callback);
        return localVarCall;

    }

    /**
     * Deletes an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to delete (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Experiment deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Experiment no longer exists </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 deleteExperiment(String modelHistoryServerId, String experimentID) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = deleteExperimentWithHttpInfo(modelHistoryServerId, experimentID);
        return localVarResp.getData();
    }

    /**
     * Deletes an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to delete (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Experiment deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Experiment no longer exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> deleteExperimentWithHttpInfo(String modelHistoryServerId, String experimentID) throws ApiException {
        okhttp3.Call localVarCall = deleteExperimentValidateBeforeCall(modelHistoryServerId, experimentID, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes an experiment, given an experiment entity (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Experiment deleted successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Experiment no longer exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExperimentAsync(String modelHistoryServerId, String experimentID, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExperimentValidateBeforeCall(modelHistoryServerId, experimentID, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteJobById
     * @param jobIdOrType Job ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted a job </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobByIdCall(Long jobIdOrType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/jobs/{jobIdOrType}"
            .replaceAll("\\{" + "jobIdOrType" + "\\}", localVarApiClient.escapeString(jobIdOrType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteJobByIdValidateBeforeCall(Long jobIdOrType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobIdOrType' is set
        if (jobIdOrType == null) {
            throw new ApiException("Missing the required parameter 'jobIdOrType' when calling deleteJobById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteJobByIdCall(jobIdOrType, _callback);
        return localVarCall;

    }

    /**
     * Deletes a job given its ID
     * 
     * @param jobIdOrType Job ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted a job </td><td>  -  </td></tr>
     </table>
     */
    public void deleteJobById(Long jobIdOrType) throws ApiException {
        deleteJobByIdWithHttpInfo(jobIdOrType);
    }

    /**
     * Deletes a job given its ID
     * 
     * @param jobIdOrType Job ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted a job </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteJobByIdWithHttpInfo(Long jobIdOrType) throws ApiException {
        okhttp3.Call localVarCall = deleteJobByIdValidateBeforeCall(jobIdOrType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a job given its ID (asynchronously)
     * 
     * @param jobIdOrType Job ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted a job </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobByIdAsync(Long jobIdOrType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteJobByIdValidateBeforeCall(jobIdOrType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteModel
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deleted model status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteModelCall(String deploymentId, String modelId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}/model/{modelId}"
            .replaceAll("\\{" + "deploymentId" + "\\}", localVarApiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "modelId" + "\\}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteModelValidateBeforeCall(String deploymentId, String modelId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deleteModel(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling deleteModel(Async)");
        }
        

        okhttp3.Call localVarCall = deleteModelCall(deploymentId, modelId, _callback);
        return localVarCall;

    }

    /**
     * Delete a model by deployment and model id
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deleted model status </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 deleteModel(String deploymentId, String modelId) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = deleteModelWithHttpInfo(deploymentId, modelId);
        return localVarResp.getData();
    }

    /**
     * Delete a model by deployment and model id
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deleted model status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> deleteModelWithHttpInfo(String deploymentId, String modelId) throws ApiException {
        okhttp3.Call localVarCall = deleteModelValidateBeforeCall(deploymentId, modelId, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a model by deployment and model id (asynchronously)
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deleted model status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteModelAsync(String deploymentId, String modelId, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteModelValidateBeforeCall(deploymentId, modelId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workspace deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified Workspace no longer exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteModelHistoryCall(String modelHistoryServerId, String modelHistoryID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelHistoryID" + "\\}", localVarApiClient.escapeString(modelHistoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteModelHistoryValidateBeforeCall(String modelHistoryServerId, String modelHistoryID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling deleteModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryID' is set
        if (modelHistoryID == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryID' when calling deleteModelHistory(Async)");
        }
        

        okhttp3.Call localVarCall = deleteModelHistoryCall(modelHistoryServerId, modelHistoryID, _callback);
        return localVarCall;

    }

    /**
     * Deletes a model history / workspace, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to delete (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workspace deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified Workspace no longer exists </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 deleteModelHistory(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = deleteModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
        return localVarResp.getData();
    }

    /**
     * Deletes a model history / workspace, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to delete (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workspace deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified Workspace no longer exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> deleteModelHistoryWithHttpInfo(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        okhttp3.Call localVarCall = deleteModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a model history / workspace, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workspace deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified Workspace no longer exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteModelHistoryAsync(String modelHistoryServerId, String modelHistoryID, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteModelInstance
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteModelInstanceCall(String modelHistoryServerId, String modelInstanceID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelInstanceID" + "\\}", localVarApiClient.escapeString(modelInstanceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteModelInstanceValidateBeforeCall(String modelHistoryServerId, String modelInstanceID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling deleteModelInstance(Async)");
        }
        
        // verify the required parameter 'modelInstanceID' is set
        if (modelInstanceID == null) {
            throw new ApiException("Missing the required parameter 'modelInstanceID' when calling deleteModelInstance(Async)");
        }
        

        okhttp3.Call localVarCall = deleteModelInstanceCall(modelHistoryServerId, modelInstanceID, _callback);
        return localVarCall;

    }

    /**
     * Deletes a model instance, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteModelInstance(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        deleteModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceID);
    }

    /**
     * Deletes a model instance, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteModelInstanceWithHttpInfo(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        okhttp3.Call localVarCall = deleteModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a model instance, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteModelInstanceAsync(String modelHistoryServerId, String modelInstanceID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResourceById
     * @param resourceId ID of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceByIdCall(Long resourceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/remove/resource/{resourceId}"
            .replaceAll("\\{" + "resourceId" + "\\}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourceByIdValidateBeforeCall(Long resourceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling deleteResourceById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteResourceByIdCall(resourceId, _callback);
        return localVarCall;

    }

    /**
     * Delete the resource with the specified resource ID
     * 
     * @param resourceId ID of the resource (required)
     * @return Resource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Object </td><td>  -  </td></tr>
     </table>
     */
    public Resource deleteResourceById(Long resourceId) throws ApiException {
        ApiResponse<Resource> localVarResp = deleteResourceByIdWithHttpInfo(resourceId);
        return localVarResp.getData();
    }

    /**
     * Delete the resource with the specified resource ID
     * 
     * @param resourceId ID of the resource (required)
     * @return ApiResponse&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resource> deleteResourceByIdWithHttpInfo(Long resourceId) throws ApiException {
        okhttp3.Call localVarCall = deleteResourceByIdValidateBeforeCall(resourceId, null);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the resource with the specified resource ID (asynchronously)
     * 
     * @param resourceId ID of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceByIdAsync(Long resourceId, final ApiCallback<Resource> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourceByIdValidateBeforeCall(resourceId, _callback);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResourceFromGroup
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed resource from the resource group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceFromGroupCall(Long resourceGroupId, Long resourceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}"
            .replaceAll("\\{" + "resourceGroupId" + "\\}", localVarApiClient.escapeString(resourceGroupId.toString()))
            .replaceAll("\\{" + "resourceId" + "\\}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourceFromGroupValidateBeforeCall(Long resourceGroupId, Long resourceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'resourceGroupId' is set
        if (resourceGroupId == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupId' when calling deleteResourceFromGroup(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling deleteResourceFromGroup(Async)");
        }
        

        okhttp3.Call localVarCall = deleteResourceFromGroupCall(resourceGroupId, resourceId, _callback);
        return localVarCall;

    }

    /**
     * Removes a resource from a resource group
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed resource from the resource group </td><td>  -  </td></tr>
     </table>
     */
    public void deleteResourceFromGroup(Long resourceGroupId, Long resourceId) throws ApiException {
        deleteResourceFromGroupWithHttpInfo(resourceGroupId, resourceId);
    }

    /**
     * Removes a resource from a resource group
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed resource from the resource group </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteResourceFromGroupWithHttpInfo(Long resourceGroupId, Long resourceId) throws ApiException {
        okhttp3.Call localVarCall = deleteResourceFromGroupValidateBeforeCall(resourceGroupId, resourceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a resource from a resource group (asynchronously)
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param resourceId ID of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed resource from the resource group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceFromGroupAsync(Long resourceGroupId, Long resourceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourceFromGroupValidateBeforeCall(resourceGroupId, resourceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResourceGroupById
     * @param resourceGroupId ID of the resource group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Group Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceGroupByIdCall(Long resourceGroupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/remove/group/{resourceGroupId}"
            .replaceAll("\\{" + "resourceGroupId" + "\\}", localVarApiClient.escapeString(resourceGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourceGroupByIdValidateBeforeCall(Long resourceGroupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'resourceGroupId' is set
        if (resourceGroupId == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupId' when calling deleteResourceGroupById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteResourceGroupByIdCall(resourceGroupId, _callback);
        return localVarCall;

    }

    /**
     * Delete the resource group with the specified resource group ID
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @return ResourceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Group Object </td><td>  -  </td></tr>
     </table>
     */
    public ResourceGroup deleteResourceGroupById(Long resourceGroupId) throws ApiException {
        ApiResponse<ResourceGroup> localVarResp = deleteResourceGroupByIdWithHttpInfo(resourceGroupId);
        return localVarResp.getData();
    }

    /**
     * Delete the resource group with the specified resource group ID
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @return ApiResponse&lt;ResourceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Group Object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceGroup> deleteResourceGroupByIdWithHttpInfo(Long resourceGroupId) throws ApiException {
        okhttp3.Call localVarCall = deleteResourceGroupByIdValidateBeforeCall(resourceGroupId, null);
        Type localVarReturnType = new TypeToken<ResourceGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the resource group with the specified resource group ID (asynchronously)
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Group Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceGroupByIdAsync(Long resourceGroupId, final ApiCallback<ResourceGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourceGroupByIdValidateBeforeCall(resourceGroupId, _callback);
        Type localVarReturnType = new TypeToken<ResourceGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployModel
     * @param deploymentId ID deployment group (required)
     * @param body the model import request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deployed model </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployModelCall(String deploymentId, ImportModelRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}/model"
            .replaceAll("\\{" + "deploymentId" + "\\}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployModelValidateBeforeCall(String deploymentId, ImportModelRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deployModel(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deployModel(Async)");
        }
        

        okhttp3.Call localVarCall = deployModelCall(deploymentId, body, _callback);
        return localVarCall;

    }

    /**
     * Deploy a model in a deployment group.
     * 
     * @param deploymentId ID deployment group (required)
     * @param body the model import request (required)
     * @return ModelEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deployed model </td><td>  -  </td></tr>
     </table>
     */
    public ModelEntity deployModel(String deploymentId, ImportModelRequest body) throws ApiException {
        ApiResponse<ModelEntity> localVarResp = deployModelWithHttpInfo(deploymentId, body);
        return localVarResp.getData();
    }

    /**
     * Deploy a model in a deployment group.
     * 
     * @param deploymentId ID deployment group (required)
     * @param body the model import request (required)
     * @return ApiResponse&lt;ModelEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deployed model </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelEntity> deployModelWithHttpInfo(String deploymentId, ImportModelRequest body) throws ApiException {
        okhttp3.Call localVarCall = deployModelValidateBeforeCall(deploymentId, body, null);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy a model in a deployment group. (asynchronously)
     * 
     * @param deploymentId ID deployment group (required)
     * @param body the model import request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deployed model </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployModelAsync(String deploymentId, ImportModelRequest body, final ApiCallback<ModelEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployModelValidateBeforeCall(deploymentId, body, _callback);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentCreate
     * @param body the deployment request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the added deployment </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error creating deployment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentCreateCall(CreateDeploymentRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deployment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentCreateValidateBeforeCall(CreateDeploymentRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deploymentCreate(Async)");
        }
        

        okhttp3.Call localVarCall = deploymentCreateCall(body, _callback);
        return localVarCall;

    }

    /**
     * Create a new deployment group.
     * 
     * @param body the deployment request (required)
     * @return DeploymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the added deployment </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error creating deployment </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentResponse deploymentCreate(CreateDeploymentRequest body) throws ApiException {
        ApiResponse<DeploymentResponse> localVarResp = deploymentCreateWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a new deployment group.
     * 
     * @param body the deployment request (required)
     * @return ApiResponse&lt;DeploymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the added deployment </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error creating deployment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentResponse> deploymentCreateWithHttpInfo(CreateDeploymentRequest body) throws ApiException {
        okhttp3.Call localVarCall = deploymentCreateValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<DeploymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new deployment group. (asynchronously)
     * 
     * @param body the deployment request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the added deployment </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error creating deployment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentCreateAsync(CreateDeploymentRequest body, final ApiCallback<DeploymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentCreateValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<DeploymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentDelete
     * @param deploymentId Id of the deployment group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The status of the removed deployment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentDeleteCall(String deploymentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}"
            .replaceAll("\\{" + "deploymentId" + "\\}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentDeleteValidateBeforeCall(String deploymentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deploymentDelete(Async)");
        }
        

        okhttp3.Call localVarCall = deploymentDeleteCall(deploymentId, _callback);
        return localVarCall;

    }

    /**
     * Delete a deployment by id
     * 
     * @param deploymentId Id of the deployment group (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The status of the removed deployment </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 deploymentDelete(String deploymentId) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = deploymentDeleteWithHttpInfo(deploymentId);
        return localVarResp.getData();
    }

    /**
     * Delete a deployment by id
     * 
     * @param deploymentId Id of the deployment group (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The status of the removed deployment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> deploymentDeleteWithHttpInfo(String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = deploymentDeleteValidateBeforeCall(deploymentId, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a deployment by id (asynchronously)
     * 
     * @param deploymentId Id of the deployment group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The status of the removed deployment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentDeleteAsync(String deploymentId, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentDeleteValidateBeforeCall(deploymentId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentGet
     * @param deploymentId Id of the deployment group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployment details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentGetCall(String deploymentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}"
            .replaceAll("\\{" + "deploymentId" + "\\}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentGetValidateBeforeCall(String deploymentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deploymentGet(Async)");
        }
        

        okhttp3.Call localVarCall = deploymentGetCall(deploymentId, _callback);
        return localVarCall;

    }

    /**
     * Get a deployment details by id
     * 
     * @param deploymentId Id of the deployment group (required)
     * @return DeploymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployment details </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentResponse deploymentGet(String deploymentId) throws ApiException {
        ApiResponse<DeploymentResponse> localVarResp = deploymentGetWithHttpInfo(deploymentId);
        return localVarResp.getData();
    }

    /**
     * Get a deployment details by id
     * 
     * @param deploymentId Id of the deployment group (required)
     * @return ApiResponse&lt;DeploymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployment details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentResponse> deploymentGetWithHttpInfo(String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = deploymentGetValidateBeforeCall(deploymentId, null);
        Type localVarReturnType = new TypeToken<DeploymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a deployment details by id (asynchronously)
     * 
     * @param deploymentId Id of the deployment group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deployment details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentGetAsync(String deploymentId, final ApiCallback<DeploymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentGetValidateBeforeCall(deploymentId, _callback);
        Type localVarReturnType = new TypeToken<DeploymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployments
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of the deployments retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/deployments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = deploymentsCall(_callback);
        return localVarCall;

    }

    /**
     * Get a list of deployments
     * 
     * @return List&lt;DeploymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of the deployments retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public List<DeploymentResponse> deployments() throws ApiException {
        ApiResponse<List<DeploymentResponse>> localVarResp = deploymentsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of deployments
     * 
     * @return ApiResponse&lt;List&lt;DeploymentResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of the deployments retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeploymentResponse>> deploymentsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deploymentsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DeploymentResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of deployments (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of the deployments retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentsAsync(final ApiCallback<List<DeploymentResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DeploymentResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detectobjects
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param id the GUID for mapping the results in the detections (required)
     * @param needsPreprocessing (true) if the image needs preprocessing (required)
     * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. (required)
     * @param file the image file to detect objects from (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the detected objects in the given input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectobjectsCall(String deploymentName, String versionName, String modelName, String id, Boolean needsPreprocessing, Float threshold, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (needsPreprocessing != null) {
            localVarFormParams.put("needsPreprocessing", needsPreprocessing);
        }

        if (threshold != null) {
            localVarFormParams.put("threshold", threshold);
        }

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectobjectsValidateBeforeCall(String deploymentName, String versionName, String modelName, String id, Boolean needsPreprocessing, Float threshold, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'needsPreprocessing' is set
        if (needsPreprocessing == null) {
            throw new ApiException("Missing the required parameter 'needsPreprocessing' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'threshold' is set
        if (threshold == null) {
            throw new ApiException("Missing the required parameter 'threshold' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling detectobjects(Async)");
        }
        

        okhttp3.Call localVarCall = detectobjectsCall(deploymentName, versionName, modelName, id, needsPreprocessing, threshold, file, _callback);
        return localVarCall;

    }

    /**
     * Detect the objects, given a (input) prediction request
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param id the GUID for mapping the results in the detections (required)
     * @param needsPreprocessing (true) if the image needs preprocessing (required)
     * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. (required)
     * @param file the image file to detect objects from (required)
     * @return DetectionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the detected objects in the given input </td><td>  -  </td></tr>
     </table>
     */
    public DetectionResult detectobjects(String deploymentName, String versionName, String modelName, String id, Boolean needsPreprocessing, Float threshold, File file) throws ApiException {
        ApiResponse<DetectionResult> localVarResp = detectobjectsWithHttpInfo(deploymentName, versionName, modelName, id, needsPreprocessing, threshold, file);
        return localVarResp.getData();
    }

    /**
     * Detect the objects, given a (input) prediction request
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param id the GUID for mapping the results in the detections (required)
     * @param needsPreprocessing (true) if the image needs preprocessing (required)
     * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. (required)
     * @param file the image file to detect objects from (required)
     * @return ApiResponse&lt;DetectionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the detected objects in the given input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectionResult> detectobjectsWithHttpInfo(String deploymentName, String versionName, String modelName, String id, Boolean needsPreprocessing, Float threshold, File file) throws ApiException {
        okhttp3.Call localVarCall = detectobjectsValidateBeforeCall(deploymentName, versionName, modelName, id, needsPreprocessing, threshold, file, null);
        Type localVarReturnType = new TypeToken<DetectionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detect the objects, given a (input) prediction request (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param id the GUID for mapping the results in the detections (required)
     * @param needsPreprocessing (true) if the image needs preprocessing (required)
     * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. (required)
     * @param file the image file to detect objects from (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the detected objects in the given input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectobjectsAsync(String deploymentName, String versionName, String modelName, String id, Boolean needsPreprocessing, Float threshold, File file, final ApiCallback<DetectionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectobjectsValidateBeforeCall(deploymentName, versionName, modelName, id, needsPreprocessing, threshold, file, _callback);
        Type localVarReturnType = new TypeToken<DetectionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadJobOutputFile
     * @param jobId Job ID (required)
     * @param downloadOutputFileRequest Download output file request object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file download has started </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadJobOutputFileCall(Long jobId, DownloadOutputFileRequest downloadOutputFileRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = downloadOutputFileRequest;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/outputfile"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadJobOutputFileValidateBeforeCall(Long jobId, DownloadOutputFileRequest downloadOutputFileRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling downloadJobOutputFile(Async)");
        }
        
        // verify the required parameter 'downloadOutputFileRequest' is set
        if (downloadOutputFileRequest == null) {
            throw new ApiException("Missing the required parameter 'downloadOutputFileRequest' when calling downloadJobOutputFile(Async)");
        }
        

        okhttp3.Call localVarCall = downloadJobOutputFileCall(jobId, downloadOutputFileRequest, _callback);
        return localVarCall;

    }

    /**
     * Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
     * 
     * @param jobId Job ID (required)
     * @param downloadOutputFileRequest Download output file request object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file download has started </td><td>  -  </td></tr>
     </table>
     */
    public void downloadJobOutputFile(Long jobId, DownloadOutputFileRequest downloadOutputFileRequest) throws ApiException {
        downloadJobOutputFileWithHttpInfo(jobId, downloadOutputFileRequest);
    }

    /**
     * Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
     * 
     * @param jobId Job ID (required)
     * @param downloadOutputFileRequest Download output file request object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file download has started </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> downloadJobOutputFileWithHttpInfo(Long jobId, DownloadOutputFileRequest downloadOutputFileRequest) throws ApiException {
        okhttp3.Call localVarCall = downloadJobOutputFileValidateBeforeCall(jobId, downloadOutputFileRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;. (asynchronously)
     * 
     * @param jobId Job ID (required)
     * @param downloadOutputFileRequest Download output file request object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file download has started </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadJobOutputFileAsync(Long jobId, DownloadOutputFileRequest downloadOutputFileRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadJobOutputFileValidateBeforeCall(jobId, downloadOutputFileRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateAuthToken
     * @param tokenGenerateRequest Auth token details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated auth token. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateAuthTokenCall(TokenGenerateRequest tokenGenerateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tokenGenerateRequest;

        // create path and map variables
        String localVarPath = "/auth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateAuthTokenValidateBeforeCall(TokenGenerateRequest tokenGenerateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tokenGenerateRequest' is set
        if (tokenGenerateRequest == null) {
            throw new ApiException("Missing the required parameter 'tokenGenerateRequest' when calling generateAuthToken(Async)");
        }
        

        okhttp3.Call localVarCall = generateAuthTokenCall(tokenGenerateRequest, _callback);
        return localVarCall;

    }

    /**
     * Generate new auth token
     * 
     * @param tokenGenerateRequest Auth token details. (required)
     * @return Token
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated auth token. </td><td>  -  </td></tr>
     </table>
     */
    public Token generateAuthToken(TokenGenerateRequest tokenGenerateRequest) throws ApiException {
        ApiResponse<Token> localVarResp = generateAuthTokenWithHttpInfo(tokenGenerateRequest);
        return localVarResp.getData();
    }

    /**
     * Generate new auth token
     * 
     * @param tokenGenerateRequest Auth token details. (required)
     * @return ApiResponse&lt;Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated auth token. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Token> generateAuthTokenWithHttpInfo(TokenGenerateRequest tokenGenerateRequest) throws ApiException {
        okhttp3.Call localVarCall = generateAuthTokenValidateBeforeCall(tokenGenerateRequest, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate new auth token (asynchronously)
     * 
     * @param tokenGenerateRequest Auth token details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated auth token. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateAuthTokenAsync(TokenGenerateRequest tokenGenerateRequest, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateAuthTokenValidateBeforeCall(tokenGenerateRequest, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllJobs
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of job entity objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllJobsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllJobsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllJobsCall(_callback);
        return localVarCall;

    }

    /**
     * Get a list of all available jobs
     * 
     * @return List&lt;JobEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of job entity objects </td><td>  -  </td></tr>
     </table>
     */
    public List<JobEntity> getAllJobs() throws ApiException {
        ApiResponse<List<JobEntity>> localVarResp = getAllJobsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of all available jobs
     * 
     * @return ApiResponse&lt;List&lt;JobEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of job entity objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JobEntity>> getAllJobsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllJobsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<JobEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all available jobs (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of job entity objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllJobsAsync(final ApiCallback<List<JobEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllJobsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<JobEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArray
     * @param accept  (required)
     * @param arrayType The format in which the memory mapped array is returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the whole memory mapped array in the specified format. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArrayCall(String accept, String arrayType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/array/{arrayType}"
            .replaceAll("\\{" + "arrayType" + "\\}", localVarApiClient.escapeString(arrayType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArrayValidateBeforeCall(String accept, String arrayType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getArray(Async)");
        }
        
        // verify the required parameter 'arrayType' is set
        if (arrayType == null) {
            throw new ApiException("Missing the required parameter 'arrayType' when calling getArray(Async)");
        }
        

        okhttp3.Call localVarCall = getArrayCall(accept, arrayType, _callback);
        return localVarCall;

    }

    /**
     * Get the memory mapped array based on the array type.
     * The array is specified through a file path, in the configuration object, during model server deployment.
     * @param accept  (required)
     * @param arrayType The format in which the memory mapped array is returned. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the whole memory mapped array in the specified format. </td><td>  -  </td></tr>
     </table>
     */
    public void getArray(String accept, String arrayType) throws ApiException {
        getArrayWithHttpInfo(accept, arrayType);
    }

    /**
     * Get the memory mapped array based on the array type.
     * The array is specified through a file path, in the configuration object, during model server deployment.
     * @param accept  (required)
     * @param arrayType The format in which the memory mapped array is returned. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the whole memory mapped array in the specified format. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getArrayWithHttpInfo(String accept, String arrayType) throws ApiException {
        okhttp3.Call localVarCall = getArrayValidateBeforeCall(accept, arrayType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the memory mapped array based on the array type. (asynchronously)
     * The array is specified through a file path, in the configuration object, during model server deployment.
     * @param accept  (required)
     * @param arrayType The format in which the memory mapped array is returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the whole memory mapped array in the specified format. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArrayAsync(String accept, String arrayType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArrayValidateBeforeCall(accept, arrayType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArrayIndices
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param input Input indices array (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the arrays given the indices. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArrayIndicesCall(String contentType, String accept, String arrayType, String input, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/array/indices/{arrayType}"
            .replaceAll("\\{" + "arrayType" + "\\}", localVarApiClient.escapeString(arrayType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArrayIndicesValidateBeforeCall(String contentType, String accept, String arrayType, String input, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getArrayIndices(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getArrayIndices(Async)");
        }
        
        // verify the required parameter 'arrayType' is set
        if (arrayType == null) {
            throw new ApiException("Missing the required parameter 'arrayType' when calling getArrayIndices(Async)");
        }
        

        okhttp3.Call localVarCall = getArrayIndicesCall(contentType, accept, arrayType, input, _callback);
        return localVarCall;

    }

    /**
     * Get the memory mapped array indices based on the array type.
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param input Input indices array (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the arrays given the indices. </td><td>  -  </td></tr>
     </table>
     */
    public void getArrayIndices(String contentType, String accept, String arrayType, String input) throws ApiException {
        getArrayIndicesWithHttpInfo(contentType, accept, arrayType, input);
    }

    /**
     * Get the memory mapped array indices based on the array type.
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param input Input indices array (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the arrays given the indices. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getArrayIndicesWithHttpInfo(String contentType, String accept, String arrayType, String input) throws ApiException {
        okhttp3.Call localVarCall = getArrayIndicesValidateBeforeCall(contentType, accept, arrayType, input, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the memory mapped array indices based on the array type. (asynchronously)
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param input Input indices array (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the arrays given the indices. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArrayIndicesAsync(String contentType, String accept, String arrayType, String input, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArrayIndicesValidateBeforeCall(contentType, accept, arrayType, input, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArrayRange
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param from  (required)
     * @param to  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the arrays given the from/to indices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArrayRangeCall(String accept, String arrayType, Integer from, Integer to, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/array/range/{from}/{to}/{arrayType}"
            .replaceAll("\\{" + "arrayType" + "\\}", localVarApiClient.escapeString(arrayType.toString()))
            .replaceAll("\\{" + "from" + "\\}", localVarApiClient.escapeString(from.toString()))
            .replaceAll("\\{" + "to" + "\\}", localVarApiClient.escapeString(to.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArrayRangeValidateBeforeCall(String accept, String arrayType, Integer from, Integer to, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getArrayRange(Async)");
        }
        
        // verify the required parameter 'arrayType' is set
        if (arrayType == null) {
            throw new ApiException("Missing the required parameter 'arrayType' when calling getArrayRange(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getArrayRange(Async)");
        }
        
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getArrayRange(Async)");
        }
        

        okhttp3.Call localVarCall = getArrayRangeCall(accept, arrayType, from, to, _callback);
        return localVarCall;

    }

    /**
     * Get the memory mapped array within a range based on the array type.
     * 
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param from  (required)
     * @param to  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the arrays given the from/to indices </td><td>  -  </td></tr>
     </table>
     */
    public void getArrayRange(String accept, String arrayType, Integer from, Integer to) throws ApiException {
        getArrayRangeWithHttpInfo(accept, arrayType, from, to);
    }

    /**
     * Get the memory mapped array within a range based on the array type.
     * 
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param from  (required)
     * @param to  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the arrays given the from/to indices </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getArrayRangeWithHttpInfo(String accept, String arrayType, Integer from, Integer to) throws ApiException {
        okhttp3.Call localVarCall = getArrayRangeValidateBeforeCall(accept, arrayType, from, to, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the memory mapped array within a range based on the array type. (asynchronously)
     * 
     * @param accept  (required)
     * @param arrayType Format in which the memory mapped array is returned in. (required)
     * @param from  (required)
     * @param to  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the arrays given the from/to indices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArrayRangeAsync(String accept, String arrayType, Integer from, Integer to, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArrayRangeValidateBeforeCall(accept, arrayType, from, to, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthPolicy
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AuthPolicy object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthPolicyCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/auth/policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthPolicyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAuthPolicyCall(_callback);
        return localVarCall;

    }

    /**
     * Get auth policy
     * 
     * @return AuthPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AuthPolicy object </td><td>  -  </td></tr>
     </table>
     */
    public AuthPolicy getAuthPolicy() throws ApiException {
        ApiResponse<AuthPolicy> localVarResp = getAuthPolicyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get auth policy
     * 
     * @return ApiResponse&lt;AuthPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AuthPolicy object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthPolicy> getAuthPolicyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAuthPolicyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AuthPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get auth policy (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AuthPolicy object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthPolicyAsync(final ApiCallback<AuthPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthPolicyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AuthPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBestModelAmongModelIds
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param bestModel Object encapsulating the model ids, eval type and column metric name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The best model instance entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBestModelAmongModelIdsCall(String modelHistoryServerId, BestModel bestModel, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bestModel;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/best"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBestModelAmongModelIdsValidateBeforeCall(String modelHistoryServerId, BestModel bestModel, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getBestModelAmongModelIds(Async)");
        }
        
        // verify the required parameter 'bestModel' is set
        if (bestModel == null) {
            throw new ApiException("Missing the required parameter 'bestModel' when calling getBestModelAmongModelIds(Async)");
        }
        

        okhttp3.Call localVarCall = getBestModelAmongModelIdsCall(modelHistoryServerId, bestModel, _callback);
        return localVarCall;

    }

    /**
     * Gets the best model among the given model instance IDs, based on the evaluation type and column metric
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param bestModel Object encapsulating the model ids, eval type and column metric name (required)
     * @return ModelInstanceEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The best model instance entity </td><td>  -  </td></tr>
     </table>
     */
    public ModelInstanceEntity getBestModelAmongModelIds(String modelHistoryServerId, BestModel bestModel) throws ApiException {
        ApiResponse<ModelInstanceEntity> localVarResp = getBestModelAmongModelIdsWithHttpInfo(modelHistoryServerId, bestModel);
        return localVarResp.getData();
    }

    /**
     * Gets the best model among the given model instance IDs, based on the evaluation type and column metric
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param bestModel Object encapsulating the model ids, eval type and column metric name (required)
     * @return ApiResponse&lt;ModelInstanceEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The best model instance entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInstanceEntity> getBestModelAmongModelIdsWithHttpInfo(String modelHistoryServerId, BestModel bestModel) throws ApiException {
        okhttp3.Call localVarCall = getBestModelAmongModelIdsValidateBeforeCall(modelHistoryServerId, bestModel, null);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the best model among the given model instance IDs, based on the evaluation type and column metric (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param bestModel Object encapsulating the model ids, eval type and column metric name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The best model instance entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBestModelAmongModelIdsAsync(String modelHistoryServerId, BestModel bestModel, final ApiCallback<ModelInstanceEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBestModelAmongModelIdsValidateBeforeCall(modelHistoryServerId, bestModel, _callback);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCredentialsById
     * @param credentialId Credentials ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credentials Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCredentialsByIdCall(Long credentialId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/credentials/{credentialId}"
            .replaceAll("\\{" + "credentialId" + "\\}", localVarApiClient.escapeString(credentialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCredentialsByIdValidateBeforeCall(Long credentialId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'credentialId' is set
        if (credentialId == null) {
            throw new ApiException("Missing the required parameter 'credentialId' when calling getCredentialsById(Async)");
        }
        

        okhttp3.Call localVarCall = getCredentialsByIdCall(credentialId, _callback);
        return localVarCall;

    }

    /**
     * Get credentials given an ID
     * 
     * @param credentialId Credentials ID (required)
     * @return ResourceCredentials
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credentials Object </td><td>  -  </td></tr>
     </table>
     */
    public ResourceCredentials getCredentialsById(Long credentialId) throws ApiException {
        ApiResponse<ResourceCredentials> localVarResp = getCredentialsByIdWithHttpInfo(credentialId);
        return localVarResp.getData();
    }

    /**
     * Get credentials given an ID
     * 
     * @param credentialId Credentials ID (required)
     * @return ApiResponse&lt;ResourceCredentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credentials Object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceCredentials> getCredentialsByIdWithHttpInfo(Long credentialId) throws ApiException {
        okhttp3.Call localVarCall = getCredentialsByIdValidateBeforeCall(credentialId, null);
        Type localVarReturnType = new TypeToken<ResourceCredentials>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get credentials given an ID (asynchronously)
     * 
     * @param credentialId Credentials ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credentials Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCredentialsByIdAsync(Long credentialId, final ApiCallback<ResourceCredentials> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCredentialsByIdValidateBeforeCall(credentialId, _callback);
        Type localVarReturnType = new TypeToken<ResourceCredentials>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrentModel
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the current model being used for retraining in the form of a downloadable file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentModelCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/model";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentModelValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCurrentModelCall(_callback);
        return localVarCall;

    }

    /**
     * Returns the current model being used for retraining.
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the current model being used for retraining in the form of a downloadable file. </td><td>  -  </td></tr>
     </table>
     */
    public void getCurrentModel() throws ApiException {
        getCurrentModelWithHttpInfo();
    }

    /**
     * Returns the current model being used for retraining.
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the current model being used for retraining in the form of a downloadable file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCurrentModelWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrentModelValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns the current model being used for retraining. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the current model being used for retraining in the form of a downloadable file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentModelAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentModelValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvaluationForModelID
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get evaluation results for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of evaluation result entities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvaluationForModelIDCall(String modelHistoryServerId, String modelInstanceID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelInstanceID" + "\\}", localVarApiClient.escapeString(modelInstanceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEvaluationForModelIDValidateBeforeCall(String modelHistoryServerId, String modelInstanceID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getEvaluationForModelID(Async)");
        }
        
        // verify the required parameter 'modelInstanceID' is set
        if (modelInstanceID == null) {
            throw new ApiException("Missing the required parameter 'modelInstanceID' when calling getEvaluationForModelID(Async)");
        }
        

        okhttp3.Call localVarCall = getEvaluationForModelIDCall(modelHistoryServerId, modelInstanceID, _callback);
        return localVarCall;

    }

    /**
     * Gets the list of evaluation results entity, given a model instance ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get evaluation results for. (required)
     * @return List&lt;EvaluationResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of evaluation result entities </td><td>  -  </td></tr>
     </table>
     */
    public List<EvaluationResultsEntity> getEvaluationForModelID(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        ApiResponse<List<EvaluationResultsEntity>> localVarResp = getEvaluationForModelIDWithHttpInfo(modelHistoryServerId, modelInstanceID);
        return localVarResp.getData();
    }

    /**
     * Gets the list of evaluation results entity, given a model instance ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get evaluation results for. (required)
     * @return ApiResponse&lt;List&lt;EvaluationResultsEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of evaluation result entities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EvaluationResultsEntity>> getEvaluationForModelIDWithHttpInfo(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        okhttp3.Call localVarCall = getEvaluationForModelIDValidateBeforeCall(modelHistoryServerId, modelInstanceID, null);
        Type localVarReturnType = new TypeToken<List<EvaluationResultsEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of evaluation results entity, given a model instance ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get evaluation results for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of evaluation result entities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvaluationForModelIDAsync(String modelHistoryServerId, String modelInstanceID, final ApiCallback<List<EvaluationResultsEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEvaluationForModelIDValidateBeforeCall(modelHistoryServerId, modelInstanceID, _callback);
        Type localVarReturnType = new TypeToken<List<EvaluationResultsEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExamplesForMinibatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of the associated examples with the minibatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExamplesForMinibatchCall(String modelHistoryServerId, String minibatchId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/example/{minibatchId}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "minibatchId" + "\\}", localVarApiClient.escapeString(minibatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExamplesForMinibatchValidateBeforeCall(String modelHistoryServerId, String minibatchId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getExamplesForMinibatch(Async)");
        }
        
        // verify the required parameter 'minibatchId' is set
        if (minibatchId == null) {
            throw new ApiException("Missing the required parameter 'minibatchId' when calling getExamplesForMinibatch(Async)");
        }
        

        okhttp3.Call localVarCall = getExamplesForMinibatchCall(modelHistoryServerId, minibatchId, _callback);
        return localVarCall;

    }

    /**
     * Gets all the examples for a minibatch ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @return List&lt;ExampleEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of the associated examples with the minibatch </td><td>  -  </td></tr>
     </table>
     */
    public List<ExampleEntity> getExamplesForMinibatch(String modelHistoryServerId, String minibatchId) throws ApiException {
        ApiResponse<List<ExampleEntity>> localVarResp = getExamplesForMinibatchWithHttpInfo(modelHistoryServerId, minibatchId);
        return localVarResp.getData();
    }

    /**
     * Gets all the examples for a minibatch ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @return ApiResponse&lt;List&lt;ExampleEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of the associated examples with the minibatch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ExampleEntity>> getExamplesForMinibatchWithHttpInfo(String modelHistoryServerId, String minibatchId) throws ApiException {
        okhttp3.Call localVarCall = getExamplesForMinibatchValidateBeforeCall(modelHistoryServerId, minibatchId, null);
        Type localVarReturnType = new TypeToken<List<ExampleEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the examples for a minibatch ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of the associated examples with the minibatch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExamplesForMinibatchAsync(String modelHistoryServerId, String minibatchId, final ApiCallback<List<ExampleEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExamplesForMinibatchValidateBeforeCall(modelHistoryServerId, minibatchId, _callback);
        Type localVarReturnType = new TypeToken<List<ExampleEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to obtain (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Experiment Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExperimentCall(String modelHistoryServerId, String experimentID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "experimentID" + "\\}", localVarApiClient.escapeString(experimentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExperimentValidateBeforeCall(String modelHistoryServerId, String experimentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getExperiment(Async)");
        }
        
        // verify the required parameter 'experimentID' is set
        if (experimentID == null) {
            throw new ApiException("Missing the required parameter 'experimentID' when calling getExperiment(Async)");
        }
        

        okhttp3.Call localVarCall = getExperimentCall(modelHistoryServerId, experimentID, _callback);
        return localVarCall;

    }

    /**
     * Obtain an experiment&#39;s details, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to obtain (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Experiment Entity </td><td>  -  </td></tr>
     </table>
     */
    public ExperimentEntity getExperiment(String modelHistoryServerId, String experimentID) throws ApiException {
        ApiResponse<ExperimentEntity> localVarResp = getExperimentWithHttpInfo(modelHistoryServerId, experimentID);
        return localVarResp.getData();
    }

    /**
     * Obtain an experiment&#39;s details, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to obtain (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Experiment Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExperimentEntity> getExperimentWithHttpInfo(String modelHistoryServerId, String experimentID) throws ApiException {
        okhttp3.Call localVarCall = getExperimentValidateBeforeCall(modelHistoryServerId, experimentID, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtain an experiment&#39;s details, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to obtain (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Experiment Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExperimentAsync(String modelHistoryServerId, String experimentID, final ApiCallback<ExperimentEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExperimentValidateBeforeCall(modelHistoryServerId, experimentID, _callback);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExperimentsForModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the experiment entities in a model history </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExperimentsForModelHistoryCall(String modelHistoryServerId, String modelHistoryID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelHistoryID" + "\\}", localVarApiClient.escapeString(modelHistoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExperimentsForModelHistoryValidateBeforeCall(String modelHistoryServerId, String modelHistoryID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getExperimentsForModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryID' is set
        if (modelHistoryID == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryID' when calling getExperimentsForModelHistory(Async)");
        }
        

        okhttp3.Call localVarCall = getExperimentsForModelHistoryCall(modelHistoryServerId, modelHistoryID, _callback);
        return localVarCall;

    }

    /**
     * Obtain all experiments for a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace (required)
     * @return List&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the experiment entities in a model history </td><td>  -  </td></tr>
     </table>
     */
    public List<ExperimentEntity> getExperimentsForModelHistory(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        ApiResponse<List<ExperimentEntity>> localVarResp = getExperimentsForModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
        return localVarResp.getData();
    }

    /**
     * Obtain all experiments for a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace (required)
     * @return ApiResponse&lt;List&lt;ExperimentEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the experiment entities in a model history </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ExperimentEntity>> getExperimentsForModelHistoryWithHttpInfo(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        okhttp3.Call localVarCall = getExperimentsForModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, null);
        Type localVarReturnType = new TypeToken<List<ExperimentEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtain all experiments for a model history / workspace (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the experiment entities in a model history </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExperimentsForModelHistoryAsync(String modelHistoryServerId, String modelHistoryID, final ApiCallback<List<ExperimentEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExperimentsForModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, _callback);
        Type localVarReturnType = new TypeToken<List<ExperimentEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobById
     * @param jobIdOrType Job ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job entity Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobByIdCall(Long jobIdOrType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/jobs/{jobIdOrType}"
            .replaceAll("\\{" + "jobIdOrType" + "\\}", localVarApiClient.escapeString(jobIdOrType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobByIdValidateBeforeCall(Long jobIdOrType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobIdOrType' is set
        if (jobIdOrType == null) {
            throw new ApiException("Missing the required parameter 'jobIdOrType' when calling getJobById(Async)");
        }
        

        okhttp3.Call localVarCall = getJobByIdCall(jobIdOrType, _callback);
        return localVarCall;

    }

    /**
     * Get a job by its ID
     * 
     * @param jobIdOrType Job ID (required)
     * @return JobEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job entity Object </td><td>  -  </td></tr>
     </table>
     */
    public JobEntity getJobById(Long jobIdOrType) throws ApiException {
        ApiResponse<JobEntity> localVarResp = getJobByIdWithHttpInfo(jobIdOrType);
        return localVarResp.getData();
    }

    /**
     * Get a job by its ID
     * 
     * @param jobIdOrType Job ID (required)
     * @return ApiResponse&lt;JobEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job entity Object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobEntity> getJobByIdWithHttpInfo(Long jobIdOrType) throws ApiException {
        okhttp3.Call localVarCall = getJobByIdValidateBeforeCall(jobIdOrType, null);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a job by its ID (asynchronously)
     * 
     * @param jobIdOrType Job ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job entity Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobByIdAsync(Long jobIdOrType, final ApiCallback<JobEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobByIdValidateBeforeCall(jobIdOrType, _callback);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLastEvaluation
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the last evaluation ran by the model. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastEvaluationCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/lastevaluation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLastEvaluationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getLastEvaluationCall(_callback);
        return localVarCall;

    }

    /**
     * Get the last evaluation specifications from the current model.
     * 
     * @return EvaluationResultsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the last evaluation ran by the model. </td><td>  -  </td></tr>
     </table>
     */
    public EvaluationResultsEntity getLastEvaluation() throws ApiException {
        ApiResponse<EvaluationResultsEntity> localVarResp = getLastEvaluationWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the last evaluation specifications from the current model.
     * 
     * @return ApiResponse&lt;EvaluationResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the last evaluation ran by the model. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EvaluationResultsEntity> getLastEvaluationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLastEvaluationValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the last evaluation specifications from the current model. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the last evaluation ran by the model. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastEvaluationAsync(final ApiCallback<EvaluationResultsEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLastEvaluationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EvaluationResultsEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMinibatch
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The minibatch entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMinibatchCall(String modelHistoryServerId, String minibatchId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "minibatchId" + "\\}", localVarApiClient.escapeString(minibatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMinibatchValidateBeforeCall(String modelHistoryServerId, String minibatchId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getMinibatch(Async)");
        }
        
        // verify the required parameter 'minibatchId' is set
        if (minibatchId == null) {
            throw new ApiException("Missing the required parameter 'minibatchId' when calling getMinibatch(Async)");
        }
        

        okhttp3.Call localVarCall = getMinibatchCall(modelHistoryServerId, minibatchId, _callback);
        return localVarCall;

    }

    /**
     * Gets a minibatch for the model
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @return MinibatchEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The minibatch entity </td><td>  -  </td></tr>
     </table>
     */
    public MinibatchEntity getMinibatch(String modelHistoryServerId, String minibatchId) throws ApiException {
        ApiResponse<MinibatchEntity> localVarResp = getMinibatchWithHttpInfo(modelHistoryServerId, minibatchId);
        return localVarResp.getData();
    }

    /**
     * Gets a minibatch for the model
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @return ApiResponse&lt;MinibatchEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The minibatch entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MinibatchEntity> getMinibatchWithHttpInfo(String modelHistoryServerId, String minibatchId) throws ApiException {
        okhttp3.Call localVarCall = getMinibatchValidateBeforeCall(modelHistoryServerId, minibatchId, null);
        Type localVarReturnType = new TypeToken<MinibatchEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a minibatch for the model (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param minibatchId The GUID of the minibatch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The minibatch entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMinibatchAsync(String modelHistoryServerId, String minibatchId, final ApiCallback<MinibatchEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMinibatchValidateBeforeCall(modelHistoryServerId, minibatchId, _callback);
        Type localVarReturnType = new TypeToken<MinibatchEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getModelDetails
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelDetailsCall(String deploymentId, String modelId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}/model/{modelId}"
            .replaceAll("\\{" + "deploymentId" + "\\}", localVarApiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "modelId" + "\\}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelDetailsValidateBeforeCall(String deploymentId, String modelId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling getModelDetails(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getModelDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getModelDetailsCall(deploymentId, modelId, _callback);
        return localVarCall;

    }

    /**
     * Get model details
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @return ModelEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model entity </td><td>  -  </td></tr>
     </table>
     */
    public ModelEntity getModelDetails(String deploymentId, String modelId) throws ApiException {
        ApiResponse<ModelEntity> localVarResp = getModelDetailsWithHttpInfo(deploymentId, modelId);
        return localVarResp.getData();
    }

    /**
     * Get model details
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @return ApiResponse&lt;ModelEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelEntity> getModelDetailsWithHttpInfo(String deploymentId, String modelId) throws ApiException {
        okhttp3.Call localVarCall = getModelDetailsValidateBeforeCall(deploymentId, modelId, null);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get model details (asynchronously)
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelDetailsAsync(String deploymentId, String modelId, final ApiCallback<ModelEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelDetailsValidateBeforeCall(deploymentId, modelId, _callback);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID GUID of the model history to get information of. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model history entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelHistoryCall(String modelHistoryServerId, String modelHistoryID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelHistoryID" + "\\}", localVarApiClient.escapeString(modelHistoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelHistoryValidateBeforeCall(String modelHistoryServerId, String modelHistoryID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryID' is set
        if (modelHistoryID == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryID' when calling getModelHistory(Async)");
        }
        

        okhttp3.Call localVarCall = getModelHistoryCall(modelHistoryServerId, modelHistoryID, _callback);
        return localVarCall;

    }

    /**
     * Gets a model history, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID GUID of the model history to get information of. (required)
     * @return ModelHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model history entity </td><td>  -  </td></tr>
     </table>
     */
    public ModelHistoryEntity getModelHistory(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        ApiResponse<ModelHistoryEntity> localVarResp = getModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID);
        return localVarResp.getData();
    }

    /**
     * Gets a model history, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID GUID of the model history to get information of. (required)
     * @return ApiResponse&lt;ModelHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model history entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelHistoryEntity> getModelHistoryWithHttpInfo(String modelHistoryServerId, String modelHistoryID) throws ApiException {
        okhttp3.Call localVarCall = getModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, null);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a model history, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID GUID of the model history to get information of. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model history entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelHistoryAsync(String modelHistoryServerId, String modelHistoryID, final ApiCallback<ModelHistoryEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, _callback);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getModelInstance
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get information of. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model instance entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelInstanceCall(String modelHistoryServerId, String modelInstanceID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelInstanceID" + "\\}", localVarApiClient.escapeString(modelInstanceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelInstanceValidateBeforeCall(String modelHistoryServerId, String modelInstanceID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getModelInstance(Async)");
        }
        
        // verify the required parameter 'modelInstanceID' is set
        if (modelInstanceID == null) {
            throw new ApiException("Missing the required parameter 'modelInstanceID' when calling getModelInstance(Async)");
        }
        

        okhttp3.Call localVarCall = getModelInstanceCall(modelHistoryServerId, modelInstanceID, _callback);
        return localVarCall;

    }

    /**
     * Gets a model instance, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get information of. (required)
     * @return ModelInstanceEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model instance entity </td><td>  -  </td></tr>
     </table>
     */
    public ModelInstanceEntity getModelInstance(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        ApiResponse<ModelInstanceEntity> localVarResp = getModelInstanceWithHttpInfo(modelHistoryServerId, modelInstanceID);
        return localVarResp.getData();
    }

    /**
     * Gets a model instance, given its ID
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get information of. (required)
     * @return ApiResponse&lt;ModelInstanceEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model instance entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInstanceEntity> getModelInstanceWithHttpInfo(String modelHistoryServerId, String modelInstanceID) throws ApiException {
        okhttp3.Call localVarCall = getModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceID, null);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a model instance, given its ID (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelInstanceID GUID of the model instance to get information of. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model instance entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelInstanceAsync(String modelHistoryServerId, String modelInstanceID, final ApiCallback<ModelInstanceEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelInstanceValidateBeforeCall(modelHistoryServerId, modelInstanceID, _callback);
        Type localVarReturnType = new TypeToken<ModelInstanceEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getModelsForExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the models for the specified experiment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelsForExperimentCall(String modelHistoryServerId, String experimentID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}/models"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "experimentID" + "\\}", localVarApiClient.escapeString(experimentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelsForExperimentValidateBeforeCall(String modelHistoryServerId, String experimentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling getModelsForExperiment(Async)");
        }
        
        // verify the required parameter 'experimentID' is set
        if (experimentID == null) {
            throw new ApiException("Missing the required parameter 'experimentID' when calling getModelsForExperiment(Async)");
        }
        

        okhttp3.Call localVarCall = getModelsForExperimentCall(modelHistoryServerId, experimentID, _callback);
        return localVarCall;

    }

    /**
     * Obtain a list of all the models for an experiment
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment (required)
     * @return List&lt;ModelInstanceEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the models for the specified experiment </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelInstanceEntity> getModelsForExperiment(String modelHistoryServerId, String experimentID) throws ApiException {
        ApiResponse<List<ModelInstanceEntity>> localVarResp = getModelsForExperimentWithHttpInfo(modelHistoryServerId, experimentID);
        return localVarResp.getData();
    }

    /**
     * Obtain a list of all the models for an experiment
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment (required)
     * @return ApiResponse&lt;List&lt;ModelInstanceEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the models for the specified experiment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelInstanceEntity>> getModelsForExperimentWithHttpInfo(String modelHistoryServerId, String experimentID) throws ApiException {
        okhttp3.Call localVarCall = getModelsForExperimentValidateBeforeCall(modelHistoryServerId, experimentID, null);
        Type localVarReturnType = new TypeToken<List<ModelInstanceEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtain a list of all the models for an experiment (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the models for the specified experiment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getModelsForExperimentAsync(String modelHistoryServerId, String experimentID, final ApiCallback<List<ModelInstanceEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelsForExperimentValidateBeforeCall(modelHistoryServerId, experimentID, _callback);
        Type localVarReturnType = new TypeToken<List<ModelInstanceEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceById
     * @param resourceId ID of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceByIdCall(Long resourceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/resource/{resourceId}"
            .replaceAll("\\{" + "resourceId" + "\\}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceByIdValidateBeforeCall(Long resourceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling getResourceById(Async)");
        }
        

        okhttp3.Call localVarCall = getResourceByIdCall(resourceId, _callback);
        return localVarCall;

    }

    /**
     * Get the resource with the specified resource ID
     * 
     * @param resourceId ID of the resource (required)
     * @return Resource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Object </td><td>  -  </td></tr>
     </table>
     */
    public Resource getResourceById(Long resourceId) throws ApiException {
        ApiResponse<Resource> localVarResp = getResourceByIdWithHttpInfo(resourceId);
        return localVarResp.getData();
    }

    /**
     * Get the resource with the specified resource ID
     * 
     * @param resourceId ID of the resource (required)
     * @return ApiResponse&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resource> getResourceByIdWithHttpInfo(Long resourceId) throws ApiException {
        okhttp3.Call localVarCall = getResourceByIdValidateBeforeCall(resourceId, null);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the resource with the specified resource ID (asynchronously)
     * 
     * @param resourceId ID of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceByIdAsync(Long resourceId, final ApiCallback<Resource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceByIdValidateBeforeCall(resourceId, _callback);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceBySubType
     * @param resourceSubType Subtype of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Resource Objects by specified subtype </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceBySubTypeCall(String resourceSubType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/resources/subtype/{resourceSubType}"
            .replaceAll("\\{" + "resourceSubType" + "\\}", localVarApiClient.escapeString(resourceSubType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceBySubTypeValidateBeforeCall(String resourceSubType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'resourceSubType' is set
        if (resourceSubType == null) {
            throw new ApiException("Missing the required parameter 'resourceSubType' when calling getResourceBySubType(Async)");
        }
        

        okhttp3.Call localVarCall = getResourceBySubTypeCall(resourceSubType, _callback);
        return localVarCall;

    }

    /**
     * Get all the resources with the specified resource subtype
     * 
     * @param resourceSubType Subtype of the resource (required)
     * @return List&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Resource Objects by specified subtype </td><td>  -  </td></tr>
     </table>
     */
    public List<Resource> getResourceBySubType(String resourceSubType) throws ApiException {
        ApiResponse<List<Resource>> localVarResp = getResourceBySubTypeWithHttpInfo(resourceSubType);
        return localVarResp.getData();
    }

    /**
     * Get all the resources with the specified resource subtype
     * 
     * @param resourceSubType Subtype of the resource (required)
     * @return ApiResponse&lt;List&lt;Resource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Resource Objects by specified subtype </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Resource>> getResourceBySubTypeWithHttpInfo(String resourceSubType) throws ApiException {
        okhttp3.Call localVarCall = getResourceBySubTypeValidateBeforeCall(resourceSubType, null);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the resources with the specified resource subtype (asynchronously)
     * 
     * @param resourceSubType Subtype of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Resource Objects by specified subtype </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceBySubTypeAsync(String resourceSubType, final ApiCallback<List<Resource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceBySubTypeValidateBeforeCall(resourceSubType, _callback);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceByType
     * @param resourceType Type of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Resource Objects by specified type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceByTypeCall(String resourceType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/resources/type/{resourceType}"
            .replaceAll("\\{" + "resourceType" + "\\}", localVarApiClient.escapeString(resourceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceByTypeValidateBeforeCall(String resourceType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling getResourceByType(Async)");
        }
        

        okhttp3.Call localVarCall = getResourceByTypeCall(resourceType, _callback);
        return localVarCall;

    }

    /**
     * Get all the resources with the specified resource type
     * 
     * @param resourceType Type of the resource (required)
     * @return List&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Resource Objects by specified type </td><td>  -  </td></tr>
     </table>
     */
    public List<Resource> getResourceByType(String resourceType) throws ApiException {
        ApiResponse<List<Resource>> localVarResp = getResourceByTypeWithHttpInfo(resourceType);
        return localVarResp.getData();
    }

    /**
     * Get all the resources with the specified resource type
     * 
     * @param resourceType Type of the resource (required)
     * @return ApiResponse&lt;List&lt;Resource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Resource Objects by specified type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Resource>> getResourceByTypeWithHttpInfo(String resourceType) throws ApiException {
        okhttp3.Call localVarCall = getResourceByTypeValidateBeforeCall(resourceType, null);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the resources with the specified resource type (asynchronously)
     * 
     * @param resourceType Type of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Resource Objects by specified type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceByTypeAsync(String resourceType, final ApiCallback<List<Resource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceByTypeValidateBeforeCall(resourceType, _callback);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceDetailsById
     * @param resourceId ID of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> One of the resource details object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceDetailsByIdCall(Long resourceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/details/{resourceId}"
            .replaceAll("\\{" + "resourceId" + "\\}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceDetailsByIdValidateBeforeCall(Long resourceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling getResourceDetailsById(Async)");
        }
        

        okhttp3.Call localVarCall = getResourceDetailsByIdCall(resourceId, _callback);
        return localVarCall;

    }

    /**
     * Get the resource details with the specified resource ID
     * Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
     * @param resourceId ID of the resource (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> One of the resource details object </td><td>  -  </td></tr>
     </table>
     */
    public Object getResourceDetailsById(Long resourceId) throws ApiException {
        ApiResponse<Object> localVarResp = getResourceDetailsByIdWithHttpInfo(resourceId);
        return localVarResp.getData();
    }

    /**
     * Get the resource details with the specified resource ID
     * Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
     * @param resourceId ID of the resource (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> One of the resource details object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getResourceDetailsByIdWithHttpInfo(Long resourceId) throws ApiException {
        okhttp3.Call localVarCall = getResourceDetailsByIdValidateBeforeCall(resourceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the resource details with the specified resource ID (asynchronously)
     * Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
     * @param resourceId ID of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> One of the resource details object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceDetailsByIdAsync(Long resourceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceDetailsByIdValidateBeforeCall(resourceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceGroupById
     * @param resourceGroupId ID of the resource group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Group Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceGroupByIdCall(Long resourceGroupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/group/{resourceGroupId}"
            .replaceAll("\\{" + "resourceGroupId" + "\\}", localVarApiClient.escapeString(resourceGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceGroupByIdValidateBeforeCall(Long resourceGroupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'resourceGroupId' is set
        if (resourceGroupId == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupId' when calling getResourceGroupById(Async)");
        }
        

        okhttp3.Call localVarCall = getResourceGroupByIdCall(resourceGroupId, _callback);
        return localVarCall;

    }

    /**
     * Get the resource group with the specified resource group ID
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @return ResourceGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Group Object </td><td>  -  </td></tr>
     </table>
     */
    public ResourceGroup getResourceGroupById(Long resourceGroupId) throws ApiException {
        ApiResponse<ResourceGroup> localVarResp = getResourceGroupByIdWithHttpInfo(resourceGroupId);
        return localVarResp.getData();
    }

    /**
     * Get the resource group with the specified resource group ID
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @return ApiResponse&lt;ResourceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Group Object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceGroup> getResourceGroupByIdWithHttpInfo(Long resourceGroupId) throws ApiException {
        okhttp3.Call localVarCall = getResourceGroupByIdValidateBeforeCall(resourceGroupId, null);
        Type localVarReturnType = new TypeToken<ResourceGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the resource group with the specified resource group ID (asynchronously)
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Group Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceGroupByIdAsync(Long resourceGroupId, final ApiCallback<ResourceGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceGroupByIdValidateBeforeCall(resourceGroupId, _callback);
        Type localVarReturnType = new TypeToken<ResourceGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceGroups
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Group Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceGroupsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceGroupsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getResourceGroupsCall(_callback);
        return localVarCall;

    }

    /**
     * Get a list of all the resource groups
     * 
     * @return List&lt;ResourceGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Group Object </td><td>  -  </td></tr>
     </table>
     */
    public List<ResourceGroup> getResourceGroups() throws ApiException {
        ApiResponse<List<ResourceGroup>> localVarResp = getResourceGroupsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of all the resource groups
     * 
     * @return ApiResponse&lt;List&lt;ResourceGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Group Object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ResourceGroup>> getResourceGroupsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getResourceGroupsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ResourceGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all the resource groups (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource Group Object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceGroupsAsync(final ApiCallback<List<ResourceGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceGroupsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ResourceGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResources
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Resource Objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourcesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getResourcesCall(_callback);
        return localVarCall;

    }

    /**
     * A list of all known/registered resources, of all types
     * 
     * @return List&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Resource Objects </td><td>  -  </td></tr>
     </table>
     */
    public List<Resource> getResources() throws ApiException {
        ApiResponse<List<Resource>> localVarResp = getResourcesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * A list of all known/registered resources, of all types
     * 
     * @return ApiResponse&lt;List&lt;Resource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Resource Objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Resource>> getResourcesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getResourcesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of all known/registered resources, of all types (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Resource Objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesAsync(final ApiCallback<List<Resource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourcesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourcesFromGroup
     * @param resourceGroupId ID of the resource group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of resources from a resource group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesFromGroupCall(Long resourceGroupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resources/group/{resourceGroupId}/resources"
            .replaceAll("\\{" + "resourceGroupId" + "\\}", localVarApiClient.escapeString(resourceGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourcesFromGroupValidateBeforeCall(Long resourceGroupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'resourceGroupId' is set
        if (resourceGroupId == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupId' when calling getResourcesFromGroup(Async)");
        }
        

        okhttp3.Call localVarCall = getResourcesFromGroupCall(resourceGroupId, _callback);
        return localVarCall;

    }

    /**
     * Get all resources from a resource group
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @return List&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of resources from a resource group </td><td>  -  </td></tr>
     </table>
     */
    public List<Resource> getResourcesFromGroup(Long resourceGroupId) throws ApiException {
        ApiResponse<List<Resource>> localVarResp = getResourcesFromGroupWithHttpInfo(resourceGroupId);
        return localVarResp.getData();
    }

    /**
     * Get all resources from a resource group
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @return ApiResponse&lt;List&lt;Resource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of resources from a resource group </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Resource>> getResourcesFromGroupWithHttpInfo(Long resourceGroupId) throws ApiException {
        okhttp3.Call localVarCall = getResourcesFromGroupValidateBeforeCall(resourceGroupId, null);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all resources from a resource group (asynchronously)
     * 
     * @param resourceGroupId ID of the resource group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of resources from a resource group </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesFromGroupAsync(Long resourceGroupId, final ApiCallback<List<Resource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourcesFromGroupValidateBeforeCall(resourceGroupId, _callback);
        Type localVarReturnType = new TypeToken<List<Resource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoles
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received all roles. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRolesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/security/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRolesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getRolesCall(_callback);
        return localVarCall;

    }

    /**
     * Get all roles.
     * 
     * @return List&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received all roles. </td><td>  -  </td></tr>
     </table>
     */
    public List<Role> getRoles() throws ApiException {
        ApiResponse<List<Role>> localVarResp = getRolesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all roles.
     * 
     * @return ApiResponse&lt;List&lt;Role&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received all roles. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Role>> getRolesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRolesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all roles. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received all roles. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRolesAsync(final ApiCallback<List<Role>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRolesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param userId User&#39;s ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received the user details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/user/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser(Async)");
        }
        

        okhttp3.Call localVarCall = getUserCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Get a user by user ID
     * 
     * @param userId User&#39;s ID (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received the user details </td><td>  -  </td></tr>
     </table>
     */
    public User getUser(String userId) throws ApiException {
        ApiResponse<User> localVarResp = getUserWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get a user by user ID
     * 
     * @param userId User&#39;s ID (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received the user details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user by user ID (asynchronously)
     * 
     * @param userId User&#39;s ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received the user details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserAuthTokens
     * @param userId User&#39;s ID (required)
     * @param onlyValid True if you only want the valid tokens. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received the user auth tokens. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAuthTokensCall(String userId, Boolean onlyValid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/auth/{userId}/tokens"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (onlyValid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyValid", onlyValid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAuthTokensValidateBeforeCall(String userId, Boolean onlyValid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserAuthTokens(Async)");
        }
        

        okhttp3.Call localVarCall = getUserAuthTokensCall(userId, onlyValid, _callback);
        return localVarCall;

    }

    /**
     * Get auth tokens for a user.
     * 
     * @param userId User&#39;s ID (required)
     * @param onlyValid True if you only want the valid tokens. (optional)
     * @return List&lt;Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received the user auth tokens. </td><td>  -  </td></tr>
     </table>
     */
    public List<Token> getUserAuthTokens(String userId, Boolean onlyValid) throws ApiException {
        ApiResponse<List<Token>> localVarResp = getUserAuthTokensWithHttpInfo(userId, onlyValid);
        return localVarResp.getData();
    }

    /**
     * Get auth tokens for a user.
     * 
     * @param userId User&#39;s ID (required)
     * @param onlyValid True if you only want the valid tokens. (optional)
     * @return ApiResponse&lt;List&lt;Token&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received the user auth tokens. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Token>> getUserAuthTokensWithHttpInfo(String userId, Boolean onlyValid) throws ApiException {
        okhttp3.Call localVarCall = getUserAuthTokensValidateBeforeCall(userId, onlyValid, null);
        Type localVarReturnType = new TypeToken<List<Token>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get auth tokens for a user. (asynchronously)
     * 
     * @param userId User&#39;s ID (required)
     * @param onlyValid True if you only want the valid tokens. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received the user auth tokens. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAuthTokensAsync(String userId, Boolean onlyValid, final ApiCallback<List<Token>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAuthTokensValidateBeforeCall(userId, onlyValid, _callback);
        Type localVarReturnType = new TypeToken<List<Token>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received all users. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/security/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getUsersCall(_callback);
        return localVarCall;

    }

    /**
     * Get all users.
     * 
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received all users. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getUsers() throws ApiException {
        ApiResponse<List<User>> localVarResp = getUsersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all users.
     * 
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received all users. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getUsersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all users. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully received all users. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersAsync(final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for isTraining
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the model is currently being trained or not. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call isTrainingCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/istraining";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call isTrainingValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = isTrainingCall(_callback);
        return localVarCall;

    }

    /**
     * Get the retraining status
     * 
     * @return RetrainingStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the model is currently being trained or not. </td><td>  -  </td></tr>
     </table>
     */
    public RetrainingStatus isTraining() throws ApiException {
        ApiResponse<RetrainingStatus> localVarResp = isTrainingWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the retraining status
     * 
     * @return ApiResponse&lt;RetrainingStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the model is currently being trained or not. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrainingStatus> isTrainingWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = isTrainingValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RetrainingStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the retraining status (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns whether the model is currently being trained or not. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call isTrainingAsync(final ApiCallback<RetrainingStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = isTrainingValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RetrainingStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jsonarray
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating array prediction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jsonarrayCall(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jsonarrayValidateBeforeCall(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling jsonarray(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling jsonarray(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling jsonarray(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling jsonarray(Async)");
        }
        

        okhttp3.Call localVarCall = jsonarrayCall(deploymentName, versionName, modelName, body, _callback);
        return localVarCall;

    }

    /**
     * Run inference on the input and returns it as a JsonArrayResponse
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @return JsonArrayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating array prediction </td><td>  -  </td></tr>
     </table>
     */
    public JsonArrayResponse jsonarray(String deploymentName, String versionName, String modelName, Prediction body) throws ApiException {
        ApiResponse<JsonArrayResponse> localVarResp = jsonarrayWithHttpInfo(deploymentName, versionName, modelName, body);
        return localVarResp.getData();
    }

    /**
     * Run inference on the input and returns it as a JsonArrayResponse
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @return ApiResponse&lt;JsonArrayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating array prediction </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonArrayResponse> jsonarrayWithHttpInfo(String deploymentName, String versionName, String modelName, Prediction body) throws ApiException {
        okhttp3.Call localVarCall = jsonarrayValidateBeforeCall(deploymentName, versionName, modelName, body, null);
        Type localVarReturnType = new TypeToken<JsonArrayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run inference on the input and returns it as a JsonArrayResponse (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating array prediction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jsonarrayAsync(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback<JsonArrayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jsonarrayValidateBeforeCall(deploymentName, versionName, modelName, body, _callback);
        Type localVarReturnType = new TypeToken<JsonArrayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for knn
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knnCall(String deploymentName, String versionName, String knnName, NearestNeighborRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "knnName" + "\\}", localVarApiClient.escapeString(knnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call knnValidateBeforeCall(String deploymentName, String versionName, String knnName, NearestNeighborRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling knn(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling knn(Async)");
        }
        
        // verify the required parameter 'knnName' is set
        if (knnName == null) {
            throw new ApiException("Missing the required parameter 'knnName' when calling knn(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling knn(Async)");
        }
        

        okhttp3.Call localVarCall = knnCall(deploymentName, versionName, knnName, body, _callback);
        return localVarCall;

    }

    /**
     * Runs knn on the given index with the given k
     * Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body  (required)
     * @return NearestNeighborsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public NearestNeighborsResults knn(String deploymentName, String versionName, String knnName, NearestNeighborRequest body) throws ApiException {
        ApiResponse<NearestNeighborsResults> localVarResp = knnWithHttpInfo(deploymentName, versionName, knnName, body);
        return localVarResp.getData();
    }

    /**
     * Runs knn on the given index with the given k
     * Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body  (required)
     * @return ApiResponse&lt;NearestNeighborsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NearestNeighborsResults> knnWithHttpInfo(String deploymentName, String versionName, String knnName, NearestNeighborRequest body) throws ApiException {
        okhttp3.Call localVarCall = knnValidateBeforeCall(deploymentName, versionName, knnName, body, null);
        Type localVarReturnType = new TypeToken<NearestNeighborsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs knn on the given index with the given k (asynchronously)
     * Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knnAsync(String deploymentName, String versionName, String knnName, NearestNeighborRequest body, final ApiCallback<NearestNeighborsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = knnValidateBeforeCall(deploymentName, versionName, knnName, body, _callback);
        Type localVarReturnType = new TypeToken<NearestNeighborsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for knnnew
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body The input NDArray (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knnnewCall(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "knnName" + "\\}", localVarApiClient.escapeString(knnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call knnnewValidateBeforeCall(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling knnnew(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling knnnew(Async)");
        }
        
        // verify the required parameter 'knnName' is set
        if (knnName == null) {
            throw new ApiException("Missing the required parameter 'knnName' when calling knnnew(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling knnnew(Async)");
        }
        

        okhttp3.Call localVarCall = knnnewCall(deploymentName, versionName, knnName, body, _callback);
        return localVarCall;

    }

    /**
     * Run a k nearest neighbors search on a NEW data point
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body The input NDArray (required)
     * @return NearestNeighborsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public NearestNeighborsResults knnnew(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body) throws ApiException {
        ApiResponse<NearestNeighborsResults> localVarResp = knnnewWithHttpInfo(deploymentName, versionName, knnName, body);
        return localVarResp.getData();
    }

    /**
     * Run a k nearest neighbors search on a NEW data point
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body The input NDArray (required)
     * @return ApiResponse&lt;NearestNeighborsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NearestNeighborsResults> knnnewWithHttpInfo(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body) throws ApiException {
        okhttp3.Call localVarCall = knnnewValidateBeforeCall(deploymentName, versionName, knnName, body, null);
        Type localVarReturnType = new TypeToken<NearestNeighborsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run a k nearest neighbors search on a NEW data point (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param knnName ID or name of the deployed knn (required)
     * @param body The input NDArray (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knnnewAsync(String deploymentName, String versionName, String knnName, Base64NDArrayBodyKNN body, final ApiCallback<NearestNeighborsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = knnnewValidateBeforeCall(deploymentName, versionName, knnName, body, _callback);
        Type localVarReturnType = new TypeToken<NearestNeighborsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllExperiments
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the experiment entities. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllExperimentsCall(String modelHistoryServerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiments"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllExperimentsValidateBeforeCall(String modelHistoryServerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling listAllExperiments(Async)");
        }
        

        okhttp3.Call localVarCall = listAllExperimentsCall(modelHistoryServerId, _callback);
        return localVarCall;

    }

    /**
     * List all of the experiments in every model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @return List&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the experiment entities. </td><td>  -  </td></tr>
     </table>
     */
    public List<ExperimentEntity> listAllExperiments(String modelHistoryServerId) throws ApiException {
        ApiResponse<List<ExperimentEntity>> localVarResp = listAllExperimentsWithHttpInfo(modelHistoryServerId);
        return localVarResp.getData();
    }

    /**
     * List all of the experiments in every model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @return ApiResponse&lt;List&lt;ExperimentEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the experiment entities. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ExperimentEntity>> listAllExperimentsWithHttpInfo(String modelHistoryServerId) throws ApiException {
        okhttp3.Call localVarCall = listAllExperimentsValidateBeforeCall(modelHistoryServerId, null);
        Type localVarReturnType = new TypeToken<List<ExperimentEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all of the experiments in every model history / workspace (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the experiment entities. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllExperimentsAsync(String modelHistoryServerId, final ApiCallback<List<ExperimentEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllExperimentsValidateBeforeCall(modelHistoryServerId, _callback);
        Type localVarReturnType = new TypeToken<List<ExperimentEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logfilepath
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the retrieved log file path </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error retrieving log file path </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logfilepathCall(String deploymentName, String versionName, String modelName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logfilepathValidateBeforeCall(String deploymentName, String versionName, String modelName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling logfilepath(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling logfilepath(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling logfilepath(Async)");
        }
        

        okhttp3.Call localVarCall = logfilepathCall(deploymentName, versionName, modelName, _callback);
        return localVarCall;

    }

    /**
     * Get logs file path
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the retrieved log file path </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error retrieving log file path </td><td>  -  </td></tr>
     </table>
     */
    public String logfilepath(String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<String> localVarResp = logfilepathWithHttpInfo(deploymentName, versionName, modelName);
        return localVarResp.getData();
    }

    /**
     * Get logs file path
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the retrieved log file path </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error retrieving log file path </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> logfilepathWithHttpInfo(String deploymentName, String versionName, String modelName) throws ApiException {
        okhttp3.Call localVarCall = logfilepathValidateBeforeCall(deploymentName, versionName, modelName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get logs file path (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the retrieved log file path </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error retrieving log file path </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logfilepathAsync(String deploymentName, String versionName, String modelName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = logfilepathValidateBeforeCall(deploymentName, versionName, modelName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for login
     * @param loginRequest Login credentials. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid credentials </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginCall(LoginRequest loginRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = loginRequest;

        // create path and map variables
        String localVarPath = "/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginValidateBeforeCall(LoginRequest loginRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loginRequest' is set
        if (loginRequest == null) {
            throw new ApiException("Missing the required parameter 'loginRequest' when calling login(Async)");
        }
        

        okhttp3.Call localVarCall = loginCall(loginRequest, _callback);
        return localVarCall;

    }

    /**
     * Post JSON credentials and obtain a JWT authorization token.
     * 
     * @param loginRequest Login credentials. (required)
     * @return LoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid credentials </td><td>  -  </td></tr>
     </table>
     */
    public LoginResponse login(LoginRequest loginRequest) throws ApiException {
        ApiResponse<LoginResponse> localVarResp = loginWithHttpInfo(loginRequest);
        return localVarResp.getData();
    }

    /**
     * Post JSON credentials and obtain a JWT authorization token.
     * 
     * @param loginRequest Login credentials. (required)
     * @return ApiResponse&lt;LoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid credentials </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginResponse> loginWithHttpInfo(LoginRequest loginRequest) throws ApiException {
        okhttp3.Call localVarCall = loginValidateBeforeCall(loginRequest, null);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post JSON credentials and obtain a JWT authorization token. (asynchronously)
     * 
     * @param loginRequest Login credentials. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid credentials </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginAsync(LoginRequest loginRequest, final ApiCallback<LoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginValidateBeforeCall(loginRequest, _callback);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logs
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param logRequest The log object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Logs obtained successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error retrieving logs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsCall(String deploymentName, String versionName, String modelName, LogRequest logRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = logRequest;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logs"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsValidateBeforeCall(String deploymentName, String versionName, String modelName, LogRequest logRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling logs(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling logs(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling logs(Async)");
        }
        
        // verify the required parameter 'logRequest' is set
        if (logRequest == null) {
            throw new ApiException("Missing the required parameter 'logRequest' when calling logs(Async)");
        }
        

        okhttp3.Call localVarCall = logsCall(deploymentName, versionName, modelName, logRequest, _callback);
        return localVarCall;

    }

    /**
     * Get logs
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param logRequest The log object (required)
     * @return LogBatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Logs obtained successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error retrieving logs </td><td>  -  </td></tr>
     </table>
     */
    public LogBatch logs(String deploymentName, String versionName, String modelName, LogRequest logRequest) throws ApiException {
        ApiResponse<LogBatch> localVarResp = logsWithHttpInfo(deploymentName, versionName, modelName, logRequest);
        return localVarResp.getData();
    }

    /**
     * Get logs
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param logRequest The log object (required)
     * @return ApiResponse&lt;LogBatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Logs obtained successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error retrieving logs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogBatch> logsWithHttpInfo(String deploymentName, String versionName, String modelName, LogRequest logRequest) throws ApiException {
        okhttp3.Call localVarCall = logsValidateBeforeCall(deploymentName, versionName, modelName, logRequest, null);
        Type localVarReturnType = new TypeToken<LogBatch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get logs (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param logRequest The log object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Logs obtained successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error retrieving logs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAsync(String deploymentName, String versionName, String modelName, LogRequest logRequest, final ApiCallback<LogBatch> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsValidateBeforeCall(deploymentName, versionName, modelName, logRequest, _callback);
        Type localVarReturnType = new TypeToken<LogBatch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metaGet
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The meta data details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metaGetCall(String deploymentName, String versionName, String modelName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metaGetValidateBeforeCall(String deploymentName, String versionName, String modelName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling metaGet(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling metaGet(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling metaGet(Async)");
        }
        

        okhttp3.Call localVarCall = metaGetCall(deploymentName, versionName, modelName, _callback);
        return localVarCall;

    }

    /**
     * this method can be used to get the meta data for the current model which set to the server
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The meta data details </td><td>  -  </td></tr>
     </table>
     */
    public Object metaGet(String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<Object> localVarResp = metaGetWithHttpInfo(deploymentName, versionName, modelName);
        return localVarResp.getData();
    }

    /**
     * this method can be used to get the meta data for the current model which set to the server
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The meta data details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> metaGetWithHttpInfo(String deploymentName, String versionName, String modelName) throws ApiException {
        okhttp3.Call localVarCall = metaGetValidateBeforeCall(deploymentName, versionName, modelName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * this method can be used to get the meta data for the current model which set to the server (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The meta data details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metaGetAsync(String deploymentName, String versionName, String modelName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = metaGetValidateBeforeCall(deploymentName, versionName, modelName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metaPost
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60; (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body the meta data object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the meta data object that was set </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metaPostCall(String contentType, String deploymentName, String versionName, String modelName, String body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metaPostValidateBeforeCall(String contentType, String deploymentName, String versionName, String modelName, String body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling metaPost(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling metaPost(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling metaPost(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling metaPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling metaPost(Async)");
        }
        

        okhttp3.Call localVarCall = metaPostCall(contentType, deploymentName, versionName, modelName, body, _callback);
        return localVarCall;

    }

    /**
     * This method can be used to set meta data for the current model which is set to the server
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60; (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body the meta data object (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the meta data object that was set </td><td>  -  </td></tr>
     </table>
     */
    public Object metaPost(String contentType, String deploymentName, String versionName, String modelName, String body) throws ApiException {
        ApiResponse<Object> localVarResp = metaPostWithHttpInfo(contentType, deploymentName, versionName, modelName, body);
        return localVarResp.getData();
    }

    /**
     * This method can be used to set meta data for the current model which is set to the server
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60; (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body the meta data object (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the meta data object that was set </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> metaPostWithHttpInfo(String contentType, String deploymentName, String versionName, String modelName, String body) throws ApiException {
        okhttp3.Call localVarCall = metaPostValidateBeforeCall(contentType, deploymentName, versionName, modelName, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This method can be used to set meta data for the current model which is set to the server (asynchronously)
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60; (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body the meta data object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the meta data object that was set </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metaPostAsync(String contentType, String deploymentName, String versionName, String modelName, String body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = metaPostValidateBeforeCall(contentType, deploymentName, versionName, modelName, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelStateChange
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the model state object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the model entity with its state changed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelStateChangeCall(String deploymentId, String modelId, SetState body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}/model/{modelId}/state"
            .replaceAll("\\{" + "deploymentId" + "\\}", localVarApiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "modelId" + "\\}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelStateChangeValidateBeforeCall(String deploymentId, String modelId, SetState body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling modelStateChange(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelStateChange(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling modelStateChange(Async)");
        }
        

        okhttp3.Call localVarCall = modelStateChangeCall(deploymentId, modelId, body, _callback);
        return localVarCall;

    }

    /**
     * Modify the state (start/stop) of a deployed model
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the model state object (required)
     * @return ModelEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the model entity with its state changed </td><td>  -  </td></tr>
     </table>
     */
    public ModelEntity modelStateChange(String deploymentId, String modelId, SetState body) throws ApiException {
        ApiResponse<ModelEntity> localVarResp = modelStateChangeWithHttpInfo(deploymentId, modelId, body);
        return localVarResp.getData();
    }

    /**
     * Modify the state (start/stop) of a deployed model
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the model state object (required)
     * @return ApiResponse&lt;ModelEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the model entity with its state changed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelEntity> modelStateChangeWithHttpInfo(String deploymentId, String modelId, SetState body) throws ApiException {
        okhttp3.Call localVarCall = modelStateChangeValidateBeforeCall(deploymentId, modelId, body, null);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify the state (start/stop) of a deployed model (asynchronously)
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the model state object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the model entity with its state changed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelStateChangeAsync(String deploymentId, String modelId, SetState body, final ApiCallback<ModelEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelStateChangeValidateBeforeCall(deploymentId, modelId, body, _callback);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for models
     * @param deploymentId ID deployment group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved model list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelsCall(String deploymentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}/models"
            .replaceAll("\\{" + "deploymentId" + "\\}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsValidateBeforeCall(String deploymentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling models(Async)");
        }
        

        okhttp3.Call localVarCall = modelsCall(deploymentId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a list of all the deployed models given a deployment id
     * 
     * @param deploymentId ID deployment group (required)
     * @return List&lt;ModelEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved model list </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelEntity> models(String deploymentId) throws ApiException {
        ApiResponse<List<ModelEntity>> localVarResp = modelsWithHttpInfo(deploymentId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of all the deployed models given a deployment id
     * 
     * @param deploymentId ID deployment group (required)
     * @return ApiResponse&lt;List&lt;ModelEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved model list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelEntity>> modelsWithHttpInfo(String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = modelsValidateBeforeCall(deploymentId, null);
        Type localVarReturnType = new TypeToken<List<ModelEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of all the deployed models given a deployment id (asynchronously)
     * 
     * @param deploymentId ID deployment group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieved model list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelsAsync(String deploymentId, final ApiCallback<List<ModelEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsValidateBeforeCall(deploymentId, _callback);
        Type localVarReturnType = new TypeToken<List<ModelEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelset
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to upload (.pb file) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model set successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error setting model </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelsetCall(String deploymentName, String versionName, String modelName, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsetValidateBeforeCall(String deploymentName, String versionName, String modelName, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling modelset(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling modelset(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling modelset(Async)");
        }
        

        okhttp3.Call localVarCall = modelsetCall(deploymentName, versionName, modelName, file, _callback);
        return localVarCall;

    }

    /**
     * Set the model to be served
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to upload (.pb file) (optional)
     * @return ModelStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model set successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error setting model </td><td>  -  </td></tr>
     </table>
     */
    public ModelStatus modelset(String deploymentName, String versionName, String modelName, File file) throws ApiException {
        ApiResponse<ModelStatus> localVarResp = modelsetWithHttpInfo(deploymentName, versionName, modelName, file);
        return localVarResp.getData();
    }

    /**
     * Set the model to be served
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to upload (.pb file) (optional)
     * @return ApiResponse&lt;ModelStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model set successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error setting model </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelStatus> modelsetWithHttpInfo(String deploymentName, String versionName, String modelName, File file) throws ApiException {
        okhttp3.Call localVarCall = modelsetValidateBeforeCall(deploymentName, versionName, modelName, file, null);
        Type localVarReturnType = new TypeToken<ModelStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the model to be served (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to upload (.pb file) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model set successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error setting model </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelsetAsync(String deploymentName, String versionName, String modelName, File file, final ApiCallback<ModelStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsetValidateBeforeCall(deploymentName, versionName, modelName, file, _callback);
        Type localVarReturnType = new TypeToken<ModelStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelupdate
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to update with (.pb file) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model updated successfully or model update failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error updating model </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelupdateCall(String deploymentName, String versionName, String modelName, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelupdateValidateBeforeCall(String deploymentName, String versionName, String modelName, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling modelupdate(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling modelupdate(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling modelupdate(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling modelupdate(Async)");
        }
        

        okhttp3.Call localVarCall = modelupdateCall(deploymentName, versionName, modelName, file, _callback);
        return localVarCall;

    }

    /**
     * Update the model to be served
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to update with (.pb file) (required)
     * @return ModelStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model updated successfully or model update failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error updating model </td><td>  -  </td></tr>
     </table>
     */
    public ModelStatus modelupdate(String deploymentName, String versionName, String modelName, File file) throws ApiException {
        ApiResponse<ModelStatus> localVarResp = modelupdateWithHttpInfo(deploymentName, versionName, modelName, file);
        return localVarResp.getData();
    }

    /**
     * Update the model to be served
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to update with (.pb file) (required)
     * @return ApiResponse&lt;ModelStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model updated successfully or model update failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error updating model </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelStatus> modelupdateWithHttpInfo(String deploymentName, String versionName, String modelName, File file) throws ApiException {
        okhttp3.Call localVarCall = modelupdateValidateBeforeCall(deploymentName, versionName, modelName, file, null);
        Type localVarReturnType = new TypeToken<ModelStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the model to be served (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to update with (.pb file) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model updated successfully or model update failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error updating model </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelupdateAsync(String deploymentName, String versionName, String modelName, File file, final ApiCallback<ModelStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelupdateValidateBeforeCall(deploymentName, versionName, modelName, file, _callback);
        Type localVarReturnType = new TypeToken<ModelStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for multiclassify
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call multiclassifyCall(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call multiclassifyValidateBeforeCall(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling multiclassify(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling multiclassify(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling multiclassify(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling multiclassify(Async)");
        }
        

        okhttp3.Call localVarCall = multiclassifyCall(deploymentName, versionName, modelName, body, _callback);
        return localVarCall;

    }

    /**
     * Represents all of the labels for a given classification
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @return MultiClassClassificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public MultiClassClassificationResult multiclassify(String deploymentName, String versionName, String modelName, Prediction body) throws ApiException {
        ApiResponse<MultiClassClassificationResult> localVarResp = multiclassifyWithHttpInfo(deploymentName, versionName, modelName, body);
        return localVarResp.getData();
    }

    /**
     * Represents all of the labels for a given classification
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @return ApiResponse&lt;MultiClassClassificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultiClassClassificationResult> multiclassifyWithHttpInfo(String deploymentName, String versionName, String modelName, Prediction body) throws ApiException {
        okhttp3.Call localVarCall = multiclassifyValidateBeforeCall(deploymentName, versionName, modelName, body, null);
        Type localVarReturnType = new TypeToken<MultiClassClassificationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Represents all of the labels for a given classification (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call multiclassifyAsync(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback<MultiClassClassificationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = multiclassifyValidateBeforeCall(deploymentName, versionName, modelName, body, _callback);
        Type localVarReturnType = new TypeToken<MultiClassClassificationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for multipredict
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The multiple input arrays with mask inputs to run inferences on (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating prediction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call multipredictCall(String deploymentName, String versionName, String modelName, MultiPredictRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call multipredictValidateBeforeCall(String deploymentName, String versionName, String modelName, MultiPredictRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling multipredict(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling multipredict(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling multipredict(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling multipredict(Async)");
        }
        

        okhttp3.Call localVarCall = multipredictCall(deploymentName, versionName, modelName, body, _callback);
        return localVarCall;

    }

    /**
     * Get the output from the network, based on the given INDArray[] input
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The multiple input arrays with mask inputs to run inferences on (required)
     * @return MultiPredictResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating prediction </td><td>  -  </td></tr>
     </table>
     */
    public MultiPredictResponse multipredict(String deploymentName, String versionName, String modelName, MultiPredictRequest body) throws ApiException {
        ApiResponse<MultiPredictResponse> localVarResp = multipredictWithHttpInfo(deploymentName, versionName, modelName, body);
        return localVarResp.getData();
    }

    /**
     * Get the output from the network, based on the given INDArray[] input
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The multiple input arrays with mask inputs to run inferences on (required)
     * @return ApiResponse&lt;MultiPredictResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating prediction </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultiPredictResponse> multipredictWithHttpInfo(String deploymentName, String versionName, String modelName, MultiPredictRequest body) throws ApiException {
        okhttp3.Call localVarCall = multipredictValidateBeforeCall(deploymentName, versionName, modelName, body, null);
        Type localVarReturnType = new TypeToken<MultiPredictResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the output from the network, based on the given INDArray[] input (asynchronously)
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The multiple input arrays with mask inputs to run inferences on (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating prediction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call multipredictAsync(String deploymentName, String versionName, String modelName, MultiPredictRequest body, final ApiCallback<MultiPredictResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = multipredictValidateBeforeCall(deploymentName, versionName, modelName, body, _callback);
        Type localVarReturnType = new TypeToken<MultiPredictResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for multipredictimage
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The image file to run the prediction on (required)
     * @param id The id of the request (could be self generated) (required)
     * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating prediction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call multipredictimageCall(String deploymentName, String versionName, String modelName, File file, String id, Boolean needsPreprocessing, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (needsPreprocessing != null) {
            localVarFormParams.put("needs_preprocessing", needsPreprocessing);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call multipredictimageValidateBeforeCall(String deploymentName, String versionName, String modelName, File file, String id, Boolean needsPreprocessing, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'needsPreprocessing' is set
        if (needsPreprocessing == null) {
            throw new ApiException("Missing the required parameter 'needsPreprocessing' when calling multipredictimage(Async)");
        }
        

        okhttp3.Call localVarCall = multipredictimageCall(deploymentName, versionName, modelName, file, id, needsPreprocessing, _callback);
        return localVarCall;

    }

    /**
     * Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The image file to run the prediction on (required)
     * @param id The id of the request (could be self generated) (required)
     * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) (required)
     * @return MultiPredictResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating prediction </td><td>  -  </td></tr>
     </table>
     */
    public MultiPredictResponse multipredictimage(String deploymentName, String versionName, String modelName, File file, String id, Boolean needsPreprocessing) throws ApiException {
        ApiResponse<MultiPredictResponse> localVarResp = multipredictimageWithHttpInfo(deploymentName, versionName, modelName, file, id, needsPreprocessing);
        return localVarResp.getData();
    }

    /**
     * Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The image file to run the prediction on (required)
     * @param id The id of the request (could be self generated) (required)
     * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) (required)
     * @return ApiResponse&lt;MultiPredictResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating prediction </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultiPredictResponse> multipredictimageWithHttpInfo(String deploymentName, String versionName, String modelName, File file, String id, Boolean needsPreprocessing) throws ApiException {
        okhttp3.Call localVarCall = multipredictimageValidateBeforeCall(deploymentName, versionName, modelName, file, id, needsPreprocessing, null);
        Type localVarReturnType = new TypeToken<MultiPredictResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the output from the network using the given image file using the /multipredict endpoint&#39;s method (asynchronously)
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The image file to run the prediction on (required)
     * @param id The id of the request (could be self generated) (required)
     * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating prediction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call multipredictimageAsync(String deploymentName, String versionName, String modelName, File file, String id, Boolean needsPreprocessing, final ApiCallback<MultiPredictResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = multipredictimageValidateBeforeCall(deploymentName, versionName, modelName, file, id, needsPreprocessing, _callback);
        Type localVarReturnType = new TypeToken<MultiPredictResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for numRevisions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the number of revisions for retraining of the model. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numRevisionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/numrevisions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call numRevisionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = numRevisionsCall(_callback);
        return localVarCall;

    }

    /**
     * Gets the number of retrained models written with retraining.
     * 
     * @return RevisionsWritten
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the number of revisions for retraining of the model. </td><td>  -  </td></tr>
     </table>
     */
    public RevisionsWritten numRevisions() throws ApiException {
        ApiResponse<RevisionsWritten> localVarResp = numRevisionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets the number of retrained models written with retraining.
     * 
     * @return ApiResponse&lt;RevisionsWritten&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the number of revisions for retraining of the model. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RevisionsWritten> numRevisionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = numRevisionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RevisionsWritten>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the number of retrained models written with retraining. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the number of revisions for retraining of the model. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call numRevisionsAsync(final ApiCallback<RevisionsWritten> _callback) throws ApiException {

        okhttp3.Call localVarCall = numRevisionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RevisionsWritten>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predict
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictCall(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predict"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictValidateBeforeCall(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling predict(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling predict(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling predict(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling predict(Async)");
        }
        

        okhttp3.Call localVarCall = predictCall(deploymentName, versionName, modelName, body, _callback);
        return localVarCall;

    }

    /**
     * Run inference on the input array.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @return Prediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public Prediction predict(String deploymentName, String versionName, String modelName, Prediction body) throws ApiException {
        ApiResponse<Prediction> localVarResp = predictWithHttpInfo(deploymentName, versionName, modelName, body);
        return localVarResp.getData();
    }

    /**
     * Run inference on the input array.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @return ApiResponse&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prediction> predictWithHttpInfo(String deploymentName, String versionName, String modelName, Prediction body) throws ApiException {
        okhttp3.Call localVarCall = predictValidateBeforeCall(deploymentName, versionName, modelName, body, null);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run inference on the input array. (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input NDArray (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Invalid deployment or model name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictAsync(String deploymentName, String versionName, String modelName, Prediction body, final ApiCallback<Prediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictValidateBeforeCall(deploymentName, versionName, modelName, body, _callback);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictError
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation Operation to perform on the input data. (required)
     * @param inputType Type of the input data. (required)
     * @param inputData  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction along with the skipped, invalid data rows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictErrorCall(String contentType, String operation, String inputType, String inputData, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inputData;

        // create path and map variables
        String localVarPath = "/{operation}/{inputType}/error"
            .replaceAll("\\{" + "operation" + "\\}", localVarApiClient.escapeString(operation.toString()))
            .replaceAll("\\{" + "inputType" + "\\}", localVarApiClient.escapeString(inputType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictErrorValidateBeforeCall(String contentType, String operation, String inputType, String inputData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling predictError(Async)");
        }
        
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling predictError(Async)");
        }
        
        // verify the required parameter 'inputType' is set
        if (inputType == null) {
            throw new ApiException("Missing the required parameter 'inputType' when calling predictError(Async)");
        }
        

        okhttp3.Call localVarCall = predictErrorCall(contentType, operation, inputType, inputData, _callback);
        return localVarCall;

    }

    /**
     * Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
     * These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation Operation to perform on the input data. (required)
     * @param inputType Type of the input data. (required)
     * @param inputData  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction along with the skipped, invalid data rows </td><td>  -  </td></tr>
     </table>
     */
    public void predictError(String contentType, String operation, String inputType, String inputData) throws ApiException {
        predictErrorWithHttpInfo(contentType, operation, inputType, inputData);
    }

    /**
     * Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
     * These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation Operation to perform on the input data. (required)
     * @param inputType Type of the input data. (required)
     * @param inputData  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction along with the skipped, invalid data rows </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> predictErrorWithHttpInfo(String contentType, String operation, String inputType, String inputData) throws ApiException {
        okhttp3.Call localVarCall = predictErrorValidateBeforeCall(contentType, operation, inputType, inputData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified. (asynchronously)
     * These \&quot;error\&quot; endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation Operation to perform on the input data. (required)
     * @param inputType Type of the input data. (required)
     * @param inputData  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction along with the skipped, invalid data rows </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictErrorAsync(String contentType, String operation, String inputType, String inputData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictErrorValidateBeforeCall(contentType, operation, inputType, inputData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictV2File
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeFile Type of the input data.  (required)
     * @param inputData The input data to run inference on. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictV2FileCall(String operation, String inputTypeFile, File inputData, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/{operation}/{inputTypeFile}"
            .replaceAll("\\{" + "operation" + "\\}", localVarApiClient.escapeString(operation.toString()))
            .replaceAll("\\{" + "inputTypeFile" + "\\}", localVarApiClient.escapeString(inputTypeFile.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputData != null) {
            localVarFormParams.put("inputData", inputData);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictV2FileValidateBeforeCall(String operation, String inputTypeFile, File inputData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling predictV2File(Async)");
        }
        
        // verify the required parameter 'inputTypeFile' is set
        if (inputTypeFile == null) {
            throw new ApiException("Missing the required parameter 'inputTypeFile' when calling predictV2File(Async)");
        }
        
        // verify the required parameter 'inputData' is set
        if (inputData == null) {
            throw new ApiException("Missing the required parameter 'inputData' when calling predictV2File(Async)");
        }
        

        okhttp3.Call localVarCall = predictV2FileCall(operation, inputTypeFile, inputData, _callback);
        return localVarCall;

    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * 
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeFile Type of the input data.  (required)
     * @param inputData The input data to run inference on. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction. </td><td>  -  </td></tr>
     </table>
     */
    public void predictV2File(String operation, String inputTypeFile, File inputData) throws ApiException {
        predictV2FileWithHttpInfo(operation, inputTypeFile, inputData);
    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * 
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeFile Type of the input data.  (required)
     * @param inputData The input data to run inference on. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> predictV2FileWithHttpInfo(String operation, String inputTypeFile, File inputData) throws ApiException {
        okhttp3.Call localVarCall = predictV2FileValidateBeforeCall(operation, inputTypeFile, inputData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified. (asynchronously)
     * 
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeFile Type of the input data.  (required)
     * @param inputData The input data to run inference on. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictV2FileAsync(String operation, String inputTypeFile, File inputData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictV2FileValidateBeforeCall(operation, inputTypeFile, inputData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictV2Json
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeJson Type of the input data.  (required)
     * @param inputData The input data to run inference on. (Specify a JSON string here) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictV2JsonCall(String contentType, String operation, String inputTypeJson, String inputData, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inputData;

        // create path and map variables
        String localVarPath = "/{operation}/{inputTypeJson}"
            .replaceAll("\\{" + "operation" + "\\}", localVarApiClient.escapeString(operation.toString()))
            .replaceAll("\\{" + "inputTypeJson" + "\\}", localVarApiClient.escapeString(inputTypeJson.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictV2JsonValidateBeforeCall(String contentType, String operation, String inputTypeJson, String inputData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling predictV2Json(Async)");
        }
        
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling predictV2Json(Async)");
        }
        
        // verify the required parameter 'inputTypeJson' is set
        if (inputTypeJson == null) {
            throw new ApiException("Missing the required parameter 'inputTypeJson' when calling predictV2Json(Async)");
        }
        
        // verify the required parameter 'inputData' is set
        if (inputData == null) {
            throw new ApiException("Missing the required parameter 'inputData' when calling predictV2Json(Async)");
        }
        

        okhttp3.Call localVarCall = predictV2JsonCall(contentType, operation, inputTypeJson, inputData, _callback);
        return localVarCall;

    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeJson Type of the input data.  (required)
     * @param inputData The input data to run inference on. (Specify a JSON string here) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction. </td><td>  -  </td></tr>
     </table>
     */
    public void predictV2Json(String contentType, String operation, String inputTypeJson, String inputData) throws ApiException {
        predictV2JsonWithHttpInfo(contentType, operation, inputTypeJson, inputData);
    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeJson Type of the input data.  (required)
     * @param inputData The input data to run inference on. (Specify a JSON string here) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> predictV2JsonWithHttpInfo(String contentType, String operation, String inputTypeJson, String inputData) throws ApiException {
        okhttp3.Call localVarCall = predictV2JsonValidateBeforeCall(contentType, operation, inputTypeJson, inputData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified. (asynchronously)
     * 
     * @param contentType The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. (required)
     * @param operation The operation to perform on the input data.  (required)
     * @param inputTypeJson Type of the input data.  (required)
     * @param inputData The input data to run inference on. (Specify a JSON string here) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictV2JsonAsync(String contentType, String operation, String inputTypeJson, String inputData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictV2JsonValidateBeforeCall(contentType, operation, inputTypeJson, inputData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictimage
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating prediction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictimageCall(String deploymentName, String versionName, String modelName, File image, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null) {
            localVarFormParams.put("image", image);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictimageValidateBeforeCall(String deploymentName, String versionName, String modelName, File image, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling predictimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling predictimage(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling predictimage(Async)");
        }
        

        okhttp3.Call localVarCall = predictimageCall(deploymentName, versionName, modelName, image, _callback);
        return localVarCall;

    }

    /**
     * Run inference on the input array, using input image file from multipart form data.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @return Prediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating prediction </td><td>  -  </td></tr>
     </table>
     */
    public Prediction predictimage(String deploymentName, String versionName, String modelName, File image) throws ApiException {
        ApiResponse<Prediction> localVarResp = predictimageWithHttpInfo(deploymentName, versionName, modelName, image);
        return localVarResp.getData();
    }

    /**
     * Run inference on the input array, using input image file from multipart form data.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @return ApiResponse&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating prediction </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prediction> predictimageWithHttpInfo(String deploymentName, String versionName, String modelName, File image) throws ApiException {
        okhttp3.Call localVarCall = predictimageValidateBeforeCall(deploymentName, versionName, modelName, image, null);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run inference on the input array, using input image file from multipart form data. (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error generating prediction </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictimageAsync(String deploymentName, String versionName, String modelName, File image, final ApiCallback<Prediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictimageValidateBeforeCall(deploymentName, versionName, modelName, image, _callback);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictwithpreprocess
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input array (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error executing predictPreProcess </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictwithpreprocessCall(String deploymentName, String versionName, String modelName, List<String> body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictwithpreprocessValidateBeforeCall(String deploymentName, String versionName, String modelName, List<String> body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling predictwithpreprocess(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling predictwithpreprocess(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling predictwithpreprocess(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling predictwithpreprocess(Async)");
        }
        

        okhttp3.Call localVarCall = predictwithpreprocessCall(deploymentName, versionName, modelName, body, _callback);
        return localVarCall;

    }

    /**
     * Preprocesses the input and run inference on it
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input array (required)
     * @return Prediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error executing predictPreProcess </td><td>  -  </td></tr>
     </table>
     */
    public Prediction predictwithpreprocess(String deploymentName, String versionName, String modelName, List<String> body) throws ApiException {
        ApiResponse<Prediction> localVarResp = predictwithpreprocessWithHttpInfo(deploymentName, versionName, modelName, body);
        return localVarResp.getData();
    }

    /**
     * Preprocesses the input and run inference on it
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input array (required)
     * @return ApiResponse&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error executing predictPreProcess </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prediction> predictwithpreprocessWithHttpInfo(String deploymentName, String versionName, String modelName, List<String> body) throws ApiException {
        okhttp3.Call localVarCall = predictwithpreprocessValidateBeforeCall(deploymentName, versionName, modelName, body, null);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preprocesses the input and run inference on it (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input array (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error executing predictPreProcess </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictwithpreprocessAsync(String deploymentName, String versionName, String modelName, List<String> body, final ApiCallback<Prediction> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictwithpreprocessValidateBeforeCall(deploymentName, versionName, modelName, body, _callback);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictwithpreprocessjson
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input array (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error executing predictPreProcessJson </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictwithpreprocessjsonCall(String deploymentName, String versionName, String modelName, List<String> body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", localVarApiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictwithpreprocessjsonValidateBeforeCall(String deploymentName, String versionName, String modelName, List<String> body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling predictwithpreprocessjson(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling predictwithpreprocessjson(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling predictwithpreprocessjson(Async)");
        }
        

        okhttp3.Call localVarCall = predictwithpreprocessjsonCall(deploymentName, versionName, modelName, body, _callback);
        return localVarCall;

    }

    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input array (required)
     * @return JsonArrayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error executing predictPreProcessJson </td><td>  -  </td></tr>
     </table>
     */
    public JsonArrayResponse predictwithpreprocessjson(String deploymentName, String versionName, String modelName, List<String> body) throws ApiException {
        ApiResponse<JsonArrayResponse> localVarResp = predictwithpreprocessjsonWithHttpInfo(deploymentName, versionName, modelName, body);
        return localVarResp.getData();
    }

    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input array (required)
     * @return ApiResponse&lt;JsonArrayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error executing predictPreProcessJson </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonArrayResponse> predictwithpreprocessjsonWithHttpInfo(String deploymentName, String versionName, String modelName, List<String> body) throws ApiException {
        okhttp3.Call localVarCall = predictwithpreprocessjsonValidateBeforeCall(deploymentName, versionName, modelName, body, null);
        Type localVarReturnType = new TypeToken<JsonArrayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param body The input array (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error executing predictPreProcessJson </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictwithpreprocessjsonAsync(String deploymentName, String versionName, String modelName, List<String> body, final ApiCallback<JsonArrayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictwithpreprocessjsonValidateBeforeCall(deploymentName, versionName, modelName, body, _callback);
        Type localVarReturnType = new TypeToken<JsonArrayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rawPredictBinary
     * @param inputType Input data type. (required)
     * @param outputType Binary output data type. (required)
     * @param inputData The input file to upload. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction in raw binary file format. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawPredictBinaryCall(String inputType, String outputType, File inputData, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/raw/{inputType}/{outputType}"
            .replaceAll("\\{" + "inputType" + "\\}", localVarApiClient.escapeString(inputType.toString()))
            .replaceAll("\\{" + "outputType" + "\\}", localVarApiClient.escapeString(outputType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (inputData != null) {
            localVarFormParams.put("inputData", inputData);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rawPredictBinaryValidateBeforeCall(String inputType, String outputType, File inputData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inputType' is set
        if (inputType == null) {
            throw new ApiException("Missing the required parameter 'inputType' when calling rawPredictBinary(Async)");
        }
        
        // verify the required parameter 'outputType' is set
        if (outputType == null) {
            throw new ApiException("Missing the required parameter 'outputType' when calling rawPredictBinary(Async)");
        }
        

        okhttp3.Call localVarCall = rawPredictBinaryCall(inputType, outputType, inputData, _callback);
        return localVarCall;

    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * 
     * @param inputType Input data type. (required)
     * @param outputType Binary output data type. (required)
     * @param inputData The input file to upload. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction in raw binary file format. </td><td>  -  </td></tr>
     </table>
     */
    public void rawPredictBinary(String inputType, String outputType, File inputData) throws ApiException {
        rawPredictBinaryWithHttpInfo(inputType, outputType, inputData);
    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * 
     * @param inputType Input data type. (required)
     * @param outputType Binary output data type. (required)
     * @param inputData The input file to upload. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction in raw binary file format. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rawPredictBinaryWithHttpInfo(String inputType, String outputType, File inputData) throws ApiException {
        okhttp3.Call localVarCall = rawPredictBinaryValidateBeforeCall(inputType, outputType, inputData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified. (asynchronously)
     * 
     * @param inputType Input data type. (required)
     * @param outputType Binary output data type. (required)
     * @param inputData The input file to upload. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input data returned a prediction in raw binary file format. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawPredictBinaryAsync(String inputType, String outputType, File inputData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rawPredictBinaryValidateBeforeCall(inputType, outputType, inputData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshJobStatus
     * @param jobId Job ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The associated job entity object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshJobStatusCall(Long jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/refresh"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshJobStatusValidateBeforeCall(Long jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling refreshJobStatus(Async)");
        }
        

        okhttp3.Call localVarCall = refreshJobStatusCall(jobId, _callback);
        return localVarCall;

    }

    /**
     * Refresh the remote job status. Can be used for monitoring.
     * 
     * @param jobId Job ID (required)
     * @return JobEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The associated job entity object </td><td>  -  </td></tr>
     </table>
     */
    public JobEntity refreshJobStatus(Long jobId) throws ApiException {
        ApiResponse<JobEntity> localVarResp = refreshJobStatusWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Refresh the remote job status. Can be used for monitoring.
     * 
     * @param jobId Job ID (required)
     * @return ApiResponse&lt;JobEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The associated job entity object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobEntity> refreshJobStatusWithHttpInfo(Long jobId) throws ApiException {
        okhttp3.Call localVarCall = refreshJobStatusValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh the remote job status. Can be used for monitoring. (asynchronously)
     * 
     * @param jobId Job ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The associated job entity object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshJobStatusAsync(Long jobId, final ApiCallback<JobEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshJobStatusValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerUser
     * @param user User details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUserCall(User user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/user/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerUserValidateBeforeCall(User user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling registerUser(Async)");
        }
        

        okhttp3.Call localVarCall = registerUserCall(user, _callback);
        return localVarCall;

    }

    /**
     * Register a new user
     * 
     * @param user User details (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added successfully. </td><td>  -  </td></tr>
     </table>
     */
    public User registerUser(User user) throws ApiException {
        ApiResponse<User> localVarResp = registerUserWithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * Register a new user
     * 
     * @param user User details (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> registerUserWithHttpInfo(User user) throws ApiException {
        okhttp3.Call localVarCall = registerUserValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a new user (asynchronously)
     * 
     * @param user User details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUserAsync(User user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerUserValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reimportModel
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the deployment request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the reimported model entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimportModelCall(String deploymentId, String modelId, ImportModelRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/deployment/{deploymentId}/model/{modelId}"
            .replaceAll("\\{" + "deploymentId" + "\\}", localVarApiClient.escapeString(deploymentId.toString()))
            .replaceAll("\\{" + "modelId" + "\\}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reimportModelValidateBeforeCall(String deploymentId, String modelId, ImportModelRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling reimportModel(Async)");
        }
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling reimportModel(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reimportModel(Async)");
        }
        

        okhttp3.Call localVarCall = reimportModelCall(deploymentId, modelId, body, _callback);
        return localVarCall;

    }

    /**
     * Reimport a model to a previous deployed model in a deployment
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the deployment request (required)
     * @return ModelEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the reimported model entity </td><td>  -  </td></tr>
     </table>
     */
    public ModelEntity reimportModel(String deploymentId, String modelId, ImportModelRequest body) throws ApiException {
        ApiResponse<ModelEntity> localVarResp = reimportModelWithHttpInfo(deploymentId, modelId, body);
        return localVarResp.getData();
    }

    /**
     * Reimport a model to a previous deployed model in a deployment
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the deployment request (required)
     * @return ApiResponse&lt;ModelEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the reimported model entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelEntity> reimportModelWithHttpInfo(String deploymentId, String modelId, ImportModelRequest body) throws ApiException {
        okhttp3.Call localVarCall = reimportModelValidateBeforeCall(deploymentId, modelId, body, null);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reimport a model to a previous deployed model in a deployment (asynchronously)
     * 
     * @param deploymentId ID deployment group (required)
     * @param modelId the id of the deployed model (required)
     * @param body the deployment request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the reimported model entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reimportModelAsync(String deploymentId, String modelId, ImportModelRequest body, final ApiCallback<ModelEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = reimportModelValidateBeforeCall(deploymentId, modelId, body, _callback);
        Type localVarReturnType = new TypeToken<ModelEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeUserToken
     * @param tokenId Token ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The revoked token object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeUserTokenCall(Long tokenId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/auth/token/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeUserTokenValidateBeforeCall(Long tokenId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling revokeUserToken(Async)");
        }
        

        okhttp3.Call localVarCall = revokeUserTokenCall(tokenId, _callback);
        return localVarCall;

    }

    /**
     * Revoke a user token.
     * 
     * @param tokenId Token ID (required)
     * @return Token
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The revoked token object. </td><td>  -  </td></tr>
     </table>
     */
    public Token revokeUserToken(Long tokenId) throws ApiException {
        ApiResponse<Token> localVarResp = revokeUserTokenWithHttpInfo(tokenId);
        return localVarResp.getData();
    }

    /**
     * Revoke a user token.
     * 
     * @param tokenId Token ID (required)
     * @return ApiResponse&lt;Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The revoked token object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Token> revokeUserTokenWithHttpInfo(Long tokenId) throws ApiException {
        okhttp3.Call localVarCall = revokeUserTokenValidateBeforeCall(tokenId, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revoke a user token. (asynchronously)
     * 
     * @param tokenId Token ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The revoked token object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeUserTokenAsync(Long tokenId, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeUserTokenValidateBeforeCall(tokenId, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollback
     * @param index Model revision index. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status of the rollback. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackCall(Integer index, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rollback/{index}"
            .replaceAll("\\{" + "index" + "\\}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackValidateBeforeCall(Integer index, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling rollback(Async)");
        }
        

        okhttp3.Call localVarCall = rollbackCall(index, _callback);
        return localVarCall;

    }

    /**
     * Rollback to a previous revision of the model.
     * 
     * @param index Model revision index. (required)
     * @return RollbackStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status of the rollback. </td><td>  -  </td></tr>
     </table>
     */
    public RollbackStatus rollback(Integer index) throws ApiException {
        ApiResponse<RollbackStatus> localVarResp = rollbackWithHttpInfo(index);
        return localVarResp.getData();
    }

    /**
     * Rollback to a previous revision of the model.
     * 
     * @param index Model revision index. (required)
     * @return ApiResponse&lt;RollbackStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status of the rollback. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RollbackStatus> rollbackWithHttpInfo(Integer index) throws ApiException {
        okhttp3.Call localVarCall = rollbackValidateBeforeCall(index, null);
        Type localVarReturnType = new TypeToken<RollbackStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback to a previous revision of the model. (asynchronously)
     * 
     * @param index Model revision index. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the status of the rollback. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackAsync(Integer index, final ApiCallback<RollbackStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackValidateBeforeCall(index, _callback);
        Type localVarReturnType = new TypeToken<RollbackStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for runAJob
     * @param jobId Job ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The associated job entity object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runAJobCall(Long jobId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/run"
            .replaceAll("\\{" + "jobId" + "\\}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runAJobValidateBeforeCall(Long jobId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling runAJob(Async)");
        }
        

        okhttp3.Call localVarCall = runAJobCall(jobId, _callback);
        return localVarCall;

    }

    /**
     * Start running an (already created) job on the remote resource
     * 
     * @param jobId Job ID (required)
     * @return JobEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The associated job entity object </td><td>  -  </td></tr>
     </table>
     */
    public JobEntity runAJob(Long jobId) throws ApiException {
        ApiResponse<JobEntity> localVarResp = runAJobWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Start running an (already created) job on the remote resource
     * 
     * @param jobId Job ID (required)
     * @return ApiResponse&lt;JobEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The associated job entity object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobEntity> runAJobWithHttpInfo(Long jobId) throws ApiException {
        okhttp3.Call localVarCall = runAJobValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start running an (already created) job on the remote resource (asynchronously)
     * 
     * @param jobId Job ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The associated job entity object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runAJobAsync(Long jobId, final ApiCallback<JobEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = runAJobValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<JobEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformCsv
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchCSVRecord The input batch of record arrays (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformCsvCall(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batchCSVRecord;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", localVarApiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformCsvValidateBeforeCall(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformCsv(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformCsv(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformCsv(Async)");
        }
        

        okhttp3.Call localVarCall = transformCsvCall(deploymentName, versionName, transformName, batchCSVRecord, _callback);
        return localVarCall;

    }

    /**
     * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
     * Takes a batch of SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchCSVRecord The input batch of record arrays (optional)
     * @return BatchCSVRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public BatchCSVRecord transformCsv(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord) throws ApiException {
        ApiResponse<BatchCSVRecord> localVarResp = transformCsvWithHttpInfo(deploymentName, versionName, transformName, batchCSVRecord);
        return localVarResp.getData();
    }

    /**
     * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
     * Takes a batch of SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchCSVRecord The input batch of record arrays (optional)
     * @return ApiResponse&lt;BatchCSVRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchCSVRecord> transformCsvWithHttpInfo(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord) throws ApiException {
        okhttp3.Call localVarCall = transformCsvValidateBeforeCall(deploymentName, versionName, transformName, batchCSVRecord, null);
        Type localVarReturnType = new TypeToken<BatchCSVRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord (asynchronously)
     * Takes a batch of SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchCSVRecord The input batch of record arrays (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformCsvAsync(String deploymentName, String versionName, String transformName, BatchCSVRecord batchCSVRecord, final ApiCallback<BatchCSVRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformCsvValidateBeforeCall(deploymentName, versionName, transformName, batchCSVRecord, _callback);
        Type localVarReturnType = new TypeToken<BatchCSVRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformarray
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchRecord The input batch of record arrays (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformarrayCall(String deploymentName, String versionName, String transformName, BatchRecord batchRecord, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batchRecord;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", localVarApiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformarrayValidateBeforeCall(String deploymentName, String versionName, String transformName, BatchRecord batchRecord, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformarray(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformarray(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformarray(Async)");
        }
        

        okhttp3.Call localVarCall = transformarrayCall(deploymentName, versionName, transformName, batchRecord, _callback);
        return localVarCall;

    }

    /**
     * Takes a batch input arrays and transforms it
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchRecord The input batch of record arrays (optional)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public Base64NDArrayBody transformarray(String deploymentName, String versionName, String transformName, BatchRecord batchRecord) throws ApiException {
        ApiResponse<Base64NDArrayBody> localVarResp = transformarrayWithHttpInfo(deploymentName, versionName, transformName, batchRecord);
        return localVarResp.getData();
    }

    /**
     * Takes a batch input arrays and transforms it
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchRecord The input batch of record arrays (optional)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Base64NDArrayBody> transformarrayWithHttpInfo(String deploymentName, String versionName, String transformName, BatchRecord batchRecord) throws ApiException {
        okhttp3.Call localVarCall = transformarrayValidateBeforeCall(deploymentName, versionName, transformName, batchRecord, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Takes a batch input arrays and transforms it (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param batchRecord The input batch of record arrays (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformarrayAsync(String deploymentName, String versionName, String transformName, BatchRecord batchRecord, final ApiCallback<Base64NDArrayBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformarrayValidateBeforeCall(deploymentName, versionName, transformName, batchRecord, _callback);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformimage
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param files The image files to upload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No uploaded files found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformimageCall(String deploymentName, String versionName, String imageTransformName, List<File> files, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "imageTransformName" + "\\}", localVarApiClient.escapeString(imageTransformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null) {
            localVarFormParams.put("files", files);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformimageValidateBeforeCall(String deploymentName, String versionName, String imageTransformName, List<File> files, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformimage(Async)");
        }
        
        // verify the required parameter 'imageTransformName' is set
        if (imageTransformName == null) {
            throw new ApiException("Missing the required parameter 'imageTransformName' when calling transformimage(Async)");
        }
        
        // verify the required parameter 'files' is set
        if (files == null) {
            throw new ApiException("Missing the required parameter 'files' when calling transformimage(Async)");
        }
        

        okhttp3.Call localVarCall = transformimageCall(deploymentName, versionName, imageTransformName, files, _callback);
        return localVarCall;

    }

    /**
     * Takes multiple multipart image file to transform and returns Base64NDArrayBody
     * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param files The image files to upload (required)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No uploaded files found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public Base64NDArrayBody transformimage(String deploymentName, String versionName, String imageTransformName, List<File> files) throws ApiException {
        ApiResponse<Base64NDArrayBody> localVarResp = transformimageWithHttpInfo(deploymentName, versionName, imageTransformName, files);
        return localVarResp.getData();
    }

    /**
     * Takes multiple multipart image file to transform and returns Base64NDArrayBody
     * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param files The image files to upload (required)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No uploaded files found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Base64NDArrayBody> transformimageWithHttpInfo(String deploymentName, String versionName, String imageTransformName, List<File> files) throws ApiException {
        okhttp3.Call localVarCall = transformimageValidateBeforeCall(deploymentName, versionName, imageTransformName, files, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Takes multiple multipart image file to transform and returns Base64NDArrayBody (asynchronously)
     * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param files The image files to upload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No uploaded files found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformimageAsync(String deploymentName, String versionName, String imageTransformName, List<File> files, final ApiCallback<Base64NDArrayBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformimageValidateBeforeCall(deploymentName, versionName, imageTransformName, files, _callback);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformincrementalCsv
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleCSVRecord The input record array (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformincrementalCsvCall(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = singleCSVRecord;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", localVarApiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformincrementalCsvValidateBeforeCall(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformincrementalCsv(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformincrementalCsv(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformincrementalCsv(Async)");
        }
        

        okhttp3.Call localVarCall = transformincrementalCsvCall(deploymentName, versionName, transformName, singleCSVRecord, _callback);
        return localVarCall;

    }

    /**
     * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
     * Takes a SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleCSVRecord The input record array (optional)
     * @return SingleCSVRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public SingleCSVRecord transformincrementalCsv(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord) throws ApiException {
        ApiResponse<SingleCSVRecord> localVarResp = transformincrementalCsvWithHttpInfo(deploymentName, versionName, transformName, singleCSVRecord);
        return localVarResp.getData();
    }

    /**
     * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
     * Takes a SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleCSVRecord The input record array (optional)
     * @return ApiResponse&lt;SingleCSVRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleCSVRecord> transformincrementalCsvWithHttpInfo(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord) throws ApiException {
        okhttp3.Call localVarCall = transformincrementalCsvValidateBeforeCall(deploymentName, versionName, transformName, singleCSVRecord, null);
        Type localVarReturnType = new TypeToken<SingleCSVRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord (asynchronously)
     * Takes a SingleCSVRecord object and transforms it into the desired format
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleCSVRecord The input record array (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformincrementalCsvAsync(String deploymentName, String versionName, String transformName, SingleCSVRecord singleCSVRecord, final ApiCallback<SingleCSVRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformincrementalCsvValidateBeforeCall(deploymentName, versionName, transformName, singleCSVRecord, _callback);
        Type localVarReturnType = new TypeToken<SingleCSVRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformincrementalarray
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleRecord The input record array (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformincrementalarrayCall(String deploymentName, String versionName, String transformName, SingleRecord singleRecord, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = singleRecord;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", localVarApiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformincrementalarrayValidateBeforeCall(String deploymentName, String versionName, String transformName, SingleRecord singleRecord, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformincrementalarray(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformincrementalarray(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformincrementalarray(Async)");
        }
        

        okhttp3.Call localVarCall = transformincrementalarrayCall(deploymentName, versionName, transformName, singleRecord, _callback);
        return localVarCall;

    }

    /**
     * Same as /transformincremental but returns Base64NDArrayBody.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleRecord The input record array (optional)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public Base64NDArrayBody transformincrementalarray(String deploymentName, String versionName, String transformName, SingleRecord singleRecord) throws ApiException {
        ApiResponse<Base64NDArrayBody> localVarResp = transformincrementalarrayWithHttpInfo(deploymentName, versionName, transformName, singleRecord);
        return localVarResp.getData();
    }

    /**
     * Same as /transformincremental but returns Base64NDArrayBody.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleRecord The input record array (optional)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Base64NDArrayBody> transformincrementalarrayWithHttpInfo(String deploymentName, String versionName, String transformName, SingleRecord singleRecord) throws ApiException {
        okhttp3.Call localVarCall = transformincrementalarrayValidateBeforeCall(deploymentName, versionName, transformName, singleRecord, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Same as /transformincremental but returns Base64NDArrayBody. (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param singleRecord The input record array (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformincrementalarrayAsync(String deploymentName, String versionName, String transformName, SingleRecord singleRecord, final ApiCallback<Base64NDArrayBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformincrementalarrayValidateBeforeCall(deploymentName, versionName, transformName, singleRecord, _callback);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformincrementalimage
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param file The image file to upload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No uploaded file found or the file couldn&#39;t be loaded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformincrementalimageCall(String deploymentName, String versionName, String imageTransformName, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "imageTransformName" + "\\}", localVarApiClient.escapeString(imageTransformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformincrementalimageValidateBeforeCall(String deploymentName, String versionName, String imageTransformName, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformincrementalimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformincrementalimage(Async)");
        }
        
        // verify the required parameter 'imageTransformName' is set
        if (imageTransformName == null) {
            throw new ApiException("Missing the required parameter 'imageTransformName' when calling transformincrementalimage(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling transformincrementalimage(Async)");
        }
        

        okhttp3.Call localVarCall = transformincrementalimageCall(deploymentName, versionName, imageTransformName, file, _callback);
        return localVarCall;

    }

    /**
     * Takes a single multipart image file to transform and returns Base64NDArrayBody
     * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param file The image file to upload (required)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No uploaded file found or the file couldn&#39;t be loaded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public Base64NDArrayBody transformincrementalimage(String deploymentName, String versionName, String imageTransformName, File file) throws ApiException {
        ApiResponse<Base64NDArrayBody> localVarResp = transformincrementalimageWithHttpInfo(deploymentName, versionName, imageTransformName, file);
        return localVarResp.getData();
    }

    /**
     * Takes a single multipart image file to transform and returns Base64NDArrayBody
     * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param file The image file to upload (required)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No uploaded file found or the file couldn&#39;t be loaded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Base64NDArrayBody> transformincrementalimageWithHttpInfo(String deploymentName, String versionName, String imageTransformName, File file) throws ApiException {
        okhttp3.Call localVarCall = transformincrementalimageValidateBeforeCall(deploymentName, versionName, imageTransformName, file, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Takes a single multipart image file to transform and returns Base64NDArrayBody (asynchronously)
     * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param imageTransformName ID or name of the deployed image transform (required)
     * @param file The image file to upload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> array transformed and returned successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No uploaded file found or the file couldn&#39;t be loaded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error during transforming the array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformincrementalimageAsync(String deploymentName, String versionName, String imageTransformName, File file, final ApiCallback<Base64NDArrayBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformincrementalimageValidateBeforeCall(deploymentName, versionName, imageTransformName, file, _callback);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformprocessGet
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deployed transform process </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> the transform process is probably null </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformprocessGetCall(String deploymentName, String versionName, String transformName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", localVarApiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformprocessGetValidateBeforeCall(String deploymentName, String versionName, String transformName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformprocessGet(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformprocessGet(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformprocessGet(Async)");
        }
        

        okhttp3.Call localVarCall = transformprocessGetCall(deploymentName, versionName, transformName, _callback);
        return localVarCall;

    }

    /**
     * Gets the JSON string of the deployed transform process (CSV or Image)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deployed transform process </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> the transform process is probably null </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Object transformprocessGet(String deploymentName, String versionName, String transformName) throws ApiException {
        ApiResponse<Object> localVarResp = transformprocessGetWithHttpInfo(deploymentName, versionName, transformName);
        return localVarResp.getData();
    }

    /**
     * Gets the JSON string of the deployed transform process (CSV or Image)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deployed transform process </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> the transform process is probably null </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> transformprocessGetWithHttpInfo(String deploymentName, String versionName, String transformName) throws ApiException {
        okhttp3.Call localVarCall = transformprocessGetValidateBeforeCall(deploymentName, versionName, transformName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the JSON string of the deployed transform process (CSV or Image) (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deployed transform process </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> the transform process is probably null </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformprocessGetAsync(String deploymentName, String versionName, String transformName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformprocessGetValidateBeforeCall(deploymentName, versionName, transformName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformprocessPost
     * @param contentType The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;. (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param transformProcess The transform process to set (Specify a JSON string here). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> transform process set successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformprocessPostCall(String contentType, String deploymentName, String versionName, String transformName, String transformProcess, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transformProcess;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess"
            .replaceAll("\\{" + "deploymentName" + "\\}", localVarApiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", localVarApiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "transformName" + "\\}", localVarApiClient.escapeString(transformName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformprocessPostValidateBeforeCall(String contentType, String deploymentName, String versionName, String transformName, String transformProcess, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling transformprocessPost(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling transformprocessPost(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling transformprocessPost(Async)");
        }
        
        // verify the required parameter 'transformName' is set
        if (transformName == null) {
            throw new ApiException("Missing the required parameter 'transformName' when calling transformprocessPost(Async)");
        }
        

        okhttp3.Call localVarCall = transformprocessPostCall(contentType, deploymentName, versionName, transformName, transformProcess, _callback);
        return localVarCall;

    }

    /**
     * Sets the deployed (CSV or Image) transform process through the provided JSON string
     * 
     * @param contentType The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;. (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param transformProcess The transform process to set (Specify a JSON string here). (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> transform process set successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Object transformprocessPost(String contentType, String deploymentName, String versionName, String transformName, String transformProcess) throws ApiException {
        ApiResponse<Object> localVarResp = transformprocessPostWithHttpInfo(contentType, deploymentName, versionName, transformName, transformProcess);
        return localVarResp.getData();
    }

    /**
     * Sets the deployed (CSV or Image) transform process through the provided JSON string
     * 
     * @param contentType The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;. (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param transformProcess The transform process to set (Specify a JSON string here). (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> transform process set successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> transformprocessPostWithHttpInfo(String contentType, String deploymentName, String versionName, String transformName, String transformProcess) throws ApiException {
        okhttp3.Call localVarCall = transformprocessPostValidateBeforeCall(contentType, deploymentName, versionName, transformName, transformProcess, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets the deployed (CSV or Image) transform process through the provided JSON string (asynchronously)
     * 
     * @param contentType The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;. (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param transformName ID or name of the deployed transform (required)
     * @param transformProcess The transform process to set (Specify a JSON string here). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> transform process set successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformprocessPostAsync(String contentType, String deploymentName, String versionName, String transformName, String transformProcess, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformprocessPostValidateBeforeCall(contentType, deploymentName, versionName, transformName, transformProcess, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthPolicy
     * @param authPolicy Auth policy object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update AuthPolicy object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthPolicyCall(AuthPolicy authPolicy, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = authPolicy;

        // create path and map variables
        String localVarPath = "/auth/policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthPolicyValidateBeforeCall(AuthPolicy authPolicy, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authPolicy' is set
        if (authPolicy == null) {
            throw new ApiException("Missing the required parameter 'authPolicy' when calling updateAuthPolicy(Async)");
        }
        

        okhttp3.Call localVarCall = updateAuthPolicyCall(authPolicy, _callback);
        return localVarCall;

    }

    /**
     * Update auth policy
     * 
     * @param authPolicy Auth policy object (required)
     * @return AuthPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update AuthPolicy object </td><td>  -  </td></tr>
     </table>
     */
    public AuthPolicy updateAuthPolicy(AuthPolicy authPolicy) throws ApiException {
        ApiResponse<AuthPolicy> localVarResp = updateAuthPolicyWithHttpInfo(authPolicy);
        return localVarResp.getData();
    }

    /**
     * Update auth policy
     * 
     * @param authPolicy Auth policy object (required)
     * @return ApiResponse&lt;AuthPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update AuthPolicy object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthPolicy> updateAuthPolicyWithHttpInfo(AuthPolicy authPolicy) throws ApiException {
        okhttp3.Call localVarCall = updateAuthPolicyValidateBeforeCall(authPolicy, null);
        Type localVarReturnType = new TypeToken<AuthPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update auth policy (asynchronously)
     * 
     * @param authPolicy Auth policy object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update AuthPolicy object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthPolicyAsync(AuthPolicy authPolicy, final ApiCallback<AuthPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthPolicyValidateBeforeCall(authPolicy, _callback);
        Type localVarReturnType = new TypeToken<AuthPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBestModelForExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param updateBestModel Model encapsulating the experiment id to update and the best model id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated experiment entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBestModelForExperimentCall(String modelHistoryServerId, UpdateBestModel updateBestModel, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateBestModel;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/best"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBestModelForExperimentValidateBeforeCall(String modelHistoryServerId, UpdateBestModel updateBestModel, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling updateBestModelForExperiment(Async)");
        }
        
        // verify the required parameter 'updateBestModel' is set
        if (updateBestModel == null) {
            throw new ApiException("Missing the required parameter 'updateBestModel' when calling updateBestModelForExperiment(Async)");
        }
        

        okhttp3.Call localVarCall = updateBestModelForExperimentCall(modelHistoryServerId, updateBestModel, _callback);
        return localVarCall;

    }

    /**
     * Updates the best model for an experiment
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param updateBestModel Model encapsulating the experiment id to update and the best model id. (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated experiment entity. </td><td>  -  </td></tr>
     </table>
     */
    public ExperimentEntity updateBestModelForExperiment(String modelHistoryServerId, UpdateBestModel updateBestModel) throws ApiException {
        ApiResponse<ExperimentEntity> localVarResp = updateBestModelForExperimentWithHttpInfo(modelHistoryServerId, updateBestModel);
        return localVarResp.getData();
    }

    /**
     * Updates the best model for an experiment
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param updateBestModel Model encapsulating the experiment id to update and the best model id. (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated experiment entity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExperimentEntity> updateBestModelForExperimentWithHttpInfo(String modelHistoryServerId, UpdateBestModel updateBestModel) throws ApiException {
        okhttp3.Call localVarCall = updateBestModelForExperimentValidateBeforeCall(modelHistoryServerId, updateBestModel, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the best model for an experiment (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param updateBestModel Model encapsulating the experiment id to update and the best model id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated experiment entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBestModelForExperimentAsync(String modelHistoryServerId, UpdateBestModel updateBestModel, final ApiCallback<ExperimentEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBestModelForExperimentValidateBeforeCall(modelHistoryServerId, updateBestModel, _callback);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExperiment
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to update (required)
     * @param experimentEntity The experiment entity to update with (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated experiment entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExperimentCall(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = experimentEntity;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "experimentID" + "\\}", localVarApiClient.escapeString(experimentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExperimentValidateBeforeCall(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling updateExperiment(Async)");
        }
        
        // verify the required parameter 'experimentID' is set
        if (experimentID == null) {
            throw new ApiException("Missing the required parameter 'experimentID' when calling updateExperiment(Async)");
        }
        
        // verify the required parameter 'experimentEntity' is set
        if (experimentEntity == null) {
            throw new ApiException("Missing the required parameter 'experimentEntity' when calling updateExperiment(Async)");
        }
        

        okhttp3.Call localVarCall = updateExperimentCall(modelHistoryServerId, experimentID, experimentEntity, _callback);
        return localVarCall;

    }

    /**
     * Updates an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to update (required)
     * @param experimentEntity The experiment entity to update with (required)
     * @return ExperimentEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated experiment entity. </td><td>  -  </td></tr>
     </table>
     */
    public ExperimentEntity updateExperiment(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity) throws ApiException {
        ApiResponse<ExperimentEntity> localVarResp = updateExperimentWithHttpInfo(modelHistoryServerId, experimentID, experimentEntity);
        return localVarResp.getData();
    }

    /**
     * Updates an experiment, given an experiment entity
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to update (required)
     * @param experimentEntity The experiment entity to update with (required)
     * @return ApiResponse&lt;ExperimentEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated experiment entity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExperimentEntity> updateExperimentWithHttpInfo(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity) throws ApiException {
        okhttp3.Call localVarCall = updateExperimentValidateBeforeCall(modelHistoryServerId, experimentID, experimentEntity, null);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an experiment, given an experiment entity (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param experimentID the GUID of the experiment to update (required)
     * @param experimentEntity The experiment entity to update with (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated experiment entity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExperimentAsync(String modelHistoryServerId, String experimentID, ExperimentEntity experimentEntity, final ApiCallback<ExperimentEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExperimentValidateBeforeCall(modelHistoryServerId, experimentID, experimentEntity, _callback);
        Type localVarReturnType = new TypeToken<ExperimentEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateModelHistory
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to update (required)
     * @param updateModelHistoryRequest The model history request object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated model history entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateModelHistoryCall(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateModelHistoryRequest;

        // create path and map variables
        String localVarPath = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}"
            .replaceAll("\\{" + "modelHistoryServerId" + "\\}", localVarApiClient.escapeString(modelHistoryServerId.toString()))
            .replaceAll("\\{" + "modelHistoryID" + "\\}", localVarApiClient.escapeString(modelHistoryID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateModelHistoryValidateBeforeCall(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelHistoryServerId' is set
        if (modelHistoryServerId == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryServerId' when calling updateModelHistory(Async)");
        }
        
        // verify the required parameter 'modelHistoryID' is set
        if (modelHistoryID == null) {
            throw new ApiException("Missing the required parameter 'modelHistoryID' when calling updateModelHistory(Async)");
        }
        
        // verify the required parameter 'updateModelHistoryRequest' is set
        if (updateModelHistoryRequest == null) {
            throw new ApiException("Missing the required parameter 'updateModelHistoryRequest' when calling updateModelHistory(Async)");
        }
        

        okhttp3.Call localVarCall = updateModelHistoryCall(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest, _callback);
        return localVarCall;

    }

    /**
     * Update a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to update (required)
     * @param updateModelHistoryRequest The model history request object (required)
     * @return ModelHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated model history entity </td><td>  -  </td></tr>
     </table>
     */
    public ModelHistoryEntity updateModelHistory(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest) throws ApiException {
        ApiResponse<ModelHistoryEntity> localVarResp = updateModelHistoryWithHttpInfo(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest);
        return localVarResp.getData();
    }

    /**
     * Update a model history / workspace
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to update (required)
     * @param updateModelHistoryRequest The model history request object (required)
     * @return ApiResponse&lt;ModelHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated model history entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelHistoryEntity> updateModelHistoryWithHttpInfo(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest) throws ApiException {
        okhttp3.Call localVarCall = updateModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest, null);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a model history / workspace (asynchronously)
     * 
     * @param modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. (required)
     * @param modelHistoryID the GUID of the model history / workspace to update (required)
     * @param updateModelHistoryRequest The model history request object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated model history entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateModelHistoryAsync(String modelHistoryServerId, String modelHistoryID, AddModelHistoryRequest updateModelHistoryRequest, final ApiCallback<ModelHistoryEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateModelHistoryValidateBeforeCall(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelHistoryEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param user User details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(User user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(User user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling updateUser(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserCall(user, _callback);
        return localVarCall;

    }

    /**
     * Update a user
     * 
     * @param user User details (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated successfully. </td><td>  -  </td></tr>
     </table>
     */
    public User updateUser(User user) throws ApiException {
        ApiResponse<User> localVarResp = updateUserWithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * Update a user
     * 
     * @param user User details (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateUserWithHttpInfo(User user) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a user (asynchronously)
     * 
     * @param user User details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User updated successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(User user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upload
     * @param file The file to upload. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCall(File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/upload/model";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "x_api_key" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadValidateBeforeCall(File file, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = uploadCall(file, _callback);
        return localVarCall;

    }

    /**
     * Upload a model file to SKIL for import.
     * 
     * @param file The file to upload. (optional)
     * @return FileUploadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public FileUploadList upload(File file) throws ApiException {
        ApiResponse<FileUploadList> localVarResp = uploadWithHttpInfo(file);
        return localVarResp.getData();
    }

    /**
     * Upload a model file to SKIL for import.
     * 
     * @param file The file to upload. (optional)
     * @return ApiResponse&lt;FileUploadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileUploadList> uploadWithHttpInfo(File file) throws ApiException {
        okhttp3.Call localVarCall = uploadValidateBeforeCall(file, null);
        Type localVarReturnType = new TypeToken<FileUploadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a model file to SKIL for import. (asynchronously)
     * 
     * @param file The file to upload. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadAsync(File file, final ApiCallback<FileUploadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadValidateBeforeCall(file, _callback);
        Type localVarReturnType = new TypeToken<FileUploadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
