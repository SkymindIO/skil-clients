/*
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ai.skymind.skil;

import ai.skymind.ApiCallback;
import ai.skymind.ApiClient;
import ai.skymind.ApiException;
import ai.skymind.ApiResponse;
import ai.skymind.Configuration;
import ai.skymind.Pair;
import ai.skymind.ProgressRequestBody;
import ai.skymind.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ai.skymind.skil.model.Base64NDArrayBody;
import ai.skymind.skil.model.ClassificationResult;
import ai.skymind.skil.model.DetectionResult;
import java.io.File;
import ai.skymind.skil.model.JsonArrayResponse;
import ai.skymind.skil.model.LogBatch;
import ai.skymind.skil.model.LogRequest;
import ai.skymind.skil.model.MetaData;
import ai.skymind.skil.model.ModelStatus;
import ai.skymind.skil.model.MultiClassClassificationResult;
import ai.skymind.skil.model.MultiPredictRequest;
import ai.skymind.skil.model.MultiPredictResponse;
import ai.skymind.skil.model.Prediction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InferenceApi {
    private ApiClient apiClient;

    public InferenceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InferenceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for classify
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call classifyCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classify"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call classifyValidateBeforeCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling classify(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling classify(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling classify(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling classify(Async)");
        }
        

        com.squareup.okhttp.Call call = classifyCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Use the deployed model to classify the input
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ClassificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClassificationResult classify(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<ClassificationResult> resp = classifyWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Use the deployed model to classify the input
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;ClassificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClassificationResult> classifyWithHttpInfo(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = classifyValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<ClassificationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Use the deployed model to classify the input (asynchronously)
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call classifyAsync(Prediction body, String deploymentName, String versionName, String modelName, final ApiCallback<ClassificationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = classifyValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClassificationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for classifyarray
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call classifyarrayCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call classifyarrayValidateBeforeCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling classifyarray(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling classifyarray(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling classifyarray(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling classifyarray(Async)");
        }
        

        com.squareup.okhttp.Call call = classifyarrayCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Same as /classify but returns the output as Base64NDArrayBody
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return Base64NDArrayBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Base64NDArrayBody classifyarray(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<Base64NDArrayBody> resp = classifyarrayWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Same as /classify but returns the output as Base64NDArrayBody
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;Base64NDArrayBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Base64NDArrayBody> classifyarrayWithHttpInfo(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = classifyarrayValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Same as /classify but returns the output as Base64NDArrayBody (asynchronously)
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call classifyarrayAsync(Prediction body, String deploymentName, String versionName, String modelName, final ApiCallback<Base64NDArrayBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = classifyarrayValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Base64NDArrayBody>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for classifyimage
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call classifyimageCall(String deploymentName, String versionName, String modelName, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("image", image);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call classifyimageValidateBeforeCall(String deploymentName, String versionName, String modelName, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling classifyimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling classifyimage(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling classifyimage(Async)");
        }
        

        com.squareup.okhttp.Call call = classifyimageCall(deploymentName, versionName, modelName, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Use the deployed model to classify the input, using input image file from multipart form data.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @return ClassificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClassificationResult classifyimage(String deploymentName, String versionName, String modelName, File image) throws ApiException {
        ApiResponse<ClassificationResult> resp = classifyimageWithHttpInfo(deploymentName, versionName, modelName, image);
        return resp.getData();
    }

    /**
     * Use the deployed model to classify the input, using input image file from multipart form data.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @return ApiResponse&lt;ClassificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClassificationResult> classifyimageWithHttpInfo(String deploymentName, String versionName, String modelName, File image) throws ApiException {
        com.squareup.okhttp.Call call = classifyimageValidateBeforeCall(deploymentName, versionName, modelName, image, null, null);
        Type localVarReturnType = new TypeToken<ClassificationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Use the deployed model to classify the input, using input image file from multipart form data. (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call classifyimageAsync(String deploymentName, String versionName, String modelName, File image, final ApiCallback<ClassificationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = classifyimageValidateBeforeCall(deploymentName, versionName, modelName, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClassificationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for detectobjects
     * @param id the GUID for mapping the results in the detections (required)
     * @param needsPreprocessing (true) if the image needs preprocessing (required)
     * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. (required)
     * @param file the image file to detect objects from (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call detectobjectsCall(String id, Boolean needsPreprocessing, Float threshold, File file, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);
        if (needsPreprocessing != null)
        localVarFormParams.put("needsPreprocessing", needsPreprocessing);
        if (threshold != null)
        localVarFormParams.put("threshold", threshold);
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call detectobjectsValidateBeforeCall(String id, Boolean needsPreprocessing, Float threshold, File file, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'needsPreprocessing' is set
        if (needsPreprocessing == null) {
            throw new ApiException("Missing the required parameter 'needsPreprocessing' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'threshold' is set
        if (threshold == null) {
            throw new ApiException("Missing the required parameter 'threshold' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling detectobjects(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling detectobjects(Async)");
        }
        

        com.squareup.okhttp.Call call = detectobjectsCall(id, needsPreprocessing, threshold, file, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Detect the objects, given a (input) prediction request
     * 
     * @param id the GUID for mapping the results in the detections (required)
     * @param needsPreprocessing (true) if the image needs preprocessing (required)
     * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. (required)
     * @param file the image file to detect objects from (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return DetectionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DetectionResult detectobjects(String id, Boolean needsPreprocessing, Float threshold, File file, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<DetectionResult> resp = detectobjectsWithHttpInfo(id, needsPreprocessing, threshold, file, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Detect the objects, given a (input) prediction request
     * 
     * @param id the GUID for mapping the results in the detections (required)
     * @param needsPreprocessing (true) if the image needs preprocessing (required)
     * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. (required)
     * @param file the image file to detect objects from (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;DetectionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DetectionResult> detectobjectsWithHttpInfo(String id, Boolean needsPreprocessing, Float threshold, File file, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = detectobjectsValidateBeforeCall(id, needsPreprocessing, threshold, file, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<DetectionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Detect the objects, given a (input) prediction request (asynchronously)
     * 
     * @param id the GUID for mapping the results in the detections (required)
     * @param needsPreprocessing (true) if the image needs preprocessing (required)
     * @param threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. (required)
     * @param file the image file to detect objects from (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call detectobjectsAsync(String id, Boolean needsPreprocessing, Float threshold, File file, String deploymentName, String versionName, String modelName, final ApiCallback<DetectionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = detectobjectsValidateBeforeCall(id, needsPreprocessing, threshold, file, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DetectionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for jsonarray
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jsonarrayCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jsonarrayValidateBeforeCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling jsonarray(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling jsonarray(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling jsonarray(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling jsonarray(Async)");
        }
        

        com.squareup.okhttp.Call call = jsonarrayCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run inference on the input and returns it as a JsonArrayResponse
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return JsonArrayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JsonArrayResponse jsonarray(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<JsonArrayResponse> resp = jsonarrayWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Run inference on the input and returns it as a JsonArrayResponse
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;JsonArrayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JsonArrayResponse> jsonarrayWithHttpInfo(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = jsonarrayValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<JsonArrayResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run inference on the input and returns it as a JsonArrayResponse (asynchronously)
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jsonarrayAsync(Prediction body, String deploymentName, String versionName, String modelName, final ApiCallback<JsonArrayResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jsonarrayValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JsonArrayResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for logfilepath
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call logfilepathCall(String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call logfilepathValidateBeforeCall(String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling logfilepath(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling logfilepath(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling logfilepath(Async)");
        }
        

        com.squareup.okhttp.Call call = logfilepathCall(deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get logs file path
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String logfilepath(String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<String> resp = logfilepathWithHttpInfo(deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Get logs file path
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> logfilepathWithHttpInfo(String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = logfilepathValidateBeforeCall(deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get logs file path (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logfilepathAsync(String deploymentName, String versionName, String modelName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logfilepathValidateBeforeCall(deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for logs
     * @param body the the log request (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call logsCall(LogRequest body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logs"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call logsValidateBeforeCall(LogRequest body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling logs(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling logs(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling logs(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling logs(Async)");
        }
        

        com.squareup.okhttp.Call call = logsCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get logs
     * 
     * @param body the the log request (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return LogBatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogBatch logs(LogRequest body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<LogBatch> resp = logsWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Get logs
     * 
     * @param body the the log request (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;LogBatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogBatch> logsWithHttpInfo(LogRequest body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = logsValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<LogBatch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get logs (asynchronously)
     * 
     * @param body the the log request (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logsAsync(LogRequest body, String deploymentName, String versionName, String modelName, final ApiCallback<LogBatch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logsValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogBatch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for metaGet
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call metaGetCall(String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call metaGetValidateBeforeCall(String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling metaGet(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling metaGet(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling metaGet(Async)");
        }
        

        com.squareup.okhttp.Call call = metaGetCall(deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * this method can be used to get the meta data for the current model which set to the server
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return MetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetaData metaGet(String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<MetaData> resp = metaGetWithHttpInfo(deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * this method can be used to get the meta data for the current model which set to the server
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;MetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetaData> metaGetWithHttpInfo(String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = metaGetValidateBeforeCall(deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<MetaData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * this method can be used to get the meta data for the current model which set to the server (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call metaGetAsync(String deploymentName, String versionName, String modelName, final ApiCallback<MetaData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = metaGetValidateBeforeCall(deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetaData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for metaPost
     * @param body the meta data object (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call metaPostCall(MetaData body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call metaPostValidateBeforeCall(MetaData body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling metaPost(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling metaPost(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling metaPost(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling metaPost(Async)");
        }
        

        com.squareup.okhttp.Call call = metaPostCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This method can be used to set meta data for the current model which is set to the server
     * 
     * @param body the meta data object (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return MetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetaData metaPost(MetaData body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<MetaData> resp = metaPostWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * This method can be used to set meta data for the current model which is set to the server
     * 
     * @param body the meta data object (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;MetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetaData> metaPostWithHttpInfo(MetaData body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = metaPostValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<MetaData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This method can be used to set meta data for the current model which is set to the server (asynchronously)
     * 
     * @param body the meta data object (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call metaPostAsync(MetaData body, String deploymentName, String versionName, String modelName, final ApiCallback<MetaData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = metaPostValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetaData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modelset
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to upload (.pb file) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modelsetCall(String deploymentName, String versionName, String modelName, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modelsetValidateBeforeCall(String deploymentName, String versionName, String modelName, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling modelset(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling modelset(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling modelset(Async)");
        }
        

        com.squareup.okhttp.Call call = modelsetCall(deploymentName, versionName, modelName, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set the model to be served
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to upload (.pb file) (optional)
     * @return ModelStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelStatus modelset(String deploymentName, String versionName, String modelName, File file) throws ApiException {
        ApiResponse<ModelStatus> resp = modelsetWithHttpInfo(deploymentName, versionName, modelName, file);
        return resp.getData();
    }

    /**
     * Set the model to be served
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to upload (.pb file) (optional)
     * @return ApiResponse&lt;ModelStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelStatus> modelsetWithHttpInfo(String deploymentName, String versionName, String modelName, File file) throws ApiException {
        com.squareup.okhttp.Call call = modelsetValidateBeforeCall(deploymentName, versionName, modelName, file, null, null);
        Type localVarReturnType = new TypeToken<ModelStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set the model to be served (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param file The model file to upload (.pb file) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modelsetAsync(String deploymentName, String versionName, String modelName, File file, final ApiCallback<ModelStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modelsetValidateBeforeCall(deploymentName, versionName, modelName, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modelupdate
     * @param file The model file to update with (.pb file) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modelupdateCall(File file, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modelupdateValidateBeforeCall(File file, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling modelupdate(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling modelupdate(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling modelupdate(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling modelupdate(Async)");
        }
        

        com.squareup.okhttp.Call call = modelupdateCall(file, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the model to be served
     * 
     * @param file The model file to update with (.pb file) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ModelStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelStatus modelupdate(File file, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<ModelStatus> resp = modelupdateWithHttpInfo(file, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Update the model to be served
     * 
     * @param file The model file to update with (.pb file) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;ModelStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelStatus> modelupdateWithHttpInfo(File file, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = modelupdateValidateBeforeCall(file, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<ModelStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the model to be served (asynchronously)
     * 
     * @param file The model file to update with (.pb file) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modelupdateAsync(File file, String deploymentName, String versionName, String modelName, final ApiCallback<ModelStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modelupdateValidateBeforeCall(file, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for multiclassify
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call multiclassifyCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call multiclassifyValidateBeforeCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling multiclassify(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling multiclassify(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling multiclassify(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling multiclassify(Async)");
        }
        

        com.squareup.okhttp.Call call = multiclassifyCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Represents all of the labels for a given classification
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return MultiClassClassificationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiClassClassificationResult multiclassify(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<MultiClassClassificationResult> resp = multiclassifyWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Represents all of the labels for a given classification
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;MultiClassClassificationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiClassClassificationResult> multiclassifyWithHttpInfo(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = multiclassifyValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<MultiClassClassificationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Represents all of the labels for a given classification (asynchronously)
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call multiclassifyAsync(Prediction body, String deploymentName, String versionName, String modelName, final ApiCallback<MultiClassClassificationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = multiclassifyValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiClassClassificationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for multipredict
     * @param body The multiple input arrays with mask inputs to run inferences on (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call multipredictCall(MultiPredictRequest body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call multipredictValidateBeforeCall(MultiPredictRequest body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling multipredict(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling multipredict(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling multipredict(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling multipredict(Async)");
        }
        

        com.squareup.okhttp.Call call = multipredictCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the output from the network, based on the given INDArray[] input
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param body The multiple input arrays with mask inputs to run inferences on (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return MultiPredictResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiPredictResponse multipredict(MultiPredictRequest body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<MultiPredictResponse> resp = multipredictWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Get the output from the network, based on the given INDArray[] input
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param body The multiple input arrays with mask inputs to run inferences on (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;MultiPredictResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiPredictResponse> multipredictWithHttpInfo(MultiPredictRequest body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = multipredictValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<MultiPredictResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the output from the network, based on the given INDArray[] input (asynchronously)
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param body The multiple input arrays with mask inputs to run inferences on (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call multipredictAsync(MultiPredictRequest body, String deploymentName, String versionName, String modelName, final ApiCallback<MultiPredictResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = multipredictValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiPredictResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for multipredictimage
     * @param file The image file to run the prediction on (required)
     * @param id The id of the request (could be self generated) (required)
     * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call multipredictimageCall(File file, String id, Boolean needsPreprocessing, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);
        if (id != null)
        localVarFormParams.put("id", id);
        if (needsPreprocessing != null)
        localVarFormParams.put("needs_preprocessing", needsPreprocessing);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call multipredictimageValidateBeforeCall(File file, String id, Boolean needsPreprocessing, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'needsPreprocessing' is set
        if (needsPreprocessing == null) {
            throw new ApiException("Missing the required parameter 'needsPreprocessing' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling multipredictimage(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling multipredictimage(Async)");
        }
        

        com.squareup.okhttp.Call call = multipredictimageCall(file, id, needsPreprocessing, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param file The image file to run the prediction on (required)
     * @param id The id of the request (could be self generated) (required)
     * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return MultiPredictResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiPredictResponse multipredictimage(File file, String id, Boolean needsPreprocessing, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<MultiPredictResponse> resp = multipredictimageWithHttpInfo(file, id, needsPreprocessing, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param file The image file to run the prediction on (required)
     * @param id The id of the request (could be self generated) (required)
     * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;MultiPredictResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiPredictResponse> multipredictimageWithHttpInfo(File file, String id, Boolean needsPreprocessing, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = multipredictimageValidateBeforeCall(file, id, needsPreprocessing, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<MultiPredictResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the output from the network using the given image file using the /multipredict endpoint&#39;s method (asynchronously)
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param file The image file to run the prediction on (required)
     * @param id The id of the request (could be self generated) (required)
     * @param needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call multipredictimageAsync(File file, String id, Boolean needsPreprocessing, String deploymentName, String versionName, String modelName, final ApiCallback<MultiPredictResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = multipredictimageValidateBeforeCall(file, id, needsPreprocessing, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiPredictResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for predict
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predictCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predict"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predictValidateBeforeCall(Prediction body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling predict(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling predict(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling predict(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling predict(Async)");
        }
        

        com.squareup.okhttp.Call call = predictCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run inference on the input array.
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return Prediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Prediction predict(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<Prediction> resp = predictWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Run inference on the input array.
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Prediction> predictWithHttpInfo(Prediction body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = predictValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run inference on the input array. (asynchronously)
     * 
     * @param body The input NDArray (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predictAsync(Prediction body, String deploymentName, String versionName, String modelName, final ApiCallback<Prediction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predictValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for predictimage
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predictimageCall(String deploymentName, String versionName, String modelName, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("image", image);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predictimageValidateBeforeCall(String deploymentName, String versionName, String modelName, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling predictimage(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling predictimage(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling predictimage(Async)");
        }
        

        com.squareup.okhttp.Call call = predictimageCall(deploymentName, versionName, modelName, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run inference on the input array, using input image file from multipart form data.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @return Prediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Prediction predictimage(String deploymentName, String versionName, String modelName, File image) throws ApiException {
        ApiResponse<Prediction> resp = predictimageWithHttpInfo(deploymentName, versionName, modelName, image);
        return resp.getData();
    }

    /**
     * Run inference on the input array, using input image file from multipart form data.
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @return ApiResponse&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Prediction> predictimageWithHttpInfo(String deploymentName, String versionName, String modelName, File image) throws ApiException {
        com.squareup.okhttp.Call call = predictimageValidateBeforeCall(deploymentName, versionName, modelName, image, null, null);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run inference on the input array, using input image file from multipart form data. (asynchronously)
     * 
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param image The file to upload. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predictimageAsync(String deploymentName, String versionName, String modelName, File image, final ApiCallback<Prediction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predictimageValidateBeforeCall(deploymentName, versionName, modelName, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for predictwithpreprocess
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predictwithpreprocessCall(List<String> body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predictwithpreprocessValidateBeforeCall(List<String> body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling predictwithpreprocess(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling predictwithpreprocess(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling predictwithpreprocess(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling predictwithpreprocess(Async)");
        }
        

        com.squareup.okhttp.Call call = predictwithpreprocessCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Preprocesses the input and run inference on it
     * 
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return Prediction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Prediction predictwithpreprocess(List<String> body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<Prediction> resp = predictwithpreprocessWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Preprocesses the input and run inference on it
     * 
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Prediction> predictwithpreprocessWithHttpInfo(List<String> body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = predictwithpreprocessValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Preprocesses the input and run inference on it (asynchronously)
     * 
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predictwithpreprocessAsync(List<String> body, String deploymentName, String versionName, String modelName, final ApiCallback<Prediction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predictwithpreprocessValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Prediction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for predictwithpreprocessjson
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predictwithpreprocessjsonCall(List<String> body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson"
            .replaceAll("\\{" + "deploymentName" + "\\}", apiClient.escapeString(deploymentName.toString()))
            .replaceAll("\\{" + "versionName" + "\\}", apiClient.escapeString(versionName.toString()))
            .replaceAll("\\{" + "modelName" + "\\}", apiClient.escapeString(modelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predictwithpreprocessjsonValidateBeforeCall(List<String> body, String deploymentName, String versionName, String modelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling predictwithpreprocessjson(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson(Async)");
        }
        
        // verify the required parameter 'versionName' is set
        if (versionName == null) {
            throw new ApiException("Missing the required parameter 'versionName' when calling predictwithpreprocessjson(Async)");
        }
        
        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling predictwithpreprocessjson(Async)");
        }
        

        com.squareup.okhttp.Call call = predictwithpreprocessjsonCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     * 
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return JsonArrayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JsonArrayResponse predictwithpreprocessjson(List<String> body, String deploymentName, String versionName, String modelName) throws ApiException {
        ApiResponse<JsonArrayResponse> resp = predictwithpreprocessjsonWithHttpInfo(body, deploymentName, versionName, modelName);
        return resp.getData();
    }

    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     * 
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @return ApiResponse&lt;JsonArrayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JsonArrayResponse> predictwithpreprocessjsonWithHttpInfo(List<String> body, String deploymentName, String versionName, String modelName) throws ApiException {
        com.squareup.okhttp.Call call = predictwithpreprocessjsonValidateBeforeCall(body, deploymentName, versionName, modelName, null, null);
        Type localVarReturnType = new TypeToken<JsonArrayResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse (asynchronously)
     * 
     * @param body The input array (required)
     * @param deploymentName Name of the deployment group (required)
     * @param versionName Version name of the endpoint. The default value is \&quot;default\&quot; (required)
     * @param modelName ID or name of the deployed model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predictwithpreprocessjsonAsync(List<String> body, String deploymentName, String versionName, String modelName, final ApiCallback<JsonArrayResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predictwithpreprocessjsonValidateBeforeCall(body, deploymentName, versionName, modelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JsonArrayResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
