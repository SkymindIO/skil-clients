/*
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ai.skymind.skil;

import ai.skymind.ApiException;
import ai.skymind.skil.model.Base64NDArrayBody;
import ai.skymind.skil.model.ClassificationResult;
import ai.skymind.skil.model.DetectionResult;
import java.io.File;
import ai.skymind.skil.model.JsonArrayResponse;
import ai.skymind.skil.model.LogBatch;
import ai.skymind.skil.model.LogRequest;
import ai.skymind.skil.model.MetaData;
import ai.skymind.skil.model.ModelStatus;
import ai.skymind.skil.model.MultiClassClassificationResult;
import ai.skymind.skil.model.MultiPredictRequest;
import ai.skymind.skil.model.MultiPredictResponse;
import ai.skymind.skil.model.Prediction;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InferenceApi
 */
@Ignore
public class InferenceApiTest {

    private final InferenceApi api = new InferenceApi();

    
    /**
     * Use the deployed model to classify the input
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void classifyTest() throws ApiException {
        Prediction body = null;
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        ClassificationResult response = api.classify(body, deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * Same as /classify but returns the output as Base64NDArrayBody
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void classifyarrayTest() throws ApiException {
        Prediction body = null;
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        Base64NDArrayBody response = api.classifyarray(body, deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * Use the deployed model to classify the input, using input image file from multipart form data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void classifyimageTest() throws ApiException {
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        File image = null;
        ClassificationResult response = api.classifyimage(deploymentName, versionName, modelName, image);

        // TODO: test validations
    }
    
    /**
     * Detect the objects, given a (input) prediction request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detectobjectsTest() throws ApiException {
        String id = null;
        Boolean needsPreprocessing = null;
        Float threshold = null;
        File file = null;
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        DetectionResult response = api.detectobjects(id, needsPreprocessing, threshold, file, deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * Run inference on the input and returns it as a JsonArrayResponse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jsonarrayTest() throws ApiException {
        Prediction body = null;
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        JsonArrayResponse response = api.jsonarray(body, deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * Get logs file path
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logfilepathTest() throws ApiException {
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        String response = api.logfilepath(deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * Get logs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsTest() throws ApiException {
        LogRequest body = null;
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        LogBatch response = api.logs(body, deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * this method can be used to get the meta data for the current model which set to the server
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metaGetTest() throws ApiException {
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        MetaData response = api.metaGet(deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * This method can be used to set meta data for the current model which is set to the server
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metaPostTest() throws ApiException {
        MetaData body = null;
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        MetaData response = api.metaPost(body, deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * Set the model to be served
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelsetTest() throws ApiException {
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        File file = null;
        ModelStatus response = api.modelset(deploymentName, versionName, modelName, file);

        // TODO: test validations
    }
    
    /**
     * Update the model to be served
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelupdateTest() throws ApiException {
        File file = null;
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        ModelStatus response = api.modelupdate(file, deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * Represents all of the labels for a given classification
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void multiclassifyTest() throws ApiException {
        Prediction body = null;
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        MultiClassClassificationResult response = api.multiclassify(body, deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * Get the output from the network, based on the given INDArray[] input
     *
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void multipredictTest() throws ApiException {
        MultiPredictRequest body = null;
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        MultiPredictResponse response = api.multipredict(body, deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
     *
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void multipredictimageTest() throws ApiException {
        File file = null;
        String id = null;
        Boolean needsPreprocessing = null;
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        MultiPredictResponse response = api.multipredictimage(file, id, needsPreprocessing, deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * Run inference on the input array.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void predictTest() throws ApiException {
        Prediction body = null;
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        Prediction response = api.predict(body, deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * Run inference on the input array, using input image file from multipart form data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void predictimageTest() throws ApiException {
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        File image = null;
        Prediction response = api.predictimage(deploymentName, versionName, modelName, image);

        // TODO: test validations
    }
    
    /**
     * Preprocesses the input and run inference on it
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void predictwithpreprocessTest() throws ApiException {
        List<String> body = null;
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        Prediction response = api.predictwithpreprocess(body, deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void predictwithpreprocessjsonTest() throws ApiException {
        List<String> body = null;
        String deploymentName = null;
        String versionName = null;
        String modelName = null;
        JsonArrayResponse response = api.predictwithpreprocessjson(body, deploymentName, versionName, modelName);

        // TODO: test validations
    }
    
}
