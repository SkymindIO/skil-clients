/*
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ai.skymind.skil;

import ai.skymind.ApiException;
import ai.skymind.skil.model.CreateDeploymentRequest;
import ai.skymind.skil.model.DeploymentResponse;
import ai.skymind.skil.model.ImportModelRequest;
import ai.skymind.skil.model.InlineResponse200;
import ai.skymind.skil.model.ModelEntity;
import ai.skymind.skil.model.SetState;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeploymentApi
 */
@Ignore
public class DeploymentApiTest {

    private final DeploymentApi api = new DeploymentApi();

    
    /**
     * Delete a model by deployment and model id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModelTest() throws ApiException {
        String deploymentId = null;
        String modelId = null;
        InlineResponse200 response = api.deleteModel(deploymentId, modelId);

        // TODO: test validations
    }
    
    /**
     * Deploy a model in a deployment group.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deployModelTest() throws ApiException {
        String deploymentId = null;
        ImportModelRequest body = null;
        ModelEntity response = api.deployModel(deploymentId, body);

        // TODO: test validations
    }
    
    /**
     * Create a new deployment group.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deploymentCreateTest() throws ApiException {
        CreateDeploymentRequest body = null;
        DeploymentResponse response = api.deploymentCreate(body);

        // TODO: test validations
    }
    
    /**
     * Delete a deployment by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deploymentDeleteTest() throws ApiException {
        String deploymentId = null;
        InlineResponse200 response = api.deploymentDelete(deploymentId);

        // TODO: test validations
    }
    
    /**
     * Get a deployment details by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deploymentGetTest() throws ApiException {
        String deploymentId = null;
        DeploymentResponse response = api.deploymentGet(deploymentId);

        // TODO: test validations
    }
    
    /**
     * Get a list of deployments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deploymentsTest() throws ApiException {
        List<DeploymentResponse> response = api.deployments();

        // TODO: test validations
    }
    
    /**
     * Modify the state (start/stop) of a deployed model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelStateChangeTest() throws ApiException {
        String deploymentId = null;
        String modelId = null;
        SetState body = null;
        ModelEntity response = api.modelStateChange(deploymentId, modelId, body);

        // TODO: test validations
    }
    
    /**
     * Retrieve a list of all the deployed models given a deployment id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelsTest() throws ApiException {
        String deploymentId = null;
        List<ModelEntity> response = api.models(deploymentId);

        // TODO: test validations
    }
    
    /**
     * Reimport a model to a previous deployed model in a deployment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reimportModelTest() throws ApiException {
        String deploymentId = null;
        String modelId = null;
        ImportModelRequest body = null;
        ModelEntity response = api.reimportModel(deploymentId, modelId, body);

        // TODO: test validations
    }
    
}
