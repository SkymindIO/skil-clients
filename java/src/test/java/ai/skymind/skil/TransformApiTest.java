/*
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ai.skymind.skil;

import ai.skymind.ApiException;
import ai.skymind.skil.model.Base64NDArrayBody;
import ai.skymind.skil.model.BatchCSVRecord;
import java.io.File;
import ai.skymind.skil.model.SingleCSVRecord;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransformApi
 */
@Ignore
public class TransformApiTest {

    private final TransformApi api = new TransformApi();

    
    /**
     * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
     *
     * Takes a batch of SingleCSVRecord object and transforms it into the desired format
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transformCsvTest() throws ApiException {
        String deploymentName = null;
        String versionName = null;
        String transformName = null;
        BatchCSVRecord batchCSVRecord = null;
        BatchCSVRecord response = api.transformCsv(deploymentName, versionName, transformName, batchCSVRecord);

        // TODO: test validations
    }
    
    /**
     * Takes a batch input arrays and transforms it
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transformarrayTest() throws ApiException {
        String deploymentName = null;
        String versionName = null;
        String transformName = null;
        Object batchRecord = null;
        Base64NDArrayBody response = api.transformarray(deploymentName, versionName, transformName, batchRecord);

        // TODO: test validations
    }
    
    /**
     * Takes multiple multipart image file to transform and returns Base64NDArrayBody
     *
     * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transformimageTest() throws ApiException {
        String deploymentName = null;
        String versionName = null;
        String imageTransformName = null;
        List<byte[]> files = null;
        Base64NDArrayBody response = api.transformimage(deploymentName, versionName, imageTransformName, files);

        // TODO: test validations
    }
    
    /**
     * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
     *
     * Takes a SingleCSVRecord object and transforms it into the desired format
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transformincrementalCsvTest() throws ApiException {
        String deploymentName = null;
        String versionName = null;
        String transformName = null;
        SingleCSVRecord singleCSVRecord = null;
        SingleCSVRecord response = api.transformincrementalCsv(deploymentName, versionName, transformName, singleCSVRecord);

        // TODO: test validations
    }
    
    /**
     * Same as /transformincremental but returns Base64NDArrayBody.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transformincrementalarrayTest() throws ApiException {
        String deploymentName = null;
        String versionName = null;
        String transformName = null;
        Object singleRecord = null;
        Base64NDArrayBody response = api.transformincrementalarray(deploymentName, versionName, transformName, singleRecord);

        // TODO: test validations
    }
    
    /**
     * Takes a single multipart image file to transform and returns Base64NDArrayBody
     *
     * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transformincrementalimageTest() throws ApiException {
        String deploymentName = null;
        String versionName = null;
        String imageTransformName = null;
        File file = null;
        Base64NDArrayBody response = api.transformincrementalimage(deploymentName, versionName, imageTransformName, file);

        // TODO: test validations
    }
    
    /**
     * Gets the JSON string of the deployed transform process (CSV or Image)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transformprocessGetTest() throws ApiException {
        String deploymentName = null;
        String versionName = null;
        String transformName = null;
        Object response = api.transformprocessGet(deploymentName, versionName, transformName);

        // TODO: test validations
    }
    
    /**
     * Sets the deployed (CSV or Image) transform process through the provided JSON string
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transformprocessPostTest() throws ApiException {
        String deploymentName = null;
        String versionName = null;
        String transformName = null;
        Object transformProcess = null;
        Object response = api.transformprocessPost(deploymentName, versionName, transformName, transformProcess);

        // TODO: test validations
    }
    
}
