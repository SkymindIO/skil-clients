/*
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ai.skymind.skil;

import ai.skymind.ApiException;
import ai.skymind.skil.model.AddExampleRequest;
import ai.skymind.skil.model.AddModelHistoryRequest;
import ai.skymind.skil.model.AggregatePrediction;
import ai.skymind.skil.model.BestModel;
import ai.skymind.skil.model.EvaluationResultsEntity;
import ai.skymind.skil.model.ExampleEntity;
import ai.skymind.skil.model.ExperimentEntity;
import ai.skymind.skil.model.InlineResponse200;
import ai.skymind.skil.model.MinibatchEntity;
import ai.skymind.skil.model.ModelFeedBackRequest;
import ai.skymind.skil.model.ModelHistoryEntity;
import ai.skymind.skil.model.ModelInstanceEntity;
import ai.skymind.skil.model.UpdateBestModel;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModelHistoryApi
 */
@Ignore
public class ModelHistoryApiTest {

    private final ModelHistoryApi api = new ModelHistoryApi();

    
    /**
     * Adds an evaluation result
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addEvaluationResultTest() throws ApiException {
        String modelHistoryServerId = null;
        EvaluationResultsEntity evaluationResultsEntity = null;
        EvaluationResultsEntity response = api.addEvaluationResult(modelHistoryServerId, evaluationResultsEntity);

        // TODO: test validations
    }
    
    /**
     * Adds a number of examples to a minibatch ID given an AddExampleRequest.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addExampleForBatchTest() throws ApiException {
        String modelHistoryServerId = null;
        AddExampleRequest addExampleRequest = null;
        AddExampleRequest response = api.addExampleForBatch(modelHistoryServerId, addExampleRequest);

        // TODO: test validations
    }
    
    /**
     * Adds an example to a minibatch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addExampleToMinibatchTest() throws ApiException {
        String modelHistoryServerId = null;
        ExampleEntity exampleEntity = null;
        ExampleEntity response = api.addExampleToMinibatch(modelHistoryServerId, exampleEntity);

        // TODO: test validations
    }
    
    /**
     * Add an experiment, given an experiment entity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addExperimentTest() throws ApiException {
        String modelHistoryServerId = null;
        ExperimentEntity experimentEntity = null;
        ExperimentEntity response = api.addExperiment(modelHistoryServerId, experimentEntity);

        // TODO: test validations
    }
    
    /**
     * Adds a minibatch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMinibatchTest() throws ApiException {
        String modelHistoryServerId = null;
        MinibatchEntity minibatchEntity = null;
        MinibatchEntity response = api.addMinibatch(modelHistoryServerId, minibatchEntity);

        // TODO: test validations
    }
    
    /**
     * Adds an evaluation feedback to the model against a given minibatch id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addModelFeedbackTest() throws ApiException {
        String modelHistoryServerId = null;
        ModelFeedBackRequest modelFeedBackRequest = null;
        ModelFeedBackRequest response = api.addModelFeedback(modelHistoryServerId, modelFeedBackRequest);

        // TODO: test validations
    }
    
    /**
     * Add a model history / workspace
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addModelHistoryTest() throws ApiException {
        String modelHistoryServerId = null;
        AddModelHistoryRequest addModelHistoryRequest = null;
        ModelHistoryEntity response = api.addModelHistory(modelHistoryServerId, addModelHistoryRequest);

        // TODO: test validations
    }
    
    /**
     * Adds a model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addModelInstanceTest() throws ApiException {
        String modelHistoryServerId = null;
        ModelInstanceEntity modelInstanceEntity = null;
        ModelInstanceEntity response = api.addModelInstance(modelHistoryServerId, modelInstanceEntity);

        // TODO: test validations
    }
    
    /**
     * Aggregates the evaluaition results of a model instance, based on the evaluation type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregateModelResultsTest() throws ApiException {
        String modelHistoryServerId = null;
        AggregatePrediction aggregatePrediction = null;
        EvaluationResultsEntity response = api.aggregateModelResults(modelHistoryServerId, aggregatePrediction);

        // TODO: test validations
    }
    
    /**
     * Creates model History
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createModelHistoryTest() throws ApiException {
        String modelHistoryServerId = null;
        ModelHistoryEntity modelHistoryEntity = null;
        ModelHistoryEntity response = api.createModelHistory(modelHistoryServerId, modelHistoryEntity);

        // TODO: test validations
    }
    
    /**
     * Deletes an experiment, given an experiment entity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExperimentTest() throws ApiException {
        String modelHistoryServerId = null;
        String experimentID = null;
        InlineResponse200 response = api.deleteExperiment(modelHistoryServerId, experimentID);

        // TODO: test validations
    }
    
    /**
     * Deletes a model history / workspace, given its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModelHistoryTest() throws ApiException {
        String modelHistoryServerId = null;
        String modelHistoryID = null;
        InlineResponse200 response = api.deleteModelHistory(modelHistoryServerId, modelHistoryID);

        // TODO: test validations
    }
    
    /**
     * Deletes a model instance, given its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModelInstanceTest() throws ApiException {
        String modelHistoryServerId = null;
        String modelInstanceID = null;
        api.deleteModelInstance(modelHistoryServerId, modelInstanceID);

        // TODO: test validations
    }
    
    /**
     * Gets the best model among the given model instance IDs, based on the evaluation type and column metric
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBestModelAmongModelIdsTest() throws ApiException {
        String modelHistoryServerId = null;
        BestModel bestModel = null;
        ModelInstanceEntity response = api.getBestModelAmongModelIds(modelHistoryServerId, bestModel);

        // TODO: test validations
    }
    
    /**
     * Gets the list of evaluation results entity, given a model instance ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEvaluationForModelIDTest() throws ApiException {
        String modelHistoryServerId = null;
        String modelInstanceID = null;
        List<EvaluationResultsEntity> response = api.getEvaluationForModelID(modelHistoryServerId, modelInstanceID);

        // TODO: test validations
    }
    
    /**
     * Gets all the examples for a minibatch ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExamplesForMinibatchTest() throws ApiException {
        String modelHistoryServerId = null;
        String minibatchId = null;
        List<ExampleEntity> response = api.getExamplesForMinibatch(modelHistoryServerId, minibatchId);

        // TODO: test validations
    }
    
    /**
     * Obtain an experiment&#39;s details, given its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExperimentTest() throws ApiException {
        String modelHistoryServerId = null;
        String experimentID = null;
        ExperimentEntity response = api.getExperiment(modelHistoryServerId, experimentID);

        // TODO: test validations
    }
    
    /**
     * Obtain all experiments for a model history / workspace
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExperimentsForModelHistoryTest() throws ApiException {
        String modelHistoryServerId = null;
        String modelHistoryID = null;
        ExperimentEntity response = api.getExperimentsForModelHistory(modelHistoryServerId, modelHistoryID);

        // TODO: test validations
    }
    
    /**
     * Gets a minibatch for the model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMinibatchTest() throws ApiException {
        String modelHistoryServerId = null;
        String minibatchId = null;
        MinibatchEntity response = api.getMinibatch(modelHistoryServerId, minibatchId);

        // TODO: test validations
    }
    
    /**
     * Gets a model history, given its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelHistoryTest() throws ApiException {
        String modelHistoryServerId = null;
        String modelHistoryID = null;
        ModelHistoryEntity response = api.getModelHistory(modelHistoryServerId, modelHistoryID);

        // TODO: test validations
    }
    
    /**
     * Gets a model instance, given its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelInstanceTest() throws ApiException {
        String modelHistoryServerId = null;
        String modelInstanceID = null;
        ModelInstanceEntity response = api.getModelInstance(modelHistoryServerId, modelInstanceID);

        // TODO: test validations
    }
    
    /**
     * Obtain a list of all the models for an experiment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelsForExperimentTest() throws ApiException {
        String modelHistoryServerId = null;
        String experimentID = null;
        List<ModelInstanceEntity> response = api.getModelsForExperiment(modelHistoryServerId, experimentID);

        // TODO: test validations
    }
    
    /**
     * List all of the experiments in every model history / workspace
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllExperimentsTest() throws ApiException {
        String modelHistoryServerId = null;
        List<ExperimentEntity> response = api.listAllExperiments(modelHistoryServerId);

        // TODO: test validations
    }
    
    /**
     * Updates the best model for an experiment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBestModelForExperimentTest() throws ApiException {
        String modelHistoryServerId = null;
        UpdateBestModel updateBestModel = null;
        ExperimentEntity response = api.updateBestModelForExperiment(modelHistoryServerId, updateBestModel);

        // TODO: test validations
    }
    
    /**
     * Updates an experiment, given an experiment entity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExperimentTest() throws ApiException {
        String modelHistoryServerId = null;
        String experimentID = null;
        ExperimentEntity experimentEntity = null;
        ExperimentEntity response = api.updateExperiment(modelHistoryServerId, experimentID, experimentEntity);

        // TODO: test validations
    }
    
    /**
     * Update a model history / workspace
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateModelHistoryTest() throws ApiException {
        String modelHistoryServerId = null;
        String modelHistoryID = null;
        AddModelHistoryRequest updateModelHistoryRequest = null;
        ModelHistoryEntity response = api.updateModelHistory(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest);

        // TODO: test validations
    }
    
}
