/*
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ai.skymind.skil;

import ai.skymind.ApiException;
import ai.skymind.skil.model.CreateJobRequest;
import ai.skymind.skil.model.DownloadOutputFileRequest;
import ai.skymind.skil.model.JobEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobApi
 */
@Ignore
public class JobApiTest {

    private final JobApi api = new JobApi();

    
    /**
     * Create a job
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createJobTest() throws ApiException {
        String jobIdOrType = null;
        CreateJobRequest createJobRequest = null;
        JobEntity response = api.createJob(jobIdOrType, createJobRequest);

        // TODO: test validations
    }
    
    /**
     * Deletes a job given its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobByIdTest() throws ApiException {
        Long jobIdOrType = null;
        api.deleteJobById(jobIdOrType);

        // TODO: test validations
    }
    
    /**
     * Download the output file from the job&#39;s execution. This will ONLY work if the job&#39;s run status is &#39;COMPLETE&#39;.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadJobOutputFileTest() throws ApiException {
        Long jobId = null;
        DownloadOutputFileRequest downloadOutputFileRequest = null;
        api.downloadJobOutputFile(jobId, downloadOutputFileRequest);

        // TODO: test validations
    }
    
    /**
     * Get a list of all available jobs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllJobsTest() throws ApiException {
        List<JobEntity> response = api.getAllJobs();

        // TODO: test validations
    }
    
    /**
     * Get a job by its ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJobByIdTest() throws ApiException {
        Long jobIdOrType = null;
        JobEntity response = api.getJobById(jobIdOrType);

        // TODO: test validations
    }
    
    /**
     * Refresh the remote job status. Can be used for monitoring.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshJobStatusTest() throws ApiException {
        Long jobId = null;
        JobEntity response = api.refreshJobStatus(jobId);

        // TODO: test validations
    }
    
    /**
     * Start running an (already created) job on the remote resource
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runAJobTest() throws ApiException {
        Long jobId = null;
        JobEntity response = api.runAJob(jobId);

        // TODO: test validations
    }
    
}
