---
swagger: "2.0"
info:
  description: Endpoints API for different services in SKIL
  version: 1.1.0-beta
  title: Endpoints
host: localhost:9008
schemes:
- https
securityDefinitions:
  api_key:
    type: apiKey
    name: authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.
  
  
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.
  
  
     The following syntax must be used in the 'Authorization' header :
  
         Bearer xxxxxx.yyyyyyy.zzzzzz
security:
  - api_key: []
paths:
  # ---------------------------------------------------------------------------------------
  # Authentication endpoint
  # ---------------------------------------------------------------------------------------
  /login:
    post:
      operationId: login
      summary: Post JSON credentials and obtain a JWT authorization token.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: credentials
        in: body
        description: Login credentials.
        required: true
        schema:
          $ref: '#/definitions/Credentials'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Token'
        401:
          description: Invalid credentials
  /api/upload/model:
    post:
      operationId: upload
      summary: Upload a model file to SKIL for import.
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: file
        in: formData
        type: file
        description: The file to upload.
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/FileUploadList'
  # ---------------------------------------------------------------------------------------
  # CSV transform server endpoints
  # ---------------------------------------------------------------------------------------
  /endpoints/{deploymentName}/datavec/{transformName}/default/transformprocess:
    get:
      operationId: transformprocess_get
      summary: Gets the JSON string of the deployed transform process
      description: |
        Retrieves the JSON string of the deployed transform process
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: transformName
        in: path
        description: ID or name of the deployed transform
        required: true
        type: string
      responses:
        200:
          description: the deployed transform process
          schema:
            $ref: '#/definitions/TransformProcess'
        400:
          description: the transform process is probably null
        500:
          description: internal server error
    post:
      operationId: transformprocess_post
      summary: Sets the deployed transform process through the provided JSON string
      description: Sets the transform process with the provided JSON string
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: transformName
        in: path
        description: ID or name of the deployed transform
        required: true
        type: string
      - in: body
        name: TransformProcess
        description: The transform process to set
        schema:
          $ref: '#/definitions/TransformProcess'
      responses:
        200:
          description: transform process set successfully
        500:
          description: internal server error
  /endpoints/{deploymentName}/datavec/{transformName}/default/transformincremental:
    post:
      operationId: transformincremental_csv
      summary: Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
      description: Takes a SingleCSVRecord object and transforms it into the desired format
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: transformName
        in: path
        description: ID or name of the deployed transform
        required: true
        type: string
      - in: body
        name: SingleCSVRecord
        description: The input record array
        schema:
          $ref: '#/definitions/SingleCSVRecord'
      responses:
        200:
          description: array transformed and returned successfully
          schema:
            $ref: '#/definitions/SingleCSVRecord'
        500:
          description: internal server error during transforming the array
  /endpoints/{deploymentName}/datavec/{transformName}/default/transform:
    post:
      operationId: transform_csv
      summary: Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
      description: Takes a batch of SingleCSVRecord object and transforms it into the desired format
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: transformName
        in: path
        description: ID or name of the deployed transform
        required: true
        type: string
      - in: body
        name: BatchCSVRecord
        description: The input batch of record arrays
        schema:
          $ref: '#/definitions/BatchCSVRecord'
      responses:
        200:
          description: array transformed and returned successfully
          schema:
            $ref: '#/definitions/BatchCSVRecord'
        500:
          description: internal server error during transforming the array
  /endpoints/{deploymentName}/datavec/{transformName}/default/transformincrementalarray:
    post:
      operationId: transformincrementalarray_csv
      summary: Same as /transformincremental but returns Base64NDArrayBody
      description: Takes a SingleCSVRecord object and transforms it into the desired format and returns it in the form of Base64NDArrayBody
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: transformName
        in: path
        description: ID or name of the deployed transform
        required: true
        type: string
      - in: body
        name: SingleCSVRecord
        description: The input record array
        schema:
          $ref: '#/definitions/SingleCSVRecord'
      responses:
        200:
          description: array transformed and returned successfully
          schema:
            $ref: '#/definitions/Base64NDArrayBody'
        500:
          description: internal server error during transforming the array
  /endpoints/{deploymentName}/datavec/{transformName}/default/transformarray:
    post:
      operationId: transformarray_csv
      summary: Takes a batch input arrays and transforms it
      description: Takes a batch of SingleCSVRecord object and transforms it into the desired format and returns it in the form of Base64NDArrayBody
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: transformName
        in: path
        description: ID or name of the deployed transform
        required: true
        type: string
      - in: body
        name: BatchCSVRecord
        description: The input batch of record arrays
        schema:
          $ref: '#/definitions/BatchCSVRecord'
      responses:
        200:
          description: array transformed and returned successfully
          schema:
            $ref: '#/definitions/Base64NDArrayBody'
        500:
          description: internal server error during transforming the array
  # ---------------------------------------------------------------------------------------
  # Image transform server endpoint
  # ---------------------------------------------------------------------------------------
  /endpoints/{deploymentName}/datavec/{imageTransformName}/default/transformprocess:
    get:
      operationId: imagetransformprocess_get
      summary: Retrieves the image transform process JSON string
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: imageTransformName
        in: path
        description: ID or name of the deployed image transform
        required: true
        type: string
      responses:
        200:
          description: Image transform process JSON successfully retrieved
          schema:
            $ref: '#/definitions/ImageTransformProcess'
    post:
      operationId: imagetransformprocess_post
      summary: Sets the image transform process through the provided JSON string
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: imageTransformName
        in: path
        description: ID or name of the deployed image transform
        required: true
        type: string
      - name: body
        in: body
        description: The image transform process JSON
        required: true
        schema:
          $ref: '#/definitions/ImageTransformProcess'
      responses:
        200:
          description: Image transform process JSON successfully set
          schema:
            $ref: '#/definitions/ImageTransformProcess'
  /endpoints/{deploymentName}/datavec/{imageTransformName}/default/transformincrementalarray:
    post:
      operationId: transformincrementalarray_image
      summary: Takes SingleImageRecord to transform and returns Base64NDArrayBody
      description: Takes a SingleImageRecord object and transforms it into the desired format and returns it in the form of Base64NDArrayBody
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: imageTransformName
        in: path
        description: ID or name of the deployed image transform
        required: true
        type: string
      - in: body
        name: SingleImageRecord
        required: true
        description: The input record array
        schema:
          $ref: '#/definitions/SingleImageRecord'
      responses:
        200:
          description: array transformed and returned successfully
          schema:
            $ref: '#/definitions/Base64NDArrayBody'
        500:
          description: internal server error during transforming the array
  /endpoints/{deploymentName}/datavec/{imageTransformName}/default/transformincrementalimage:
    post:
      operationId: transformincrementalimage
      summary: Takes a single multipart image file to transform and returns Base64NDArrayBody
      description: Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: imageTransformName
        in: path
        description: ID or name of the deployed image transform
        required: true
        type: string
      - name: file
        in: formData
        type: file
        required: true
        description: The image file to upload
      responses:
        200:
          description: array transformed and returned successfully
          schema:
            $ref: '#/definitions/Base64NDArrayBody'
        400:
          description: No uploaded file found or the file couldn't be loaded
        500:
          description: internal server error during transforming the array
  /endpoints/{deploymentName}/datavec/{imageTransformName}/default/transformarray:
    post:
      operationId: transformarray_image
      summary: Takes a batch of images uri and transforms it and returns Base64NDArrayBody
      description: Takes a batch of SingleImageRecord object and transforms it into the desired format and returns it in the form of Base64NDArrayBody
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: imageTransformName
        in: path
        description: ID or name of the deployed image transform
        required: true
        type: string
      - in: body
        name: BatchImageRecord
        required: true
        description: The input batch of record arrays
        schema:
          $ref: '#/definitions/BatchImageRecord'
      responses:
        200:
          description: array transformed and returned successfully
          schema:
            $ref: '#/definitions/Base64NDArrayBody'
        500:
          description: internal server error during transforming the array
  /endpoints/{deploymentName}/datavec/{imageTransformName}/default/transformimage:
    post:
      operationId: transformimage
      summary: Takes multiple multipart image file to transform and returns Base64NDArrayBody
      description: Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: imageTransformName
        in: path
        description: ID or name of the deployed image transform
        required: true
        type: string
      - name: files #Docs => https://swagger.io/docs/specification/2-0/file-upload/
        in: formData
        type: array
        required: true
        description: The image files to upload
        items:
          type: string
          format: binary
      responses:
        200:
          description: array transformed and returned successfully
          schema:
            $ref: '#/definitions/Base64NDArrayBody'
        400:
          description: No uploaded files found
        500:
          description: internal server error during transforming the array
  # ---------------------------------------------------------------------------------------
  # Nearest neighbor server endpoints
  # ---------------------------------------------------------------------------------------
  /endpoints/{deploymentName}/knn/{knnName}/default/knn:
    post:
      operationId: knn
      summary: Runs knn on the given index with the given k
      description: Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: knnName
        in: path
        description: ID or name of the deployed knn
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/NearestNeighborRequest'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/NearestNeighborsResults'
        400:
          description: Invalid input
        500:
          description: Internal server error
  /endpoints/{deploymentName}/knn/{knnName}/default/knnnew:
    post:
      operationId: knnnew
      summary: Run a k nearest neighbors search on a NEW data point
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: knnName
        in: path
        description: ID or name of the deployed knn
        required: true
        type: string
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Base64NDArrayBodyKNN'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/NearestNeighborsResults'
        400:
          description: Invalid input
        500:
          description: Internal server error
  # ---------------------------------------------------------------------------------------
  # Prediction service endpoints
  # ---------------------------------------------------------------------------------------
  /endpoints/{deploymentName}/model/{modelName}/default/predict:
    post:
      operationId: predict
      summary: Run inference on the input array.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Prediction'
        400:
          description: Invalid input
        500:
          description: Invalid deployment or model name
  /endpoints/{deploymentName}/model/{modelName}/default/predictimage:
    post:
      operationId: predictimage
      summary: Run inference on the input array, using input image file from multipart form data.
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: image
        in: formData
        type: file
        description: The file to upload.
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Prediction'
        500:
          description: Error generating prediction
  /endpoints/{deploymentName}/model/{modelName}/default/multipredict:
    post:
      operationId: multipredict
      summary: Get the output from the network, based on the given INDArray[] input
      description: Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        description: The multiple input arrays with mask inputs to run inferences on
        required: true
        schema:
          $ref: '#/definitions/MultiPredictRequest'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/MultiPredictResponse'
        500:
          description: Error generating prediction
  /endpoints/{deploymentName}/model/{modelName}/default/classify:
    post:
      operationId: classify
      summary: Use the deployed model to classify the input
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ClassificationResult'
        400:
          description: Invalid input
        500:
          description: Invalid deployment or model name
  /endpoints/{deploymentName}/model/{modelName}/default/classifyimage:
    post:
      operationId: classifyimage
      summary: Use the deployed model to classify the input, using input image file from multipart form data.
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: image
        in: formData
        type: file
        description: The file to upload.
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ClassificationResult'
        500:
          description: Error generating classification
  /endpoints/{deploymentName}/model/{modelName}/default/classifyarray:
    post:
      operationId: classifyarray
      summary: Same as /classify but returns the output as Base64NDArrayBody
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Base64NDArrayBody'
        400:
          description: Invalid input
        500:
          description: Invalid deployment or model name
  /endpoints/{deploymentName}/model/{modelName}/default/multiclassify:
    post:
      operationId: multiclassify
      summary: Represents all of the labels for a given classification
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/MultiClassClassificationResult'
        400:
          description: Invalid input
        500:
          description: Invalid deployment or model name
  /endpoints/{deploymentName}/model/{modelName}/default/modelset:
    post:
      operationId: modelset
      summary: Set the model to be served
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: file
        in: formData
        description: The model file to upload (.pb file)
        required: false
        type: file
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: Model set successfully
          schema:
            $ref: '#/definitions/ModelStatus'
        500:
          description: Error setting model
  /endpoints/{deploymentName}/model/{modelName}/default/modelupdate:
    post:
      operationId: modelupdate
      summary: Update the model to be served
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: file
        in: formData
        description: The model file to update with (.pb file)
        required: false
        type: file
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: Model updated successfully or model update failed
          schema:
            $ref: '#/definitions/ModelStatus'
        500:
          description: Error updating model
  /endpoints/{deploymentName}/model/{modelName}/default/jsonarray:
    post:
      operationId: jsonarray
      summary: Run inference on the input and returns it as a JsonArrayResponse
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/JsonArrayResponse'
        500:
          description: Error generating array prediction
  /endpoints/{deploymentName}/model/{modelName}/default/predictwithpreprocess:
    post:
      operationId: predictwithpreprocess
      summary: Preprocesses the input and run inference on it
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input array
        required: true
        schema:
          type: array
          items:
            type: string
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Prediction'
        500:
          description: Error executing predictPreProcess
  /endpoints/{deploymentName}/model/{modelName}/default/predictwithpreprocessjson:
    post:
      operationId: predictwithpreprocessjson
      summary: Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input array
        required: true
        schema:
          type: array
          items:
            type: string
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/JsonArrayResponse'
        500:
          description: Error executing predictPreProcessJson
  /endpoints/{deploymentName}/model/{modelName}/default/logs:
    post:
      operationId: logs
      summary: Get logs
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: the the log request
        required: true
        schema:
          $ref: '#/definitions/LogRequest'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: logs obtained successfully
          schema:
            $ref: '#/definitions/LogBatch'
        500:
          description: Error retrieving logs
  /endpoints/{deploymentName}/model/{modelName}/default/logfilepath:
    get:
      operationId: logfilepath
      summary: Get logs file path
      produces:
      - text
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: the retrieved log file path
          schema:
            type: string
            example: log_file_path
        500:
          description: Error retrieving log file path
  /endpoints/{deploymentName}/model/{modelName}/default/meta:
    get:
      operationId: meta_get
      summary: this method can be used to get the meta data for the current model which set to the server
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          schema:
            $ref: '#/definitions/MetaData'
    post:
      operationId: meta_post
      summary: This method can be used to set meta data for the current model which is set to the server
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: the meta data object
        required: true
        schema:
          $ref: '#/definitions/MetaData'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: the meta data object that was set
          schema:
            $ref: '#/definitions/MetaData'
  /endpoints/{deploymentName}/model/{modelName}/default/detectobjects:
    post:
      operationId: detectobjects
      summary: Detect the objects, given a (input) prediction request
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: id
        in: formData
        type: string
        required: true
        description: the GUID for mapping the results in the detections
      - name: needsPreprocessing
        in: formData
        type: boolean
        required: true
        description: (true) if the image needs preprocessing
      - name: threshold
        in: formData
        type: number
        format: float
        required: true
        description: A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.
      - name: imageFile
        in: formData
        type: file
        required: true
        description: the image file to detect objects from
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: the detected objects in the given input
          schema:
            $ref: '#/definitions/DetectionResult'
  # ---------------------------------------------------------------------------------------
  # Deployment endpoints
  # ---------------------------------------------------------------------------------------
  /deployments:
    get:
      operationId: deployments
      summary: Get a list of deployments
      produces:
      - application/json
      responses:
        200:
          description: List of the deployments retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/DeploymentResponse'
  /deployment/{deploymentId}:
    get:
      operationId: deployment_get
      summary: Get a deployment details by id
      produces:
      - application/json
      parameters:
        - name: deploymentId
          in: path
          description: Id of the deployment group
          required: true
          type: string
      responses:
        200:
          description: The deployment details
          schema:
            $ref: '#/definitions/DeploymentResponse'
    delete:
      operationId: deployment_delete
      summary: Delete a deployment by id
      produces:
      - application/json
      parameters:
        - name: deploymentId
          in: path
          description: Id of the deployment group
          required: true
          type: string
      responses:
        200:
          description: The status of the removed deployment
          schema:
            type: object
            properties:
              status:
                type: string
  /deployment:
    post:
      operationId: deploymentCreate
      summary: Create a new deployment group.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: the deployment request
        required: true
        schema:
          $ref: '#/definitions/CreateDeploymentRequest'
      responses:
        200:
          description: the added deployment
          schema:
            $ref: '#/definitions/DeploymentResponse'
        500:
          description: Error creating deployment
  /deployment/{deploymentId}/models:
    get:
      operationId: models
      summary: Retrieve a list of all the deployed models given a deployment id
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: ID deployment group
        required: true
        type: string
      responses:
        200:
          description: Retrieved model list
          schema:
            type: array
            items:
              $ref: '#/definitions/ModelEntity'
  /deployment/{deploymentId}/model:
    post:
      operationId: deployModel
      summary: Deploy a model in a deployment group.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: ID deployment group
        required: true
        type: string
      - in: body
        name: body
        description: the model import request
        required: true
        schema:
          $ref: '#/definitions/ImportModelRequest'
      responses:
        200:
          description: the deployed model
          schema:
            $ref: '#/definitions/ModelEntity'
  /deployment/{deploymentId}/model/{modelId}:
    post:
      operationId: reimportModel
      summary: Reimport a model to a previous deployed model in a deployment
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: ID deployment group
        required: true
        type: string
      - name: modelId
        in: path
        description: the id of the deployed model
        required: true
        type: string
      - in: body
        name: body
        description: the deployment request
        required: true
        schema:
          $ref: '#/definitions/ImportModelRequest'
      responses:
        200:
          description: the reimported model entity
          schema:
            $ref: '#/definitions/ModelEntity'
    delete:
      operationId: delete_model
      summary: Delete a model by deployment and model id
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: ID deployment group
        required: true
        type: string
      - name: modelId
        in: path
        description: the id of the deployed model
        required: true
        type: string
      responses:
        200:
          description: the deleted model status
          schema:
            type: object
            properties:
              status:
                type: string
  /deployment/{deploymentId}/model/{modelId}/state:
    post:
      operationId: modelStateChange
      summary: Modify the state (start/stop) of a deployed model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: ID deployment group
        required: true
        type: string
      - name: modelId
        in: path
        description: the id of the deployed model
        required: true
        type: string
      - in: body
        name: body
        description: the model state object
        required: true
        schema:
          $ref: '#/definitions/SetState'
      responses:
        200:
          description: the model entity with its state changed
          schema:
            $ref: '#/definitions/ModelEntity'
  # ---------------------------------------------------------------------------------------
  # Model History endpoints (host:port <-> locahost:9100)
  # ---------------------------------------------------------------------------------------
  /model/revision/{modelHistoryID}:
    get:
      operationId: getModelHistory
      summary: Gets a model history, given its ID
      produces:
      - application/json
      parameters:
      - name: modelHistoryID
        in: path
        type: string
        required: true
        description: GUID of the model history to get information of.
      responses:
        200:
          description: Model history entity
          schema:
            $ref: '#/definitions/ModelHistoryEntity'
  /modelhistory:
    post:
      operationId: addModelHistory
      summary: Add a model history / workspace
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: addModelHistoryRequest
        in: body
        type: object
        required: true
        description: The model history request object
        schema:
          $ref: '#/definitions/AddModelHistoryRequest'
      responses:
        200:
          description: The added model history entity
          schema:
            $ref: '#/definitions/ModelHistoryEntity'
  /modelhistory/{modelHistoryID}:
    post:
      operationId: updateModelHistory
      summary: Update a model history / workspace
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryID
        in: path
        type: string
        required: true
        format: guid
        description: the GUID of the model history / workspace to update
      - name: updateModelHistoryRequest
        in: body
        type: object
        required: true
        description: The model history request object
        schema:
          $ref: '#/definitions/AddModelHistoryRequest'
      responses:
        200:
          description: The updated model history entity
          schema:
            $ref: '#/definitions/ModelHistoryEntity'
    delete:
      operationId: deleteModelHistory
      summary: Deletes a model history / workspace, given its ID
      produces:
      - application/json
      parameters:
      - name: modelHistoryID
        in: path
        type: string
        required: true
        format: guid
        description: the GUID of the model history / workspace to delete
      responses:
        200:
          description: Workspace deleted
          schema:
            type: object
            properties:
              status:
                type: string
        400:
          description: The specified Workspace no longer exists
          schema:
            type: object
            properties:
              status:
                type: string
  /experiments:
    get:
      operationId: listAllExperiments
      summary: List all of the experiments in every model history / workspace
      produces:
      - application/json
      responses:
        200:
          description: List of all the experiment entities.
          schema:
            type: array
            items:
              $ref: '#/definitions/ExperimentEntity'
  /experiments/{modelHistoryID}:
    get:
      operationId: getExperimentsForModelHistory
      summary: Obtain all experiments for a model history / workspace
      produces:
      - application/json
      parameters:
      - name: modelHistoryID
        in: path
        type: string
        required: true
        format: guid
        description: the GUID of the model history / workspace
      responses:
        200:
          description: List of all the experiment entities in a model history
          schema:
            $ref: '#/definitions/ExperimentEntity'
  /experiment/{experimentID}:
    get:
      operationId: getExperiment
      summary: Obtain an experiment's details, given its ID
      produces:
      - application/json
      parameters:
      - name: experimentID
        in: path
        type: string
        required: true
        format: guid
        description: the GUID of the experiment to delete
      responses:
        200:
          description: Experiment Entity
          schema:
            type: object
            properties:
              status:
                type: string
    put:
      operationId: updateExperiment
      summary: Updates an experiment, given an experiment entity
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: experimentID
        in: path
        type: string
        required: true
        format: guid
        description: the GUID of the experiment to update
      - name: experimentEntity
        in: body
        type: object
        required: true
        description: The experiment entity to update with
        schema:
          $ref: '#/definitions/ExperimentEntity'
      responses:
        200:
          description: The updated experiment entity.
          schema:
            $ref: '#/definitions/ExperimentEntity'
    delete:
      operationId: deleteExperiment
      summary: Deletes an experiment, given an experiment entity
      produces:
      - application/json
      parameters:
      - name: experimentID
        in: path
        type: string
        required: true
        format: guid
        description: the GUID of the experiment to delete
      responses:
        200:
          description: Experiment deleted successfully
          schema:
            type: object
            properties:
              status:
                type: string
        400:
          description: Experiment no longer exists
          schema:
            type: object
            properties:
              status:
                type: string
  /experiment:
    post:
      operationId: addExperiment
      summary: Add an experiment, given an experiment entity
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: experimentEntity
        in: body
        type: object
        required: true
        description: The experiment entity to add
        schema:
          $ref: '#/definitions/ExperimentEntity'
      responses:
        200:
          description: The added experiment entity.
          schema:
            $ref: '#/definitions/ExperimentEntity'
  /experiment/best:
    post:
      operationId: updateBestModelForExperiment
      summary: Updates the best model for an experiment
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: updateBestModel
        in: body
        type: object
        required: true
        description: Model encapsulating the experiment id to update and the best model id.
        schema:
          $ref: '#/definitions/UpdateBestModel'
      responses:
        200:
          description: The updated experiment entity.
          schema:
            $ref: '#/definitions/ExperimentEntity'
  /experiment/{experimentID}/models:
    get:
      operationId: getModelsForExperiment
      summary: Obtain a list of all the models for an experiment
      produces:
      - application/json
      parameters:
      - name: experimentID
        in: path
        type: string
        required: true
        format: guid
        description: the GUID of the experiment
      responses:
        200:
          description: List of all the models for the specified experiment
          schema:
            type: object
            items:
              $ref: '#/definitions/ModelInstanceEntity'
  /model/{modelInstanceID}:
    get:
      operationId: getModelInstance
      summary: Gets a model instance, given its ID
      produces:
      - application/json
      parameters:
      - name: modelInstanceID
        in: path
        type: string
        required: true
        description: GUID of the model instance to get information of.
      responses:
        200:
          description: Model instance entity
          schema:
            $ref: '#/definitions/ModelInstanceEntity'
    delete:
      operationId: deleteModelInstance
      summary: Deletes a model instance, given its ID
      produces:
      - application/json
      parameters:
      - name: modelInstanceID
        in: path
        type: string
        required: true
        description: GUID of the model instance to delete.
      responses:
        200:
          description: Empty content
  /model:
    post:
      operationId: addModelInstance
      summary: Adds a model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelInstanceEntity
        in: body
        type: object
        required: true
        description: The object encapsulating the model instance id and evaluation type to aggregate
        schema:
          $ref: '#/definitions/ModelInstanceEntity'
      responses:
        200:
          description: The added model instance entity
          schema:
            $ref: '#/definitions/ModelInstanceEntity'
  /model/best:
    post:
      operationId: getBestModelAmongModelIds
      summary: Gets the best model among the given model instance IDs, based on the evaluation type and column metric
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: bestModel
        in: body
        type: object
        required: true
        description: Object encapsulating the model ids, eval type and column metric name
        schema:
          $ref: '#/definitions/BestModel'
      responses:
        200:
          description: The best model instance entity
          schema:
            $ref: '#/definitions/ModelInstanceEntity'
  /model/revisions:
    post:
      operationId: createModelHistory
      summary: Creates model History
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryEntity
        in: body
        type: object
        required: true
        description: The model history entity
        schema:
          $ref: '#/definitions/ModelHistoryEntity'
      responses:
        200:
          description: The created model history
          schema:
            $ref: '#/definitions/ModelHistoryEntity'
  /model/revisions/evaluations:
    post:
      operationId: addEvaluationResult
      summary: Adds an evaluation result
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: evaluationResultsEntity
        in: body
        type: object
        required: true
        description: The evaluation result entity
        schema:
          $ref: '#/definitions/EvaluationResultsEntity'
      responses:
        200:
          description: The added evaluation result entity
          schema:
            $ref: '#/definitions/EvaluationResultsEntity'
  /model/revisions/evaluations/{modelInstanceID}:
    get:
      operationId: getEvaluationForModelID
      summary: Gets the list of evaluation results entity, given a model instance ID
      produces:
      - application/json
      parameters:
      - name: modelInstanceID
        in: path
        type: string
        required: true
        description: GUID of the model instance to get evaluation results for.
      responses:
        200:
          description: List of evaluation result entities
          schema:
            type: array
            items:
              $ref: '#/definitions/EvaluationResultsEntity'
  /model/aggregateresults:
    post:
      operationId: aggregateModelResults
      summary: Aggregates the evaluaition results of a model instance, based on the evaluation type
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: aggregatePrediction
        in: body
        type: object
        required: true
        description: The object encapsulating the model instance id and evaluation type to aggregate
        schema:
          $ref: '#/definitions/AggregatePrediction'
      responses:
        200:
          description: Evaluation result entity contained the aggregated/merged results
          schema:
            $ref: '#/definitions/EvaluationResultsEntity'
  /model/minibatch/{minibatchId}:
    get:
      operationId: getMinibatch
      summary: Gets a minibatch for the model
      produces:
      - application/json
      parameters:
      - name: minibatchId
        in: path
        type: string
        required: true
        description: The GUID of the minibatch
      responses:
        200:
          description: The minibatch entity
          schema:
            $ref: '#/definitions/MinibatchEntity'
  /model/minibatch:
    post:
      operationId: addMinibatch
      summary: Adds a minibatch
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: minibatchEntity
        in: body
        type: object
        required: true
        description: The minibatch entity to add
        schema:
          $ref: '#/definitions/MinibatchEntity'
      responses:
        200:
          description: The added minibatch entity
          schema:
            $ref: '#/definitions/MinibatchEntity'
  /model/example/{minibatchId}:
    get:
      operationId: getExamplesForMinibatch
      summary: Gets all the examples for a minibatch ID
      produces:
      - application/json
      parameters:
      - name: minibatchId
        in: path
        type: string
        required: true
        description: The GUID of the minibatch
      responses:
        200:
          description: List of the associated examples with the minibatch
          schema:
            type: array
            items:
              $ref: '#/definitions/ExampleEntity'
  /model/example:
    post:
      operationId: addExampleToMinibatch
      summary: Adds an example to a minibatch
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: exampleEntity
        in: body
        type: object
        required: true
        description: The example to add to the minibatch
        schema:
          $ref: '#/definitions/ExampleEntity'
      responses:
        200:
          description: The added example entity
          schema:
            $ref: '#/definitions/ExampleEntity'
  /model/exampleForBatch:
    post:
      operationId: addExampleForBatch
      summary: Adds a number of examples to a minibatch ID given an AddExampleRequest.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: AddExampleRequest
        in: body
        type: object
        required: true
        description: The add example request, encapsulating minibatch details and examples batch size
        schema:
          $ref: '#/definitions/AddExampleRequest'
      responses:
        200:
          description: The add example request
          schema:
            $ref: '#/definitions/addExampleRequest'
definitions:
  TransformProcess:
    type: object
  SingleCSVRecord:
    required:
    - values
    properties:
      values:
        type: array
        items:
          type: string
  BatchCSVRecord:
    required:
    - records
    properties:
      records:
        type: array
        items:
          $ref: '#/definitions/SingleCSVRecord'
  ImageTransformProcess:
    type: object
  SingleImageRecord:
    required:
    - uri
    properties:
      uri:
        type: string
        example: file:/E:/Image/image.jpg
  BatchImageRecord:
    required:
    - records
    properties:
      records:
        type: array
        items:
          $ref: '#/definitions/SingleImageRecord'
  Base64NDArrayBody:
    required:
    - ndarray
    properties:
      ndarray:
        type: string
  Base64NDArrayBodyKNN:
    required:
    - ndarray
    - k
    properties:
      ndarray:
        type: string
        description: the array to run the search on. Note that this must be a row vector
      k:
        type: integer
        description: the number of results to retrieve
        example: 2
      forceFillK:
        type: boolean
        example: false
  NearestNeighborRequest:
    properties:
      k:
        type: integer
        description: the number of results
        example: 2
      inputIndex:
        type: integer
        description: the index of the EXISTING ndarray to run a search on
        example: 3
  NearestNeighborsResult:
    properties:
      index:
        type: integer
        example: 0
      distance:
        type: number
        example: 1.00
      label:
        type: string
  NearestNeighborsResults:
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/NearestNeighborsResult'
  ImportModelRequest:
    type: object
    properties:
      name:
        type: string
      scale:
        type: integer
      uri:
        type: array
        items:
          type: string
      modelType:
        type: string
      fileLocation:
        type: string
      jvmArgs:
        type: string
      subType:
        type: string
      labelsFileLocation:
        type: string
      extraArgs:
        type: string
      etlJson:
        type: string
      inputNames:
        type: array
        items:
          type: string
      outputNames:
        type: array
        items:
          type: string
    example:
      name: new_model
      scale: 1
      uri: 'my_deployment/model/new_model/v1'
      modelType: model
      fileLocation: 'file:///var/skil/storage/models/d8...eb28.zip'
  DeploymentResponse:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      deploymentSlug:
        type: string
      status:
        type: string
      body:
        $ref: '#/definitions/DeploymentObjects'
  DeploymentObjects:
    type: object
    properties:
      models:
        type: array
        items:
          $ref: '#/definitions/DeploymentObjects'
      transforms:
        type: array
        items:
          $ref: '#/definitions/DeploymentObjects'
      knn:
        type: array
        items:
          $ref: '#/definitions/DeploymentObjects'
  CreateDeploymentRequest:
    type: object
    properties:
      name:
        type: string
        description: name of the deployment
  ModelEntity:
    type: object
    properties:
      id:
        type: integer
        format: int64
      created:
        type: integer
        format: int64
      updated:
        type: integer
        format: int64
      modelType:
        type: string
        enum:
        - transform
        - model
        - knn
      deploymentId:
        type: integer
        format: int64
      name:
        type: string
      scale:
        type: number
      fileLocation:
        type: string
      state:
        type: string
        enum:
        - created
        - starting
        - started
        - stopping
        - stopped
        - unhealthy
        - failed
      jvmArgs:
        type: string
      subType:
        type: string
      labelsFileLocation:
        type: string
      extraArgs:
        type: string
      launchPolicy:
        type: object
      modelState:
        type: string
        enum:
        - CREATED
        - STARTING
        - STARTED
        - STOPPING
        - STOPPED
        - UNHEALTHY
        - FAILED
  SetState:
    type: string
    enum:
    - start
    - stop
  ModelResponse:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      status:
        type: string
      scale:
        type: integer
      uri:
        type: array
        items:
          type: string
  NewDeployment:
    type: object
    properties:
      name:
        type: string
    example:
      name: productiongroup
  Credentials:
    type: object
    properties:
      userId:
        type: string
      password:
        type: string
    example:
      userId: admin
      password: admin
  Token:
    type: object
    properties:
      token:
        type: string
    example:
      token: xxxxxxx.yyyyyyy.zzzzzz
  FileUploadList:
    type: object
    properties:
      fileUploadResponseList:
        type: array
        items:
          $ref: '#/definitions/FileUpload'
  FileUpload:
    type: object
    properties:
      key:
        type: string
      fileName:
        type: string
      status:
        type: string
      type:
        type: string
      path:
        type: string
      fileContent:
        type: string
  INDArray:
    type: object
    properties:
      array:
        type: string
        format: guid
      shape:
        type: array
        items:
          type: integer
      ordering:
        type: string
        enum:
        - f
        - c
      data:
        type: array
        items:
          type: number
          format: float
      dataType:
        type: string
        enum:
        - INT8
        - UINT8
        - INT16
        - INT16
        - FLOAT16
  Prediction:
    type: object
    properties:
      id:
        type: string
        format: guid
      needsPreProcessing:
        type: boolean
      prediction:
        $ref: '#/definitions/INDArray'
      inputMask:
        $ref: '#/definitions/INDArray'
    example:
      needsPreProcessing: true
      prediction:
        array: array
      id: id
  MultiPredictRequest:
    type: object
    properties:
      id:
        type: string
        format: guid
      needsPreProcessing:
        type: boolean
      inputs:
        type: array
        items:
          $ref: '#/definitions/INDArray'
      inputMasks:
        type: array
        items:
          $ref: '#/definitions/INDArray'
  MultiPredictResponse:
    type: object
    properties:
      id:
        type: string
        format: guid
      needsPreProcessing:
        type: boolean
      outputs:
        type: array
        items:
          $ref: '#/definitions/INDArray'
  ClassificationResult:
    properties:
      results:
        type: array
        description: index classification results for the minibatch
        items:
          type: integer
      probabilities:
        type: array
        description: max probabilities for the batch items
        items:
          type: number
          example: 0.452
      minibatchId:
        type: string
        description: minibatch ID
    example:
      minibatchId: minibatchId
      results:
      - 0
      - 0
      probabilities:
      - 0.452
      - 0.452
  Base64NDArrayBody:
    properties:
      ndarray:
        type: string
    example:
      ndarray: ndarray
  MultiClassClassificationResult:
    properties:
      rankedOutcomes:
        type: array
        items:
          type: array
          items:
            type: string
      maxOutcomes:
        type: array
        items:
          type: string
      probabilities:
        type: array
        items:
          type: array
          items:
            type: number
            example: 0.4
    description: Represents all of the labels for a given classification
    example:
      maxOutcomes:
      - maxOutcomes
      - maxOutcomes
      rankedOutcomes:
      - - rankedOutcomes
        - rankedOutcomes
      - - rankedOutcomes
        - rankedOutcomes
      probabilities:
      - - 0.4
        - 0.4
      - - 0.4
        - 0.4
  ModelStatus:
    properties:
      status:
        type: integer
        example: 100
        description: "100 - Model set successfully \n200 - Model Updated Successfully\
          \ \n201 - Model Update Failed\n"
    example:
      status: 100
  JsonArrayResponse:
    properties:
      array:
        $ref: '#/definitions/INDArray'
    example:
      array:
        array: array
  LogRequest:
    properties:
      offset:
        type: integer
        example: 0
      rowCount:
        type: integer
        example: 2
      head:
        type: boolean
        example: false
    example:
      head: false
      offset: 0
      rowCount: 2
  LogBatch:
    properties:
      offset:
        type: integer
        example: 0
      rowCount:
        type: integer
        example: 2
      logs:
        type: string
    example:
      offset: 0
      rowCount: 2
      logs: logs
  MetaData:
    type: object
  DetectedObject:
    type: object
    properties:
      centerX:
        type: number
        format: float
      centerY:
        type: number
        format: float
      width:
        type: number
        format: float
      height:
        type: number
        format: float
      predictedClasses:
        type: array
        items:
          type: string
      confidences:
        type: array
        items:
          type: number
          format: float
  DetectionResult:
    type: object
    properties:
      id:
        type: string
      objects:
        type: array
        items:
          $ref: '#/definitions/DetectedObject'
  ModelHistoryEntity:
    type: object
    properties:
      created:
        type: integer
        format: int64
        description: When the model history / workspace was created
      modelHistoryId:
        type: string
        format: guid
        description: The GUID of the model history / workspace
      modelName:
        type: string
        description: Name of the model history / workspace
      modelLabels:
        type: string
        description: Model history / workspace labels
  AddModelHistoryRequest:
    type: object
    properties:
      modelName:
        type: string
        description: Name of the model history / workspace
      modelLabels:
        type: string
        description: Model history / workspace labels
  ExperimentEntity:
    type: object
    properties:
      bestModelId:
        type: string
        description: GUID of the best selected model in an experiment
      inputDataUri:
        type: string
        description: Input data URI
      experimentId:
        type: string
        description: GUID of the experiment
      experimentName:
        type: string
        description: Experiment's name
      experimentDescription:
        type: string
        description: Experiment's description
      notebookJson:
        type: string
        description: The associated Zeppelin notebook JSON string
      notebookUrl:
        type: string
        description: URL of the associated Zeppelin notebook
      zeppelinId:
        type: string
        description: Zeppelin ID
      modelHistoryId:
        type: string
        description: Id of the model history / workspace
      lastUpdated:
        type: integer
        format: int64
        description: Indicates the time when experiment was last updated
  UpdateBestModel:
    type: object
    properties:
      experimentId:
        type: string
        format: guid
        description: GUID of the experiment to update.
      bestModelId:
        type: string
        format: guid
        description: GUID of the model to set as the best model.
  ModelInstanceEntity:
    type: object
    properties:
      uri:
        type: string
        format: uri
        description: The model URI
      etlJson:
        type: string
        description: The json string for the ETL (Extract, Transform and Load)
      modelId:
        type: string
        format: guid
        description: GUID of the model.
      modelLabels:
        type: string
        description: Comma-separated labels string for the model
      inputFormats:
        type: string
        description: Format for the model input
      created:
        type: integer
        format: int64
        description: When the model was created
      notebookJson:
        type: string
        description: JSON string of the associated Zeppelin Notebook
      evalId:
        type: string
        format: guid
        description: GUID for the model evaluation
      modelName:
        type: string
        description: Model's name
      originalModelId:
        type: string
        format: guid
        description: Original GUID of the model (used for maintaining revisions of a particular model)
      modelVersion:
        type: string
        description: Model version
      experimentId:
        type: string
        format: guid
        description: GUID of the Experiment which is associated with the model.
  EvaluationResultsEntity:
    type: object
    properties:
      evaluation:
        type: string
      evalName:
        type: string
      modelInstanceId:
        type: string
        format: guid
      created:
        type: integer
        format: int64
        description: When the evaluation result was created
      f1:
        type: number
        format: double
      precision:
        type: number
        format: double
      recall:
        type: number
        format: double
      accuracy:
        type: number
        format: double
      rmse:
        type: number
        format: double
      auc:
        type: number
        format: double
      meanAbsoluteError:
        type: number
        format: double
      meanRelativeError:
        type: number
        format: double
      r2:
        type: number
        format: double
      evalId:
        type: string
        format: guid
        description: GUID of the evaluation
      evalVersion:
        type: integer
      binaryThreshold:
        type: number
        format: double
      binaryThresholds:
        type: string
  AggregatePrediction:
    type: object
    properties:
      modelId:
        type: string
        format: guid
        description: GUID of model instance
      evalType:
        type: string
        enum:
        - ROC_BINARY
        - ROC
        - EVALUATION_BINARY
        - EVALUATION
        - REGRESSON_EVALUATION
        - ROC_MULTI_CLASS
        description: the evaluation type to aggregate
  MinibatchEntity:
    type: object
    properties:
      miniBatchId:
        type: string
        format: guid
        description: GUID of mini batch
      evalId:
        type: string
        format: guid
        description: GUID of the evaluation
      evalVersion:
        type: integer
        description: Eval version
      batchVersion:
        type: integer
        description: Batch version
  ExampleEntity:
    type:
    properties:
      exampleId:
        type: string
        format: guid
        description: the GUID of the example
      exampleVersion:
        type: integer
        description: Example version
      int rowNumber:
        type: integer
        description: Row Number
      created:
        type: integer
        format: int64
        description: when the example was created
      miniBatchId:
        type: string
        format: guid
        description: The GUID of the minibatch
      miniBatchVersion:
        type: integer
        description: minibatch version
  AddExampleRequest:
    type: object
    properties:
      minibatch:
        $ref: '#/definitions/MinibatchEntity'
        description: the minibatch the examples are going to be associated with
      batchSize:
        type: integer
        description: the size of the batch to create
  BestModel:
    type: object
    properties:
      ids:
        type: array
        items:
          type: string
          format: guid
        description: the list of GUIDs for the models to get the best model from
      columnNameMetric:
        type: string
        enum:
        - f1
        - precision
        - recall
        - accuracy
        - rmse
        - auc
        - meanAbsoluteError
        - meanRelativeError
        - r2
        description: Name of the column metric (in an evaluation result) to get the best model from.
      evalType:
        type: string
        enum:
        - ROC_BINARY
        - ROC
        - EVALUATION_BINARY
        - EVALUATION
        - REGRESSON_EVALUATION
        - ROC_MULTI_CLASS
        description: the evaluation type to aggregate for each model's revisions