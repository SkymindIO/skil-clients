---
swagger: "2.0"
info:
  description: Endpoints API for different services in SKIL
  version: 1.2.0-rc1
  title: Endpoints
host: localhost:9008
schemes:
- http
securityDefinitions:
  api_key:
    type: apiKey
    name: authorization
    in: header
    description: |
      For accessing the API a valid JWT token must be passed in all the queries in
      the 'Authorization' header.


      A valid JWT token is generated by the API and retourned as answer of a call
      to the route /login giving a valid user & password.


      The following syntax must be used in the 'Authorization' header :

          Bearer xxxxxx.yyyyyyy.zzzzzz
security:
- api_key: []
tags:
- name: User
  description: Users endpoints.
- name: Utilities
  description: Utilities endpoints.
- name: ModelHistory
  description: Model History endpoints.
- name: Deployment
  description: Deployment Endpoints.
- name: Transform
  description: Transform endpoints.
- name: Inference
  description: Inference endpoints.
- name: InferenceV2
  description: Inference endpoints for model server V2.
- name: RetrainV2
  description: Retrain endpoints for model server V2.
- name: MemMapV2
  description: Memory mapped endpoints for model server V2.
- name: KNN
  description: KNN endpoints.
- name: Resource
  description: Resource Endpoints.
- name: Job
  description: Job endpoints.
- name: Default
  description: Default tag containing all of the endpoints.
x-samples-languages:
- curl
- python
- java
- csharp
- node
- javascript
- objectivec 
- php
- ruby
- swift
- go
paths:
  # ---------------------------------------------------------------------------------------
  # User endpoints
  # ---------------------------------------------------------------------------------------
  /login:
    post:
      operationId: login
      summary: Post JSON credentials and obtain a JWT authorization token.
      tags:
      - User
      - Default
      security: []
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: LoginRequest
        in: body
        description: Login credentials.
        required: true
        schema:
          $ref: '#/definitions/LoginRequest'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/LoginResponse'
        401:
          description: Invalid credentials
  /user/register:
    post:
      operationId: registerUser
      summary: Register a new user
      tags:
      - User
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: User
        in: body
        description: User details
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: User added successfully.
          schema:
            $ref: '#/definitions/User'
  /user/{userId}:
    get:
      operationId: getUser
      summary: Get a user by user ID
      tags:
      - User
      - Default
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: User's ID
        required: true
        type: string
      responses:
        200:
          description: Successfully received the user details
          schema:
            $ref: '#/definitions/User'
  /user:
    put:
      operationId: updateUser
      summary: Update a user
      tags:
      - User
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: User
        in: body
        description: User details
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: User updated successfully.
          schema:
            $ref: '#/definitions/User'
  /user/{userId}/password:
    post:
      operationId: changeUserPassword
      summary: Change user's password
      tags:
      - User
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: User's ID
        required: true
        type: string
      - name: ChangePasswordRequest
        in: body
        description: Password details.
        required: true
        schema:
          $ref: '#/definitions/ChangePasswordRequest'
      responses:
        200:
          description: Updated user.
          schema:
            $ref: '#/definitions/User'
  /auth/policy:
    get:
      operationId: getAuthPolicy
      summary: Get auth policy
      tags:
      - User
      - Default
      produces:
      - application/json
      responses:
        200:
          description: AuthPolicy object
          schema:
            $ref: '#/definitions/AuthPolicy'
    put:
      operationId: updateAuthPolicy
      summary: Update auth policy
      tags:
      - User
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: AuthPolicy
        in: body
        description: Auth policy object
        required: true
        schema:
          $ref: '#/definitions/AuthPolicy'
      responses:
        200:
          description: Update AuthPolicy object
          schema:
            $ref: '#/definitions/AuthPolicy'
  /auth/token:
    post:
      operationId: generateAuthToken
      summary: Generate new auth token
      tags:
      - User
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: TokenGenerateRequest
        in: body
        description: Auth token details.
        required: true
        schema:
          $ref: '#/definitions/TokenGenerateRequest'
      responses:
        200:
          description: Generated auth token.
          schema:
            $ref: '#/definitions/Token'
  /auth/{userId}/tokens:
    get:
      operationId: getUserAuthTokens
      summary: Get auth tokens for a user.
      tags:
      - User
      - Default
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: User's ID
        required: true
        type: string
      - name: onlyValid
        in: query
        description: True if you only want the valid tokens.
        required: false
        type: boolean
      responses:
        200:
          description: Successfully received the user auth tokens.
          schema:
            type: array
            items:
              $ref: '#/definitions/Token'
  /auth/token/{tokenId}:
    delete:
      operationId: revokeUserToken
      summary: Revoke a user token.
      tags:
      - User
      - Default
      produces:
      - application/json
      parameters:
      - name: tokenId
        in: path
        description: Token ID
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: The revoked token object.
          schema:
            $ref: '#/definitions/Token'
  /security/users:
    get:
      operationId: getUsers
      summary: Get all users.
      tags:
      - User
      - Default
      produces:
      - application/json
      responses:
        200:
          description: Successfully received all users.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /security/roles:
    get:
      operationId: getRoles
      summary: Get all roles.
      tags:
      - User
      - Default
      produces:
      - application/json
      responses:
        200:
          description: Successfully received all roles.
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
  # ---------------------------------------------------------------------------------------
  # Utilities endpoints
  # ---------------------------------------------------------------------------------------
  /api/upload/model:
    post:
      operationId: upload
      summary: Upload a model file to SKIL for import.
      tags:
      - Utilities
      - Default
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: file
        in: formData
        type: file
        description: The file to upload.
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/FileUploadList'
  # ---------------------------------------------------------------------------------------
  # CSV and/or IMAGE transform server endpoints
  # ---------------------------------------------------------------------------------------
  /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess:
    get:
      operationId: transformprocess_get
      summary: Gets the JSON string of the deployed transform process (CSV or Image)
      tags:
      - Transform
      - Default
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: transformName
        in: path
        description: ID or name of the deployed transform
        required: true
        type: string
      responses:
        200:
          description: the deployed transform process
          schema:
            type: object
        400:
          description: the transform process is probably null
        500:
          description: internal server error
    post:
      operationId: transformprocess_post
      summary: Sets the deployed (CSV or Image) transform process through the provided JSON string
      tags:
      - Transform
      - Default
      consumes:
      - text/plain
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        description: The `Content-Type` should be `application/json`.
        type: string
        enum:
        - application/json
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: transformName
        in: path
        description: ID or name of the deployed transform
        required: true
        type: string
      - in: body
        name: TransformProcess
        description: The transform process to set (Specify a JSON string here).
        schema:
          type: string
      responses:
        200:
          description: transform process set successfully
          schema:
            type: object
        500:
          description: internal server error
  /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental:
    post:
      operationId: transformincremental_csv
      summary: Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
      tags:
      - Transform
      - Default
      description: Takes a SingleCSVRecord object and transforms it into the desired format
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: transformName
        in: path
        description: ID or name of the deployed transform
        required: true
        type: string
      - in: body
        name: SingleCSVRecord
        description: The input record array
        schema:
          $ref: '#/definitions/SingleCSVRecord'
      responses:
        200:
          description: Array transformed and returned successfully
          schema:
            $ref: '#/definitions/SingleCSVRecord'
        500:
          description: internal server error during transforming the array
  /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform:
    post:
      operationId: transform_csv
      summary: Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
      tags:
      - Transform
      - Default
      description: Takes a batch of SingleCSVRecord object and transforms it into the desired format
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: transformName
        in: path
        description: ID or name of the deployed transform
        required: true
        type: string
      - in: body
        name: BatchCSVRecord
        description: The input batch of record arrays
        schema:
          $ref: '#/definitions/BatchCSVRecord'
      responses:
        200:
          description: array transformed and returned successfully
          schema:
            $ref: '#/definitions/BatchCSVRecord'
        500:
          description: internal server error during transforming the array
  /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray:
    post:
      operationId: transformincrementalarray
      summary: Same as /transformincremental but returns Base64NDArrayBody.
      tags:
      - Transform
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: transformName
        in: path
        description: ID or name of the deployed transform
        required: true
        type: string
      - in: body
        name: SingleRecord
        description: The input record array
        schema:
          $ref: '#/definitions/SingleRecord'
      responses:
        200:
          description: array transformed and returned successfully
          schema:
            $ref: '#/definitions/Base64NDArrayBody'
        500:
          description: internal server error during transforming the array
  /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray:
    post:
      operationId: transformarray
      summary: Takes a batch input arrays and transforms it
      tags:
      - Transform
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: transformName
        in: path
        description: ID or name of the deployed transform
        required: true
        type: string
      - in: body
        name: BatchRecord
        description: The input batch of record arrays
        schema:
          $ref: '#/definitions/BatchRecord'
      responses:
        200:
          description: array transformed and returned successfully
          schema:
            $ref: '#/definitions/Base64NDArrayBody'
        500:
          description: internal server error during transforming the array
  # ---------------------------------------------------------------------------------------
  # Image only transform server endpoint
  # ---------------------------------------------------------------------------------------
  /endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage:
    post:
      operationId: transformincrementalimage
      summary: Takes a single multipart image file to transform and returns Base64NDArrayBody
      description: Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
      tags:
      - Transform
      - Default
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: imageTransformName
        in: path
        description: ID or name of the deployed image transform
        required: true
        type: string
      - name: file
        in: formData
        type: file
        required: true
        description: The image file to upload
      responses:
        200:
          description: array transformed and returned successfully
          schema:
            $ref: '#/definitions/Base64NDArrayBody'
        400:
          description: No uploaded file found or the file couldn't be loaded
        500:
          description: internal server error during transforming the array
  /endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage:
    post:
      operationId: transformimage
      summary: Takes multiple multipart image file to transform and returns Base64NDArrayBody
      description: Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
      tags:
      - Transform
      - Default
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: imageTransformName
        in: path
        description: ID or name of the deployed image transform
        required: true
        type: string
      - name: files #Docs => https://swagger.io/docs/specification/2-0/file-upload/
        in: formData
        type: array
        required: true
        description: The image files to upload
        items:
          type: string
          format: binary
      responses:
        200:
          description: array transformed and returned successfully
          schema:
            $ref: '#/definitions/Base64NDArrayBody'
        400:
          description: No uploaded files found
        500:
          description: internal server error during transforming the array
  # ---------------------------------------------------------------------------------------
  # Nearest neighbor server endpoints
  # ---------------------------------------------------------------------------------------
  /endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn:
    post:
      operationId: knn
      summary: Runs knn on the given index with the given k
      description: Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
      tags:
      - KNN
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: knnName
        in: path
        description: ID or name of the deployed knn
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/NearestNeighborRequest'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/NearestNeighborsResults'
        400:
          description: Invalid input
        500:
          description: Internal server error
  /endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew:
    post:
      operationId: knnnew
      summary: Run a k nearest neighbors search on a NEW data point
      tags:
      - KNN
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: knnName
        in: path
        description: ID or name of the deployed knn
        required: true
        type: string
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Base64NDArrayBodyKNN'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/NearestNeighborsResults'
        400:
          description: Invalid input
        500:
          description: Internal server error
  # ---------------------------------------------------------------------------------------
  # Prediction service endpoints
  # ---------------------------------------------------------------------------------------
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/predict:
    post:
      operationId: predict
      summary: Run inference on the input array.
      tags:
      - Inference
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Prediction'
        400:
          description: Invalid input
        500:
          description: Invalid deployment or model name
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage:
    post:
      operationId: predictimage
      summary: Run inference on the input array, using input image file from multipart form data.
      tags:
      - Inference
      - Default
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: image
        in: formData
        type: file
        description: The file to upload.
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Prediction'
        500:
          description: Error generating prediction
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict:
    post:
      operationId: multipredict
      summary: Get the output from the network, based on the given INDArray[] input
      description: Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
      tags:
      - Inference
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        description: The multiple input arrays with mask inputs to run inferences on
        required: true
        schema:
          $ref: '#/definitions/MultiPredictRequest'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/MultiPredictResponse'
        500:
          description: Error generating prediction
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage:
    post:
      operationId: multipredictimage
      summary: Get the output from the network using the given image file using the /multipredict endpoint's method
      description: Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
      tags:
      - Inference
      - Default
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: file
        in: formData
        type: file
        required: true
        description: The image file to run the prediction on
      - name: id
        in: formData
        type: string
        required: true
        description: The id of the request (could be self generated)
      - name: needs_preprocessing
        in: formData
        type: boolean
        required: true
        description: Whether or not the preprocessing is required (either 'true' or 'false')
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/MultiPredictResponse'
        500:
          description: Error generating prediction
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/classify:
    post:
      operationId: classify
      summary: Use the deployed model to classify the input
      tags:
      - Inference
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ClassificationResult'
        400:
          description: Invalid input
        500:
          description: Invalid deployment or model name
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage:
    post:
      operationId: classifyimage
      summary: Use the deployed model to classify the input, using input image file from multipart form data.
      tags:
      - Inference
      - Default
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: image
        in: formData
        type: file
        description: The file to upload.
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ClassificationResult'
        500:
          description: Error generating classification
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray:
    post:
      operationId: classifyarray
      summary: Same as /classify but returns the output as Base64NDArrayBody
      tags:
      - Inference
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Base64NDArrayBody'
        400:
          description: Invalid input
        500:
          description: Invalid deployment or model name
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify:
    post:
      operationId: multiclassify
      summary: Represents all of the labels for a given classification
      tags:
      - Inference
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/MultiClassClassificationResult'
        400:
          description: Invalid input
        500:
          description: Invalid deployment or model name
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset:
    post:
      operationId: modelset
      summary: Set the model to be served
      tags:
      - Inference
      - Default
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: file
        in: formData
        description: The model file to upload (.pb file)
        required: false
        type: file
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: Model set successfully
          schema:
            $ref: '#/definitions/ModelStatus'
        500:
          description: Error setting model
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate:
    post:
      operationId: modelupdate
      summary: Update the model to be served
      tags:
      - Inference
      - Default
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: file
        in: formData
        description: The model file to update with (.pb file)
        required: true
        type: file
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: Model updated successfully or model update failed
          schema:
            $ref: '#/definitions/ModelStatus'
        500:
          description: Error updating model
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray:
    post:
      operationId: jsonarray
      summary: Run inference on the input and returns it as a JsonArrayResponse
      tags:
      - Inference
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/JsonArrayResponse'
        500:
          description: Error generating array prediction
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess:
    post:
      operationId: predictwithpreprocess
      summary: Preprocesses the input and run inference on it
      tags:
      - Inference
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input array
        required: true
        schema:
          type: array
          items:
            type: string
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Prediction'
        500:
          description: Error executing predictPreProcess
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson:
    post:
      operationId: predictwithpreprocessjson
      summary: Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
      tags:
      - Inference
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input array
        required: true
        schema:
          type: array
          items:
            type: string
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/JsonArrayResponse'
        500:
          description: Error executing predictPreProcessJson
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/logs:
    post:
      operationId: logs
      summary: Get logs
      tags:
      - Inference
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      - in: body
        name: LogRequest
        description: The log object
        required: true
        schema:
          $ref: '#/definitions/LogRequest'
      responses:
        200:
          description: Logs obtained successfully
          schema:
            $ref: '#/definitions/LogBatch'
        500:
          description: Error retrieving logs
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath:
    get:
      operationId: logfilepath
      summary: Get logs file path
      tags:
      - Inference
      - Default
      produces:
      - text
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: the retrieved log file path
          schema:
            type: string
            example: log_file_path
        500:
          description: Error retrieving log file path
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/meta:
    get:
      operationId: meta_get
      summary: this method can be used to get the meta data for the current model which set to the server
      tags:
      - Inference
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: The meta data details
          schema:
            $ref: '#/definitions/MetaData'
    post:
      operationId: meta_post
      summary: This method can be used to set meta data for the current model which is set to the server
      tags:
      - Inference
      - Default
      consumes:
      - text/plain
      produces:
      - application/json
      parameters:
      - in: header
        name: Content-Type
        required: true
        description: The `Content-Type` should always be `application/json`
        type: string
        enum:
        - application/json
      - in: body
        name: body
        description: the meta data object
        required: true
        schema:
          type: string
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: the meta data object that was set
          schema:
            $ref: '#/definitions/MetaData'
  /endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects:
    post:
      operationId: detectobjects
      summary: Detect the objects, given a (input) prediction request
      tags:
      - Inference
      - Default
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: id
        in: formData
        type: string
        required: true
        description: the GUID for mapping the results in the detections
      - name: needsPreprocessing
        in: formData
        type: boolean
        required: true
        description: (true) if the image needs preprocessing
      - name: threshold
        in: formData
        type: number
        format: float
        required: true
        description: A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.
      - name: file
        in: formData
        type: file
        required: true
        description: the image file to detect objects from
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: versionName
        in: path
        description: Version name of the endpoint. The default value is "default"
        required: true
        default: default
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: the detected objects in the given input
          schema:
            $ref: '#/definitions/DetectionResult'
  # ---------------------------------------------------------------------------------------
  # Deployment endpoints
  # ---------------------------------------------------------------------------------------
  /deployments:
    get:
      operationId: deployments
      summary: Get a list of deployments
      tags:
      - Deployment
      - Default
      produces:
      - application/json
      responses:
        200:
          description: List of the deployments retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/DeploymentResponse'
  /deployment/{deploymentId}:
    get:
      operationId: deployment_get
      summary: Get a deployment details by id
      tags:
      - Deployment
      - Default
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: Id of the deployment group
        required: true
        type: string
      responses:
        200:
          description: The deployment details
          schema:
            $ref: '#/definitions/DeploymentResponse'
    delete:
      operationId: deployment_delete
      summary: Delete a deployment by id
      tags:
      - Deployment
      - Default
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: Id of the deployment group
        required: true
        type: string
      responses:
        200:
          description: The status of the removed deployment
          schema:
            type: object
            properties:
              status:
                type: string
  /deployment:
    post:
      operationId: deploymentCreate
      summary: Create a new deployment group.
      tags:
      - Deployment
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: the deployment request
        required: true
        schema:
          $ref: '#/definitions/CreateDeploymentRequest'
      responses:
        200:
          description: the added deployment
          schema:
            $ref: '#/definitions/DeploymentResponse'
        500:
          description: Error creating deployment
  /deployment/{deploymentId}/models:
    get:
      operationId: models
      summary: Retrieve a list of all the deployed models given a deployment id
      tags:
      - Deployment
      - Default
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: ID deployment group
        required: true
        type: string
      responses:
        200:
          description: Retrieved model list
          schema:
            type: array
            items:
              $ref: '#/definitions/ModelEntity'
  /deployment/{deploymentId}/model:
    post:
      operationId: deployModel
      summary: Deploy a model in a deployment group.
      tags:
      - Deployment
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: ID deployment group
        required: true
        type: string
      - in: body
        name: body
        description: the model import request
        required: true
        schema:
          $ref: '#/definitions/ImportModelRequest'
      responses:
        200:
          description: the deployed model
          schema:
            $ref: '#/definitions/ModelEntity'
  /deployment/{deploymentId}/model/{modelId}:
    get:
      operationId: getModelDetails
      summary: Get model details
      tags:
      - Deployment
      - Default
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: ID deployment group
        required: true
        type: string
      - name: modelId
        in: path
        description: the id of the deployed model
        required: true
        type: string
      responses:
        200:
          description: A model entity
          schema:
            $ref: '#/definitions/ModelEntity'
    post:
      operationId: reimportModel
      summary: Reimport a model to a previous deployed model in a deployment
      tags:
      - Deployment
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: ID deployment group
        required: true
        type: string
      - name: modelId
        in: path
        description: the id of the deployed model
        required: true
        type: string
      - in: body
        name: body
        description: the deployment request
        required: true
        schema:
          $ref: '#/definitions/ImportModelRequest'
      responses:
        200:
          description: the reimported model entity
          schema:
            $ref: '#/definitions/ModelEntity'
    delete:
      operationId: delete_model
      summary: Delete a model by deployment and model id
      tags:
      - Deployment
      - Default
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: ID deployment group
        required: true
        type: string
      - name: modelId
        in: path
        description: the id of the deployed model
        required: true
        type: string
      responses:
        200:
          description: the deleted model status
          schema:
            type: object
            properties:
              status:
                type: string
  /deployment/{deploymentId}/model/{modelId}/state:
    post:
      operationId: modelStateChange
      summary: Modify the state (start/stop) of a deployed model
      tags:
      - Deployment
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: ID deployment group
        required: true
        type: string
      - name: modelId
        in: path
        description: the id of the deployed model
        required: true
        type: string
      - in: body
        name: body
        description: the model state object
        required: true
        schema:
          $ref: '#/definitions/SetState'
      responses:
        200:
          description: the model entity with its state changed
          schema:
            $ref: '#/definitions/ModelEntity'
  # ---------------------------------------------------------------------------------------
  # Model History endpoints
  # ---------------------------------------------------------------------------------------
  /rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}:
    get:
      operationId: getModelHistory
      summary: Gets a model history, given its ID
      tags:
      - ModelHistory
      - Default
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: modelHistoryID
        in: path
        type: string
        required: true
        description: GUID of the model history to get information of.
      responses:
        200:
          description: Model history entity
          schema:
            $ref: '#/definitions/ModelHistoryEntity'
  /rpc/{modelHistoryServerId}/modelhistory:
    post:
      operationId: addModelHistory
      summary: Add a model history / workspace
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: addModelHistoryRequest
        in: body
        required: true
        description: The model history request object
        schema:
          $ref: '#/definitions/AddModelHistoryRequest'
      responses:
        200:
          description: The added model history entity
          schema:
            $ref: '#/definitions/ModelHistoryEntity'
  /rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}:
    post:
      operationId: updateModelHistory
      summary: Update a model history / workspace
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: modelHistoryID
        in: path
        type: string
        required: true
        description: the GUID of the model history / workspace to update
      - name: updateModelHistoryRequest
        in: body
        required: true
        description: The model history request object
        schema:
          $ref: '#/definitions/AddModelHistoryRequest'
      responses:
        200:
          description: The updated model history entity
          schema:
            $ref: '#/definitions/ModelHistoryEntity'
    delete:
      operationId: deleteModelHistory
      summary: Deletes a model history / workspace, given its ID
      tags:
      - ModelHistory
      - Default
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: modelHistoryID
        in: path
        type: string
        required: true
        description: the GUID of the model history / workspace to delete
      responses:
        200:
          description: Workspace deleted
          schema:
            type: object
            properties:
              status:
                type: string
        400:
          description: The specified Workspace no longer exists
          schema:
            type: object
            properties:
              status:
                type: string
  /rpc/{modelHistoryServerId}/experiments:
    get:
      operationId: listAllExperiments
      summary: List all of the experiments in every model history / workspace
      tags:
      - ModelHistory
      - Default
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      responses:
        200:
          description: List of all the experiment entities.
          schema:
            type: array
            items:
              $ref: '#/definitions/ExperimentEntity'
  /rpc/{modelHistoryServerId}/experiments/{modelHistoryID}:
    get:
      operationId: getExperimentsForModelHistory
      summary: Obtain all experiments for a model history / workspace
      tags:
      - ModelHistory
      - Default
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: modelHistoryID
        in: path
        type: string
        required: true
        description: the GUID of the model history / workspace
      responses:
        200:
          description: List of all the experiment entities in a model history
          schema:
            type: array
            items:
              $ref: '#/definitions/ExperimentEntity'
  /rpc/{modelHistoryServerId}/experiment/{experimentID}:
    get:
      operationId: getExperiment
      summary: Obtain an experiment's details, given its ID
      tags:
      - ModelHistory
      - Default
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: experimentID
        in: path
        type: string
        required: true
        description: the GUID of the experiment to obtain
      responses:
        200:
          description: Experiment Entity
          schema:
            $ref: '#/definitions/ExperimentEntity'
    put:
      operationId: updateExperiment
      summary: Updates an experiment, given an experiment entity
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: experimentID
        in: path
        type: string
        required: true
        description: the GUID of the experiment to update
      - name: experimentEntity
        in: body
        required: true
        description: The experiment entity to update with
        schema:
          $ref: '#/definitions/ExperimentEntity'
      responses:
        200:
          description: The updated experiment entity.
          schema:
            $ref: '#/definitions/ExperimentEntity'
    delete:
      operationId: deleteExperiment
      summary: Deletes an experiment, given an experiment entity
      tags:
      - ModelHistory
      - Default
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: experimentID
        in: path
        type: string
        required: true
        description: the GUID of the experiment to delete
      responses:
        200:
          description: Experiment deleted successfully
          schema:
            type: object
            properties:
              status:
                type: string
        400:
          description: Experiment no longer exists
          schema:
            type: object
            properties:
              status:
                type: string
  /rpc/{modelHistoryServerId}/experiment:
    post:
      operationId: addExperiment
      summary: Add an experiment, given an experiment entity
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: experimentEntity
        in: body
        required: true
        description: The experiment entity to add
        schema:
          $ref: '#/definitions/ExperimentEntity'
      responses:
        200:
          description: The added experiment entity.
          schema:
            $ref: '#/definitions/ExperimentEntity'
  /rpc/{modelHistoryServerId}/experiment/best:
    post:
      operationId: updateBestModelForExperiment
      summary: Updates the best model for an experiment
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: updateBestModel
        in: body
        required: true
        description: Model encapsulating the experiment id to update and the best model id.
        schema:
          $ref: '#/definitions/UpdateBestModel'
      responses:
        200:
          description: The updated experiment entity.
          schema:
            $ref: '#/definitions/ExperimentEntity'
  /rpc/{modelHistoryServerId}/experiment/{experimentID}/models:
    get:
      operationId: getModelsForExperiment
      summary: Obtain a list of all the models for an experiment
      tags:
      - ModelHistory
      - Default
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: experimentID
        in: path
        type: string
        required: true
        description: the GUID of the experiment
      responses:
        200:
          description: List of all the models for the specified experiment
          schema:
            type: array
            items:
              $ref: '#/definitions/ModelInstanceEntity'
  /rpc/{modelHistoryServerId}/model/{modelInstanceID}:
    get:
      operationId: getModelInstance
      summary: Gets a model instance, given its ID
      tags:
      - ModelHistory
      - Default
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: modelInstanceID
        in: path
        type: string
        required: true
        description: GUID of the model instance to get information of.
      responses:
        200:
          description: Model instance entity
          schema:
            $ref: '#/definitions/ModelInstanceEntity'
    delete:
      operationId: deleteModelInstance
      summary: Deletes a model instance, given its ID
      tags:
      - ModelHistory
      - Default
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: modelInstanceID
        in: path
        type: string
        required: true
        description: GUID of the model instance to delete.
      responses:
        200:
          description: Empty content
  /rpc/{modelHistoryServerId}/model:
    post:
      operationId: addModelInstance
      summary: Adds a model
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: modelInstanceEntity
        in: body
        required: true
        description: The object encapsulating the model instance id and evaluation type to aggregate
        schema:
          $ref: '#/definitions/ModelInstanceEntity'
      responses:
        200:
          description: The added model instance entity
          schema:
            $ref: '#/definitions/ModelInstanceEntity'
  /rpc/{modelHistoryServerId}/model/best:
    post:
      operationId: getBestModelAmongModelIds
      summary: Gets the best model among the given model instance IDs, based on the evaluation type and column metric
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: bestModel
        in: body
        required: true
        description: Object encapsulating the model ids, eval type and column metric name
        schema:
          $ref: '#/definitions/BestModel'
      responses:
        200:
          description: The best model instance entity
          schema:
            $ref: '#/definitions/ModelInstanceEntity'
  /rpc/{modelHistoryServerId}/model/revisions:
    post:
      operationId: createModelHistory
      summary: Creates model History
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: modelHistoryEntity
        in: body
        required: true
        description: The model history entity
        schema:
          $ref: '#/definitions/ModelHistoryEntity'
      responses:
        200:
          description: The created model history
          schema:
            $ref: '#/definitions/ModelHistoryEntity'
  /rpc/{modelHistoryServerId}/model/revisions/evaluations/:
    post:
      operationId: addEvaluationResult
      summary: Adds an evaluation result
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: evaluationResultsEntity
        in: body
        required: true
        description: The evaluation result entity
        schema:
          $ref: '#/definitions/EvaluationResultsEntity'
      responses:
        200:
          description: The added evaluation result entity
          schema:
            $ref: '#/definitions/EvaluationResultsEntity'
  /rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}:
    get:
      operationId: getEvaluationForModelID
      summary: Gets the list of evaluation results entity, given a model instance ID
      tags:
      - ModelHistory
      - Default
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: modelInstanceID
        in: path
        type: string
        required: true
        description: GUID of the model instance to get evaluation results for.
      responses:
        200:
          description: List of evaluation result entities
          schema:
            type: array
            items:
              $ref: '#/definitions/EvaluationResultsEntity'
  /rpc/{modelHistoryServerId}/model/aggregateresults:
    post:
      operationId: aggregateModelResults
      summary: Aggregates the evaluaition results of a model instance, based on the evaluation type
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: aggregatePrediction
        in: body
        required: true
        description: The object encapsulating the model instance id and evaluation type to aggregate
        schema:
          $ref: '#/definitions/AggregatePrediction'
      responses:
        200:
          description: Evaluation result entity contained the aggregated/merged results
          schema:
            $ref: '#/definitions/EvaluationResultsEntity'
  /rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}:
    get:
      operationId: getMinibatch
      summary: Gets a minibatch for the model
      tags:
      - ModelHistory
      - Default
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: minibatchId
        in: path
        type: string
        required: true
        description: The GUID of the minibatch
      responses:
        200:
          description: The minibatch entity
          schema:
            $ref: '#/definitions/MinibatchEntity'
  /rpc/{modelHistoryServerId}/model/minibatch:
    post:
      operationId: addMinibatch
      summary: Adds a minibatch
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: minibatchEntity
        in: body
        required: true
        description: The minibatch entity to add
        schema:
          $ref: '#/definitions/MinibatchEntity'
      responses:
        200:
          description: The added minibatch entity
          schema:
            $ref: '#/definitions/MinibatchEntity'
  /rpc/{modelHistoryServerId}/model/example/{minibatchId}:
    get:
      operationId: getExamplesForMinibatch
      summary: Gets all the examples for a minibatch ID
      tags:
      - ModelHistory
      - Default
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: minibatchId
        in: path
        type: string
        required: true
        description: The GUID of the minibatch
      responses:
        200:
          description: List of the associated examples with the minibatch
          schema:
            type: array
            items:
              $ref: '#/definitions/ExampleEntity'
  /rpc/{modelHistoryServerId}/model/example:
    post:
      operationId: addExampleToMinibatch
      summary: Adds an example to a minibatch
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: exampleEntity
        in: body
        required: true
        description: The example to add to the minibatch
        schema:
          $ref: '#/definitions/ExampleEntity'
      responses:
        200:
          description: The added example entity
          schema:
            $ref: '#/definitions/ExampleEntity'
  /rpc/{modelHistoryServerId}/model/exampleForBatch:
    post:
      operationId: addExampleForBatch
      summary: Adds a number of examples to a minibatch ID given an AddExampleRequest.
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: AddExampleRequest
        in: body
        required: true
        description: The add example request, encapsulating minibatch details and examples batch size
        schema:
          $ref: '#/definitions/AddExampleRequest'
      responses:
        200:
          description: The add example request
          schema:
            $ref: '#/definitions/AddExampleRequest'
  /rpc/{modelHistoryServerId}/model/feedback:
    post:
      operationId: addModelFeedback
      summary: Adds an evaluation feedback to the model against a given minibatch id.
      tags:
      - ModelHistory
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: modelHistoryServerId
        in: path
        description: Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
        required: true
        type: string
      - name: ModelFeedBackRequest
        in: body
        required: true
        description: The model feedback request object
        schema:
          $ref: '#/definitions/ModelFeedBackRequest'
      responses:
        200:
          description: The model feedback request object
          schema:
            $ref: '#/definitions/ModelFeedBackRequest'
  # ---------------------------------------------------------------------------------------
  # Resources endpoints
  # ---------------------------------------------------------------------------------------
  /resources/resource/{resourceId}:
    get:
      operationId: getResourceById
      summary: Get the resource with the specified resource ID
      tags:
      - Resource
      - Default
      produces:
      - application/json
      parameters:
      - name: resourceId
        in: path
        type: integer
        format: int64
        description: ID of the resource
        required: true
      responses:
        200:
          description: Resource Object
          schema:
            $ref: '#/definitions/Resource'
  /resources/details/{resourceId}:
    get:
      operationId: getResourceDetailsById
      summary: Get the resource details with the specified resource ID
      description: |
        Get the details for the resource, for the given ID. Note that a 'ResourceDetails' object contains specific information
        about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the 'Resource'
        object contains only general information (name, id, type, subtype).
      tags:
      - Resource
      - Default
      produces:
      - application/json
      parameters:
      - name: resourceId
        in: path
        type: integer
        format: int64
        description: ID of the resource
        required: true
      responses:
        200:
          description: One of the resource details object
          schema:
            type: object
  /resources/resources:
    get:
      operationId: getResources
      summary: A list of all known/registered resources, of all types
      tags:
      - Resource
      - Default
      produces:
      - application/json
      responses:
        200:
          description: List of Resource Objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Resource'
  /resources/resources/type/{resourceType}:
    get:
      operationId: getResourceByType
      summary: Get all the resources with the specified resource type
      tags:
      - Resource
      - Default
      produces:
      - application/json
      parameters:
      - name: resourceType
        in: path
        type: string
        enum:
        - COMPUTE
        - STORAGE
        description: Type of the resource
        required: true
      responses:
        200:
          description: List of Resource Objects by specified type
          schema:
            type: array
            items:
              $ref: '#/definitions/Resource'
  /resources/resources/subtype/{resourceSubType}:
    get:
      operationId: getResourceBySubType
      summary: Get all the resources with the specified resource subtype
      tags:
      - Resource
      - Default
      produces:
      - application/json
      parameters:
      - name: resourceSubType
        in: path
        type: string
        enum:
        - EMR                   # AWS Elastic Map Reduce(Compute)
        - S3                    # AWS Simple Storage Service
        - GoogleStorage         # Google Cloud Storage
        - DataProc              # Google Big Data Compute Engine
        - HDInsight             # Azure Compute
        - AzureStorage          # Azure Blob Storage
        - HDFS                  # in house Hadoop (Storage)
        - YARN                  # in house YARN (Compute)
        description: Subtype of the resource
        required: true
      responses:
        200:
          description: List of Resource Objects by specified subtype
          schema:
            type: array
            items:
              $ref: '#/definitions/Resource'
  /resources/add/resource:
    post:
      operationId: addResource
      summary: Adds a resource
      tags:
      - Resource
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: AddResourceRequest
        in: body
        required: true
        description: The Add resource request object
        schema:
          $ref: '#/definitions/AddResourceRequest'
      responses:
        200:
          description: One of the resource details object
          schema:
            type: object
  /resources/remove/resource/{resourceId}:
    delete:
      operationId: deleteResourceById
      summary: Delete the resource with the specified resource ID
      tags:
      - Resource
      - Default
      produces:
      - application/json
      parameters:
      - name: resourceId
        in: path
        type: integer
        format: int64
        description: ID of the resource
        required: true
      responses:
        200:
          description: Resource Object
          schema:
            $ref: '#/definitions/Resource'
  /resources/group/{resourceGroupId}:
    get:
      operationId: getResourceGroupById
      summary: Get the resource group with the specified resource group ID
      tags:
      - Resource
      - Default
      produces:
      - application/json
      parameters:
      - name: resourceGroupId
        in: path
        type: integer
        format: int64
        description: ID of the resource group
        required: true
      responses:
        200:
          description: Resource Group Object
          schema:
            $ref: '#/definitions/ResourceGroup'
  /resources/groups:
    get:
      operationId: getResourceGroups
      summary: Get a list of all the resource groups
      tags:
      - Resource
      - Default
      produces:
      - application/json
      responses:
        200:
          description: Resource Group Object
          schema:
            type: array
            items:
              $ref: '#/definitions/ResourceGroup'
  /resources/add/group:
    post:
      operationId: addResourceGroup
      summary: Adds a resource group
      tags:
      - Resource
      - Default
      consumes:
      - text/plain; charset=utf-8
      produces:
      - application/json
      parameters:
      - name: groupName
        in: body
        required: true
        description: Name of the resource group
        schema:
          type: string
      responses:
        200:
          description: The created resource group object
          schema:
            $ref: '#/definitions/ResourceGroup'
  /resources/remove/group/{resourceGroupId}:
    delete:
      operationId: deleteResourceGroupById
      summary: Delete the resource group with the specified resource group ID
      tags:
      - Resource
      - Default
      produces:
      - application/json
      parameters:
      - name: resourceGroupId
        in: path
        type: integer
        format: int64
        description: ID of the resource group
        required: true
      responses:
        200:
          description: Resource Group Object
          schema:
            $ref: '#/definitions/ResourceGroup'
  /resources/add/resourcetogroup/{resourceGroupId}/{resourceId}:
    get:
      operationId: addResourceToGroup
      summary: Adds a resource to a resource group
      tags:
      - Resource
      - Default
      produces:
      - application/json
      parameters:
      - name: resourceGroupId
        in: path
        type: integer
        format: int64
        description: ID of the resource group
        required: true
      - name: resourceId
        in: path
        type: integer
        format: int64
        description: ID of the resource
        required: true
      responses:
        200:
          description: Successfully added resource to the resource group
  /resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}:
    get:
      operationId: deleteResourceFromGroup
      summary: Removes a resource from a resource group
      tags:
      - Resource
      - Default
      produces:
      - application/json
      parameters:
      - name: resourceGroupId
        in: path
        type: integer
        format: int64
        description: ID of the resource group
        required: true
      - name: resourceId
        in: path
        type: integer
        format: int64
        description: ID of the resource
        required: true
      responses:
        200:
          description: Successfully removed resource from the resource group
  /resources/group/{resourceGroupId}/resources:
    get:
      operationId: getResourcesFromGroup
      summary: Get all resources from a resource group
      tags:
      - Resource
      - Default
      produces:
      - application/json
      parameters:
      - name: resourceGroupId
        in: path
        type: integer
        format: int64
        description: ID of the resource group
        required: true
      responses:
        200:
          description: List of resources from a resource group
          schema:
            type: array
            items:
              $ref: '#/definitions/Resource'
  /resources/credentials/{credentialId}:
    get:
      operationId: getCredentialsById
      summary: Get credentials given an ID
      tags:
      - Resource
      - Default
      produces:
      - application/json
      parameters:
      - name: credentialId
        in: path
        type: integer
        format: int64
        description: Credentials ID
        required: true
      responses:
        200:
          description: Credentials Object
          schema:
            $ref: '#/definitions/ResourceCredentials'
    delete:
      operationId: deleteCredentialsById
      summary: Delete credentials given an ID
      tags:
      - Resource
      - Default
      produces:
      - application/json
      parameters:
      - name: credentialId
        in: path
        type: integer
        format: int64
        description: Credentials ID
        required: true
      responses:
        200:
          description: Credentials successfully deteled
  /resources/credentials:
    post:
      operationId: addCredentials
      summary: Adds credentials
      tags:
      - Resource
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: AddCredentialsRequest
        in: body
        required: true
        description: Add credentials request object
        schema:
          $ref: '#/definitions/AddCredentialsRequest'
      responses:
        200:
          description: The created credentials object
          schema:
            $ref: '#/definitions/ResourceCredentials'
  # ---------------------------------------------------------------------------------------
  # Jobs endpoints
  # ---------------------------------------------------------------------------------------
  /jobs/{jobIdOrType}:
    get:
      operationId: getJobById
      summary: Get a job by its ID
      tags:
      - Job
      - Default
      produces:
      - application/json
      parameters:
      - name: jobIdOrType
        in: path
        type: integer
        format: int64
        description: Job ID
        required: true
      responses:
        200:
          description: Job entity Object
          schema:
            $ref: '#/definitions/JobEntity'
    post:
      operationId: createJob
      summary: Create a job
      tags:
      - Job
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: jobIdOrType
        in: path
        type: string
        enum:
        - TRAINING
        - INFERENCE
        description: Job Type
        required: true
      - name: CreateJobRequest
        in: body
        required: true
        description: Create job request object
        schema:
          $ref: '#/definitions/CreateJobRequest'
      responses:
        200:
          description: The created job entity object
          schema:
            $ref: '#/definitions/JobEntity'
    delete:
      operationId: deleteJobById
      summary: Deletes a job given its ID
      tags:
      - Job
      - Default
      produces:
      - application/json
      parameters:
      - name: jobIdOrType
        in: path
        type: integer
        format: int64
        description: Job ID
        required: true
      responses:
        200:
          description: Successfully deleted a job
  /jobs:
    get:
      operationId: getAllJobs
      summary: Get a list of all available jobs
      tags:
      - Job
      - Default
      produces:
      - application/json
      responses:
        200:
          description: List of job entity objects
          schema:
            type: array
            items:
              $ref: '#/definitions/JobEntity'
  /jobs/{jobId}/run:
    post:
      operationId: runAJob
      summary: Start running an (already created) job on the remote resource
      tags:
      - Job
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: jobId
        in: path
        type: integer
        format: int64
        description: Job ID
        required: true
      responses:
        200:
          description: The associated job entity object
          schema:
            $ref: '#/definitions/JobEntity'
  /jobs/{jobId}/refresh:
    get:
      operationId: refreshJobStatus
      summary: Refresh the remote job status. Can be used for monitoring.
      tags:
      - Job
      - Default
      produces:
      - application/json
      parameters:
      - name: jobId
        in: path
        type: integer
        format: int64
        description: Job ID
        required: true
      responses:
        200:
          description: The associated job entity object
          schema:
            $ref: '#/definitions/JobEntity'
  /jobs/{jobId}/outputfile:
    post:
      operationId: downloadJobOutputFile
      summary: Download the output file from the job's execution. This will ONLY work if the job's run status is 'COMPLETE'.
      tags:
      - Job
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: jobId
        in: path
        type: integer
        format: int64
        description: Job ID
        required: true
      - name: DownloadOutputFileRequest
        in: body
        required: true
        description: Download output file request object
        schema:
          $ref: '#/definitions/DownloadOutputFileRequest'
      responses:
        200:
          description: The file download has started
  # ---------------------------------------------------------------------------------------
  # Model Server v2 - Inference
  # ---------------------------------------------------------------------------------------
  /{operation}/{inputTypeFile}:
    post:
      operationId: predictV2File
      summary: Runs inference based on the input data. Output is defined relative to the output adapter specified.
      tags:
      - InferenceV2
      - Default
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: operation
        in:   path
        type: string
        required: true
        enum:
        - REGRESSION
        - CLASSIFICATION
        - RAW
        - YOLO
        - SSD
        - RCNN
        description: |
          The operation to perform on the input data.
      - name: inputTypeFile
        in:   path
        type: string
        required: true
        enum:
        - IMAGE
        - NUMPY
        - NDARRAY
        - JSON
        description: |
          Type of the input data.
      - name: inputData
        in: formData
        type: file
        required: true
        description: The input data to run inference on.
      responses:
        200:
          description: Input data returned a prediction.
  /{operation}/{inputTypeJson}:
    post:
      operationId: predictV2Json
      summary: Runs inference based on the input data. Output is defined relative to the output adapter specified.
      tags:
      - InferenceV2
      - Default
      consumes:
      - text/plain
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: The `Content-Type` should always be `application/json`.
        required: true
        type: string
        enum:
        - application/json
      - name: operation
        in:   path
        type: string
        required: true
        enum:
        - REGRESSION
        - CLASSIFICATION
        - RAW
        description: |
          The operation to perform on the input data.
      - name: inputTypeJson
        in:   path
        type: string
        required: true
        enum:
        - CSV
        - DICTIONARY
        - CSVPUBSUB
        - DICTIONARYPUBSUB
        description: |
          Type of the input data.
      - name: inputData
        in: body
        schema: 
          type: string
        required: true
        description: The input data to run inference on. (Specify a JSON string here)
      responses:
        200:
          description: Input data returned a prediction.
  /{operation}/{inputType}/error:
    post:
      operationId: predictError
      summary: Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
      tags:
      - InferenceV2
      - Default
      description: |
        These "error" endpoints are slower for inference, but will also ignore invalid rows
        that are found. They will output skipped rows where errors were encountered so users can
        fix problems with input data pipelines.
      consumes:
      - text/plain
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        description: The `Content-Type` should always be `application/json`.
        required: true
        type: string
        enum:
        - application/json
      - name: operation
        in:   path
        type: string
        enum:
        - REGRESSION
        - CLASSIFICATION
        - RAW
        required: true
        description: Operation to perform on the input data.
      - name: inputType
        in:   path
        type: string
        required: true
        enum:
        - CSV
        - DICTIONARY
        - CSVPUBSUB
        - DICTIONARYPUBSUB
        description: Type of the input data.
      - name: inputData
        in:   body
        schema: 
          type: string
      responses:
        200:
          description: Input data returned a prediction along with the skipped, invalid data rows
  /raw/{inputType}/{outputType}:
    post:
      operationId: rawPredictBinary
      summary: Runs inference based on the input data. Output is defined relative to the output adapter specified.
      tags:
      - InferenceV2
      - Default
      consumes:
      - multipart/form-data
      produces:
      - application/octet-stream
      parameters:
      - name: inputType
        in:   path
        type: string
        required: true
        enum:
        - IMAGE
        - NUMPY
        - NDARRAY
        - JSON
        description: Input data type.
      - name: outputType
        in:   path
        type: string
        required: true
        enum:
        - ND4J
        - NUMPY
        - ARROW
        - JSON
        description: Binary output data type.
      - name: inputData
        in: formData
        type: file
        description: The input file to upload.
      responses:
        200:
          description: Input data returned a prediction in raw binary file format.
  # ---------------------------------------------------------------------------------------
  # Model Server v2 - Retraining
  # ---------------------------------------------------------------------------------------
  /model:
    get:
      operationId: getCurrentModel
      summary: Returns the current model being used for retraining.
      tags:
      - RetrainV2
      - Default
      produces:
      - application/octet-stream
      responses:
        200:
          description: Returns the current model being used for retraining in the form of a downloadable file.
  /feedback/{id}/json:
    post:
      operationId: addFeedbackJson
      summary: Gets the retraining feedback for the given batch ID.
      tags:
      - RetrainV2
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in:   path
        type: string
        required: true
        description: Batch ID to retrain the model with and get feedback for.
      - name: labels
        in: body
        schema:
          type: array
          items:
            type: array
            items:
              type: number
              format: double
        description: The associated labels (one-hot vectors) with the batch for retraining.
      responses:
        200:
          schema:
            $ref: '#/definitions/FeedbackResponse'
          description: The feedback response object
  /clear:
    post:
      operationId: clearState
      summary: Clears the accumulated data for retraining.
      tags:
      - RetrainV2
      - Default
      produces:
      - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/FeedbackResponse'
          description: The feedback response object
  /istraining:
    get:
      operationId: isTraining
      summary: Get the retraining status
      tags:
      - RetrainV2
      - Default
      produces:
      - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/RetrainingStatus'
          description: Returns whether the model is currently being trained or not.
  /lastevaluation:
    get:
      operationId: getLastEvaluation
      summary: Get the last evaluation specifications from the current model.
      tags:
      - RetrainV2
      - Default
      produces:
      - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/EvaluationResultsEntity'
          description: Returns the last evaluation ran by the model.
  /numrevisions:
    get:
      operationId: numRevisions
      summary: Gets the number of retrained models written with retraining.
      tags:
      - RetrainV2
      - Default
      produces:
      - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/RevisionsWritten'
          description: Returns the number of revisions for retraining of the model.
  /accumulatedresults:
    get:
      operationId: accumulatedResults
      summary: Tells how many retraining examples have labels associated with them.
      tags:
      - RetrainV2
      - Default
      produces:
      - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/AccumulatedResults'
          description: Returns the accumulated results currently in ememory.
  /rollback/{index}:
    post:
      operationId: rollback
      summary: Rollback to a previous revision of the model.
      tags:
      - RetrainV2
      - Default
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: index
        type: integer
        format: int32
        in: path
        required: true
        description: Model revision index.
      responses:
        200:
          schema:
            $ref: '#/definitions/RollbackStatus'
          description: Returns the status of the rollback.
  /feedback/{id}/{type}:
    post:
      operationId: addFeedbackBinary
      tags:
      - RetrainV2
      - Default
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: id
        in:   path
        type: string
        required: true
        description: Batch ID to retrain the model with and get feedback for.
      - name: type
        in:   path
        required: true
        type: string
        enum:
        - numpy
        - nd4j
        description: The type of the labels array.
      - name: file
        in: formData
        type: file
        description: The labels file to upload.
      responses:
        200:
          schema:
            $ref: '#/definitions/FeedbackResponse'
          description: The feedback response object
  # ---------------------------------------------------------------------------------------
  # Model Server v2 - Memory Map
  # ---------------------------------------------------------------------------------------
  /array/{arrayType}:
    post:
      operationId: getArray
      summary: Get the memory mapped array based on the array type.
      description: The array is specified through a file path, in the configuration object, during model server deployment.
      tags:
      - MemMapV2
      - Default
      produces:
      - application/json
      - application/octet-stream
      parameters:
      - name: accept
        in: header
        required: true
        type: string
        enum: 
        - application/json
        - application/octet-stream
      - name: arrayType
        type: string
        enum:
        - json
        - numpy
        - nd4j
        in: path
        required: true
        description: The format in which the memory mapped array is returned.
      responses:
        200:
          description: Get the whole memory mapped array in the specified format.
  /array/indices/{arrayType}:
    post:
      operationId: getArrayIndices
      summary: Get the memory mapped array indices based on the array type.
      tags:
      - MemMapV2
      - Default
      consumes:
      - text/plain
      produces:
      - application/json
      - application/octet-stream
      parameters:
      - name: Content-Type
        in: header
        description: The `Content-Type` should always be `application/json`.
        required: true
        type: string
        enum:
        - application/json
      - name: accept
        in: header
        required: true
        type: string
        enum: 
        - application/json
        - application/octet-stream
      - name: arrayType
        type: string
        enum:
        - json
        - numpy
        - nd4j
        in: path
        required: true
        description: Format in which the memory mapped array is returned in.
      - name: input
        in: body
        schema:
          type: string
        description: Input indices array
      responses:
        200:
          description: Returns the arrays given the indices.
  /array/range/{from}/{to}/{arrayType}:
    post:
      operationId: getArrayRange
      summary: Get the memory mapped array within a range based on the array type.
      tags:
      - MemMapV2
      - Default
      consumes:
      - application/json
      produces:
      - application/json
      - application/octet-stream
      parameters:
      - name: accept
        in: header
        required: true
        type: string
        enum: 
        - application/json
        - application/octet-stream
      - name: arrayType
        type: string
        enum:
        - json
        - numpy
        - nd4j
        in: path
        required: true
        description: Format in which the memory mapped array is returned in.
      - name: from
        in: path
        type: integer
        format: int32
        required: true
      - name: to
        in: path
        type: integer
        format: int32
        required: true
      responses:
        200:
          description: Returns the arrays given the from/to indices
definitions:
  TransformProcess:
    type: object
  SingleCSVRecord:
    type: object
    properties:
      values:
        type: array
        items:
          type: string
  BatchCSVRecord:
    type: object
    properties:
      records:
        type: array
        items:
          $ref: '#/definitions/SingleCSVRecord'
  ImageTransformProcess:
    type: object
  SingleRecord:
    type: object
    properties:
      values:
        type: array
        items:
          type: string
      uri:
        type: string
        example: file:///E:/Image/image.jpg
  BatchRecord:
    type: object
    properties:
      records:
        type: array
        items:
          $ref: '#/definitions/SingleRecord'
  Base64NDArrayBody:
    type: object    
    properties:
      ndarray:
        type: string
  Base64NDArrayBodyKNN:
    type: object    
    properties:
      ndarray:
        type: string
        description: the array to run the search on. Note that this must be a row vector
      k:
        type: integer
        description: the number of results to retrieve
        example: 2
      forceFillK:
        type: boolean
        example: false
        description: If 'True' it will brute force search for running search relative to a target but forced to fill the result list until the desired k is matched.
  NearestNeighborRequest:
    type: object    
    properties:
      k:
        type: integer
        description: the number of results
        example: 2
      inputIndex:
        type: integer
        description: the index of the EXISTING ndarray to run a search on
        example: 3
  NearestNeighborsResult:
    type: object    
    properties:
      index:
        type: integer
        example: 0
      distance:
        type: number
        example: 1.00
      label:
        type: string
  NearestNeighborsResults:
    type: object    
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/NearestNeighborsResult'
  ImportModelRequest:
    type: object
    properties:
      name:
        type: string
      scale:
        type: integer
      uri:
        type: array
        items:
          type: string
      modelType:
        type: string
      fileLocation:
        type: string
      jvmArgs:
        type: string
      subType:
        type: string
      labelsFileLocation:
        type: string
      extraArgs:
        type: string
      etlJson:
        type: string
      inputNames:
        type: array
        items:
          type: string
      outputNames:
        type: array
        items:
          type: string
    example:
      name: new_model
      scale: 1
      uri: 'my_deployment/model/new_model/v1'
      modelType: model
      fileLocation: 'file:///var/skil/storage/models/d8...eb28.zip'
  DeploymentResponse:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      deploymentSlug:
        type: string
      status:
        type: string
      body:
        $ref: '#/definitions/DeploymentObjects'
  DeploymentObjects:
    type: object
    properties:
      models:
        type: array
        items:
          $ref: '#/definitions/ModelResponse'
      transforms:
        type: array
        items:
          $ref: '#/definitions/ModelResponse'
      knn:
        type: array
        items:
          $ref: '#/definitions/ModelResponse'
  CreateDeploymentRequest:
    type: object
    properties:
      name:
        type: string
        description: name of the deployment
  ModelEntity:
    type: object
    properties:
      id:
        type: integer
        format: int64
      created:
        type: integer
        format: int64
      updated:
        type: integer
        format: int64
      modelType:
        type: string
        enum:
        - transform
        - model
        - knn
        - modelv2
      deploymentId:
        type: integer
        format: int64
      name:
        type: string
      scale:
        type: number
      fileLocation:
        type: string
      state:
        type: string
        enum:
        - created
        - starting
        - started
        - stopping
        - stopped
        - unhealthy
        - failed
      jvmArgs:
        type: string
      subType:
        type: string
      labelsFileLocation:
        type: string
      extraArgs:
        type: string
      launchPolicy:
        type: object
      modelState:
        type: string
        enum:
        - CREATED
        - STARTING
        - STARTED
        - STOPPING
        - STOPPED
        - UNHEALTHY
        - FAILED
  SetState:
    type: object
    properties:
      state:
        type: string
        enum:
        - start
        - stop
  ModelResponse:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      status:
        type: string
      scale:
        type: integer
      uri:
        type: array
        items:
          type: string
  NewDeployment:
    type: object
    properties:
      name:
        type: string
    example:
      name: productiongroup
  LoginRequest:
    type: object
    properties:
      userId:
        type: string
      password:
        type: string
    example:
      userId: admin
      password: admin
  LoginResponse:
    type: object
    properties:
      token:
        type: string
        description: Token received from the authentication server.
    example:
      token: xxxxxxx.yyyyyyy.zzzzzz
  User:
    type: object
    properties:
      userId:
        type: string
      userName:
        type: string
      password:
        type: string
      role:
        type: string
        description: User's role such as [user, admin, trial]
      scope:
        type: string
        description: User's scope such as [all, skil, zeppelin]
  ChangePasswordRequest:
    type: object
    properties:
      password:
        type: string
  AuthPolicy:
    type: object
    properties:
      '@class':
        type: string
        enum: 
        - SimpleAuthPolicy
        - RoleAuthPolicy
  TokenGenerateRequest:
    type: object
    properties:
      userId:
        type: string
      expiry:
        type: integer
        format: int64
  Token:
    type: object
    properties:
      tokenId:
        type: integer
        format: int64
      issued:
        type: integer
        format: int64
      expire:
        type: integer
        format: int64
      token:
        type: string
      userId:
        type: string
      isRevoked:
        type: integer
        format: int32
  Role:
    type: object
    properties:
      roleId:
        type: string
      roleName:
        type: string
  FileUploadList:
    type: object
    properties:
      fileUploadResponseList:
        type: array
        items:
          $ref: '#/definitions/FileUpload'
  FileUpload:
    type: object
    properties:
      key:
        type: string
      fileName:
        type: string
      status:
        type: string
      type:
        type: string
      path:
        type: string
      fileContent:
        type: string
  INDArray:
    type: object
    properties:
      array:
        type: string
      shape:
        type: array
        items:
          type: integer
      ordering:
        type: string
        enum:
        - f
        - c
      data:
        type: array
        items:
          type: number
          format: float
      dataType:
        type: string
        enum:
        - INT8
        - UINT8
        - INT16
        - FLOAT16
  Prediction:
    type: object
    properties:
      id:
        type: string
      needsPreProcessing:
        type: boolean
      prediction:
        $ref: '#/definitions/INDArray'
      inputMask:
        $ref: '#/definitions/INDArray'
    example:
      needsPreProcessing: true
      prediction:
        array: array
      id: id
  MultiPredictRequest:
    type: object
    properties:
      id:
        type: string
      needsPreProcessing:
        type: boolean
      inputs:
        type: array
        items:
          $ref: '#/definitions/INDArray'
      inputMasks:
        type: array
        items:
          $ref: '#/definitions/INDArray'
  MultiPredictResponse:
    type: object
    properties:
      id:
        type: string
      needsPreProcessing:
        type: boolean
      outputs:
        type: array
        items:
          $ref: '#/definitions/INDArray'
  ClassificationResult:
    type: object    
    properties:
      results:
        type: array
        description: index classification results for the minibatch
        items:
          type: integer
      probabilities:
        type: array
        description: max probabilities for the batch items
        items:
          type: number
          example: 0.452
      minibatchId:
        type: string
        description: minibatch ID
    example:
      minibatchId: minibatchId
      results:
      - 0
      - 0
      probabilities:
      - 0.452
      - 0.452
  MultiClassClassificationResult:
    type: object    
    properties:
      rankedOutcomes:
        type: array
        items:
          type: array
          items:
            type: string
      maxOutcomes:
        type: array
        items:
          type: string
      probabilities:
        type: array
        items:
          type: array
          items:
            type: number
            example: 0.4
    description: Represents all of the labels for a given classification
    example:
      maxOutcomes:
      - maxOutcomes
      - maxOutcomes
      rankedOutcomes:
      - - rankedOutcomes
        - rankedOutcomes
      - - rankedOutcomes
        - rankedOutcomes
      probabilities:
      - - 0.4
        - 0.4
      - - 0.4
        - 0.4
  ModelStatus:
    type: object    
    properties:
      status:
        type: integer
        example: 100
        description: | 
          100 - Model set successfully.
          200 - Model Updated Successfully.
          201 - Model Update Failed.
    example:
      status: 100
  JsonArrayResponse:
    type: object    
    properties:
      array:
        $ref: '#/definitions/INDArray'
    example:
      array:
        array: array
  LogRequest:
    type: object    
    properties:
      offset:
        type: integer
        format: int32
      rowCount:
        type: integer
        format: int32
      head:
        type: boolean
  LogBatch:
    type: object    
    properties:
      offset:
        type: integer
        example: 0
      rowCount:
        type: integer
        example: 2
      logs:
        type: string
    example:
      offset: 0
      rowCount: 2
      logs: logs
  MetaData:
    type: object
  DetectedObject:
    type: object
    properties:
      centerX:
        type: number
        format: float
      centerY:
        type: number
        format: float
      width:
        type: number
        format: float
      height:
        type: number
        format: float
      predictedClasses:
        type: array
        items:
          type: string
      confidences:
        type: array
        items:
          type: number
          format: float
  DetectionResult:
    type: object
    properties:
      id:
        type: string
      objects:
        type: array
        items:
          $ref: '#/definitions/DetectedObject'
  ModelHistoryEntity:
    type: object
    properties:
      created:
        type: integer
        format: int64
        description: When the model history / workspace was created
      modelHistoryId:
        type: string
        description: The GUID of the model history / workspace
      modelName:
        type: string
        description: Name of the model history / workspace
      modelLabels:
        type: string
        description: Model history / workspace labels
  AddModelHistoryRequest:
    type: object
    properties:
      modelName:
        type: string
        description: Name of the model history / workspace
      modelLabels:
        type: string
        description: Model history / workspace labels
  ExperimentEntity:
    type: object
    properties:
      bestModelId:
        type: string
        description: GUID of the best selected model in an experiment
      inputDataUri:
        type: string
        description: Input data URI
      experimentId:
        type: string
        description: GUID of the experiment
      experimentName:
        type: string
        description: Experiment's name
      experimentDescription:
        type: string
        description: Experiment's description
      notebookJson:
        type: string
        description: The associated Zeppelin notebook JSON string
      notebookUrl:
        type: string
        description: URL of the associated Zeppelin notebook
      zeppelinId:
        type: string
        description: Zeppelin ID
      modelHistoryId:
        type: string
        description: Id of the model history / workspace
      lastUpdated:
        type: integer
        format: int64
        description: Indicates the time when experiment was last updated
  UpdateBestModel:
    type: object
    properties:
      experimentId:
        type: string
        description: GUID of the experiment to update.
      bestModelId:
        type: string
        description: GUID of the model to set as the best model.
  ModelInstanceEntity:
    type: object
    properties:
      uri:
        type: string
        format: uri
        description: The model URI
      etlJson:
        type: string
        description: The json string for the ETL (Extract, Transform and Load)
      modelId:
        type: string
        description: GUID of the model.
      modelLabels:
        type: string
        description: Comma-separated labels string for the model
      inputFormats:
        type: string
        description: Format for the model input
      created:
        type: integer
        format: int64
        description: When the model was created
      notebookJson:
        type: string
        description: JSON string of the associated Zeppelin Notebook
      evalId:
        type: string
        description: GUID for the model evaluation
      modelName:
        type: string
        description: Model's name
      originalModelId:
        type: string
        description: Original GUID of the model (used for maintaining revisions of a particular model)
      modelVersion:
        type: string
        description: Model version
      experimentId:
        type: string
        description: GUID of the Experiment which is associated with the model.
  EvaluationResultsEntity:
    type: object
    properties:
      evaluation:
        type: string
      evalName:
        type: string
      modelInstanceId:
        type: string
      created:
        type: integer
        format: int64
        description: When the evaluation result was created
      f1:
        type: number
        format: double
      precision:
        type: number
        format: double
      recall:
        type: number
        format: double
      accuracy:
        type: number
        format: double
      rmse:
        type: number
        format: double
      auc:
        type: number
        format: double
      meanAbsoluteError:
        type: number
        format: double
      meanRelativeError:
        type: number
        format: double
      r2:
        type: number
        format: double
      evalId:
        type: string
        description: GUID of the evaluation
      evalVersion:
        type: integer
      binaryThreshold:
        type: number
        format: double
      binaryThresholds:
        type: string
  AggregatePrediction:
    type: object
    properties:
      modelId:
        type: string
        description: GUID of model instance
      evalType:
        type: string
        enum:
        - ROC_BINARY
        - ROC
        - EVALUATION_BINARY
        - EVALUATION
        - REGRESSON_EVALUATION
        - ROC_MULTI_CLASS
        description: the evaluation type to aggregate
  MinibatchEntity:
    type: object
    properties:
      miniBatchId:
        type: string
        description: GUID of mini batch
      evalId:
        type: string
        description: GUID of the evaluation
      evalVersion:
        type: integer
        description: Eval version
      batchVersion:
        type: integer
        description: Batch version
  ExampleEntity:
    type: object
    properties:
      exampleId:
        type: string
        description: the GUID of the example
      exampleVersion:
        type: integer
        description: Example version
      rowNumber:
        type: integer
        description: Row Number
      created:
        type: integer
        format: int64
        description: when the example was created
      miniBatchId:
        type: string
        description: The GUID of the minibatch
      miniBatchVersion:
        type: integer
        description: minibatch version
  AddExampleRequest:
    type: object
    properties:
      minibatch:
        $ref: '#/definitions/MinibatchEntity'
        description: the minibatch the examples are going to be associated with
      batchSize:
        type: integer
        description: the size of the batch to create
  BestModel:
    type: object
    properties:
      ids:
        type: array
        items:
          type: string
        description: the list of GUIDs for the models to get the best model from
      columnNameMetric:
        type: string
        enum:
        - f1
        - precision
        - recall
        - accuracy
        - rmse
        - auc
        - meanAbsoluteError
        - meanRelativeError
        - r2
        description: Name of the column metric (in an evaluation result) to get the best model from.
      evalType:
        type: string
        enum:
        - ROC_BINARY
        - ROC
        - EVALUATION_BINARY
        - EVALUATION
        - REGRESSON_EVALUATION
        - ROC_MULTI_CLASS
        description: the evaluation type to aggregate for each model's revisions
  ModelFeedBackRequest:
    type: object
    properties:
      batchId:
        type: string
        description: The GUID of the minibatch this feedback corresponds to
      guesses:
        type: array
        items:
          type: string
        description: The guessed label IDs by the model
        example: '["0", "1", "2"]'
      correct:
        type: array
        items:
          type: string
        description: The actual label IDs
        example: '["0", "0", "2"]'
  Resource:
    type: object
    properties:
      resourceId:
        type: integer
        format: int64
        description: ID of the resource
      name:
        type: string
        description: Resource nickname
      type:
        type: string
        description: Resource type (whether COMPUTE or STORAGE)
        enum:
        - COMPUTE
        - STORAGE
      subType:
        type: string
        description: Resource subtype (COMPUTE -> [EMR, DataProc, HDInsight, YARN] | STORAGE -> [S3, GoogleStorage, AzureStorage, HDFS])
        enum:
        - EMR                   # AWS Elastic Map Reduce(Compute)
        - S3                    # AWS Simple Storage Service
        - GoogleStorage         # Google Cloud Storage
        - DataProc              # Google Big Data Compute Engine
        - HDInsight             # Azure Compute
        - AzureStorage          # Azure Blob Storage
        - HDFS                  # in house Hadoop (Storage)
        - YARN                  # in house YARN (Compute)
      credentialId:
        type: string
        description: Credentials GUID
  EMRResourceDetails:
    type: object
    properties:
      '@class':
        type: string
        default: 'io.skymind.resource.model.subtypes.compute.EMRResourceDetails'
      resourceId:
        type: integer
        format: int64
        description: ID of the resource
      type:
        type: string
        description: Resource type
        enum:
        - COMPUTE
      subType:
        type: string
        description: Resource subtype
        enum:
        - EMR                   # AWS Elastic Map Reduce(Compute)
      clusterId:
        type: string
        description: EMR cluster ID
      region:
        type: string
        description: Region name where the cluster is deployed
  S3ResourceDetails:
    type: object
    properties:
      '@class':
        type: string
        default: 'io.skymind.resource.model.subtypes.storage.S3ResourceDetails'
      resourceId:
        type: integer
        format: int64
        description: ID of the resource
      type:
        type: string
        description: Resource type
        enum:
        - STORAGE
      subType:
        type: string
        description: Resource subtype
        enum:
        - S3                    # AWS Simple Storage Service
      bucket:
        type: string
        description: S3 Bucket Name
      region:
        type: string
        description: Region name where the S3 bucket is present
  GoogleStorageResourceDetails:
    type: object
    properties:
      '@class':
        type: string
        default: 'io.skymind.resource.model.subtypes.storage.GoogleStorageResourceDetails'
      resourceId:
        type: integer
        format: int64
        description: ID of the resource
      type:
        type: string
        description: Resource type
        enum:
        - STORAGE
      subType:
        type: string
        description: Resource subtype
        enum:
        - GoogleStorage         # Google Cloud Storage
      projectId:
        type: string
        description: Project ID
      bucketName:
        type: string
        description: Name of the storage bucket
  DataProcResourceDetails:
    type: object
    properties:
      '@class':
        type: string
        default: 'io.skymind.resource.model.subtypes.compute.DataProcResourceDetails'
      resourceId:
        type: integer
        format: int64
        description: ID of the resource
      type:
        type: string
        description: Resource type
        enum:
        - COMPUTE
      subType:
        type: string
        description: Resource subtype
        enum:
        - DataProc              # Google Big Data Compute Engine
      projectId:
        type: string
        description: Project ID
      region:
        type: string
        description: DataProc region
      sparkClusterName:
        type: string
        description: Name of the spark cluster
  HDInsightResourceDetails:
    type: object
    properties:
      '@class':
        type: string
        default: 'io.skymind.resource.model.subtypes.compute.HDInsightResourceDetails'
      resourceId:
        type: integer
        format: int64
        description: ID of the resource
      type:
        type: string
        description: Resource type
        enum:
        - COMPUTE
      subType:
        type: string
        description: Resource subtype
        enum:
        - HDInsight             # Azure Compute
      subscriptionId:
        type: string
        description: Azure subscription ID
      resourceGroupName:
        type: string
        description: name of the resource group
      clusterName:
        type: string
        description: Cluster name
  AzureStorageResourceDetails:
    type: object
    properties:
      '@class':
        type: string
        default: 'io.skymind.resource.model.subtypes.storage.AzureStorageResourceDetails'
      resourceId:
        type: integer
        format: int64
        description: ID of the resource
      type:
        type: string
        description: Resource type
        enum:
        - STORAGE
      subType:
        type: string
        description: Resource subtype
        enum:
        - AzureStorage          # Azure Blob Storage
      containerName:
        type: string
        description: Storage container name
  HDFSResourceDetails:
    type: object
    properties:
      '@class':
        type: string
        default: 'io.skymind.resource.model.subtypes.storage.HDFSResourceDetails'
      resourceId:
        type: integer
        format: int64
        description: ID of the resource
      type:
        type: string
        description: Resource type
        enum:
        - STORAGE
      subType:
        type: string
        description: Resource subtype
        enum:
        - HDFS                  # in house Hadoop (Storage)
      nameNodeHost:
        type: string
        description: Host of the node running the NameNode
      nameNodePort:
        type: string
        description: Port of the node running the NameNode
  YARNResourceDetails:
    type: object
    properties:
      '@class':
        type: string
        default: 'io.skymind.resource.model.subtypes.compute.YARNResourceDetails'
      resourceId:
        type: integer
        format: int64
        description: ID of the resource
      type:
        type: string
        description: Resource type
        enum:
        - COMPUTE
      subType:
        type: string
        description: Resource subtype
        enum:
        - YARN                  # in house YARN (Compute)
      localSparkHome:
        type: string
        description: Local Spark Home path
  ResourceGroup:
    type: object
    properties:
      groupId:
        type: integer
        format: int64
        description: ID of the resource group
      groupName:
        type: string
        description: Name of the resource group
      added:
        type: integer
        format: int64
        description: Milliseconds in Long when the resource group was added
      updated:
        type: integer
        format: int64
        description: Milliseconds in Long when the resource group was updated
  ResourceCredentials:
    type: object
    properties:
      credentialId:
        type: integer
        format: int64
        description: ID of the credentials
      type:
        type: string
        enum:
        - AWS
        - Azure
        - GoogleCloud
        - Hadoop
        description: Type of the credentials
      name:
        type: string
        description: Name of the credentials
      uri:
        type: string
        description: URI of the credentials
  AddResourceRequest:
    type: object
    properties:
      resourceName:
        type: string
        description: Name of the new resource
      resourceDetails:
        type: object
        description: One of the resource details objects
      credentialUri:
        type: string
        description: URI of the credentials. If this is present, you can leave out the 'credentialId'
      type:
        type: string
        description: Resource type (whether COMPUTE or STORAGE)
        enum:
        - COMPUTE
        - STORAGE
      subType:
        type: string
        description: Resource subtype (COMPUTE -> [EMR, DataProc, HDInsight, YARN] | STORAGE -> [S3, GoogleStorage, AzureStorage, HDFS])
        enum:
        - EMR                   # AWS Elastic Map Reduce(Compute)
        - S3                    # AWS Simple Storage Service
        - GoogleStorage         # Google Cloud Storage
        - DataProc              # Google Big Data Compute Engine
        - HDInsight             # Azure Compute
        - AzureStorage          # Azure Blob Storage
        - HDFS                  # in house Hadoop (Storage)
        - YARN                  # in house YARN (Compute)
      credentialId:
        type: integer
        format: int64
        description: ID of the credentials. If this is given then you can leave out the 'credentialsUri'
  AddCredentialsRequest:
    type: object
    properties:
      type:
        type: string
        enum:
        - AWS
        - Azure
        - GoogleCloud
        - Hadoop
        description: Type of the credentials
      name:
        type: string
        description: Name of the credentials
      uri:
        type: string
        description: URI of the credentials
  JobEntity:
    type: object
    properties:
      jobId:
        type: integer
        format: int64
        description: Job ID
      jobType:
        type: string
        enum:
        - TRAINING
        - INFERENCE
        description: Whether a job is for training or inference
      computeResourceId:
        type: integer
        format: int64
        description: Compute resource ID
      storageResourceId:
        type: integer
        format: int64
        description: Storage resource ID
      jobArgs:
        type: string
        description: Job arguments
      runId:
        type: string
        description: Job run ID
      status:
        type: string
        description: Job's status
        enum:
        - PENDING
        - RUNNING
        - CONTINUE
        - COMPLETED
        - CANCELLED
        - FAILED
        - INTERRUPTED
      outputFileName:
        type: string
        description: Output file name
  CreateJobRequest:
    type: object
    properties:
      computeResourceId:
        type: integer
        format: int64
        description: Compute resource ID
      storageResourceId:
        type: integer
        format: int64
        description: Storage resource ID
      jobArgs:
        type: string
        description: Job arguments
      outputFileName:
        type: string
        description: Output file name
  DownloadOutputFileRequest:
    type: object
    properties:
      localDownloadPath:
        type: string
        description: Local path where the file is to be downloaded
  FeedbackResponse:
    type: object
    properties:
      retrainThreshold:
        type: integer
        format: int32
        description: The number of examples required to start the retraining process.
      accumulatedSoFar:
        type: integer
        format: int32
        description: The number of retraining examples accumulated so far.
  RetrainingStatus:
    type: object
    properties:
      istraining:
        type: boolean
        description: True if the retrainer is busy training.
  RevisionsWritten:
    type: object
    properties:
      numRevisions:
        type: integer
        format: int32
  AccumulatedResults:
    type: object
    properties:
      accumulatedDataWithLabels:
        type: integer
        format: int32
      accumulatedDataWithOutLabels:
        type: integer
        format: int32
  RollbackStatus:
    type: object
    properties:
      status:
        type: string
        description: Status of the model revision rollback.