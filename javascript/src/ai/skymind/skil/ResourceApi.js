/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'ai/skymind/skil/model/AddCredentialsRequest', 'ai/skymind/skil/model/AddResourceRequest', 'ai/skymind/skil/model/Resource', 'ai/skymind/skil/model/ResourceCredentials', 'ai/skymind/skil/model/ResourceGroup'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../ai/skymind/skil/model/AddCredentialsRequest'), require('../ai/skymind/skil/model/AddResourceRequest'), require('../ai/skymind/skil/model/Resource'), require('../ai/skymind/skil/model/ResourceCredentials'), require('../ai/skymind/skil/model/ResourceGroup'));
  } else {
    // Browser globals (root is window)
    if (!root.SkilClient) {
      root.SkilClient = {};
    }
    root.SkilClient.ResourceApi = factory(root.SkilClient.ApiClient, root.SkilClient.AddCredentialsRequest, root.SkilClient.AddResourceRequest, root.SkilClient.Resource, root.SkilClient.ResourceCredentials, root.SkilClient.ResourceGroup);
  }
}(this, function(ApiClient, AddCredentialsRequest, AddResourceRequest, Resource, ResourceCredentials, ResourceGroup) {
  'use strict';

  /**
   * Resource service.
   * @module ai/skymind/skil/ResourceApi
   * @version 1.2.0
   */

  /**
   * Constructs a new ResourceApi. 
   * @alias module:ai/skymind/skil/ResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addCredentials operation.
     * @callback module:ai/skymind/skil/ResourceApi~addCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ResourceCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds credentials
     * @param {module:ai/skymind/skil/model/AddCredentialsRequest} addCredentialsRequest Add credentials request object
     * @param {module:ai/skymind/skil/ResourceApi~addCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ResourceCredentials}
     */
    this.addCredentials = function(addCredentialsRequest, callback) {
      var postBody = addCredentialsRequest;

      // verify the required parameter 'addCredentialsRequest' is set
      if (addCredentialsRequest === undefined || addCredentialsRequest === null) {
        throw new Error("Missing the required parameter 'addCredentialsRequest' when calling addCredentials");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResourceCredentials;

      return this.apiClient.callApi(
        '/resources/credentials', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addResource operation.
     * @callback module:ai/skymind/skil/ResourceApi~addResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a resource
     * @param {module:ai/skymind/skil/model/AddResourceRequest} addResourceRequest The Add resource request object
     * @param {module:ai/skymind/skil/ResourceApi~addResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.addResource = function(addResourceRequest, callback) {
      var postBody = addResourceRequest;

      // verify the required parameter 'addResourceRequest' is set
      if (addResourceRequest === undefined || addResourceRequest === null) {
        throw new Error("Missing the required parameter 'addResourceRequest' when calling addResource");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/resources/add/resource', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addResourceGroup operation.
     * @callback module:ai/skymind/skil/ResourceApi~addResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ResourceGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a resource group
     * @param {String} groupName Name of the resource group
     * @param {module:ai/skymind/skil/ResourceApi~addResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ResourceGroup}
     */
    this.addResourceGroup = function(groupName, callback) {
      var postBody = groupName;

      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling addResourceGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['text/plain; charset=utf-8'];
      var accepts = ['application/json'];
      var returnType = ResourceGroup;

      return this.apiClient.callApi(
        '/resources/add/group', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addResourceToGroup operation.
     * @callback module:ai/skymind/skil/ResourceApi~addResourceToGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a resource to a resource group
     * @param {Number} resourceGroupId ID of the resource group
     * @param {Number} resourceId ID of the resource
     * @param {module:ai/skymind/skil/ResourceApi~addResourceToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addResourceToGroup = function(resourceGroupId, resourceId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceGroupId' is set
      if (resourceGroupId === undefined || resourceGroupId === null) {
        throw new Error("Missing the required parameter 'resourceGroupId' when calling addResourceToGroup");
      }

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling addResourceToGroup");
      }


      var pathParams = {
        'resourceGroupId': resourceGroupId,
        'resourceId': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCredentialsById operation.
     * @callback module:ai/skymind/skil/ResourceApi~deleteCredentialsByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete credentials given an ID
     * @param {Number} credentialId Credentials ID
     * @param {module:ai/skymind/skil/ResourceApi~deleteCredentialsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCredentialsById = function(credentialId, callback) {
      var postBody = null;

      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling deleteCredentialsById");
      }


      var pathParams = {
        'credentialId': credentialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/resources/credentials/{credentialId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourceById operation.
     * @callback module:ai/skymind/skil/ResourceApi~deleteResourceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Resource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the resource with the specified resource ID
     * @param {Number} resourceId ID of the resource
     * @param {module:ai/skymind/skil/ResourceApi~deleteResourceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Resource}
     */
    this.deleteResourceById = function(resourceId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling deleteResourceById");
      }


      var pathParams = {
        'resourceId': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Resource;

      return this.apiClient.callApi(
        '/resources/remove/resource/{resourceId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourceFromGroup operation.
     * @callback module:ai/skymind/skil/ResourceApi~deleteResourceFromGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a resource from a resource group
     * @param {Number} resourceGroupId ID of the resource group
     * @param {Number} resourceId ID of the resource
     * @param {module:ai/skymind/skil/ResourceApi~deleteResourceFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteResourceFromGroup = function(resourceGroupId, resourceId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceGroupId' is set
      if (resourceGroupId === undefined || resourceGroupId === null) {
        throw new Error("Missing the required parameter 'resourceGroupId' when calling deleteResourceFromGroup");
      }

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling deleteResourceFromGroup");
      }


      var pathParams = {
        'resourceGroupId': resourceGroupId,
        'resourceId': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourceGroupById operation.
     * @callback module:ai/skymind/skil/ResourceApi~deleteResourceGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ResourceGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the resource group with the specified resource group ID
     * @param {Number} resourceGroupId ID of the resource group
     * @param {module:ai/skymind/skil/ResourceApi~deleteResourceGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ResourceGroup}
     */
    this.deleteResourceGroupById = function(resourceGroupId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceGroupId' is set
      if (resourceGroupId === undefined || resourceGroupId === null) {
        throw new Error("Missing the required parameter 'resourceGroupId' when calling deleteResourceGroupById");
      }


      var pathParams = {
        'resourceGroupId': resourceGroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResourceGroup;

      return this.apiClient.callApi(
        '/resources/remove/group/{resourceGroupId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCredentialsById operation.
     * @callback module:ai/skymind/skil/ResourceApi~getCredentialsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ResourceCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get credentials given an ID
     * @param {Number} credentialId Credentials ID
     * @param {module:ai/skymind/skil/ResourceApi~getCredentialsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ResourceCredentials}
     */
    this.getCredentialsById = function(credentialId, callback) {
      var postBody = null;

      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling getCredentialsById");
      }


      var pathParams = {
        'credentialId': credentialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResourceCredentials;

      return this.apiClient.callApi(
        '/resources/credentials/{credentialId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceById operation.
     * @callback module:ai/skymind/skil/ResourceApi~getResourceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Resource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the resource with the specified resource ID
     * @param {Number} resourceId ID of the resource
     * @param {module:ai/skymind/skil/ResourceApi~getResourceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Resource}
     */
    this.getResourceById = function(resourceId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getResourceById");
      }


      var pathParams = {
        'resourceId': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Resource;

      return this.apiClient.callApi(
        '/resources/resource/{resourceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceBySubType operation.
     * @callback module:ai/skymind/skil/ResourceApi~getResourceBySubTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/Resource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the resources with the specified resource subtype
     * @param {module:ai/skymind/skil/model/String} resourceSubType Subtype of the resource
     * @param {module:ai/skymind/skil/ResourceApi~getResourceBySubTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/Resource>}
     */
    this.getResourceBySubType = function(resourceSubType, callback) {
      var postBody = null;

      // verify the required parameter 'resourceSubType' is set
      if (resourceSubType === undefined || resourceSubType === null) {
        throw new Error("Missing the required parameter 'resourceSubType' when calling getResourceBySubType");
      }


      var pathParams = {
        'resourceSubType': resourceSubType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Resource];

      return this.apiClient.callApi(
        '/resources/resources/subtype/{resourceSubType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceByType operation.
     * @callback module:ai/skymind/skil/ResourceApi~getResourceByTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/Resource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the resources with the specified resource type
     * @param {module:ai/skymind/skil/model/String} resourceType Type of the resource
     * @param {module:ai/skymind/skil/ResourceApi~getResourceByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/Resource>}
     */
    this.getResourceByType = function(resourceType, callback) {
      var postBody = null;

      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling getResourceByType");
      }


      var pathParams = {
        'resourceType': resourceType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Resource];

      return this.apiClient.callApi(
        '/resources/resources/type/{resourceType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceDetailsById operation.
     * @callback module:ai/skymind/skil/ResourceApi~getResourceDetailsByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the resource details with the specified resource ID
     * Get the details for the resource, for the given ID. Note that a &#39;ResourceDetails&#39; object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the &#39;Resource&#39; object contains only general information (name, id, type, subtype). 
     * @param {Number} resourceId ID of the resource
     * @param {module:ai/skymind/skil/ResourceApi~getResourceDetailsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getResourceDetailsById = function(resourceId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getResourceDetailsById");
      }


      var pathParams = {
        'resourceId': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/resources/details/{resourceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceGroupById operation.
     * @callback module:ai/skymind/skil/ResourceApi~getResourceGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ResourceGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the resource group with the specified resource group ID
     * @param {Number} resourceGroupId ID of the resource group
     * @param {module:ai/skymind/skil/ResourceApi~getResourceGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ResourceGroup}
     */
    this.getResourceGroupById = function(resourceGroupId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceGroupId' is set
      if (resourceGroupId === undefined || resourceGroupId === null) {
        throw new Error("Missing the required parameter 'resourceGroupId' when calling getResourceGroupById");
      }


      var pathParams = {
        'resourceGroupId': resourceGroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResourceGroup;

      return this.apiClient.callApi(
        '/resources/group/{resourceGroupId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceGroups operation.
     * @callback module:ai/skymind/skil/ResourceApi~getResourceGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/ResourceGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all the resource groups
     * @param {module:ai/skymind/skil/ResourceApi~getResourceGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/ResourceGroup>}
     */
    this.getResourceGroups = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ResourceGroup];

      return this.apiClient.callApi(
        '/resources/groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResources operation.
     * @callback module:ai/skymind/skil/ResourceApi~getResourcesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/Resource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A list of all known/registered resources, of all types
     * @param {module:ai/skymind/skil/ResourceApi~getResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/Resource>}
     */
    this.getResources = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Resource];

      return this.apiClient.callApi(
        '/resources/resources', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourcesFromGroup operation.
     * @callback module:ai/skymind/skil/ResourceApi~getResourcesFromGroupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/Resource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all resources from a resource group
     * @param {Number} resourceGroupId ID of the resource group
     * @param {module:ai/skymind/skil/ResourceApi~getResourcesFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/Resource>}
     */
    this.getResourcesFromGroup = function(resourceGroupId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceGroupId' is set
      if (resourceGroupId === undefined || resourceGroupId === null) {
        throw new Error("Missing the required parameter 'resourceGroupId' when calling getResourcesFromGroup");
      }


      var pathParams = {
        'resourceGroupId': resourceGroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Resource];

      return this.apiClient.callApi(
        '/resources/group/{resourceGroupId}/resources', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
