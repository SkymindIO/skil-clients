/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccumulatedResults from '../ai/skymind/skil/model/AccumulatedResults';
import AddCredentialsRequest from '../ai/skymind/skil/model/AddCredentialsRequest';
import AddExampleRequest from '../ai/skymind/skil/model/AddExampleRequest';
import AddModelHistoryRequest from '../ai/skymind/skil/model/AddModelHistoryRequest';
import AddResourceRequest from '../ai/skymind/skil/model/AddResourceRequest';
import AggregatePrediction from '../ai/skymind/skil/model/AggregatePrediction';
import AuthPolicy from '../ai/skymind/skil/model/AuthPolicy';
import Base64NDArrayBody from '../ai/skymind/skil/model/Base64NDArrayBody';
import Base64NDArrayBodyKNN from '../ai/skymind/skil/model/Base64NDArrayBodyKNN';
import BatchCSVRecord from '../ai/skymind/skil/model/BatchCSVRecord';
import BatchRecord from '../ai/skymind/skil/model/BatchRecord';
import BestModel from '../ai/skymind/skil/model/BestModel';
import ChangePasswordRequest from '../ai/skymind/skil/model/ChangePasswordRequest';
import ClassificationResult from '../ai/skymind/skil/model/ClassificationResult';
import CreateDeploymentRequest from '../ai/skymind/skil/model/CreateDeploymentRequest';
import CreateJobRequest from '../ai/skymind/skil/model/CreateJobRequest';
import DeploymentResponse from '../ai/skymind/skil/model/DeploymentResponse';
import DetectionResult from '../ai/skymind/skil/model/DetectionResult';
import DownloadOutputFileRequest from '../ai/skymind/skil/model/DownloadOutputFileRequest';
import EvaluationResultsEntity from '../ai/skymind/skil/model/EvaluationResultsEntity';
import ExampleEntity from '../ai/skymind/skil/model/ExampleEntity';
import ExperimentEntity from '../ai/skymind/skil/model/ExperimentEntity';
import FeedbackResponse from '../ai/skymind/skil/model/FeedbackResponse';
import FileUploadList from '../ai/skymind/skil/model/FileUploadList';
import ImportModelRequest from '../ai/skymind/skil/model/ImportModelRequest';
import InlineResponse200 from '../ai/skymind/skil/model/InlineResponse200';
import JobEntity from '../ai/skymind/skil/model/JobEntity';
import JsonArrayResponse from '../ai/skymind/skil/model/JsonArrayResponse';
import LogBatch from '../ai/skymind/skil/model/LogBatch';
import LogRequest from '../ai/skymind/skil/model/LogRequest';
import LoginRequest from '../ai/skymind/skil/model/LoginRequest';
import LoginResponse from '../ai/skymind/skil/model/LoginResponse';
import MinibatchEntity from '../ai/skymind/skil/model/MinibatchEntity';
import ModelEntity from '../ai/skymind/skil/model/ModelEntity';
import ModelFeedBackRequest from '../ai/skymind/skil/model/ModelFeedBackRequest';
import ModelHistoryEntity from '../ai/skymind/skil/model/ModelHistoryEntity';
import ModelInstanceEntity from '../ai/skymind/skil/model/ModelInstanceEntity';
import ModelStatus from '../ai/skymind/skil/model/ModelStatus';
import MultiClassClassificationResult from '../ai/skymind/skil/model/MultiClassClassificationResult';
import MultiPredictRequest from '../ai/skymind/skil/model/MultiPredictRequest';
import MultiPredictResponse from '../ai/skymind/skil/model/MultiPredictResponse';
import NearestNeighborRequest from '../ai/skymind/skil/model/NearestNeighborRequest';
import NearestNeighborsResults from '../ai/skymind/skil/model/NearestNeighborsResults';
import Prediction from '../ai/skymind/skil/model/Prediction';
import Resource from '../ai/skymind/skil/model/Resource';
import ResourceCredentials from '../ai/skymind/skil/model/ResourceCredentials';
import ResourceGroup from '../ai/skymind/skil/model/ResourceGroup';
import RetrainingStatus from '../ai/skymind/skil/model/RetrainingStatus';
import RevisionsWritten from '../ai/skymind/skil/model/RevisionsWritten';
import Role from '../ai/skymind/skil/model/Role';
import RollbackStatus from '../ai/skymind/skil/model/RollbackStatus';
import SetState from '../ai/skymind/skil/model/SetState';
import SingleCSVRecord from '../ai/skymind/skil/model/SingleCSVRecord';
import SingleRecord from '../ai/skymind/skil/model/SingleRecord';
import Token from '../ai/skymind/skil/model/Token';
import TokenGenerateRequest from '../ai/skymind/skil/model/TokenGenerateRequest';
import UpdateBestModel from '../ai/skymind/skil/model/UpdateBestModel';
import User from '../ai/skymind/skil/model/User';

/**
* Default service.
* @module ai/skymind/skil/DefaultApi
* @version 1.2.2.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:ai/skymind/skil/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accumulatedResults operation.
     * @callback module:ai/skymind/skil/DefaultApi~accumulatedResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/AccumulatedResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tells how many retraining examples have labels associated with them.
     * @param {module:ai/skymind/skil/DefaultApi~accumulatedResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/AccumulatedResults}
     */
    accumulatedResults(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccumulatedResults;
      return this.apiClient.callApi(
        '/accumulatedresults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCredentials operation.
     * @callback module:ai/skymind/skil/DefaultApi~addCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ResourceCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds credentials
     * @param {module:ai/skymind/skil/model/AddCredentialsRequest} addCredentialsRequest Add credentials request object
     * @param {module:ai/skymind/skil/DefaultApi~addCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ResourceCredentials}
     */
    addCredentials(addCredentialsRequest, callback) {
      let postBody = addCredentialsRequest;
      // verify the required parameter 'addCredentialsRequest' is set
      if (addCredentialsRequest === undefined || addCredentialsRequest === null) {
        throw new Error("Missing the required parameter 'addCredentialsRequest' when calling addCredentials");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceCredentials;
      return this.apiClient.callApi(
        '/resources/credentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addEvaluationResult operation.
     * @callback module:ai/skymind/skil/DefaultApi~addEvaluationResultCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/EvaluationResultsEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an evaluation result
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/EvaluationResultsEntity} evaluationResultsEntity The evaluation result entity
     * @param {module:ai/skymind/skil/DefaultApi~addEvaluationResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/EvaluationResultsEntity}
     */
    addEvaluationResult(modelHistoryServerId, evaluationResultsEntity, callback) {
      let postBody = evaluationResultsEntity;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addEvaluationResult");
      }
      // verify the required parameter 'evaluationResultsEntity' is set
      if (evaluationResultsEntity === undefined || evaluationResultsEntity === null) {
        throw new Error("Missing the required parameter 'evaluationResultsEntity' when calling addEvaluationResult");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EvaluationResultsEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/revisions/evaluations/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addExampleForBatch operation.
     * @callback module:ai/skymind/skil/DefaultApi~addExampleForBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/AddExampleRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a number of examples to a minibatch ID given an AddExampleRequest.
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/AddExampleRequest} addExampleRequest The add example request, encapsulating minibatch details and examples batch size
     * @param {module:ai/skymind/skil/DefaultApi~addExampleForBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/AddExampleRequest}
     */
    addExampleForBatch(modelHistoryServerId, addExampleRequest, callback) {
      let postBody = addExampleRequest;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addExampleForBatch");
      }
      // verify the required parameter 'addExampleRequest' is set
      if (addExampleRequest === undefined || addExampleRequest === null) {
        throw new Error("Missing the required parameter 'addExampleRequest' when calling addExampleForBatch");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddExampleRequest;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/exampleForBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addExampleToMinibatch operation.
     * @callback module:ai/skymind/skil/DefaultApi~addExampleToMinibatchCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ExampleEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an example to a minibatch
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/ExampleEntity} exampleEntity The example to add to the minibatch
     * @param {module:ai/skymind/skil/DefaultApi~addExampleToMinibatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ExampleEntity}
     */
    addExampleToMinibatch(modelHistoryServerId, exampleEntity, callback) {
      let postBody = exampleEntity;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addExampleToMinibatch");
      }
      // verify the required parameter 'exampleEntity' is set
      if (exampleEntity === undefined || exampleEntity === null) {
        throw new Error("Missing the required parameter 'exampleEntity' when calling addExampleToMinibatch");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExampleEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/example', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addExperiment operation.
     * @callback module:ai/skymind/skil/DefaultApi~addExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ExperimentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an experiment, given an experiment entity
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/ExperimentEntity} experimentEntity The experiment entity to add
     * @param {module:ai/skymind/skil/DefaultApi~addExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ExperimentEntity}
     */
    addExperiment(modelHistoryServerId, experimentEntity, callback) {
      let postBody = experimentEntity;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addExperiment");
      }
      // verify the required parameter 'experimentEntity' is set
      if (experimentEntity === undefined || experimentEntity === null) {
        throw new Error("Missing the required parameter 'experimentEntity' when calling addExperiment");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExperimentEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFeedbackBinary operation.
     * @callback module:ai/skymind/skil/DefaultApi~addFeedbackBinaryCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/FeedbackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id Batch ID to retrain the model with and get feedback for.
     * @param {module:ai/skymind/skil/model/String} type The type of the labels array.
     * @param {Object} opts Optional parameters
     * @param {File} opts.file The labels file to upload.
     * @param {module:ai/skymind/skil/DefaultApi~addFeedbackBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/FeedbackResponse}
     */
    addFeedbackBinary(id, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addFeedbackBinary");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling addFeedbackBinary");
      }

      let pathParams = {
        'id': id,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FeedbackResponse;
      return this.apiClient.callApi(
        '/feedback/{id}/{type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFeedbackJson operation.
     * @callback module:ai/skymind/skil/DefaultApi~addFeedbackJsonCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/FeedbackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the retraining feedback for the given batch ID.
     * @param {String} id Batch ID to retrain the model with and get feedback for.
     * @param {Object} opts Optional parameters
     * @param {Array.<[Number]>} opts.labels The associated labels (one-hot vectors) with the batch for retraining.
     * @param {module:ai/skymind/skil/DefaultApi~addFeedbackJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/FeedbackResponse}
     */
    addFeedbackJson(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['labels'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addFeedbackJson");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FeedbackResponse;
      return this.apiClient.callApi(
        '/feedback/{id}/json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addMinibatch operation.
     * @callback module:ai/skymind/skil/DefaultApi~addMinibatchCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/MinibatchEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a minibatch
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/MinibatchEntity} minibatchEntity The minibatch entity to add
     * @param {module:ai/skymind/skil/DefaultApi~addMinibatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/MinibatchEntity}
     */
    addMinibatch(modelHistoryServerId, minibatchEntity, callback) {
      let postBody = minibatchEntity;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addMinibatch");
      }
      // verify the required parameter 'minibatchEntity' is set
      if (minibatchEntity === undefined || minibatchEntity === null) {
        throw new Error("Missing the required parameter 'minibatchEntity' when calling addMinibatch");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MinibatchEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/minibatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addModelFeedback operation.
     * @callback module:ai/skymind/skil/DefaultApi~addModelFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelFeedBackRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an evaluation feedback to the model against a given minibatch id.
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/ModelFeedBackRequest} modelFeedBackRequest The model feedback request object
     * @param {module:ai/skymind/skil/DefaultApi~addModelFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelFeedBackRequest}
     */
    addModelFeedback(modelHistoryServerId, modelFeedBackRequest, callback) {
      let postBody = modelFeedBackRequest;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addModelFeedback");
      }
      // verify the required parameter 'modelFeedBackRequest' is set
      if (modelFeedBackRequest === undefined || modelFeedBackRequest === null) {
        throw new Error("Missing the required parameter 'modelFeedBackRequest' when calling addModelFeedback");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelFeedBackRequest;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addModelHistory operation.
     * @callback module:ai/skymind/skil/DefaultApi~addModelHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelHistoryEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a model history / workspace
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/AddModelHistoryRequest} addModelHistoryRequest The model history request object
     * @param {module:ai/skymind/skil/DefaultApi~addModelHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelHistoryEntity}
     */
    addModelHistory(modelHistoryServerId, addModelHistoryRequest, callback) {
      let postBody = addModelHistoryRequest;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addModelHistory");
      }
      // verify the required parameter 'addModelHistoryRequest' is set
      if (addModelHistoryRequest === undefined || addModelHistoryRequest === null) {
        throw new Error("Missing the required parameter 'addModelHistoryRequest' when calling addModelHistory");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelHistoryEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/modelhistory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addModelInstance operation.
     * @callback module:ai/skymind/skil/DefaultApi~addModelInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelInstanceEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a model
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/ModelInstanceEntity} modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate
     * @param {module:ai/skymind/skil/DefaultApi~addModelInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelInstanceEntity}
     */
    addModelInstance(modelHistoryServerId, modelInstanceEntity, callback) {
      let postBody = modelInstanceEntity;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addModelInstance");
      }
      // verify the required parameter 'modelInstanceEntity' is set
      if (modelInstanceEntity === undefined || modelInstanceEntity === null) {
        throw new Error("Missing the required parameter 'modelInstanceEntity' when calling addModelInstance");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelInstanceEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addResource operation.
     * @callback module:ai/skymind/skil/DefaultApi~addResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a resource
     * @param {module:ai/skymind/skil/model/AddResourceRequest} addResourceRequest The Add resource request object
     * @param {module:ai/skymind/skil/DefaultApi~addResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addResource(addResourceRequest, callback) {
      let postBody = addResourceRequest;
      // verify the required parameter 'addResourceRequest' is set
      if (addResourceRequest === undefined || addResourceRequest === null) {
        throw new Error("Missing the required parameter 'addResourceRequest' when calling addResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/resources/add/resource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addResourceGroup operation.
     * @callback module:ai/skymind/skil/DefaultApi~addResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ResourceGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a resource group
     * @param {String} groupName Name of the resource group
     * @param {module:ai/skymind/skil/DefaultApi~addResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ResourceGroup}
     */
    addResourceGroup(groupName, callback) {
      let postBody = groupName;
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling addResourceGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['text/plain; charset=utf-8'];
      let accepts = ['application/json'];
      let returnType = ResourceGroup;
      return this.apiClient.callApi(
        '/resources/add/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addResourceToGroup operation.
     * @callback module:ai/skymind/skil/DefaultApi~addResourceToGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a resource to a resource group
     * @param {Number} resourceGroupId ID of the resource group
     * @param {Number} resourceId ID of the resource
     * @param {module:ai/skymind/skil/DefaultApi~addResourceToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addResourceToGroup(resourceGroupId, resourceId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupId' is set
      if (resourceGroupId === undefined || resourceGroupId === null) {
        throw new Error("Missing the required parameter 'resourceGroupId' when calling addResourceToGroup");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling addResourceToGroup");
      }

      let pathParams = {
        'resourceGroupId': resourceGroupId,
        'resourceId': resourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aggregateModelResults operation.
     * @callback module:ai/skymind/skil/DefaultApi~aggregateModelResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/EvaluationResultsEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregates the evaluaition results of a model instance, based on the evaluation type
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/AggregatePrediction} aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate
     * @param {module:ai/skymind/skil/DefaultApi~aggregateModelResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/EvaluationResultsEntity}
     */
    aggregateModelResults(modelHistoryServerId, aggregatePrediction, callback) {
      let postBody = aggregatePrediction;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling aggregateModelResults");
      }
      // verify the required parameter 'aggregatePrediction' is set
      if (aggregatePrediction === undefined || aggregatePrediction === null) {
        throw new Error("Missing the required parameter 'aggregatePrediction' when calling aggregateModelResults");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EvaluationResultsEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/aggregateresults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeUserPassword operation.
     * @callback module:ai/skymind/skil/DefaultApi~changeUserPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change user's password
     * @param {String} userId User's ID
     * @param {module:ai/skymind/skil/model/ChangePasswordRequest} changePasswordRequest Password details.
     * @param {module:ai/skymind/skil/DefaultApi~changeUserPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/User}
     */
    changeUserPassword(userId, changePasswordRequest, callback) {
      let postBody = changePasswordRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling changeUserPassword");
      }
      // verify the required parameter 'changePasswordRequest' is set
      if (changePasswordRequest === undefined || changePasswordRequest === null) {
        throw new Error("Missing the required parameter 'changePasswordRequest' when calling changeUserPassword");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/{userId}/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the classify operation.
     * @callback module:ai/skymind/skil/DefaultApi~classifyCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ClassificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use the deployed model to classify the input
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {module:ai/skymind/skil/DefaultApi~classifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ClassificationResult}
     */
    classify(deploymentName, versionName, modelName, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling classify");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling classify");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling classify");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling classify");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClassificationResult;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/classify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the classifyarray operation.
     * @callback module:ai/skymind/skil/DefaultApi~classifyarrayCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Base64NDArrayBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Same as /classify but returns the output as Base64NDArrayBody
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {module:ai/skymind/skil/DefaultApi~classifyarrayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Base64NDArrayBody}
     */
    classifyarray(deploymentName, versionName, modelName, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling classifyarray");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling classifyarray");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling classifyarray");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling classifyarray");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Base64NDArrayBody;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the classifyimage operation.
     * @callback module:ai/skymind/skil/DefaultApi~classifyimageCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ClassificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use the deployed model to classify the input, using input image file from multipart form data.
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {Object} opts Optional parameters
     * @param {File} opts.image The file to upload.
     * @param {module:ai/skymind/skil/DefaultApi~classifyimageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ClassificationResult}
     */
    classifyimage(deploymentName, versionName, modelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling classifyimage");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling classifyimage");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling classifyimage");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': opts['image']
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ClassificationResult;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clearState operation.
     * @callback module:ai/skymind/skil/DefaultApi~clearStateCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/FeedbackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears the accumulated data for retraining.
     * @param {module:ai/skymind/skil/DefaultApi~clearStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/FeedbackResponse}
     */
    clearState(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FeedbackResponse;
      return this.apiClient.callApi(
        '/clear', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createJob operation.
     * @callback module:ai/skymind/skil/DefaultApi~createJobCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/JobEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a job
     * @param {module:ai/skymind/skil/model/String} jobIdOrType Job Type
     * @param {module:ai/skymind/skil/model/CreateJobRequest} createJobRequest Create job request object
     * @param {module:ai/skymind/skil/DefaultApi~createJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/JobEntity}
     */
    createJob(jobIdOrType, createJobRequest, callback) {
      let postBody = createJobRequest;
      // verify the required parameter 'jobIdOrType' is set
      if (jobIdOrType === undefined || jobIdOrType === null) {
        throw new Error("Missing the required parameter 'jobIdOrType' when calling createJob");
      }
      // verify the required parameter 'createJobRequest' is set
      if (createJobRequest === undefined || createJobRequest === null) {
        throw new Error("Missing the required parameter 'createJobRequest' when calling createJob");
      }

      let pathParams = {
        'jobIdOrType': jobIdOrType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobEntity;
      return this.apiClient.callApi(
        '/jobs/{jobIdOrType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelHistory operation.
     * @callback module:ai/skymind/skil/DefaultApi~createModelHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelHistoryEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates model History
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/ModelHistoryEntity} modelHistoryEntity The model history entity
     * @param {module:ai/skymind/skil/DefaultApi~createModelHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelHistoryEntity}
     */
    createModelHistory(modelHistoryServerId, modelHistoryEntity, callback) {
      let postBody = modelHistoryEntity;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling createModelHistory");
      }
      // verify the required parameter 'modelHistoryEntity' is set
      if (modelHistoryEntity === undefined || modelHistoryEntity === null) {
        throw new Error("Missing the required parameter 'modelHistoryEntity' when calling createModelHistory");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelHistoryEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/revisions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCredentialsById operation.
     * @callback module:ai/skymind/skil/DefaultApi~deleteCredentialsByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete credentials given an ID
     * @param {Number} credentialId Credentials ID
     * @param {module:ai/skymind/skil/DefaultApi~deleteCredentialsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCredentialsById(credentialId, callback) {
      let postBody = null;
      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling deleteCredentialsById");
      }

      let pathParams = {
        'credentialId': credentialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/resources/credentials/{credentialId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExperiment operation.
     * @callback module:ai/skymind/skil/DefaultApi~deleteExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an experiment, given an experiment entity
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {String} experimentID the GUID of the experiment to delete
     * @param {module:ai/skymind/skil/DefaultApi~deleteExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/InlineResponse200}
     */
    deleteExperiment(modelHistoryServerId, experimentID, callback) {
      let postBody = null;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling deleteExperiment");
      }
      // verify the required parameter 'experimentID' is set
      if (experimentID === undefined || experimentID === null) {
        throw new Error("Missing the required parameter 'experimentID' when calling deleteExperiment");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'experimentID': experimentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiment/{experimentID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJobById operation.
     * @callback module:ai/skymind/skil/DefaultApi~deleteJobByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a job given its ID
     * @param {Number} jobIdOrType Job ID
     * @param {module:ai/skymind/skil/DefaultApi~deleteJobByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteJobById(jobIdOrType, callback) {
      let postBody = null;
      // verify the required parameter 'jobIdOrType' is set
      if (jobIdOrType === undefined || jobIdOrType === null) {
        throw new Error("Missing the required parameter 'jobIdOrType' when calling deleteJobById");
      }

      let pathParams = {
        'jobIdOrType': jobIdOrType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobIdOrType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModel operation.
     * @callback module:ai/skymind/skil/DefaultApi~deleteModelCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model by deployment and model id
     * @param {String} deploymentId ID deployment group
     * @param {String} modelId the id of the deployed model
     * @param {module:ai/skymind/skil/DefaultApi~deleteModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/InlineResponse200}
     */
    deleteModel(deploymentId, modelId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deleteModel");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling deleteModel");
      }

      let pathParams = {
        'deploymentId': deploymentId,
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/deployment/{deploymentId}/model/{modelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelHistory operation.
     * @callback module:ai/skymind/skil/DefaultApi~deleteModelHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a model history / workspace, given its ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {String} modelHistoryID the GUID of the model history / workspace to delete
     * @param {module:ai/skymind/skil/DefaultApi~deleteModelHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/InlineResponse200}
     */
    deleteModelHistory(modelHistoryServerId, modelHistoryID, callback) {
      let postBody = null;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling deleteModelHistory");
      }
      // verify the required parameter 'modelHistoryID' is set
      if (modelHistoryID === undefined || modelHistoryID === null) {
        throw new Error("Missing the required parameter 'modelHistoryID' when calling deleteModelHistory");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelHistoryID': modelHistoryID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelInstance operation.
     * @callback module:ai/skymind/skil/DefaultApi~deleteModelInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a model instance, given its ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {String} modelInstanceID GUID of the model instance to delete.
     * @param {module:ai/skymind/skil/DefaultApi~deleteModelInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteModelInstance(modelHistoryServerId, modelInstanceID, callback) {
      let postBody = null;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling deleteModelInstance");
      }
      // verify the required parameter 'modelInstanceID' is set
      if (modelInstanceID === undefined || modelInstanceID === null) {
        throw new Error("Missing the required parameter 'modelInstanceID' when calling deleteModelInstance");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelInstanceID': modelInstanceID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/{modelInstanceID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourceById operation.
     * @callback module:ai/skymind/skil/DefaultApi~deleteResourceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Resource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the resource with the specified resource ID
     * @param {Number} resourceId ID of the resource
     * @param {module:ai/skymind/skil/DefaultApi~deleteResourceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Resource}
     */
    deleteResourceById(resourceId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling deleteResourceById");
      }

      let pathParams = {
        'resourceId': resourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Resource;
      return this.apiClient.callApi(
        '/resources/remove/resource/{resourceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourceFromGroup operation.
     * @callback module:ai/skymind/skil/DefaultApi~deleteResourceFromGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a resource from a resource group
     * @param {Number} resourceGroupId ID of the resource group
     * @param {Number} resourceId ID of the resource
     * @param {module:ai/skymind/skil/DefaultApi~deleteResourceFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteResourceFromGroup(resourceGroupId, resourceId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupId' is set
      if (resourceGroupId === undefined || resourceGroupId === null) {
        throw new Error("Missing the required parameter 'resourceGroupId' when calling deleteResourceFromGroup");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling deleteResourceFromGroup");
      }

      let pathParams = {
        'resourceGroupId': resourceGroupId,
        'resourceId': resourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourceGroupById operation.
     * @callback module:ai/skymind/skil/DefaultApi~deleteResourceGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ResourceGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the resource group with the specified resource group ID
     * @param {Number} resourceGroupId ID of the resource group
     * @param {module:ai/skymind/skil/DefaultApi~deleteResourceGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ResourceGroup}
     */
    deleteResourceGroupById(resourceGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupId' is set
      if (resourceGroupId === undefined || resourceGroupId === null) {
        throw new Error("Missing the required parameter 'resourceGroupId' when calling deleteResourceGroupById");
      }

      let pathParams = {
        'resourceGroupId': resourceGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceGroup;
      return this.apiClient.callApi(
        '/resources/remove/group/{resourceGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployModel operation.
     * @callback module:ai/skymind/skil/DefaultApi~deployModelCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a model in a deployment group.
     * @param {String} deploymentId ID deployment group
     * @param {module:ai/skymind/skil/model/ImportModelRequest} body the model import request
     * @param {module:ai/skymind/skil/DefaultApi~deployModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelEntity}
     */
    deployModel(deploymentId, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deployModel");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deployModel");
      }

      let pathParams = {
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelEntity;
      return this.apiClient.callApi(
        '/deployment/{deploymentId}/model', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentCreate operation.
     * @callback module:ai/skymind/skil/DefaultApi~deploymentCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/DeploymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new deployment group.
     * @param {module:ai/skymind/skil/model/CreateDeploymentRequest} body the deployment request
     * @param {module:ai/skymind/skil/DefaultApi~deploymentCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/DeploymentResponse}
     */
    deploymentCreate(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deploymentCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentResponse;
      return this.apiClient.callApi(
        '/deployment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentDelete operation.
     * @callback module:ai/skymind/skil/DefaultApi~deploymentDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a deployment by id
     * @param {String} deploymentId Id of the deployment group
     * @param {module:ai/skymind/skil/DefaultApi~deploymentDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/InlineResponse200}
     */
    deploymentDelete(deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deploymentDelete");
      }

      let pathParams = {
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/deployment/{deploymentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentGet operation.
     * @callback module:ai/skymind/skil/DefaultApi~deploymentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/DeploymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a deployment details by id
     * @param {String} deploymentId Id of the deployment group
     * @param {module:ai/skymind/skil/DefaultApi~deploymentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/DeploymentResponse}
     */
    deploymentGet(deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deploymentGet");
      }

      let pathParams = {
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentResponse;
      return this.apiClient.callApi(
        '/deployment/{deploymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deployments operation.
     * @callback module:ai/skymind/skil/DefaultApi~deploymentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/DeploymentResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of deployments
     * @param {module:ai/skymind/skil/DefaultApi~deploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/DeploymentResponse>}
     */
    deployments(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeploymentResponse];
      return this.apiClient.callApi(
        '/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detectobjects operation.
     * @callback module:ai/skymind/skil/DefaultApi~detectobjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/DetectionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect the objects, given a (input) prediction request
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {String} id the GUID for mapping the results in the detections
     * @param {Boolean} needsPreprocessing (true) if the image needs preprocessing
     * @param {Number} threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.
     * @param {File} file the image file to detect objects from
     * @param {module:ai/skymind/skil/DefaultApi~detectobjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/DetectionResult}
     */
    detectobjects(deploymentName, versionName, modelName, id, needsPreprocessing, threshold, file, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling detectobjects");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling detectobjects");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling detectobjects");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling detectobjects");
      }
      // verify the required parameter 'needsPreprocessing' is set
      if (needsPreprocessing === undefined || needsPreprocessing === null) {
        throw new Error("Missing the required parameter 'needsPreprocessing' when calling detectobjects");
      }
      // verify the required parameter 'threshold' is set
      if (threshold === undefined || threshold === null) {
        throw new Error("Missing the required parameter 'threshold' when calling detectobjects");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling detectobjects");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'id': id,
        'needsPreprocessing': needsPreprocessing,
        'threshold': threshold,
        'file': file
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = DetectionResult;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadJobOutputFile operation.
     * @callback module:ai/skymind/skil/DefaultApi~downloadJobOutputFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download the output file from the job's execution. This will ONLY work if the job's run status is 'COMPLETE'.
     * @param {Number} jobId Job ID
     * @param {module:ai/skymind/skil/model/DownloadOutputFileRequest} downloadOutputFileRequest Download output file request object
     * @param {module:ai/skymind/skil/DefaultApi~downloadJobOutputFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadJobOutputFile(jobId, downloadOutputFileRequest, callback) {
      let postBody = downloadOutputFileRequest;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling downloadJobOutputFile");
      }
      // verify the required parameter 'downloadOutputFileRequest' is set
      if (downloadOutputFileRequest === undefined || downloadOutputFileRequest === null) {
        throw new Error("Missing the required parameter 'downloadOutputFileRequest' when calling downloadJobOutputFile");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/outputfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateAuthToken operation.
     * @callback module:ai/skymind/skil/DefaultApi~generateAuthTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate new auth token
     * @param {module:ai/skymind/skil/model/TokenGenerateRequest} tokenGenerateRequest Auth token details.
     * @param {module:ai/skymind/skil/DefaultApi~generateAuthTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Token}
     */
    generateAuthToken(tokenGenerateRequest, callback) {
      let postBody = tokenGenerateRequest;
      // verify the required parameter 'tokenGenerateRequest' is set
      if (tokenGenerateRequest === undefined || tokenGenerateRequest === null) {
        throw new Error("Missing the required parameter 'tokenGenerateRequest' when calling generateAuthToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/auth/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllJobs operation.
     * @callback module:ai/skymind/skil/DefaultApi~getAllJobsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/JobEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all available jobs
     * @param {module:ai/skymind/skil/DefaultApi~getAllJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/JobEntity>}
     */
    getAllJobs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [JobEntity];
      return this.apiClient.callApi(
        '/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArray operation.
     * @callback module:ai/skymind/skil/DefaultApi~getArrayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the memory mapped array based on the array type.
     * The array is specified through a file path, in the configuration object, during model server deployment.
     * @param {module:ai/skymind/skil/model/String} accept 
     * @param {module:ai/skymind/skil/model/String} arrayType The format in which the memory mapped array is returned.
     * @param {module:ai/skymind/skil/DefaultApi~getArrayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getArray(accept, arrayType, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getArray");
      }
      // verify the required parameter 'arrayType' is set
      if (arrayType === undefined || arrayType === null) {
        throw new Error("Missing the required parameter 'arrayType' when calling getArray");
      }

      let pathParams = {
        'arrayType': arrayType
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/array/{arrayType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArrayIndices operation.
     * @callback module:ai/skymind/skil/DefaultApi~getArrayIndicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the memory mapped array indices based on the array type.
     * @param {module:ai/skymind/skil/model/String} contentType The `Content-Type` should always be `application/json`.
     * @param {module:ai/skymind/skil/model/String} accept 
     * @param {module:ai/skymind/skil/model/String} arrayType Format in which the memory mapped array is returned in.
     * @param {Object} opts Optional parameters
     * @param {String} opts.input Input indices array
     * @param {module:ai/skymind/skil/DefaultApi~getArrayIndicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getArrayIndices(contentType, accept, arrayType, opts, callback) {
      opts = opts || {};
      let postBody = opts['input'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getArrayIndices");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getArrayIndices");
      }
      // verify the required parameter 'arrayType' is set
      if (arrayType === undefined || arrayType === null) {
        throw new Error("Missing the required parameter 'arrayType' when calling getArrayIndices");
      }

      let pathParams = {
        'arrayType': arrayType
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'accept': accept
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/array/indices/{arrayType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArrayRange operation.
     * @callback module:ai/skymind/skil/DefaultApi~getArrayRangeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the memory mapped array within a range based on the array type.
     * @param {module:ai/skymind/skil/model/String} accept 
     * @param {module:ai/skymind/skil/model/String} arrayType Format in which the memory mapped array is returned in.
     * @param {Number} from 
     * @param {Number} to 
     * @param {module:ai/skymind/skil/DefaultApi~getArrayRangeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getArrayRange(accept, arrayType, from, to, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getArrayRange");
      }
      // verify the required parameter 'arrayType' is set
      if (arrayType === undefined || arrayType === null) {
        throw new Error("Missing the required parameter 'arrayType' when calling getArrayRange");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling getArrayRange");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling getArrayRange");
      }

      let pathParams = {
        'arrayType': arrayType,
        'from': from,
        'to': to
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/array/range/{from}/{to}/{arrayType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthPolicy operation.
     * @callback module:ai/skymind/skil/DefaultApi~getAuthPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/AuthPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get auth policy
     * @param {module:ai/skymind/skil/DefaultApi~getAuthPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/AuthPolicy}
     */
    getAuthPolicy(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthPolicy;
      return this.apiClient.callApi(
        '/auth/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBestModelAmongModelIds operation.
     * @callback module:ai/skymind/skil/DefaultApi~getBestModelAmongModelIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelInstanceEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the best model among the given model instance IDs, based on the evaluation type and column metric
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/BestModel} bestModel Object encapsulating the model ids, eval type and column metric name
     * @param {module:ai/skymind/skil/DefaultApi~getBestModelAmongModelIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelInstanceEntity}
     */
    getBestModelAmongModelIds(modelHistoryServerId, bestModel, callback) {
      let postBody = bestModel;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getBestModelAmongModelIds");
      }
      // verify the required parameter 'bestModel' is set
      if (bestModel === undefined || bestModel === null) {
        throw new Error("Missing the required parameter 'bestModel' when calling getBestModelAmongModelIds");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelInstanceEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/best', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCredentialsById operation.
     * @callback module:ai/skymind/skil/DefaultApi~getCredentialsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ResourceCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get credentials given an ID
     * @param {Number} credentialId Credentials ID
     * @param {module:ai/skymind/skil/DefaultApi~getCredentialsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ResourceCredentials}
     */
    getCredentialsById(credentialId, callback) {
      let postBody = null;
      // verify the required parameter 'credentialId' is set
      if (credentialId === undefined || credentialId === null) {
        throw new Error("Missing the required parameter 'credentialId' when calling getCredentialsById");
      }

      let pathParams = {
        'credentialId': credentialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceCredentials;
      return this.apiClient.callApi(
        '/resources/credentials/{credentialId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentModel operation.
     * @callback module:ai/skymind/skil/DefaultApi~getCurrentModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current model being used for retraining.
     * @param {module:ai/skymind/skil/DefaultApi~getCurrentModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCurrentModel(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/model', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvaluationForModelID operation.
     * @callback module:ai/skymind/skil/DefaultApi~getEvaluationForModelIDCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/EvaluationResultsEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of evaluation results entity, given a model instance ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {String} modelInstanceID GUID of the model instance to get evaluation results for.
     * @param {module:ai/skymind/skil/DefaultApi~getEvaluationForModelIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/EvaluationResultsEntity>}
     */
    getEvaluationForModelID(modelHistoryServerId, modelInstanceID, callback) {
      let postBody = null;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getEvaluationForModelID");
      }
      // verify the required parameter 'modelInstanceID' is set
      if (modelInstanceID === undefined || modelInstanceID === null) {
        throw new Error("Missing the required parameter 'modelInstanceID' when calling getEvaluationForModelID");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelInstanceID': modelInstanceID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EvaluationResultsEntity];
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExamplesForMinibatch operation.
     * @callback module:ai/skymind/skil/DefaultApi~getExamplesForMinibatchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/ExampleEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the examples for a minibatch ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {String} minibatchId The GUID of the minibatch
     * @param {module:ai/skymind/skil/DefaultApi~getExamplesForMinibatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/ExampleEntity>}
     */
    getExamplesForMinibatch(modelHistoryServerId, minibatchId, callback) {
      let postBody = null;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getExamplesForMinibatch");
      }
      // verify the required parameter 'minibatchId' is set
      if (minibatchId === undefined || minibatchId === null) {
        throw new Error("Missing the required parameter 'minibatchId' when calling getExamplesForMinibatch");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'minibatchId': minibatchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ExampleEntity];
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/example/{minibatchId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperiment operation.
     * @callback module:ai/skymind/skil/DefaultApi~getExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ExperimentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain an experiment's details, given its ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {String} experimentID the GUID of the experiment to obtain
     * @param {module:ai/skymind/skil/DefaultApi~getExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ExperimentEntity}
     */
    getExperiment(modelHistoryServerId, experimentID, callback) {
      let postBody = null;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getExperiment");
      }
      // verify the required parameter 'experimentID' is set
      if (experimentID === undefined || experimentID === null) {
        throw new Error("Missing the required parameter 'experimentID' when calling getExperiment");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'experimentID': experimentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExperimentEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiment/{experimentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperimentsForModelHistory operation.
     * @callback module:ai/skymind/skil/DefaultApi~getExperimentsForModelHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/ExperimentEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain all experiments for a model history / workspace
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {String} modelHistoryID the GUID of the model history / workspace
     * @param {module:ai/skymind/skil/DefaultApi~getExperimentsForModelHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/ExperimentEntity>}
     */
    getExperimentsForModelHistory(modelHistoryServerId, modelHistoryID, callback) {
      let postBody = null;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getExperimentsForModelHistory");
      }
      // verify the required parameter 'modelHistoryID' is set
      if (modelHistoryID === undefined || modelHistoryID === null) {
        throw new Error("Missing the required parameter 'modelHistoryID' when calling getExperimentsForModelHistory");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelHistoryID': modelHistoryID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ExperimentEntity];
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobById operation.
     * @callback module:ai/skymind/skil/DefaultApi~getJobByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/JobEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a job by its ID
     * @param {Number} jobIdOrType Job ID
     * @param {module:ai/skymind/skil/DefaultApi~getJobByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/JobEntity}
     */
    getJobById(jobIdOrType, callback) {
      let postBody = null;
      // verify the required parameter 'jobIdOrType' is set
      if (jobIdOrType === undefined || jobIdOrType === null) {
        throw new Error("Missing the required parameter 'jobIdOrType' when calling getJobById");
      }

      let pathParams = {
        'jobIdOrType': jobIdOrType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobEntity;
      return this.apiClient.callApi(
        '/jobs/{jobIdOrType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLastEvaluation operation.
     * @callback module:ai/skymind/skil/DefaultApi~getLastEvaluationCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/EvaluationResultsEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the last evaluation specifications from the current model.
     * @param {module:ai/skymind/skil/DefaultApi~getLastEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/EvaluationResultsEntity}
     */
    getLastEvaluation(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EvaluationResultsEntity;
      return this.apiClient.callApi(
        '/lastevaluation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMinibatch operation.
     * @callback module:ai/skymind/skil/DefaultApi~getMinibatchCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/MinibatchEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a minibatch for the model
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {String} minibatchId The GUID of the minibatch
     * @param {module:ai/skymind/skil/DefaultApi~getMinibatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/MinibatchEntity}
     */
    getMinibatch(modelHistoryServerId, minibatchId, callback) {
      let postBody = null;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getMinibatch");
      }
      // verify the required parameter 'minibatchId' is set
      if (minibatchId === undefined || minibatchId === null) {
        throw new Error("Missing the required parameter 'minibatchId' when calling getMinibatch");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'minibatchId': minibatchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MinibatchEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelDetails operation.
     * @callback module:ai/skymind/skil/DefaultApi~getModelDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get model details
     * @param {String} deploymentId ID deployment group
     * @param {String} modelId the id of the deployed model
     * @param {module:ai/skymind/skil/DefaultApi~getModelDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelEntity}
     */
    getModelDetails(deploymentId, modelId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling getModelDetails");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling getModelDetails");
      }

      let pathParams = {
        'deploymentId': deploymentId,
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelEntity;
      return this.apiClient.callApi(
        '/deployment/{deploymentId}/model/{modelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelHistory operation.
     * @callback module:ai/skymind/skil/DefaultApi~getModelHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelHistoryEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a model history, given its ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {String} modelHistoryID GUID of the model history to get information of.
     * @param {module:ai/skymind/skil/DefaultApi~getModelHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelHistoryEntity}
     */
    getModelHistory(modelHistoryServerId, modelHistoryID, callback) {
      let postBody = null;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getModelHistory");
      }
      // verify the required parameter 'modelHistoryID' is set
      if (modelHistoryID === undefined || modelHistoryID === null) {
        throw new Error("Missing the required parameter 'modelHistoryID' when calling getModelHistory");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelHistoryID': modelHistoryID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelHistoryEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelInstance operation.
     * @callback module:ai/skymind/skil/DefaultApi~getModelInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelInstanceEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a model instance, given its ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {String} modelInstanceID GUID of the model instance to get information of.
     * @param {module:ai/skymind/skil/DefaultApi~getModelInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelInstanceEntity}
     */
    getModelInstance(modelHistoryServerId, modelInstanceID, callback) {
      let postBody = null;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getModelInstance");
      }
      // verify the required parameter 'modelInstanceID' is set
      if (modelInstanceID === undefined || modelInstanceID === null) {
        throw new Error("Missing the required parameter 'modelInstanceID' when calling getModelInstance");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelInstanceID': modelInstanceID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelInstanceEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/{modelInstanceID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelsForExperiment operation.
     * @callback module:ai/skymind/skil/DefaultApi~getModelsForExperimentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/ModelInstanceEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain a list of all the models for an experiment
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {String} experimentID the GUID of the experiment
     * @param {module:ai/skymind/skil/DefaultApi~getModelsForExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/ModelInstanceEntity>}
     */
    getModelsForExperiment(modelHistoryServerId, experimentID, callback) {
      let postBody = null;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getModelsForExperiment");
      }
      // verify the required parameter 'experimentID' is set
      if (experimentID === undefined || experimentID === null) {
        throw new Error("Missing the required parameter 'experimentID' when calling getModelsForExperiment");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'experimentID': experimentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelInstanceEntity];
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiment/{experimentID}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceById operation.
     * @callback module:ai/skymind/skil/DefaultApi~getResourceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Resource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the resource with the specified resource ID
     * @param {Number} resourceId ID of the resource
     * @param {module:ai/skymind/skil/DefaultApi~getResourceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Resource}
     */
    getResourceById(resourceId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getResourceById");
      }

      let pathParams = {
        'resourceId': resourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Resource;
      return this.apiClient.callApi(
        '/resources/resource/{resourceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceBySubType operation.
     * @callback module:ai/skymind/skil/DefaultApi~getResourceBySubTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/Resource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the resources with the specified resource subtype
     * @param {module:ai/skymind/skil/model/String} resourceSubType Subtype of the resource
     * @param {module:ai/skymind/skil/DefaultApi~getResourceBySubTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/Resource>}
     */
    getResourceBySubType(resourceSubType, callback) {
      let postBody = null;
      // verify the required parameter 'resourceSubType' is set
      if (resourceSubType === undefined || resourceSubType === null) {
        throw new Error("Missing the required parameter 'resourceSubType' when calling getResourceBySubType");
      }

      let pathParams = {
        'resourceSubType': resourceSubType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Resource];
      return this.apiClient.callApi(
        '/resources/resources/subtype/{resourceSubType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceByType operation.
     * @callback module:ai/skymind/skil/DefaultApi~getResourceByTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/Resource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the resources with the specified resource type
     * @param {module:ai/skymind/skil/model/String} resourceType Type of the resource
     * @param {module:ai/skymind/skil/DefaultApi~getResourceByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/Resource>}
     */
    getResourceByType(resourceType, callback) {
      let postBody = null;
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling getResourceByType");
      }

      let pathParams = {
        'resourceType': resourceType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Resource];
      return this.apiClient.callApi(
        '/resources/resources/type/{resourceType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceDetailsById operation.
     * @callback module:ai/skymind/skil/DefaultApi~getResourceDetailsByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the resource details with the specified resource ID
     * Get the details for the resource, for the given ID. Note that a 'ResourceDetails' object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the 'Resource' object contains only general information (name, id, type, subtype). 
     * @param {Number} resourceId ID of the resource
     * @param {module:ai/skymind/skil/DefaultApi~getResourceDetailsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getResourceDetailsById(resourceId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getResourceDetailsById");
      }

      let pathParams = {
        'resourceId': resourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/resources/details/{resourceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceGroupById operation.
     * @callback module:ai/skymind/skil/DefaultApi~getResourceGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ResourceGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the resource group with the specified resource group ID
     * @param {Number} resourceGroupId ID of the resource group
     * @param {module:ai/skymind/skil/DefaultApi~getResourceGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ResourceGroup}
     */
    getResourceGroupById(resourceGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupId' is set
      if (resourceGroupId === undefined || resourceGroupId === null) {
        throw new Error("Missing the required parameter 'resourceGroupId' when calling getResourceGroupById");
      }

      let pathParams = {
        'resourceGroupId': resourceGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceGroup;
      return this.apiClient.callApi(
        '/resources/group/{resourceGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceGroups operation.
     * @callback module:ai/skymind/skil/DefaultApi~getResourceGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/ResourceGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all the resource groups
     * @param {module:ai/skymind/skil/DefaultApi~getResourceGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/ResourceGroup>}
     */
    getResourceGroups(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ResourceGroup];
      return this.apiClient.callApi(
        '/resources/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResources operation.
     * @callback module:ai/skymind/skil/DefaultApi~getResourcesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/Resource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A list of all known/registered resources, of all types
     * @param {module:ai/skymind/skil/DefaultApi~getResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/Resource>}
     */
    getResources(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Resource];
      return this.apiClient.callApi(
        '/resources/resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourcesFromGroup operation.
     * @callback module:ai/skymind/skil/DefaultApi~getResourcesFromGroupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/Resource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all resources from a resource group
     * @param {Number} resourceGroupId ID of the resource group
     * @param {module:ai/skymind/skil/DefaultApi~getResourcesFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/Resource>}
     */
    getResourcesFromGroup(resourceGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupId' is set
      if (resourceGroupId === undefined || resourceGroupId === null) {
        throw new Error("Missing the required parameter 'resourceGroupId' when calling getResourcesFromGroup");
      }

      let pathParams = {
        'resourceGroupId': resourceGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Resource];
      return this.apiClient.callApi(
        '/resources/group/{resourceGroupId}/resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoles operation.
     * @callback module:ai/skymind/skil/DefaultApi~getRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all roles.
     * @param {module:ai/skymind/skil/DefaultApi~getRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/Role>}
     */
    getRoles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Role];
      return this.apiClient.callApi(
        '/security/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:ai/skymind/skil/DefaultApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user by user ID
     * @param {String} userId User's ID
     * @param {module:ai/skymind/skil/DefaultApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/User}
     */
    getUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserAuthTokens operation.
     * @callback module:ai/skymind/skil/DefaultApi~getUserAuthTokensCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/Token>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get auth tokens for a user.
     * @param {String} userId User's ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.onlyValid True if you only want the valid tokens.
     * @param {module:ai/skymind/skil/DefaultApi~getUserAuthTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/Token>}
     */
    getUserAuthTokens(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserAuthTokens");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'onlyValid': opts['onlyValid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Token];
      return this.apiClient.callApi(
        '/auth/{userId}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:ai/skymind/skil/DefaultApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all users.
     * @param {module:ai/skymind/skil/DefaultApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/User>}
     */
    getUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/security/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the isTraining operation.
     * @callback module:ai/skymind/skil/DefaultApi~isTrainingCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/RetrainingStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the retraining status
     * @param {module:ai/skymind/skil/DefaultApi~isTrainingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/RetrainingStatus}
     */
    isTraining(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrainingStatus;
      return this.apiClient.callApi(
        '/istraining', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jsonarray operation.
     * @callback module:ai/skymind/skil/DefaultApi~jsonarrayCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/JsonArrayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run inference on the input and returns it as a JsonArrayResponse
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {module:ai/skymind/skil/DefaultApi~jsonarrayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/JsonArrayResponse}
     */
    jsonarray(deploymentName, versionName, modelName, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling jsonarray");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling jsonarray");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling jsonarray");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jsonarray");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JsonArrayResponse;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the knn operation.
     * @callback module:ai/skymind/skil/DefaultApi~knnCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/NearestNeighborsResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs knn on the given index with the given k
     * Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} knnName ID or name of the deployed knn
     * @param {module:ai/skymind/skil/model/NearestNeighborRequest} body 
     * @param {module:ai/skymind/skil/DefaultApi~knnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/NearestNeighborsResults}
     */
    knn(deploymentName, versionName, knnName, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling knn");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling knn");
      }
      // verify the required parameter 'knnName' is set
      if (knnName === undefined || knnName === null) {
        throw new Error("Missing the required parameter 'knnName' when calling knn");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling knn");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'knnName': knnName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NearestNeighborsResults;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the knnnew operation.
     * @callback module:ai/skymind/skil/DefaultApi~knnnewCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/NearestNeighborsResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a k nearest neighbors search on a NEW data point
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} knnName ID or name of the deployed knn
     * @param {module:ai/skymind/skil/model/Base64NDArrayBodyKNN} body The input NDArray
     * @param {module:ai/skymind/skil/DefaultApi~knnnewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/NearestNeighborsResults}
     */
    knnnew(deploymentName, versionName, knnName, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling knnnew");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling knnnew");
      }
      // verify the required parameter 'knnName' is set
      if (knnName === undefined || knnName === null) {
        throw new Error("Missing the required parameter 'knnName' when calling knnnew");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling knnnew");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'knnName': knnName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NearestNeighborsResults;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllExperiments operation.
     * @callback module:ai/skymind/skil/DefaultApi~listAllExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/ExperimentEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all of the experiments in every model history / workspace
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/DefaultApi~listAllExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/ExperimentEntity>}
     */
    listAllExperiments(modelHistoryServerId, callback) {
      let postBody = null;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling listAllExperiments");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ExperimentEntity];
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logfilepath operation.
     * @callback module:ai/skymind/skil/DefaultApi~logfilepathCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logs file path
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/DefaultApi~logfilepathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    logfilepath(deploymentName, versionName, modelName, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling logfilepath");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling logfilepath");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling logfilepath");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['text'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:ai/skymind/skil/DefaultApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/LoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post JSON credentials and obtain a JWT authorization token.
     * @param {module:ai/skymind/skil/model/LoginRequest} loginRequest Login credentials.
     * @param {module:ai/skymind/skil/DefaultApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/LoginResponse}
     */
    login(loginRequest, callback) {
      let postBody = loginRequest;
      // verify the required parameter 'loginRequest' is set
      if (loginRequest === undefined || loginRequest === null) {
        throw new Error("Missing the required parameter 'loginRequest' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginResponse;
      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logs operation.
     * @callback module:ai/skymind/skil/DefaultApi~logsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/LogBatch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logs
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/model/LogRequest} logRequest The log object
     * @param {module:ai/skymind/skil/DefaultApi~logsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/LogBatch}
     */
    logs(deploymentName, versionName, modelName, logRequest, callback) {
      let postBody = logRequest;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling logs");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling logs");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling logs");
      }
      // verify the required parameter 'logRequest' is set
      if (logRequest === undefined || logRequest === null) {
        throw new Error("Missing the required parameter 'logRequest' when calling logs");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogBatch;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/logs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metaGet operation.
     * @callback module:ai/skymind/skil/DefaultApi~metaGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * this method can be used to get the meta data for the current model which set to the server
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/DefaultApi~metaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    metaGet(deploymentName, versionName, modelName, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling metaGet");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling metaGet");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling metaGet");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metaPost operation.
     * @callback module:ai/skymind/skil/DefaultApi~metaPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method can be used to set meta data for the current model which is set to the server
     * @param {module:ai/skymind/skil/model/String} contentType The `Content-Type` should always be `application/json`
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {String} body the meta data object
     * @param {module:ai/skymind/skil/DefaultApi~metaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    metaPost(contentType, deploymentName, versionName, modelName, body, callback) {
      let postBody = body;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling metaPost");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling metaPost");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling metaPost");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling metaPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling metaPost");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelStateChange operation.
     * @callback module:ai/skymind/skil/DefaultApi~modelStateChangeCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the state (start/stop) of a deployed model
     * @param {String} deploymentId ID deployment group
     * @param {String} modelId the id of the deployed model
     * @param {module:ai/skymind/skil/model/SetState} body the model state object
     * @param {module:ai/skymind/skil/DefaultApi~modelStateChangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelEntity}
     */
    modelStateChange(deploymentId, modelId, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling modelStateChange");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling modelStateChange");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling modelStateChange");
      }

      let pathParams = {
        'deploymentId': deploymentId,
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelEntity;
      return this.apiClient.callApi(
        '/deployment/{deploymentId}/model/{modelId}/state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the models operation.
     * @callback module:ai/skymind/skil/DefaultApi~modelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/ModelEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all the deployed models given a deployment id
     * @param {String} deploymentId ID deployment group
     * @param {module:ai/skymind/skil/DefaultApi~modelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/ModelEntity>}
     */
    models(deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling models");
      }

      let pathParams = {
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelEntity];
      return this.apiClient.callApi(
        '/deployment/{deploymentId}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelset operation.
     * @callback module:ai/skymind/skil/DefaultApi~modelsetCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the model to be served
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {Object} opts Optional parameters
     * @param {File} opts.file The model file to upload (.pb file)
     * @param {module:ai/skymind/skil/DefaultApi~modelsetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelStatus}
     */
    modelset(deploymentName, versionName, modelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling modelset");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling modelset");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling modelset");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelStatus;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelupdate operation.
     * @callback module:ai/skymind/skil/DefaultApi~modelupdateCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the model to be served
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {File} file The model file to update with (.pb file)
     * @param {module:ai/skymind/skil/DefaultApi~modelupdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelStatus}
     */
    modelupdate(deploymentName, versionName, modelName, file, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling modelupdate");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling modelupdate");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling modelupdate");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling modelupdate");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelStatus;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the multiclassify operation.
     * @callback module:ai/skymind/skil/DefaultApi~multiclassifyCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/MultiClassClassificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents all of the labels for a given classification
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {module:ai/skymind/skil/DefaultApi~multiclassifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/MultiClassClassificationResult}
     */
    multiclassify(deploymentName, versionName, modelName, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling multiclassify");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling multiclassify");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling multiclassify");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling multiclassify");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MultiClassClassificationResult;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the multipredict operation.
     * @callback module:ai/skymind/skil/DefaultApi~multipredictCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/MultiPredictResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the output from the network, based on the given INDArray[] input
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/model/MultiPredictRequest} body The multiple input arrays with mask inputs to run inferences on
     * @param {module:ai/skymind/skil/DefaultApi~multipredictCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/MultiPredictResponse}
     */
    multipredict(deploymentName, versionName, modelName, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling multipredict");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling multipredict");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling multipredict");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling multipredict");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MultiPredictResponse;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the multipredictimage operation.
     * @callback module:ai/skymind/skil/DefaultApi~multipredictimageCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/MultiPredictResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the output from the network using the given image file using the /multipredict endpoint's method
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {File} file The image file to run the prediction on
     * @param {String} id The id of the request (could be self generated)
     * @param {Boolean} needsPreprocessing Whether or not the preprocessing is required (either 'true' or 'false')
     * @param {module:ai/skymind/skil/DefaultApi~multipredictimageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/MultiPredictResponse}
     */
    multipredictimage(deploymentName, versionName, modelName, file, id, needsPreprocessing, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling multipredictimage");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling multipredictimage");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling multipredictimage");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling multipredictimage");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling multipredictimage");
      }
      // verify the required parameter 'needsPreprocessing' is set
      if (needsPreprocessing === undefined || needsPreprocessing === null) {
        throw new Error("Missing the required parameter 'needsPreprocessing' when calling multipredictimage");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'id': id,
        'needs_preprocessing': needsPreprocessing
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = MultiPredictResponse;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the numRevisions operation.
     * @callback module:ai/skymind/skil/DefaultApi~numRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/RevisionsWritten} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the number of retrained models written with retraining.
     * @param {module:ai/skymind/skil/DefaultApi~numRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/RevisionsWritten}
     */
    numRevisions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RevisionsWritten;
      return this.apiClient.callApi(
        '/numrevisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predict operation.
     * @callback module:ai/skymind/skil/DefaultApi~predictCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Prediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run inference on the input array.
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {module:ai/skymind/skil/DefaultApi~predictCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Prediction}
     */
    predict(deploymentName, versionName, modelName, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling predict");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling predict");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling predict");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling predict");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prediction;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/predict', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictError operation.
     * @callback module:ai/skymind/skil/DefaultApi~predictErrorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
     * These \"error\" endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
     * @param {module:ai/skymind/skil/model/String} contentType The `Content-Type` should always be `application/json`.
     * @param {module:ai/skymind/skil/model/String} operation Operation to perform on the input data.
     * @param {module:ai/skymind/skil/model/String} inputType Type of the input data.
     * @param {Object} opts Optional parameters
     * @param {String} opts.inputData 
     * @param {module:ai/skymind/skil/DefaultApi~predictErrorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    predictError(contentType, operation, inputType, opts, callback) {
      opts = opts || {};
      let postBody = opts['inputData'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling predictError");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling predictError");
      }
      // verify the required parameter 'inputType' is set
      if (inputType === undefined || inputType === null) {
        throw new Error("Missing the required parameter 'inputType' when calling predictError");
      }

      let pathParams = {
        'operation': operation,
        'inputType': inputType
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{operation}/{inputType}/error', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictV2File operation.
     * @callback module:ai/skymind/skil/DefaultApi~predictV2FileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * @param {module:ai/skymind/skil/model/String} operation The operation to perform on the input data. 
     * @param {module:ai/skymind/skil/model/String} inputTypeFile Type of the input data. 
     * @param {File} inputData The input data to run inference on.
     * @param {module:ai/skymind/skil/DefaultApi~predictV2FileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    predictV2File(operation, inputTypeFile, inputData, callback) {
      let postBody = null;
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling predictV2File");
      }
      // verify the required parameter 'inputTypeFile' is set
      if (inputTypeFile === undefined || inputTypeFile === null) {
        throw new Error("Missing the required parameter 'inputTypeFile' when calling predictV2File");
      }
      // verify the required parameter 'inputData' is set
      if (inputData === undefined || inputData === null) {
        throw new Error("Missing the required parameter 'inputData' when calling predictV2File");
      }

      let pathParams = {
        'operation': operation,
        'inputTypeFile': inputTypeFile
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'inputData': inputData
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{operation}/{inputTypeFile}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictV2Json operation.
     * @callback module:ai/skymind/skil/DefaultApi~predictV2JsonCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * @param {module:ai/skymind/skil/model/String} contentType The `Content-Type` should always be `application/json`.
     * @param {module:ai/skymind/skil/model/String} operation The operation to perform on the input data. 
     * @param {module:ai/skymind/skil/model/String} inputTypeJson Type of the input data. 
     * @param {String} inputData The input data to run inference on. (Specify a JSON string here)
     * @param {module:ai/skymind/skil/DefaultApi~predictV2JsonCallback} callback The callback function, accepting three arguments: error, data, response
     */
    predictV2Json(contentType, operation, inputTypeJson, inputData, callback) {
      let postBody = inputData;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling predictV2Json");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling predictV2Json");
      }
      // verify the required parameter 'inputTypeJson' is set
      if (inputTypeJson === undefined || inputTypeJson === null) {
        throw new Error("Missing the required parameter 'inputTypeJson' when calling predictV2Json");
      }
      // verify the required parameter 'inputData' is set
      if (inputData === undefined || inputData === null) {
        throw new Error("Missing the required parameter 'inputData' when calling predictV2Json");
      }

      let pathParams = {
        'operation': operation,
        'inputTypeJson': inputTypeJson
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{operation}/{inputTypeJson}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictimage operation.
     * @callback module:ai/skymind/skil/DefaultApi~predictimageCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Prediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run inference on the input array, using input image file from multipart form data.
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {Object} opts Optional parameters
     * @param {File} opts.image The file to upload.
     * @param {module:ai/skymind/skil/DefaultApi~predictimageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Prediction}
     */
    predictimage(deploymentName, versionName, modelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling predictimage");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling predictimage");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling predictimage");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': opts['image']
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Prediction;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictwithpreprocess operation.
     * @callback module:ai/skymind/skil/DefaultApi~predictwithpreprocessCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Prediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preprocesses the input and run inference on it
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {Array.<String>} body The input array
     * @param {module:ai/skymind/skil/DefaultApi~predictwithpreprocessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Prediction}
     */
    predictwithpreprocess(deploymentName, versionName, modelName, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling predictwithpreprocess");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling predictwithpreprocess");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling predictwithpreprocess");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling predictwithpreprocess");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prediction;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictwithpreprocessjson operation.
     * @callback module:ai/skymind/skil/DefaultApi~predictwithpreprocessjsonCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/JsonArrayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} modelName ID or name of the deployed model
     * @param {Array.<String>} body The input array
     * @param {module:ai/skymind/skil/DefaultApi~predictwithpreprocessjsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/JsonArrayResponse}
     */
    predictwithpreprocessjson(deploymentName, versionName, modelName, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling predictwithpreprocessjson");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling predictwithpreprocessjson");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling predictwithpreprocessjson");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JsonArrayResponse;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rawPredictBinary operation.
     * @callback module:ai/skymind/skil/DefaultApi~rawPredictBinaryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs inference based on the input data. Output is defined relative to the output adapter specified.
     * @param {module:ai/skymind/skil/model/String} inputType Input data type.
     * @param {module:ai/skymind/skil/model/String} outputType Binary output data type.
     * @param {Object} opts Optional parameters
     * @param {File} opts.inputData The input file to upload.
     * @param {module:ai/skymind/skil/DefaultApi~rawPredictBinaryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rawPredictBinary(inputType, outputType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inputType' is set
      if (inputType === undefined || inputType === null) {
        throw new Error("Missing the required parameter 'inputType' when calling rawPredictBinary");
      }
      // verify the required parameter 'outputType' is set
      if (outputType === undefined || outputType === null) {
        throw new Error("Missing the required parameter 'outputType' when calling rawPredictBinary");
      }

      let pathParams = {
        'inputType': inputType,
        'outputType': outputType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'inputData': opts['inputData']
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/raw/{inputType}/{outputType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshJobStatus operation.
     * @callback module:ai/skymind/skil/DefaultApi~refreshJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/JobEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh the remote job status. Can be used for monitoring.
     * @param {Number} jobId Job ID
     * @param {module:ai/skymind/skil/DefaultApi~refreshJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/JobEntity}
     */
    refreshJobStatus(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling refreshJobStatus");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobEntity;
      return this.apiClient.callApi(
        '/jobs/{jobId}/refresh', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUser operation.
     * @callback module:ai/skymind/skil/DefaultApi~registerUserCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new user
     * @param {module:ai/skymind/skil/model/User} user User details
     * @param {module:ai/skymind/skil/DefaultApi~registerUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/User}
     */
    registerUser(user, callback) {
      let postBody = user;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling registerUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reimportModel operation.
     * @callback module:ai/skymind/skil/DefaultApi~reimportModelCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reimport a model to a previous deployed model in a deployment
     * @param {String} deploymentId ID deployment group
     * @param {String} modelId the id of the deployed model
     * @param {module:ai/skymind/skil/model/ImportModelRequest} body the deployment request
     * @param {module:ai/skymind/skil/DefaultApi~reimportModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelEntity}
     */
    reimportModel(deploymentId, modelId, body, callback) {
      let postBody = body;
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling reimportModel");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling reimportModel");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reimportModel");
      }

      let pathParams = {
        'deploymentId': deploymentId,
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelEntity;
      return this.apiClient.callApi(
        '/deployment/{deploymentId}/model/{modelId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeUserToken operation.
     * @callback module:ai/skymind/skil/DefaultApi~revokeUserTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke a user token.
     * @param {Number} tokenId Token ID
     * @param {module:ai/skymind/skil/DefaultApi~revokeUserTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Token}
     */
    revokeUserToken(tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling revokeUserToken");
      }

      let pathParams = {
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/auth/token/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rollback operation.
     * @callback module:ai/skymind/skil/DefaultApi~rollbackCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/RollbackStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rollback to a previous revision of the model.
     * @param {Number} index Model revision index.
     * @param {module:ai/skymind/skil/DefaultApi~rollbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/RollbackStatus}
     */
    rollback(index, callback) {
      let postBody = null;
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling rollback");
      }

      let pathParams = {
        'index': index
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RollbackStatus;
      return this.apiClient.callApi(
        '/rollback/{index}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runAJob operation.
     * @callback module:ai/skymind/skil/DefaultApi~runAJobCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/JobEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start running an (already created) job on the remote resource
     * @param {Number} jobId Job ID
     * @param {module:ai/skymind/skil/DefaultApi~runAJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/JobEntity}
     */
    runAJob(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling runAJob");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobEntity;
      return this.apiClient.callApi(
        '/jobs/{jobId}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformCsv operation.
     * @callback module:ai/skymind/skil/DefaultApi~transformCsvCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/BatchCSVRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
     * Takes a batch of SingleCSVRecord object and transforms it into the desired format
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} transformName ID or name of the deployed transform
     * @param {Object} opts Optional parameters
     * @param {module:ai/skymind/skil/model/BatchCSVRecord} opts.batchCSVRecord The input batch of record arrays
     * @param {module:ai/skymind/skil/DefaultApi~transformCsvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/BatchCSVRecord}
     */
    transformCsv(deploymentName, versionName, transformName, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchCSVRecord'];
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling transformCsv");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling transformCsv");
      }
      // verify the required parameter 'transformName' is set
      if (transformName === undefined || transformName === null) {
        throw new Error("Missing the required parameter 'transformName' when calling transformCsv");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'transformName': transformName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchCSVRecord;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformarray operation.
     * @callback module:ai/skymind/skil/DefaultApi~transformarrayCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Base64NDArrayBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a batch input arrays and transforms it
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} transformName ID or name of the deployed transform
     * @param {Object} opts Optional parameters
     * @param {module:ai/skymind/skil/model/BatchRecord} opts.batchRecord The input batch of record arrays
     * @param {module:ai/skymind/skil/DefaultApi~transformarrayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Base64NDArrayBody}
     */
    transformarray(deploymentName, versionName, transformName, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchRecord'];
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling transformarray");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling transformarray");
      }
      // verify the required parameter 'transformName' is set
      if (transformName === undefined || transformName === null) {
        throw new Error("Missing the required parameter 'transformName' when calling transformarray");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'transformName': transformName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Base64NDArrayBody;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformimage operation.
     * @callback module:ai/skymind/skil/DefaultApi~transformimageCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Base64NDArrayBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes multiple multipart image file to transform and returns Base64NDArrayBody
     * Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} imageTransformName ID or name of the deployed image transform
     * @param {Array.<File>} files The image files to upload
     * @param {module:ai/skymind/skil/DefaultApi~transformimageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Base64NDArrayBody}
     */
    transformimage(deploymentName, versionName, imageTransformName, files, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling transformimage");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling transformimage");
      }
      // verify the required parameter 'imageTransformName' is set
      if (imageTransformName === undefined || imageTransformName === null) {
        throw new Error("Missing the required parameter 'imageTransformName' when calling transformimage");
      }
      // verify the required parameter 'files' is set
      if (files === undefined || files === null) {
        throw new Error("Missing the required parameter 'files' when calling transformimage");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'imageTransformName': imageTransformName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'files': this.apiClient.buildCollectionParam(files, 'csv')
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Base64NDArrayBody;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformincrementalCsv operation.
     * @callback module:ai/skymind/skil/DefaultApi~transformincrementalCsvCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/SingleCSVRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
     * Takes a SingleCSVRecord object and transforms it into the desired format
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} transformName ID or name of the deployed transform
     * @param {Object} opts Optional parameters
     * @param {module:ai/skymind/skil/model/SingleCSVRecord} opts.singleCSVRecord The input record array
     * @param {module:ai/skymind/skil/DefaultApi~transformincrementalCsvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/SingleCSVRecord}
     */
    transformincrementalCsv(deploymentName, versionName, transformName, opts, callback) {
      opts = opts || {};
      let postBody = opts['singleCSVRecord'];
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling transformincrementalCsv");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling transformincrementalCsv");
      }
      // verify the required parameter 'transformName' is set
      if (transformName === undefined || transformName === null) {
        throw new Error("Missing the required parameter 'transformName' when calling transformincrementalCsv");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'transformName': transformName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SingleCSVRecord;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformincrementalarray operation.
     * @callback module:ai/skymind/skil/DefaultApi~transformincrementalarrayCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Base64NDArrayBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Same as /transformincremental but returns Base64NDArrayBody.
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} transformName ID or name of the deployed transform
     * @param {Object} opts Optional parameters
     * @param {module:ai/skymind/skil/model/SingleRecord} opts.singleRecord The input record array
     * @param {module:ai/skymind/skil/DefaultApi~transformincrementalarrayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Base64NDArrayBody}
     */
    transformincrementalarray(deploymentName, versionName, transformName, opts, callback) {
      opts = opts || {};
      let postBody = opts['singleRecord'];
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling transformincrementalarray");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling transformincrementalarray");
      }
      // verify the required parameter 'transformName' is set
      if (transformName === undefined || transformName === null) {
        throw new Error("Missing the required parameter 'transformName' when calling transformincrementalarray");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'transformName': transformName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Base64NDArrayBody;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformincrementalimage operation.
     * @callback module:ai/skymind/skil/DefaultApi~transformincrementalimageCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Base64NDArrayBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a single multipart image file to transform and returns Base64NDArrayBody
     * Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} imageTransformName ID or name of the deployed image transform
     * @param {File} file The image file to upload
     * @param {module:ai/skymind/skil/DefaultApi~transformincrementalimageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Base64NDArrayBody}
     */
    transformincrementalimage(deploymentName, versionName, imageTransformName, file, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling transformincrementalimage");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling transformincrementalimage");
      }
      // verify the required parameter 'imageTransformName' is set
      if (imageTransformName === undefined || imageTransformName === null) {
        throw new Error("Missing the required parameter 'imageTransformName' when calling transformincrementalimage");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling transformincrementalimage");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'imageTransformName': imageTransformName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Base64NDArrayBody;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformprocessGet operation.
     * @callback module:ai/skymind/skil/DefaultApi~transformprocessGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the JSON string of the deployed transform process (CSV or Image)
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} transformName ID or name of the deployed transform
     * @param {module:ai/skymind/skil/DefaultApi~transformprocessGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    transformprocessGet(deploymentName, versionName, transformName, callback) {
      let postBody = null;
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling transformprocessGet");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling transformprocessGet");
      }
      // verify the required parameter 'transformName' is set
      if (transformName === undefined || transformName === null) {
        throw new Error("Missing the required parameter 'transformName' when calling transformprocessGet");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'transformName': transformName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformprocessPost operation.
     * @callback module:ai/skymind/skil/DefaultApi~transformprocessPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the deployed (CSV or Image) transform process through the provided JSON string
     * @param {module:ai/skymind/skil/model/String} contentType The `Content-Type` should be `application/json`.
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \"default\"
     * @param {String} transformName ID or name of the deployed transform
     * @param {Object} opts Optional parameters
     * @param {String} opts.transformProcess The transform process to set (Specify a JSON string here).
     * @param {module:ai/skymind/skil/DefaultApi~transformprocessPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    transformprocessPost(contentType, deploymentName, versionName, transformName, opts, callback) {
      opts = opts || {};
      let postBody = opts['transformProcess'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling transformprocessPost");
      }
      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling transformprocessPost");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling transformprocessPost");
      }
      // verify the required parameter 'transformName' is set
      if (transformName === undefined || transformName === null) {
        throw new Error("Missing the required parameter 'transformName' when calling transformprocessPost");
      }

      let pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'transformName': transformName
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAuthPolicy operation.
     * @callback module:ai/skymind/skil/DefaultApi~updateAuthPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/AuthPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update auth policy
     * @param {module:ai/skymind/skil/model/AuthPolicy} authPolicy Auth policy object
     * @param {module:ai/skymind/skil/DefaultApi~updateAuthPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/AuthPolicy}
     */
    updateAuthPolicy(authPolicy, callback) {
      let postBody = authPolicy;
      // verify the required parameter 'authPolicy' is set
      if (authPolicy === undefined || authPolicy === null) {
        throw new Error("Missing the required parameter 'authPolicy' when calling updateAuthPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthPolicy;
      return this.apiClient.callApi(
        '/auth/policy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBestModelForExperiment operation.
     * @callback module:ai/skymind/skil/DefaultApi~updateBestModelForExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ExperimentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the best model for an experiment
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/UpdateBestModel} updateBestModel Model encapsulating the experiment id to update and the best model id.
     * @param {module:ai/skymind/skil/DefaultApi~updateBestModelForExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ExperimentEntity}
     */
    updateBestModelForExperiment(modelHistoryServerId, updateBestModel, callback) {
      let postBody = updateBestModel;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling updateBestModelForExperiment");
      }
      // verify the required parameter 'updateBestModel' is set
      if (updateBestModel === undefined || updateBestModel === null) {
        throw new Error("Missing the required parameter 'updateBestModel' when calling updateBestModelForExperiment");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExperimentEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiment/best', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExperiment operation.
     * @callback module:ai/skymind/skil/DefaultApi~updateExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ExperimentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an experiment, given an experiment entity
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {String} experimentID the GUID of the experiment to update
     * @param {module:ai/skymind/skil/model/ExperimentEntity} experimentEntity The experiment entity to update with
     * @param {module:ai/skymind/skil/DefaultApi~updateExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ExperimentEntity}
     */
    updateExperiment(modelHistoryServerId, experimentID, experimentEntity, callback) {
      let postBody = experimentEntity;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling updateExperiment");
      }
      // verify the required parameter 'experimentID' is set
      if (experimentID === undefined || experimentID === null) {
        throw new Error("Missing the required parameter 'experimentID' when calling updateExperiment");
      }
      // verify the required parameter 'experimentEntity' is set
      if (experimentEntity === undefined || experimentEntity === null) {
        throw new Error("Missing the required parameter 'experimentEntity' when calling updateExperiment");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'experimentID': experimentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExperimentEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiment/{experimentID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelHistory operation.
     * @callback module:ai/skymind/skil/DefaultApi~updateModelHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelHistoryEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model history / workspace
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run `$SKIL_HOME/sbin/skil services` in a console to find out the model history server GUID.
     * @param {String} modelHistoryID the GUID of the model history / workspace to update
     * @param {module:ai/skymind/skil/model/AddModelHistoryRequest} updateModelHistoryRequest The model history request object
     * @param {module:ai/skymind/skil/DefaultApi~updateModelHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelHistoryEntity}
     */
    updateModelHistory(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest, callback) {
      let postBody = updateModelHistoryRequest;
      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling updateModelHistory");
      }
      // verify the required parameter 'modelHistoryID' is set
      if (modelHistoryID === undefined || modelHistoryID === null) {
        throw new Error("Missing the required parameter 'modelHistoryID' when calling updateModelHistory");
      }
      // verify the required parameter 'updateModelHistoryRequest' is set
      if (updateModelHistoryRequest === undefined || updateModelHistoryRequest === null) {
        throw new Error("Missing the required parameter 'updateModelHistoryRequest' when calling updateModelHistory");
      }

      let pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelHistoryID': modelHistoryID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelHistoryEntity;
      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:ai/skymind/skil/DefaultApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * @param {module:ai/skymind/skil/model/User} user User details
     * @param {module:ai/skymind/skil/DefaultApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/User}
     */
    updateUser(user, callback) {
      let postBody = user;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling updateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upload operation.
     * @callback module:ai/skymind/skil/DefaultApi~uploadCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/FileUploadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a model file to SKIL for import.
     * @param {Object} opts Optional parameters
     * @param {File} opts.file The file to upload.
     * @param {module:ai/skymind/skil/DefaultApi~uploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/FileUploadList}
     */
    upload(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['api_key', 'x_api_key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileUploadList;
      return this.apiClient.callApi(
        '/api/upload/model', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
