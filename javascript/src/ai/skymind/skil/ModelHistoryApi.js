/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'ai/skymind/skil/model/AddExampleRequest', 'ai/skymind/skil/model/AddModelHistoryRequest', 'ai/skymind/skil/model/AggregatePrediction', 'ai/skymind/skil/model/BestModel', 'ai/skymind/skil/model/EvaluationResultsEntity', 'ai/skymind/skil/model/ExampleEntity', 'ai/skymind/skil/model/ExperimentEntity', 'ai/skymind/skil/model/InlineResponse200', 'ai/skymind/skil/model/MinibatchEntity', 'ai/skymind/skil/model/ModelFeedBackRequest', 'ai/skymind/skil/model/ModelHistoryEntity', 'ai/skymind/skil/model/ModelInstanceEntity', 'ai/skymind/skil/model/UpdateBestModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../ai/skymind/skil/model/AddExampleRequest'), require('../ai/skymind/skil/model/AddModelHistoryRequest'), require('../ai/skymind/skil/model/AggregatePrediction'), require('../ai/skymind/skil/model/BestModel'), require('../ai/skymind/skil/model/EvaluationResultsEntity'), require('../ai/skymind/skil/model/ExampleEntity'), require('../ai/skymind/skil/model/ExperimentEntity'), require('../ai/skymind/skil/model/InlineResponse200'), require('../ai/skymind/skil/model/MinibatchEntity'), require('../ai/skymind/skil/model/ModelFeedBackRequest'), require('../ai/skymind/skil/model/ModelHistoryEntity'), require('../ai/skymind/skil/model/ModelInstanceEntity'), require('../ai/skymind/skil/model/UpdateBestModel'));
  } else {
    // Browser globals (root is window)
    if (!root.SkilClient) {
      root.SkilClient = {};
    }
    root.SkilClient.ModelHistoryApi = factory(root.SkilClient.ApiClient, root.SkilClient.AddExampleRequest, root.SkilClient.AddModelHistoryRequest, root.SkilClient.AggregatePrediction, root.SkilClient.BestModel, root.SkilClient.EvaluationResultsEntity, root.SkilClient.ExampleEntity, root.SkilClient.ExperimentEntity, root.SkilClient.InlineResponse200, root.SkilClient.MinibatchEntity, root.SkilClient.ModelFeedBackRequest, root.SkilClient.ModelHistoryEntity, root.SkilClient.ModelInstanceEntity, root.SkilClient.UpdateBestModel);
  }
}(this, function(ApiClient, AddExampleRequest, AddModelHistoryRequest, AggregatePrediction, BestModel, EvaluationResultsEntity, ExampleEntity, ExperimentEntity, InlineResponse200, MinibatchEntity, ModelFeedBackRequest, ModelHistoryEntity, ModelInstanceEntity, UpdateBestModel) {
  'use strict';

  /**
   * ModelHistory service.
   * @module ai/skymind/skil/ModelHistoryApi
   * @version 1.2.0
   */

  /**
   * Constructs a new ModelHistoryApi. 
   * @alias module:ai/skymind/skil/ModelHistoryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addEvaluationResult operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~addEvaluationResultCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/EvaluationResultsEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an evaluation result
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/EvaluationResultsEntity} evaluationResultsEntity The evaluation result entity
     * @param {module:ai/skymind/skil/ModelHistoryApi~addEvaluationResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/EvaluationResultsEntity}
     */
    this.addEvaluationResult = function(modelHistoryServerId, evaluationResultsEntity, callback) {
      var postBody = evaluationResultsEntity;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addEvaluationResult");
      }

      // verify the required parameter 'evaluationResultsEntity' is set
      if (evaluationResultsEntity === undefined || evaluationResultsEntity === null) {
        throw new Error("Missing the required parameter 'evaluationResultsEntity' when calling addEvaluationResult");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EvaluationResultsEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/revisions/evaluations/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addExampleForBatch operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~addExampleForBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/AddExampleRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a number of examples to a minibatch ID given an AddExampleRequest.
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/AddExampleRequest} addExampleRequest The add example request, encapsulating minibatch details and examples batch size
     * @param {module:ai/skymind/skil/ModelHistoryApi~addExampleForBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/AddExampleRequest}
     */
    this.addExampleForBatch = function(modelHistoryServerId, addExampleRequest, callback) {
      var postBody = addExampleRequest;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addExampleForBatch");
      }

      // verify the required parameter 'addExampleRequest' is set
      if (addExampleRequest === undefined || addExampleRequest === null) {
        throw new Error("Missing the required parameter 'addExampleRequest' when calling addExampleForBatch");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AddExampleRequest;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/exampleForBatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addExampleToMinibatch operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~addExampleToMinibatchCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ExampleEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an example to a minibatch
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/ExampleEntity} exampleEntity The example to add to the minibatch
     * @param {module:ai/skymind/skil/ModelHistoryApi~addExampleToMinibatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ExampleEntity}
     */
    this.addExampleToMinibatch = function(modelHistoryServerId, exampleEntity, callback) {
      var postBody = exampleEntity;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addExampleToMinibatch");
      }

      // verify the required parameter 'exampleEntity' is set
      if (exampleEntity === undefined || exampleEntity === null) {
        throw new Error("Missing the required parameter 'exampleEntity' when calling addExampleToMinibatch");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExampleEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/example', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addExperiment operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~addExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ExperimentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an experiment, given an experiment entity
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/ExperimentEntity} experimentEntity The experiment entity to add
     * @param {module:ai/skymind/skil/ModelHistoryApi~addExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ExperimentEntity}
     */
    this.addExperiment = function(modelHistoryServerId, experimentEntity, callback) {
      var postBody = experimentEntity;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addExperiment");
      }

      // verify the required parameter 'experimentEntity' is set
      if (experimentEntity === undefined || experimentEntity === null) {
        throw new Error("Missing the required parameter 'experimentEntity' when calling addExperiment");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExperimentEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addMinibatch operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~addMinibatchCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/MinibatchEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a minibatch
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/MinibatchEntity} minibatchEntity The minibatch entity to add
     * @param {module:ai/skymind/skil/ModelHistoryApi~addMinibatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/MinibatchEntity}
     */
    this.addMinibatch = function(modelHistoryServerId, minibatchEntity, callback) {
      var postBody = minibatchEntity;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addMinibatch");
      }

      // verify the required parameter 'minibatchEntity' is set
      if (minibatchEntity === undefined || minibatchEntity === null) {
        throw new Error("Missing the required parameter 'minibatchEntity' when calling addMinibatch");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MinibatchEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/minibatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addModelFeedback operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~addModelFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelFeedBackRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an evaluation feedback to the model against a given minibatch id.
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/ModelFeedBackRequest} modelFeedBackRequest The model feedback request object
     * @param {module:ai/skymind/skil/ModelHistoryApi~addModelFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelFeedBackRequest}
     */
    this.addModelFeedback = function(modelHistoryServerId, modelFeedBackRequest, callback) {
      var postBody = modelFeedBackRequest;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addModelFeedback");
      }

      // verify the required parameter 'modelFeedBackRequest' is set
      if (modelFeedBackRequest === undefined || modelFeedBackRequest === null) {
        throw new Error("Missing the required parameter 'modelFeedBackRequest' when calling addModelFeedback");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelFeedBackRequest;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/feedback', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addModelHistory operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~addModelHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelHistoryEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a model history / workspace
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/AddModelHistoryRequest} addModelHistoryRequest The model history request object
     * @param {module:ai/skymind/skil/ModelHistoryApi~addModelHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelHistoryEntity}
     */
    this.addModelHistory = function(modelHistoryServerId, addModelHistoryRequest, callback) {
      var postBody = addModelHistoryRequest;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addModelHistory");
      }

      // verify the required parameter 'addModelHistoryRequest' is set
      if (addModelHistoryRequest === undefined || addModelHistoryRequest === null) {
        throw new Error("Missing the required parameter 'addModelHistoryRequest' when calling addModelHistory");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelHistoryEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/modelhistory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addModelInstance operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~addModelInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelInstanceEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a model
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/ModelInstanceEntity} modelInstanceEntity The object encapsulating the model instance id and evaluation type to aggregate
     * @param {module:ai/skymind/skil/ModelHistoryApi~addModelInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelInstanceEntity}
     */
    this.addModelInstance = function(modelHistoryServerId, modelInstanceEntity, callback) {
      var postBody = modelInstanceEntity;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling addModelInstance");
      }

      // verify the required parameter 'modelInstanceEntity' is set
      if (modelInstanceEntity === undefined || modelInstanceEntity === null) {
        throw new Error("Missing the required parameter 'modelInstanceEntity' when calling addModelInstance");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelInstanceEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the aggregateModelResults operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~aggregateModelResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/EvaluationResultsEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Aggregates the evaluaition results of a model instance, based on the evaluation type
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/AggregatePrediction} aggregatePrediction The object encapsulating the model instance id and evaluation type to aggregate
     * @param {module:ai/skymind/skil/ModelHistoryApi~aggregateModelResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/EvaluationResultsEntity}
     */
    this.aggregateModelResults = function(modelHistoryServerId, aggregatePrediction, callback) {
      var postBody = aggregatePrediction;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling aggregateModelResults");
      }

      // verify the required parameter 'aggregatePrediction' is set
      if (aggregatePrediction === undefined || aggregatePrediction === null) {
        throw new Error("Missing the required parameter 'aggregatePrediction' when calling aggregateModelResults");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EvaluationResultsEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/aggregateresults', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelHistory operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~createModelHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelHistoryEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates model History
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/ModelHistoryEntity} modelHistoryEntity The model history entity
     * @param {module:ai/skymind/skil/ModelHistoryApi~createModelHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelHistoryEntity}
     */
    this.createModelHistory = function(modelHistoryServerId, modelHistoryEntity, callback) {
      var postBody = modelHistoryEntity;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling createModelHistory");
      }

      // verify the required parameter 'modelHistoryEntity' is set
      if (modelHistoryEntity === undefined || modelHistoryEntity === null) {
        throw new Error("Missing the required parameter 'modelHistoryEntity' when calling createModelHistory");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelHistoryEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/revisions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExperiment operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~deleteExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an experiment, given an experiment entity
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {String} experimentID the GUID of the experiment to delete
     * @param {module:ai/skymind/skil/ModelHistoryApi~deleteExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/InlineResponse200}
     */
    this.deleteExperiment = function(modelHistoryServerId, experimentID, callback) {
      var postBody = null;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling deleteExperiment");
      }

      // verify the required parameter 'experimentID' is set
      if (experimentID === undefined || experimentID === null) {
        throw new Error("Missing the required parameter 'experimentID' when calling deleteExperiment");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'experimentID': experimentID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiment/{experimentID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelHistory operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~deleteModelHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a model history / workspace, given its ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {String} modelHistoryID the GUID of the model history / workspace to delete
     * @param {module:ai/skymind/skil/ModelHistoryApi~deleteModelHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/InlineResponse200}
     */
    this.deleteModelHistory = function(modelHistoryServerId, modelHistoryID, callback) {
      var postBody = null;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling deleteModelHistory");
      }

      // verify the required parameter 'modelHistoryID' is set
      if (modelHistoryID === undefined || modelHistoryID === null) {
        throw new Error("Missing the required parameter 'modelHistoryID' when calling deleteModelHistory");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelHistoryID': modelHistoryID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelInstance operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~deleteModelInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a model instance, given its ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {String} modelInstanceID GUID of the model instance to delete.
     * @param {module:ai/skymind/skil/ModelHistoryApi~deleteModelInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModelInstance = function(modelHistoryServerId, modelInstanceID, callback) {
      var postBody = null;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling deleteModelInstance");
      }

      // verify the required parameter 'modelInstanceID' is set
      if (modelInstanceID === undefined || modelInstanceID === null) {
        throw new Error("Missing the required parameter 'modelInstanceID' when calling deleteModelInstance");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelInstanceID': modelInstanceID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/{modelInstanceID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBestModelAmongModelIds operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~getBestModelAmongModelIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelInstanceEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the best model among the given model instance IDs, based on the evaluation type and column metric
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/BestModel} bestModel Object encapsulating the model ids, eval type and column metric name
     * @param {module:ai/skymind/skil/ModelHistoryApi~getBestModelAmongModelIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelInstanceEntity}
     */
    this.getBestModelAmongModelIds = function(modelHistoryServerId, bestModel, callback) {
      var postBody = bestModel;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getBestModelAmongModelIds");
      }

      // verify the required parameter 'bestModel' is set
      if (bestModel === undefined || bestModel === null) {
        throw new Error("Missing the required parameter 'bestModel' when calling getBestModelAmongModelIds");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelInstanceEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/best', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvaluationForModelID operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~getEvaluationForModelIDCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/EvaluationResultsEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of evaluation results entity, given a model instance ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {String} modelInstanceID GUID of the model instance to get evaluation results for.
     * @param {module:ai/skymind/skil/ModelHistoryApi~getEvaluationForModelIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/EvaluationResultsEntity>}
     */
    this.getEvaluationForModelID = function(modelHistoryServerId, modelInstanceID, callback) {
      var postBody = null;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getEvaluationForModelID");
      }

      // verify the required parameter 'modelInstanceID' is set
      if (modelInstanceID === undefined || modelInstanceID === null) {
        throw new Error("Missing the required parameter 'modelInstanceID' when calling getEvaluationForModelID");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelInstanceID': modelInstanceID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [EvaluationResultsEntity];

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExamplesForMinibatch operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~getExamplesForMinibatchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/ExampleEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the examples for a minibatch ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {String} minibatchId The GUID of the minibatch
     * @param {module:ai/skymind/skil/ModelHistoryApi~getExamplesForMinibatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/ExampleEntity>}
     */
    this.getExamplesForMinibatch = function(modelHistoryServerId, minibatchId, callback) {
      var postBody = null;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getExamplesForMinibatch");
      }

      // verify the required parameter 'minibatchId' is set
      if (minibatchId === undefined || minibatchId === null) {
        throw new Error("Missing the required parameter 'minibatchId' when calling getExamplesForMinibatch");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'minibatchId': minibatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ExampleEntity];

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/example/{minibatchId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperiment operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~getExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ExperimentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain an experiment&#39;s details, given its ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {String} experimentID the GUID of the experiment to obtain
     * @param {module:ai/skymind/skil/ModelHistoryApi~getExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ExperimentEntity}
     */
    this.getExperiment = function(modelHistoryServerId, experimentID, callback) {
      var postBody = null;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getExperiment");
      }

      // verify the required parameter 'experimentID' is set
      if (experimentID === undefined || experimentID === null) {
        throw new Error("Missing the required parameter 'experimentID' when calling getExperiment");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'experimentID': experimentID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ExperimentEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiment/{experimentID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperimentsForModelHistory operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~getExperimentsForModelHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ExperimentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain all experiments for a model history / workspace
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {String} modelHistoryID the GUID of the model history / workspace
     * @param {module:ai/skymind/skil/ModelHistoryApi~getExperimentsForModelHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ExperimentEntity}
     */
    this.getExperimentsForModelHistory = function(modelHistoryServerId, modelHistoryID, callback) {
      var postBody = null;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getExperimentsForModelHistory");
      }

      // verify the required parameter 'modelHistoryID' is set
      if (modelHistoryID === undefined || modelHistoryID === null) {
        throw new Error("Missing the required parameter 'modelHistoryID' when calling getExperimentsForModelHistory");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelHistoryID': modelHistoryID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ExperimentEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMinibatch operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~getMinibatchCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/MinibatchEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a minibatch for the model
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {String} minibatchId The GUID of the minibatch
     * @param {module:ai/skymind/skil/ModelHistoryApi~getMinibatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/MinibatchEntity}
     */
    this.getMinibatch = function(modelHistoryServerId, minibatchId, callback) {
      var postBody = null;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getMinibatch");
      }

      // verify the required parameter 'minibatchId' is set
      if (minibatchId === undefined || minibatchId === null) {
        throw new Error("Missing the required parameter 'minibatchId' when calling getMinibatch");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'minibatchId': minibatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MinibatchEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelHistory operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~getModelHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelHistoryEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a model history, given its ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {String} modelHistoryID GUID of the model history to get information of.
     * @param {module:ai/skymind/skil/ModelHistoryApi~getModelHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelHistoryEntity}
     */
    this.getModelHistory = function(modelHistoryServerId, modelHistoryID, callback) {
      var postBody = null;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getModelHistory");
      }

      // verify the required parameter 'modelHistoryID' is set
      if (modelHistoryID === undefined || modelHistoryID === null) {
        throw new Error("Missing the required parameter 'modelHistoryID' when calling getModelHistory");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelHistoryID': modelHistoryID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ModelHistoryEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelInstance operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~getModelInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelInstanceEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a model instance, given its ID
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {String} modelInstanceID GUID of the model instance to get information of.
     * @param {module:ai/skymind/skil/ModelHistoryApi~getModelInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelInstanceEntity}
     */
    this.getModelInstance = function(modelHistoryServerId, modelInstanceID, callback) {
      var postBody = null;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getModelInstance");
      }

      // verify the required parameter 'modelInstanceID' is set
      if (modelInstanceID === undefined || modelInstanceID === null) {
        throw new Error("Missing the required parameter 'modelInstanceID' when calling getModelInstance");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelInstanceID': modelInstanceID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ModelInstanceEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/model/{modelInstanceID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelsForExperiment operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~getModelsForExperimentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/ModelInstanceEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain a list of all the models for an experiment
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {String} experimentID the GUID of the experiment
     * @param {module:ai/skymind/skil/ModelHistoryApi~getModelsForExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/ModelInstanceEntity>}
     */
    this.getModelsForExperiment = function(modelHistoryServerId, experimentID, callback) {
      var postBody = null;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling getModelsForExperiment");
      }

      // verify the required parameter 'experimentID' is set
      if (experimentID === undefined || experimentID === null) {
        throw new Error("Missing the required parameter 'experimentID' when calling getModelsForExperiment");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'experimentID': experimentID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ModelInstanceEntity];

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiment/{experimentID}/models', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllExperiments operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~listAllExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ai/skymind/skil/model/ExperimentEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all of the experiments in every model history / workspace
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/ModelHistoryApi~listAllExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ai/skymind/skil/model/ExperimentEntity>}
     */
    this.listAllExperiments = function(modelHistoryServerId, callback) {
      var postBody = null;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling listAllExperiments");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ExperimentEntity];

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBestModelForExperiment operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~updateBestModelForExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ExperimentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the best model for an experiment
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {module:ai/skymind/skil/model/UpdateBestModel} updateBestModel Model encapsulating the experiment id to update and the best model id.
     * @param {module:ai/skymind/skil/ModelHistoryApi~updateBestModelForExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ExperimentEntity}
     */
    this.updateBestModelForExperiment = function(modelHistoryServerId, updateBestModel, callback) {
      var postBody = updateBestModel;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling updateBestModelForExperiment");
      }

      // verify the required parameter 'updateBestModel' is set
      if (updateBestModel === undefined || updateBestModel === null) {
        throw new Error("Missing the required parameter 'updateBestModel' when calling updateBestModelForExperiment");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExperimentEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiment/best', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExperiment operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~updateExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ExperimentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an experiment, given an experiment entity
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {String} experimentID the GUID of the experiment to update
     * @param {module:ai/skymind/skil/model/ExperimentEntity} experimentEntity The experiment entity to update with
     * @param {module:ai/skymind/skil/ModelHistoryApi~updateExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ExperimentEntity}
     */
    this.updateExperiment = function(modelHistoryServerId, experimentID, experimentEntity, callback) {
      var postBody = experimentEntity;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling updateExperiment");
      }

      // verify the required parameter 'experimentID' is set
      if (experimentID === undefined || experimentID === null) {
        throw new Error("Missing the required parameter 'experimentID' when calling updateExperiment");
      }

      // verify the required parameter 'experimentEntity' is set
      if (experimentEntity === undefined || experimentEntity === null) {
        throw new Error("Missing the required parameter 'experimentEntity' when calling updateExperiment");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'experimentID': experimentID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExperimentEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/experiment/{experimentID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelHistory operation.
     * @callback module:ai/skymind/skil/ModelHistoryApi~updateModelHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelHistoryEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model history / workspace
     * @param {String} modelHistoryServerId Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID.
     * @param {String} modelHistoryID the GUID of the model history / workspace to update
     * @param {module:ai/skymind/skil/model/AddModelHistoryRequest} updateModelHistoryRequest The model history request object
     * @param {module:ai/skymind/skil/ModelHistoryApi~updateModelHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelHistoryEntity}
     */
    this.updateModelHistory = function(modelHistoryServerId, modelHistoryID, updateModelHistoryRequest, callback) {
      var postBody = updateModelHistoryRequest;

      // verify the required parameter 'modelHistoryServerId' is set
      if (modelHistoryServerId === undefined || modelHistoryServerId === null) {
        throw new Error("Missing the required parameter 'modelHistoryServerId' when calling updateModelHistory");
      }

      // verify the required parameter 'modelHistoryID' is set
      if (modelHistoryID === undefined || modelHistoryID === null) {
        throw new Error("Missing the required parameter 'modelHistoryID' when calling updateModelHistory");
      }

      // verify the required parameter 'updateModelHistoryRequest' is set
      if (updateModelHistoryRequest === undefined || updateModelHistoryRequest === null) {
        throw new Error("Missing the required parameter 'updateModelHistoryRequest' when calling updateModelHistory");
      }


      var pathParams = {
        'modelHistoryServerId': modelHistoryServerId,
        'modelHistoryID': modelHistoryID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelHistoryEntity;

      return this.apiClient.callApi(
        '/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
