/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'ai/skymind/skil/model/Base64NDArrayBodyKNN', 'ai/skymind/skil/model/NearestNeighborRequest', 'ai/skymind/skil/model/NearestNeighborsResults'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../ai/skymind/skil/model/Base64NDArrayBodyKNN'), require('../ai/skymind/skil/model/NearestNeighborRequest'), require('../ai/skymind/skil/model/NearestNeighborsResults'));
  } else {
    // Browser globals (root is window)
    if (!root.SkilClient) {
      root.SkilClient = {};
    }
    root.SkilClient.KNNApi = factory(root.SkilClient.ApiClient, root.SkilClient.Base64NDArrayBodyKNN, root.SkilClient.NearestNeighborRequest, root.SkilClient.NearestNeighborsResults);
  }
}(this, function(ApiClient, Base64NDArrayBodyKNN, NearestNeighborRequest, NearestNeighborsResults) {
  'use strict';

  /**
   * KNN service.
   * @module ai/skymind/skil/KNNApi
   * @version 1.2.0
   */

  /**
   * Constructs a new KNNApi. 
   * @alias module:ai/skymind/skil/KNNApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the knn operation.
     * @callback module:ai/skymind/skil/KNNApi~knnCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/NearestNeighborsResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs knn on the given index with the given k
     * Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} knnName ID or name of the deployed knn
     * @param {module:ai/skymind/skil/model/NearestNeighborRequest} body 
     * @param {module:ai/skymind/skil/KNNApi~knnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/NearestNeighborsResults}
     */
    this.knn = function(deploymentName, versionName, knnName, body, callback) {
      var postBody = body;

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling knn");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling knn");
      }

      // verify the required parameter 'knnName' is set
      if (knnName === undefined || knnName === null) {
        throw new Error("Missing the required parameter 'knnName' when calling knn");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling knn");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'knnName': knnName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NearestNeighborsResults;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the knnnew operation.
     * @callback module:ai/skymind/skil/KNNApi~knnnewCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/NearestNeighborsResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a k nearest neighbors search on a NEW data point
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} knnName ID or name of the deployed knn
     * @param {module:ai/skymind/skil/model/Base64NDArrayBodyKNN} body The input NDArray
     * @param {module:ai/skymind/skil/KNNApi~knnnewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/NearestNeighborsResults}
     */
    this.knnnew = function(deploymentName, versionName, knnName, body, callback) {
      var postBody = body;

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling knnnew");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling knnnew");
      }

      // verify the required parameter 'knnName' is set
      if (knnName === undefined || knnName === null) {
        throw new Error("Missing the required parameter 'knnName' when calling knnnew");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling knnnew");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'knnName': knnName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NearestNeighborsResults;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
