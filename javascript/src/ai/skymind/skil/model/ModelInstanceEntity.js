/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ModelInstanceEntity model module.
 * @module ai/skymind/skil/model/ModelInstanceEntity
 * @version 1.2.2.0
 */
class ModelInstanceEntity {
    /**
     * Constructs a new <code>ModelInstanceEntity</code>.
     * @alias module:ai/skymind/skil/model/ModelInstanceEntity
     */
    constructor() { 
        
        ModelInstanceEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModelInstanceEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:ai/skymind/skil/model/ModelInstanceEntity} obj Optional instance to populate.
     * @return {module:ai/skymind/skil/model/ModelInstanceEntity} The populated <code>ModelInstanceEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelInstanceEntity();

            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('etlJson')) {
                obj['etlJson'] = ApiClient.convertToType(data['etlJson'], 'String');
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('modelLabels')) {
                obj['modelLabels'] = ApiClient.convertToType(data['modelLabels'], 'String');
            }
            if (data.hasOwnProperty('inputFormats')) {
                obj['inputFormats'] = ApiClient.convertToType(data['inputFormats'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('notebookJson')) {
                obj['notebookJson'] = ApiClient.convertToType(data['notebookJson'], 'String');
            }
            if (data.hasOwnProperty('evalId')) {
                obj['evalId'] = ApiClient.convertToType(data['evalId'], 'String');
            }
            if (data.hasOwnProperty('modelName')) {
                obj['modelName'] = ApiClient.convertToType(data['modelName'], 'String');
            }
            if (data.hasOwnProperty('originalModelId')) {
                obj['originalModelId'] = ApiClient.convertToType(data['originalModelId'], 'String');
            }
            if (data.hasOwnProperty('modelVersion')) {
                obj['modelVersion'] = ApiClient.convertToType(data['modelVersion'], 'String');
            }
            if (data.hasOwnProperty('experimentId')) {
                obj['experimentId'] = ApiClient.convertToType(data['experimentId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The model URI
 * @member {String} uri
 */
ModelInstanceEntity.prototype['uri'] = undefined;

/**
 * The json string for the ETL (Extract, Transform and Load)
 * @member {String} etlJson
 */
ModelInstanceEntity.prototype['etlJson'] = undefined;

/**
 * GUID of the model.
 * @member {String} modelId
 */
ModelInstanceEntity.prototype['modelId'] = undefined;

/**
 * Comma-separated labels string for the model
 * @member {String} modelLabels
 */
ModelInstanceEntity.prototype['modelLabels'] = undefined;

/**
 * Format for the model input
 * @member {String} inputFormats
 */
ModelInstanceEntity.prototype['inputFormats'] = undefined;

/**
 * When the model was created
 * @member {Number} created
 */
ModelInstanceEntity.prototype['created'] = undefined;

/**
 * JSON string of the associated Zeppelin Notebook
 * @member {String} notebookJson
 */
ModelInstanceEntity.prototype['notebookJson'] = undefined;

/**
 * GUID for the model evaluation
 * @member {String} evalId
 */
ModelInstanceEntity.prototype['evalId'] = undefined;

/**
 * Model's name
 * @member {String} modelName
 */
ModelInstanceEntity.prototype['modelName'] = undefined;

/**
 * Original GUID of the model (used for maintaining revisions of a particular model)
 * @member {String} originalModelId
 */
ModelInstanceEntity.prototype['originalModelId'] = undefined;

/**
 * Model version
 * @member {String} modelVersion
 */
ModelInstanceEntity.prototype['modelVersion'] = undefined;

/**
 * GUID of the Experiment which is associated with the model.
 * @member {String} experimentId
 */
ModelInstanceEntity.prototype['experimentId'] = undefined;






export default ModelInstanceEntity;

