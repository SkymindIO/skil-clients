/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JobEntity model module.
 * @module ai/skymind/skil/model/JobEntity
 * @version 1.2.2.0
 */
class JobEntity {
    /**
     * Constructs a new <code>JobEntity</code>.
     * @alias module:ai/skymind/skil/model/JobEntity
     */
    constructor() { 
        
        JobEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:ai/skymind/skil/model/JobEntity} obj Optional instance to populate.
     * @return {module:ai/skymind/skil/model/JobEntity} The populated <code>JobEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobEntity();

            if (data.hasOwnProperty('jobId')) {
                obj['jobId'] = ApiClient.convertToType(data['jobId'], 'Number');
            }
            if (data.hasOwnProperty('jobType')) {
                obj['jobType'] = ApiClient.convertToType(data['jobType'], 'String');
            }
            if (data.hasOwnProperty('computeResourceId')) {
                obj['computeResourceId'] = ApiClient.convertToType(data['computeResourceId'], 'Number');
            }
            if (data.hasOwnProperty('storageResourceId')) {
                obj['storageResourceId'] = ApiClient.convertToType(data['storageResourceId'], 'Number');
            }
            if (data.hasOwnProperty('jobArgs')) {
                obj['jobArgs'] = ApiClient.convertToType(data['jobArgs'], 'String');
            }
            if (data.hasOwnProperty('runId')) {
                obj['runId'] = ApiClient.convertToType(data['runId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('outputFileName')) {
                obj['outputFileName'] = ApiClient.convertToType(data['outputFileName'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Job ID
 * @member {Number} jobId
 */
JobEntity.prototype['jobId'] = undefined;

/**
 * Whether a job is for training or inference
 * @member {module:ai/skymind/skil/model/JobEntity.JobTypeEnum} jobType
 */
JobEntity.prototype['jobType'] = undefined;

/**
 * Compute resource ID
 * @member {Number} computeResourceId
 */
JobEntity.prototype['computeResourceId'] = undefined;

/**
 * Storage resource ID
 * @member {Number} storageResourceId
 */
JobEntity.prototype['storageResourceId'] = undefined;

/**
 * Job arguments
 * @member {String} jobArgs
 */
JobEntity.prototype['jobArgs'] = undefined;

/**
 * Job run ID
 * @member {String} runId
 */
JobEntity.prototype['runId'] = undefined;

/**
 * Job's status
 * @member {module:ai/skymind/skil/model/JobEntity.StatusEnum} status
 */
JobEntity.prototype['status'] = undefined;

/**
 * Output file name
 * @member {String} outputFileName
 */
JobEntity.prototype['outputFileName'] = undefined;





/**
 * Allowed values for the <code>jobType</code> property.
 * @enum {String}
 * @readonly
 */
JobEntity['JobTypeEnum'] = {

    /**
     * value: "TRAINING"
     * @const
     */
    "TRAINING": "TRAINING",

    /**
     * value: "INFERENCE"
     * @const
     */
    "INFERENCE": "INFERENCE"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
JobEntity['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "CONTINUE"
     * @const
     */
    "CONTINUE": "CONTINUE",

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "INTERRUPTED"
     * @const
     */
    "INTERRUPTED": "INTERRUPTED"
};



export default JobEntity;

