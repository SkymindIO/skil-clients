/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The INDArray model module.
 * @module ai/skymind/skil/model/INDArray
 * @version 1.2.2.0
 */
class INDArray {
    /**
     * Constructs a new <code>INDArray</code>.
     * @alias module:ai/skymind/skil/model/INDArray
     */
    constructor() { 
        
        INDArray.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>INDArray</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:ai/skymind/skil/model/INDArray} obj Optional instance to populate.
     * @return {module:ai/skymind/skil/model/INDArray} The populated <code>INDArray</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new INDArray();

            if (data.hasOwnProperty('array')) {
                obj['array'] = ApiClient.convertToType(data['array'], 'String');
            }
            if (data.hasOwnProperty('shape')) {
                obj['shape'] = ApiClient.convertToType(data['shape'], ['Number']);
            }
            if (data.hasOwnProperty('ordering')) {
                obj['ordering'] = ApiClient.convertToType(data['ordering'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], ['Number']);
            }
            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} array
 */
INDArray.prototype['array'] = undefined;

/**
 * @member {Array.<Number>} shape
 */
INDArray.prototype['shape'] = undefined;

/**
 * @member {module:ai/skymind/skil/model/INDArray.OrderingEnum} ordering
 */
INDArray.prototype['ordering'] = undefined;

/**
 * @member {Array.<Number>} data
 */
INDArray.prototype['data'] = undefined;

/**
 * @member {module:ai/skymind/skil/model/INDArray.DataTypeEnum} dataType
 */
INDArray.prototype['dataType'] = undefined;





/**
 * Allowed values for the <code>ordering</code> property.
 * @enum {String}
 * @readonly
 */
INDArray['OrderingEnum'] = {

    /**
     * value: "f"
     * @const
     */
    "f": "f",

    /**
     * value: "c"
     * @const
     */
    "c": "c"
};


/**
 * Allowed values for the <code>dataType</code> property.
 * @enum {String}
 * @readonly
 */
INDArray['DataTypeEnum'] = {

    /**
     * value: "INT8"
     * @const
     */
    "INT8": "INT8",

    /**
     * value: "UINT8"
     * @const
     */
    "UINT8": "UINT8",

    /**
     * value: "INT16"
     * @const
     */
    "INT16": "INT16",

    /**
     * value: "FLOAT16"
     * @const
     */
    "FLOAT16": "FLOAT16"
};



export default INDArray;

