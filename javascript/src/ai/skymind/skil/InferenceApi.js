/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'ai/skymind/skil/model/Base64NDArrayBody', 'ai/skymind/skil/model/ClassificationResult', 'ai/skymind/skil/model/DetectionResult', 'ai/skymind/skil/model/JsonArrayResponse', 'ai/skymind/skil/model/LogBatch', 'ai/skymind/skil/model/LogRequest', 'ai/skymind/skil/model/MetaData', 'ai/skymind/skil/model/ModelStatus', 'ai/skymind/skil/model/MultiClassClassificationResult', 'ai/skymind/skil/model/MultiPredictRequest', 'ai/skymind/skil/model/MultiPredictResponse', 'ai/skymind/skil/model/Prediction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../ai/skymind/skil/model/Base64NDArrayBody'), require('../ai/skymind/skil/model/ClassificationResult'), require('../ai/skymind/skil/model/DetectionResult'), require('../ai/skymind/skil/model/JsonArrayResponse'), require('../ai/skymind/skil/model/LogBatch'), require('../ai/skymind/skil/model/LogRequest'), require('../ai/skymind/skil/model/MetaData'), require('../ai/skymind/skil/model/ModelStatus'), require('../ai/skymind/skil/model/MultiClassClassificationResult'), require('../ai/skymind/skil/model/MultiPredictRequest'), require('../ai/skymind/skil/model/MultiPredictResponse'), require('../ai/skymind/skil/model/Prediction'));
  } else {
    // Browser globals (root is window)
    if (!root.SkilClient) {
      root.SkilClient = {};
    }
    root.SkilClient.InferenceApi = factory(root.SkilClient.ApiClient, root.SkilClient.Base64NDArrayBody, root.SkilClient.ClassificationResult, root.SkilClient.DetectionResult, root.SkilClient.JsonArrayResponse, root.SkilClient.LogBatch, root.SkilClient.LogRequest, root.SkilClient.MetaData, root.SkilClient.ModelStatus, root.SkilClient.MultiClassClassificationResult, root.SkilClient.MultiPredictRequest, root.SkilClient.MultiPredictResponse, root.SkilClient.Prediction);
  }
}(this, function(ApiClient, Base64NDArrayBody, ClassificationResult, DetectionResult, JsonArrayResponse, LogBatch, LogRequest, MetaData, ModelStatus, MultiClassClassificationResult, MultiPredictRequest, MultiPredictResponse, Prediction) {
  'use strict';

  /**
   * Inference service.
   * @module ai/skymind/skil/InferenceApi
   * @version 1.2.0
   */

  /**
   * Constructs a new InferenceApi. 
   * @alias module:ai/skymind/skil/InferenceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the classify operation.
     * @callback module:ai/skymind/skil/InferenceApi~classifyCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ClassificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use the deployed model to classify the input
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~classifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ClassificationResult}
     */
    this.classify = function(body, deploymentName, versionName, modelName, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling classify");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling classify");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling classify");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling classify");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClassificationResult;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/classify', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classifyarray operation.
     * @callback module:ai/skymind/skil/InferenceApi~classifyarrayCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Base64NDArrayBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Same as /classify but returns the output as Base64NDArrayBody
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~classifyarrayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Base64NDArrayBody}
     */
    this.classifyarray = function(body, deploymentName, versionName, modelName, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling classifyarray");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling classifyarray");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling classifyarray");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling classifyarray");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Base64NDArrayBody;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classifyimage operation.
     * @callback module:ai/skymind/skil/InferenceApi~classifyimageCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ClassificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use the deployed model to classify the input, using input image file from multipart form data.
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {Object} opts Optional parameters
     * @param {File} opts.image The file to upload.
     * @param {module:ai/skymind/skil/InferenceApi~classifyimageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ClassificationResult}
     */
    this.classifyimage = function(deploymentName, versionName, modelName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling classifyimage");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling classifyimage");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling classifyimage");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image': opts['image']
      };

      var authNames = ['api_key'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ClassificationResult;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the detectobjects operation.
     * @callback module:ai/skymind/skil/InferenceApi~detectobjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/DetectionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect the objects, given a (input) prediction request
     * @param {String} id the GUID for mapping the results in the detections
     * @param {Boolean} needsPreprocessing (true) if the image needs preprocessing
     * @param {Number} threshold A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none.
     * @param {File} file the image file to detect objects from
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~detectobjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/DetectionResult}
     */
    this.detectobjects = function(id, needsPreprocessing, threshold, file, deploymentName, versionName, modelName, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling detectobjects");
      }

      // verify the required parameter 'needsPreprocessing' is set
      if (needsPreprocessing === undefined || needsPreprocessing === null) {
        throw new Error("Missing the required parameter 'needsPreprocessing' when calling detectobjects");
      }

      // verify the required parameter 'threshold' is set
      if (threshold === undefined || threshold === null) {
        throw new Error("Missing the required parameter 'threshold' when calling detectobjects");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling detectobjects");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling detectobjects");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling detectobjects");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling detectobjects");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'id': id,
        'needsPreprocessing': needsPreprocessing,
        'threshold': threshold,
        'file': file
      };

      var authNames = ['api_key'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = DetectionResult;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the jsonarray operation.
     * @callback module:ai/skymind/skil/InferenceApi~jsonarrayCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/JsonArrayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run inference on the input and returns it as a JsonArrayResponse
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~jsonarrayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/JsonArrayResponse}
     */
    this.jsonarray = function(body, deploymentName, versionName, modelName, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jsonarray");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling jsonarray");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling jsonarray");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling jsonarray");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JsonArrayResponse;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logfilepath operation.
     * @callback module:ai/skymind/skil/InferenceApi~logfilepathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logs file path
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~logfilepathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.logfilepath = function(deploymentName, versionName, modelName, callback) {
      var postBody = null;

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling logfilepath");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling logfilepath");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling logfilepath");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['text'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logs operation.
     * @callback module:ai/skymind/skil/InferenceApi~logsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/LogBatch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logs
     * @param {module:ai/skymind/skil/model/LogRequest} body the the log request
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~logsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/LogBatch}
     */
    this.logs = function(body, deploymentName, versionName, modelName, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling logs");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling logs");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling logs");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling logs");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogBatch;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/logs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metaGet operation.
     * @callback module:ai/skymind/skil/InferenceApi~metaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/MetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * this method can be used to get the meta data for the current model which set to the server
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~metaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/MetaData}
     */
    this.metaGet = function(deploymentName, versionName, modelName, callback) {
      var postBody = null;

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling metaGet");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling metaGet");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling metaGet");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetaData;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metaPost operation.
     * @callback module:ai/skymind/skil/InferenceApi~metaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/MetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method can be used to set meta data for the current model which is set to the server
     * @param {module:ai/skymind/skil/model/MetaData} body the meta data object
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~metaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/MetaData}
     */
    this.metaPost = function(body, deploymentName, versionName, modelName, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling metaPost");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling metaPost");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling metaPost");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling metaPost");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetaData;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modelset operation.
     * @callback module:ai/skymind/skil/InferenceApi~modelsetCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the model to be served
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {Object} opts Optional parameters
     * @param {File} opts.file The model file to upload (.pb file)
     * @param {module:ai/skymind/skil/InferenceApi~modelsetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelStatus}
     */
    this.modelset = function(deploymentName, versionName, modelName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling modelset");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling modelset");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling modelset");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': opts['file']
      };

      var authNames = ['api_key'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ModelStatus;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modelupdate operation.
     * @callback module:ai/skymind/skil/InferenceApi~modelupdateCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ModelStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the model to be served
     * @param {File} file The model file to update with (.pb file)
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~modelupdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ModelStatus}
     */
    this.modelupdate = function(file, deploymentName, versionName, modelName, callback) {
      var postBody = null;

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling modelupdate");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling modelupdate");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling modelupdate");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling modelupdate");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': file
      };

      var authNames = ['api_key'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ModelStatus;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the multiclassify operation.
     * @callback module:ai/skymind/skil/InferenceApi~multiclassifyCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/MultiClassClassificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents all of the labels for a given classification
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~multiclassifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/MultiClassClassificationResult}
     */
    this.multiclassify = function(body, deploymentName, versionName, modelName, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling multiclassify");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling multiclassify");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling multiclassify");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling multiclassify");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MultiClassClassificationResult;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the multipredict operation.
     * @callback module:ai/skymind/skil/InferenceApi~multipredictCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/MultiPredictResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the output from the network, based on the given INDArray[] input
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param {module:ai/skymind/skil/model/MultiPredictRequest} body The multiple input arrays with mask inputs to run inferences on
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~multipredictCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/MultiPredictResponse}
     */
    this.multipredict = function(body, deploymentName, versionName, modelName, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling multipredict");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling multipredict");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling multipredict");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling multipredict");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MultiPredictResponse;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the multipredictimage operation.
     * @callback module:ai/skymind/skil/InferenceApi~multipredictimageCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/MultiPredictResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the output from the network using the given image file using the /multipredict endpoint&#39;s method
     * Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     * @param {File} file The image file to run the prediction on
     * @param {String} id The id of the request (could be self generated)
     * @param {Boolean} needsPreprocessing Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;)
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~multipredictimageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/MultiPredictResponse}
     */
    this.multipredictimage = function(file, id, needsPreprocessing, deploymentName, versionName, modelName, callback) {
      var postBody = null;

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling multipredictimage");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling multipredictimage");
      }

      // verify the required parameter 'needsPreprocessing' is set
      if (needsPreprocessing === undefined || needsPreprocessing === null) {
        throw new Error("Missing the required parameter 'needsPreprocessing' when calling multipredictimage");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling multipredictimage");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling multipredictimage");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling multipredictimage");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': file,
        'id': id,
        'needs_preprocessing': needsPreprocessing
      };

      var authNames = ['api_key'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = MultiPredictResponse;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the predict operation.
     * @callback module:ai/skymind/skil/InferenceApi~predictCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Prediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run inference on the input array.
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~predictCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Prediction}
     */
    this.predict = function(body, deploymentName, versionName, modelName, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling predict");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling predict");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling predict");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling predict");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Prediction;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/predict', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the predictimage operation.
     * @callback module:ai/skymind/skil/InferenceApi~predictimageCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Prediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run inference on the input array, using input image file from multipart form data.
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {Object} opts Optional parameters
     * @param {File} opts.image The file to upload.
     * @param {module:ai/skymind/skil/InferenceApi~predictimageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Prediction}
     */
    this.predictimage = function(deploymentName, versionName, modelName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling predictimage");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling predictimage");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling predictimage");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image': opts['image']
      };

      var authNames = ['api_key'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Prediction;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the predictwithpreprocess operation.
     * @callback module:ai/skymind/skil/InferenceApi~predictwithpreprocessCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Prediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preprocesses the input and run inference on it
     * @param {Array.<module:ai/skymind/skil/model/String>} body The input array
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~predictwithpreprocessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Prediction}
     */
    this.predictwithpreprocess = function(body, deploymentName, versionName, modelName, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling predictwithpreprocess");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling predictwithpreprocess");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling predictwithpreprocess");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling predictwithpreprocess");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Prediction;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the predictwithpreprocessjson operation.
     * @callback module:ai/skymind/skil/InferenceApi~predictwithpreprocessjsonCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/JsonArrayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     * @param {Array.<module:ai/skymind/skil/model/String>} body The input array
     * @param {String} deploymentName Name of the deployment group
     * @param {String} versionName Version name of the endpoint. The default value is \&quot;default\&quot;
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/InferenceApi~predictwithpreprocessjsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/JsonArrayResponse}
     */
    this.predictwithpreprocessjson = function(body, deploymentName, versionName, modelName, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling predictwithpreprocessjson");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling predictwithpreprocessjson");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling predictwithpreprocessjson");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'versionName': versionName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JsonArrayResponse;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
