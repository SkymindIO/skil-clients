/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SkilClient);
  }
}(this, function(expect, SkilClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SkilClient.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('accumulatedResults', function() {
      it('should call accumulatedResults successfully', function(done) {
        //uncomment below and update the code to test accumulatedResults
        //instance.accumulatedResults(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addCredentials', function() {
      it('should call addCredentials successfully', function(done) {
        //uncomment below and update the code to test addCredentials
        //instance.addCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addEvaluationResult', function() {
      it('should call addEvaluationResult successfully', function(done) {
        //uncomment below and update the code to test addEvaluationResult
        //instance.addEvaluationResult(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addExampleForBatch', function() {
      it('should call addExampleForBatch successfully', function(done) {
        //uncomment below and update the code to test addExampleForBatch
        //instance.addExampleForBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addExampleToMinibatch', function() {
      it('should call addExampleToMinibatch successfully', function(done) {
        //uncomment below and update the code to test addExampleToMinibatch
        //instance.addExampleToMinibatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addExperiment', function() {
      it('should call addExperiment successfully', function(done) {
        //uncomment below and update the code to test addExperiment
        //instance.addExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFeedbackBinary', function() {
      it('should call addFeedbackBinary successfully', function(done) {
        //uncomment below and update the code to test addFeedbackBinary
        //instance.addFeedbackBinary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFeedbackJson', function() {
      it('should call addFeedbackJson successfully', function(done) {
        //uncomment below and update the code to test addFeedbackJson
        //instance.addFeedbackJson(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addMinibatch', function() {
      it('should call addMinibatch successfully', function(done) {
        //uncomment below and update the code to test addMinibatch
        //instance.addMinibatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addModelFeedback', function() {
      it('should call addModelFeedback successfully', function(done) {
        //uncomment below and update the code to test addModelFeedback
        //instance.addModelFeedback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addModelHistory', function() {
      it('should call addModelHistory successfully', function(done) {
        //uncomment below and update the code to test addModelHistory
        //instance.addModelHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addModelInstance', function() {
      it('should call addModelInstance successfully', function(done) {
        //uncomment below and update the code to test addModelInstance
        //instance.addModelInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addResource', function() {
      it('should call addResource successfully', function(done) {
        //uncomment below and update the code to test addResource
        //instance.addResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addResourceGroup', function() {
      it('should call addResourceGroup successfully', function(done) {
        //uncomment below and update the code to test addResourceGroup
        //instance.addResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addResourceToGroup', function() {
      it('should call addResourceToGroup successfully', function(done) {
        //uncomment below and update the code to test addResourceToGroup
        //instance.addResourceToGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('aggregateModelResults', function() {
      it('should call aggregateModelResults successfully', function(done) {
        //uncomment below and update the code to test aggregateModelResults
        //instance.aggregateModelResults(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeUserPassword', function() {
      it('should call changeUserPassword successfully', function(done) {
        //uncomment below and update the code to test changeUserPassword
        //instance.changeUserPassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('classify', function() {
      it('should call classify successfully', function(done) {
        //uncomment below and update the code to test classify
        //instance.classify(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('classifyarray', function() {
      it('should call classifyarray successfully', function(done) {
        //uncomment below and update the code to test classifyarray
        //instance.classifyarray(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('classifyimage', function() {
      it('should call classifyimage successfully', function(done) {
        //uncomment below and update the code to test classifyimage
        //instance.classifyimage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clearState', function() {
      it('should call clearState successfully', function(done) {
        //uncomment below and update the code to test clearState
        //instance.clearState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createJob', function() {
      it('should call createJob successfully', function(done) {
        //uncomment below and update the code to test createJob
        //instance.createJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModelHistory', function() {
      it('should call createModelHistory successfully', function(done) {
        //uncomment below and update the code to test createModelHistory
        //instance.createModelHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCredentialsById', function() {
      it('should call deleteCredentialsById successfully', function(done) {
        //uncomment below and update the code to test deleteCredentialsById
        //instance.deleteCredentialsById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteExperiment', function() {
      it('should call deleteExperiment successfully', function(done) {
        //uncomment below and update the code to test deleteExperiment
        //instance.deleteExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteJobById', function() {
      it('should call deleteJobById successfully', function(done) {
        //uncomment below and update the code to test deleteJobById
        //instance.deleteJobById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteModel', function() {
      it('should call deleteModel successfully', function(done) {
        //uncomment below and update the code to test deleteModel
        //instance.deleteModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteModelHistory', function() {
      it('should call deleteModelHistory successfully', function(done) {
        //uncomment below and update the code to test deleteModelHistory
        //instance.deleteModelHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteModelInstance', function() {
      it('should call deleteModelInstance successfully', function(done) {
        //uncomment below and update the code to test deleteModelInstance
        //instance.deleteModelInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResourceById', function() {
      it('should call deleteResourceById successfully', function(done) {
        //uncomment below and update the code to test deleteResourceById
        //instance.deleteResourceById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResourceFromGroup', function() {
      it('should call deleteResourceFromGroup successfully', function(done) {
        //uncomment below and update the code to test deleteResourceFromGroup
        //instance.deleteResourceFromGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResourceGroupById', function() {
      it('should call deleteResourceGroupById successfully', function(done) {
        //uncomment below and update the code to test deleteResourceGroupById
        //instance.deleteResourceGroupById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deployModel', function() {
      it('should call deployModel successfully', function(done) {
        //uncomment below and update the code to test deployModel
        //instance.deployModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deploymentCreate', function() {
      it('should call deploymentCreate successfully', function(done) {
        //uncomment below and update the code to test deploymentCreate
        //instance.deploymentCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deploymentDelete', function() {
      it('should call deploymentDelete successfully', function(done) {
        //uncomment below and update the code to test deploymentDelete
        //instance.deploymentDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deploymentGet', function() {
      it('should call deploymentGet successfully', function(done) {
        //uncomment below and update the code to test deploymentGet
        //instance.deploymentGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deployments', function() {
      it('should call deployments successfully', function(done) {
        //uncomment below and update the code to test deployments
        //instance.deployments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detectobjects', function() {
      it('should call detectobjects successfully', function(done) {
        //uncomment below and update the code to test detectobjects
        //instance.detectobjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadJobOutputFile', function() {
      it('should call downloadJobOutputFile successfully', function(done) {
        //uncomment below and update the code to test downloadJobOutputFile
        //instance.downloadJobOutputFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateAuthToken', function() {
      it('should call generateAuthToken successfully', function(done) {
        //uncomment below and update the code to test generateAuthToken
        //instance.generateAuthToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllJobs', function() {
      it('should call getAllJobs successfully', function(done) {
        //uncomment below and update the code to test getAllJobs
        //instance.getAllJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getArray', function() {
      it('should call getArray successfully', function(done) {
        //uncomment below and update the code to test getArray
        //instance.getArray(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getArrayIndices', function() {
      it('should call getArrayIndices successfully', function(done) {
        //uncomment below and update the code to test getArrayIndices
        //instance.getArrayIndices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getArrayRange', function() {
      it('should call getArrayRange successfully', function(done) {
        //uncomment below and update the code to test getArrayRange
        //instance.getArrayRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAuthPolicy', function() {
      it('should call getAuthPolicy successfully', function(done) {
        //uncomment below and update the code to test getAuthPolicy
        //instance.getAuthPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBestModelAmongModelIds', function() {
      it('should call getBestModelAmongModelIds successfully', function(done) {
        //uncomment below and update the code to test getBestModelAmongModelIds
        //instance.getBestModelAmongModelIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCredentialsById', function() {
      it('should call getCredentialsById successfully', function(done) {
        //uncomment below and update the code to test getCredentialsById
        //instance.getCredentialsById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCurrentModel', function() {
      it('should call getCurrentModel successfully', function(done) {
        //uncomment below and update the code to test getCurrentModel
        //instance.getCurrentModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEvaluationForModelID', function() {
      it('should call getEvaluationForModelID successfully', function(done) {
        //uncomment below and update the code to test getEvaluationForModelID
        //instance.getEvaluationForModelID(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExamplesForMinibatch', function() {
      it('should call getExamplesForMinibatch successfully', function(done) {
        //uncomment below and update the code to test getExamplesForMinibatch
        //instance.getExamplesForMinibatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExperiment', function() {
      it('should call getExperiment successfully', function(done) {
        //uncomment below and update the code to test getExperiment
        //instance.getExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExperimentsForModelHistory', function() {
      it('should call getExperimentsForModelHistory successfully', function(done) {
        //uncomment below and update the code to test getExperimentsForModelHistory
        //instance.getExperimentsForModelHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getJobById', function() {
      it('should call getJobById successfully', function(done) {
        //uncomment below and update the code to test getJobById
        //instance.getJobById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLastEvaluation', function() {
      it('should call getLastEvaluation successfully', function(done) {
        //uncomment below and update the code to test getLastEvaluation
        //instance.getLastEvaluation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMinibatch', function() {
      it('should call getMinibatch successfully', function(done) {
        //uncomment below and update the code to test getMinibatch
        //instance.getMinibatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModelDetails', function() {
      it('should call getModelDetails successfully', function(done) {
        //uncomment below and update the code to test getModelDetails
        //instance.getModelDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModelHistory', function() {
      it('should call getModelHistory successfully', function(done) {
        //uncomment below and update the code to test getModelHistory
        //instance.getModelHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModelInstance', function() {
      it('should call getModelInstance successfully', function(done) {
        //uncomment below and update the code to test getModelInstance
        //instance.getModelInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModelsForExperiment', function() {
      it('should call getModelsForExperiment successfully', function(done) {
        //uncomment below and update the code to test getModelsForExperiment
        //instance.getModelsForExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResourceById', function() {
      it('should call getResourceById successfully', function(done) {
        //uncomment below and update the code to test getResourceById
        //instance.getResourceById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResourceBySubType', function() {
      it('should call getResourceBySubType successfully', function(done) {
        //uncomment below and update the code to test getResourceBySubType
        //instance.getResourceBySubType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResourceByType', function() {
      it('should call getResourceByType successfully', function(done) {
        //uncomment below and update the code to test getResourceByType
        //instance.getResourceByType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResourceDetailsById', function() {
      it('should call getResourceDetailsById successfully', function(done) {
        //uncomment below and update the code to test getResourceDetailsById
        //instance.getResourceDetailsById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResourceGroupById', function() {
      it('should call getResourceGroupById successfully', function(done) {
        //uncomment below and update the code to test getResourceGroupById
        //instance.getResourceGroupById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResourceGroups', function() {
      it('should call getResourceGroups successfully', function(done) {
        //uncomment below and update the code to test getResourceGroups
        //instance.getResourceGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResources', function() {
      it('should call getResources successfully', function(done) {
        //uncomment below and update the code to test getResources
        //instance.getResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResourcesFromGroup', function() {
      it('should call getResourcesFromGroup successfully', function(done) {
        //uncomment below and update the code to test getResourcesFromGroup
        //instance.getResourcesFromGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRoles', function() {
      it('should call getRoles successfully', function(done) {
        //uncomment below and update the code to test getRoles
        //instance.getRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUser', function() {
      it('should call getUser successfully', function(done) {
        //uncomment below and update the code to test getUser
        //instance.getUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserAuthTokens', function() {
      it('should call getUserAuthTokens successfully', function(done) {
        //uncomment below and update the code to test getUserAuthTokens
        //instance.getUserAuthTokens(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUsers', function() {
      it('should call getUsers successfully', function(done) {
        //uncomment below and update the code to test getUsers
        //instance.getUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('isTraining', function() {
      it('should call isTraining successfully', function(done) {
        //uncomment below and update the code to test isTraining
        //instance.isTraining(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('jsonarray', function() {
      it('should call jsonarray successfully', function(done) {
        //uncomment below and update the code to test jsonarray
        //instance.jsonarray(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('knn', function() {
      it('should call knn successfully', function(done) {
        //uncomment below and update the code to test knn
        //instance.knn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('knnnew', function() {
      it('should call knnnew successfully', function(done) {
        //uncomment below and update the code to test knnnew
        //instance.knnnew(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAllExperiments', function() {
      it('should call listAllExperiments successfully', function(done) {
        //uncomment below and update the code to test listAllExperiments
        //instance.listAllExperiments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logfilepath', function() {
      it('should call logfilepath successfully', function(done) {
        //uncomment below and update the code to test logfilepath
        //instance.logfilepath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('login', function() {
      it('should call login successfully', function(done) {
        //uncomment below and update the code to test login
        //instance.login(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logs', function() {
      it('should call logs successfully', function(done) {
        //uncomment below and update the code to test logs
        //instance.logs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metaGet', function() {
      it('should call metaGet successfully', function(done) {
        //uncomment below and update the code to test metaGet
        //instance.metaGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('metaPost', function() {
      it('should call metaPost successfully', function(done) {
        //uncomment below and update the code to test metaPost
        //instance.metaPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelStateChange', function() {
      it('should call modelStateChange successfully', function(done) {
        //uncomment below and update the code to test modelStateChange
        //instance.modelStateChange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('models', function() {
      it('should call models successfully', function(done) {
        //uncomment below and update the code to test models
        //instance.models(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelset', function() {
      it('should call modelset successfully', function(done) {
        //uncomment below and update the code to test modelset
        //instance.modelset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modelupdate', function() {
      it('should call modelupdate successfully', function(done) {
        //uncomment below and update the code to test modelupdate
        //instance.modelupdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('multiclassify', function() {
      it('should call multiclassify successfully', function(done) {
        //uncomment below and update the code to test multiclassify
        //instance.multiclassify(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('multipredict', function() {
      it('should call multipredict successfully', function(done) {
        //uncomment below and update the code to test multipredict
        //instance.multipredict(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('multipredictimage', function() {
      it('should call multipredictimage successfully', function(done) {
        //uncomment below and update the code to test multipredictimage
        //instance.multipredictimage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('numRevisions', function() {
      it('should call numRevisions successfully', function(done) {
        //uncomment below and update the code to test numRevisions
        //instance.numRevisions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predict', function() {
      it('should call predict successfully', function(done) {
        //uncomment below and update the code to test predict
        //instance.predict(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictError', function() {
      it('should call predictError successfully', function(done) {
        //uncomment below and update the code to test predictError
        //instance.predictError(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictV2File', function() {
      it('should call predictV2File successfully', function(done) {
        //uncomment below and update the code to test predictV2File
        //instance.predictV2File(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictV2Json', function() {
      it('should call predictV2Json successfully', function(done) {
        //uncomment below and update the code to test predictV2Json
        //instance.predictV2Json(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictimage', function() {
      it('should call predictimage successfully', function(done) {
        //uncomment below and update the code to test predictimage
        //instance.predictimage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictwithpreprocess', function() {
      it('should call predictwithpreprocess successfully', function(done) {
        //uncomment below and update the code to test predictwithpreprocess
        //instance.predictwithpreprocess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictwithpreprocessjson', function() {
      it('should call predictwithpreprocessjson successfully', function(done) {
        //uncomment below and update the code to test predictwithpreprocessjson
        //instance.predictwithpreprocessjson(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rawPredictBinary', function() {
      it('should call rawPredictBinary successfully', function(done) {
        //uncomment below and update the code to test rawPredictBinary
        //instance.rawPredictBinary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('refreshJobStatus', function() {
      it('should call refreshJobStatus successfully', function(done) {
        //uncomment below and update the code to test refreshJobStatus
        //instance.refreshJobStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerUser', function() {
      it('should call registerUser successfully', function(done) {
        //uncomment below and update the code to test registerUser
        //instance.registerUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reimportModel', function() {
      it('should call reimportModel successfully', function(done) {
        //uncomment below and update the code to test reimportModel
        //instance.reimportModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeUserToken', function() {
      it('should call revokeUserToken successfully', function(done) {
        //uncomment below and update the code to test revokeUserToken
        //instance.revokeUserToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rollback', function() {
      it('should call rollback successfully', function(done) {
        //uncomment below and update the code to test rollback
        //instance.rollback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runAJob', function() {
      it('should call runAJob successfully', function(done) {
        //uncomment below and update the code to test runAJob
        //instance.runAJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transformCsv', function() {
      it('should call transformCsv successfully', function(done) {
        //uncomment below and update the code to test transformCsv
        //instance.transformCsv(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transformarray', function() {
      it('should call transformarray successfully', function(done) {
        //uncomment below and update the code to test transformarray
        //instance.transformarray(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transformimage', function() {
      it('should call transformimage successfully', function(done) {
        //uncomment below and update the code to test transformimage
        //instance.transformimage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transformincrementalCsv', function() {
      it('should call transformincrementalCsv successfully', function(done) {
        //uncomment below and update the code to test transformincrementalCsv
        //instance.transformincrementalCsv(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transformincrementalarray', function() {
      it('should call transformincrementalarray successfully', function(done) {
        //uncomment below and update the code to test transformincrementalarray
        //instance.transformincrementalarray(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transformincrementalimage', function() {
      it('should call transformincrementalimage successfully', function(done) {
        //uncomment below and update the code to test transformincrementalimage
        //instance.transformincrementalimage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transformprocessGet', function() {
      it('should call transformprocessGet successfully', function(done) {
        //uncomment below and update the code to test transformprocessGet
        //instance.transformprocessGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transformprocessPost', function() {
      it('should call transformprocessPost successfully', function(done) {
        //uncomment below and update the code to test transformprocessPost
        //instance.transformprocessPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAuthPolicy', function() {
      it('should call updateAuthPolicy successfully', function(done) {
        //uncomment below and update the code to test updateAuthPolicy
        //instance.updateAuthPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBestModelForExperiment', function() {
      it('should call updateBestModelForExperiment successfully', function(done) {
        //uncomment below and update the code to test updateBestModelForExperiment
        //instance.updateBestModelForExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateExperiment', function() {
      it('should call updateExperiment successfully', function(done) {
        //uncomment below and update the code to test updateExperiment
        //instance.updateExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateModelHistory', function() {
      it('should call updateModelHistory successfully', function(done) {
        //uncomment below and update the code to test updateModelHistory
        //instance.updateModelHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUser', function() {
      it('should call updateUser successfully', function(done) {
        //uncomment below and update the code to test updateUser
        //instance.updateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('upload', function() {
      it('should call upload successfully', function(done) {
        //uncomment below and update the code to test upload
        //instance.upload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
