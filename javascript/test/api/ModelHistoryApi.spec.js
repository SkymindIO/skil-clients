/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SkilClient);
  }
}(this, function(expect, SkilClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SkilClient.ModelHistoryApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModelHistoryApi', function() {
    describe('addEvaluationResult', function() {
      it('should call addEvaluationResult successfully', function(done) {
        //uncomment below and update the code to test addEvaluationResult
        //instance.addEvaluationResult(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addExampleForBatch', function() {
      it('should call addExampleForBatch successfully', function(done) {
        //uncomment below and update the code to test addExampleForBatch
        //instance.addExampleForBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addExampleToMinibatch', function() {
      it('should call addExampleToMinibatch successfully', function(done) {
        //uncomment below and update the code to test addExampleToMinibatch
        //instance.addExampleToMinibatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addExperiment', function() {
      it('should call addExperiment successfully', function(done) {
        //uncomment below and update the code to test addExperiment
        //instance.addExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addMinibatch', function() {
      it('should call addMinibatch successfully', function(done) {
        //uncomment below and update the code to test addMinibatch
        //instance.addMinibatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addModelFeedback', function() {
      it('should call addModelFeedback successfully', function(done) {
        //uncomment below and update the code to test addModelFeedback
        //instance.addModelFeedback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addModelHistory', function() {
      it('should call addModelHistory successfully', function(done) {
        //uncomment below and update the code to test addModelHistory
        //instance.addModelHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addModelInstance', function() {
      it('should call addModelInstance successfully', function(done) {
        //uncomment below and update the code to test addModelInstance
        //instance.addModelInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('aggregateModelResults', function() {
      it('should call aggregateModelResults successfully', function(done) {
        //uncomment below and update the code to test aggregateModelResults
        //instance.aggregateModelResults(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModelHistory', function() {
      it('should call createModelHistory successfully', function(done) {
        //uncomment below and update the code to test createModelHistory
        //instance.createModelHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteExperiment', function() {
      it('should call deleteExperiment successfully', function(done) {
        //uncomment below and update the code to test deleteExperiment
        //instance.deleteExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteModelHistory', function() {
      it('should call deleteModelHistory successfully', function(done) {
        //uncomment below and update the code to test deleteModelHistory
        //instance.deleteModelHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteModelInstance', function() {
      it('should call deleteModelInstance successfully', function(done) {
        //uncomment below and update the code to test deleteModelInstance
        //instance.deleteModelInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBestModelAmongModelIds', function() {
      it('should call getBestModelAmongModelIds successfully', function(done) {
        //uncomment below and update the code to test getBestModelAmongModelIds
        //instance.getBestModelAmongModelIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEvaluationForModelID', function() {
      it('should call getEvaluationForModelID successfully', function(done) {
        //uncomment below and update the code to test getEvaluationForModelID
        //instance.getEvaluationForModelID(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExamplesForMinibatch', function() {
      it('should call getExamplesForMinibatch successfully', function(done) {
        //uncomment below and update the code to test getExamplesForMinibatch
        //instance.getExamplesForMinibatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExperiment', function() {
      it('should call getExperiment successfully', function(done) {
        //uncomment below and update the code to test getExperiment
        //instance.getExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExperimentsForModelHistory', function() {
      it('should call getExperimentsForModelHistory successfully', function(done) {
        //uncomment below and update the code to test getExperimentsForModelHistory
        //instance.getExperimentsForModelHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMinibatch', function() {
      it('should call getMinibatch successfully', function(done) {
        //uncomment below and update the code to test getMinibatch
        //instance.getMinibatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModelHistory', function() {
      it('should call getModelHistory successfully', function(done) {
        //uncomment below and update the code to test getModelHistory
        //instance.getModelHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModelInstance', function() {
      it('should call getModelInstance successfully', function(done) {
        //uncomment below and update the code to test getModelInstance
        //instance.getModelInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModelsForExperiment', function() {
      it('should call getModelsForExperiment successfully', function(done) {
        //uncomment below and update the code to test getModelsForExperiment
        //instance.getModelsForExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAllExperiments', function() {
      it('should call listAllExperiments successfully', function(done) {
        //uncomment below and update the code to test listAllExperiments
        //instance.listAllExperiments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBestModelForExperiment', function() {
      it('should call updateBestModelForExperiment successfully', function(done) {
        //uncomment below and update the code to test updateBestModelForExperiment
        //instance.updateBestModelForExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateExperiment', function() {
      it('should call updateExperiment successfully', function(done) {
        //uncomment below and update the code to test updateExperiment
        //instance.updateExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateModelHistory', function() {
      it('should call updateModelHistory successfully', function(done) {
        //uncomment below and update the code to test updateModelHistory
        //instance.updateModelHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
