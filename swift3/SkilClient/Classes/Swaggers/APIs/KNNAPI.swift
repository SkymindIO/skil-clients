//
// KNNAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class KNNAPI: APIBase {
    /**
     Runs knn on the given index with the given k
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter knnName: (path) ID or name of the deployed knn 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func knn(deploymentName: String, versionName: String, knnName: String, body: NearestNeighborRequest, completion: @escaping ((_ data: NearestNeighborsResults?, _ error: ErrorResponse?) -> Void)) {
        knnWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, knnName: knnName, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Runs knn on the given index with the given k
     - POST /endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn
     - Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "distance" : 1.0,
    "index" : 0,
    "label" : "label"
  }, {
    "distance" : 1.0,
    "index" : 0,
    "label" : "label"
  } ]
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter knnName: (path) ID or name of the deployed knn 
     - parameter body: (body)  
     - returns: RequestBuilder<NearestNeighborsResults> 
     */
    open class func knnWithRequestBuilder(deploymentName: String, versionName: String, knnName: String, body: NearestNeighborRequest) -> RequestBuilder<NearestNeighborsResults> {
        var path = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let knnNamePreEscape = "\(knnName)"
        let knnNamePostEscape = knnNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knnName}", with: knnNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NearestNeighborsResults>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Run a k nearest neighbors search on a NEW data point
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter knnName: (path) ID or name of the deployed knn 
     - parameter body: (body) The input NDArray 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func knnnew(deploymentName: String, versionName: String, knnName: String, body: Base64NDArrayBodyKNN, completion: @escaping ((_ data: NearestNeighborsResults?, _ error: ErrorResponse?) -> Void)) {
        knnnewWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, knnName: knnName, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Run a k nearest neighbors search on a NEW data point
     - POST /endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "distance" : 1.0,
    "index" : 0,
    "label" : "label"
  }, {
    "distance" : 1.0,
    "index" : 0,
    "label" : "label"
  } ]
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter knnName: (path) ID or name of the deployed knn 
     - parameter body: (body) The input NDArray 
     - returns: RequestBuilder<NearestNeighborsResults> 
     */
    open class func knnnewWithRequestBuilder(deploymentName: String, versionName: String, knnName: String, body: Base64NDArrayBodyKNN) -> RequestBuilder<NearestNeighborsResults> {
        var path = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let knnNamePreEscape = "\(knnName)"
        let knnNamePostEscape = knnNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knnName}", with: knnNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NearestNeighborsResults>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
