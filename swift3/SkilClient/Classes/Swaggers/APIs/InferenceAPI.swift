//
// InferenceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class InferenceAPI: APIBase {
    /**
     Use the deployed model to classify the input
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func classify(body: Prediction, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: ClassificationResult?, _ error: ErrorResponse?) -> Void)) {
        classifyWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Use the deployed model to classify the input
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/classify
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "minibatchId" : "minibatchId",
  "results" : [ 0, 0 ],
  "probabilities" : [ 0.452, 0.452 ]
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<ClassificationResult> 
     */
    open class func classifyWithRequestBuilder(body: Prediction, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<ClassificationResult> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classify"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ClassificationResult>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Same as /classify but returns the output as Base64NDArrayBody
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func classifyarray(body: Prediction, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: Base64NDArrayBody?, _ error: ErrorResponse?) -> Void)) {
        classifyarrayWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Same as /classify but returns the output as Base64NDArrayBody
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "ndarray" : "ndarray"
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<Base64NDArrayBody> 
     */
    open class func classifyarrayWithRequestBuilder(body: Prediction, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<Base64NDArrayBody> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Base64NDArrayBody>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Use the deployed model to classify the input, using input image file from multipart form data.
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter image: (form) The file to upload. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func classifyimage(deploymentName: String, versionName: String, modelName: String, image: URL? = nil, completion: @escaping ((_ data: ClassificationResult?, _ error: ErrorResponse?) -> Void)) {
        classifyimageWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, modelName: modelName, image: image).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Use the deployed model to classify the input, using input image file from multipart form data.
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "minibatchId" : "minibatchId",
  "results" : [ 0, 0 ],
  "probabilities" : [ 0.452, 0.452 ]
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter image: (form) The file to upload. (optional)
     - returns: RequestBuilder<ClassificationResult> 
     */
    open class func classifyimageWithRequestBuilder(deploymentName: String, versionName: String, modelName: String, image: URL? = nil) -> RequestBuilder<ClassificationResult> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "image": image
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ClassificationResult>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Detect the objects, given a (input) prediction request
     - parameter id: (form) the GUID for mapping the results in the detections 
     - parameter needsPreprocessing: (form) (true) if the image needs preprocessing 
     - parameter threshold: (form) A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. 
     - parameter file: (form) the image file to detect objects from 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func detectobjects(id: String, needsPreprocessing: Bool, threshold: Float, file: URL, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: DetectionResult?, _ error: ErrorResponse?) -> Void)) {
        detectobjectsWithRequestBuilder(id: id, needsPreprocessing: needsPreprocessing, threshold: threshold, file: file, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Detect the objects, given a (input) prediction request
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "objects" : [ {
    "centerY" : 6.0274563,
    "centerX" : 0.8008282,
    "predictedClasses" : [ "predictedClasses", "predictedClasses" ],
    "confidences" : [ 5.637377, 5.637377 ],
    "width" : 1.4658129,
    "height" : 5.962134
  }, {
    "centerY" : 6.0274563,
    "centerX" : 0.8008282,
    "predictedClasses" : [ "predictedClasses", "predictedClasses" ],
    "confidences" : [ 5.637377, 5.637377 ],
    "width" : 1.4658129,
    "height" : 5.962134
  } ],
  "id" : "id"
}}]
     - parameter id: (form) the GUID for mapping the results in the detections 
     - parameter needsPreprocessing: (form) (true) if the image needs preprocessing 
     - parameter threshold: (form) A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. 
     - parameter file: (form) the image file to detect objects from 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<DetectionResult> 
     */
    open class func detectobjectsWithRequestBuilder(id: String, needsPreprocessing: Bool, threshold: Float, file: URL, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<DetectionResult> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "id": id,
            "needsPreprocessing": needsPreprocessing,
            "threshold": threshold,
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DetectionResult>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Run inference on the input and returns it as a JsonArrayResponse
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func jsonarray(body: Prediction, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: JsonArrayResponse?, _ error: ErrorResponse?) -> Void)) {
        jsonarrayWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Run inference on the input and returns it as a JsonArrayResponse
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "array" : {
    "array" : "array"
  }
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<JsonArrayResponse> 
     */
    open class func jsonarrayWithRequestBuilder(body: Prediction, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<JsonArrayResponse> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonArrayResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get logs file path
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logfilepath(deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        logfilepathWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get logs file path
     - GET /endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{output=none}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<String> 
     */
    open class func logfilepathWithRequestBuilder(deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<String> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get logs
     - parameter body: (body) the the log request 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logs(body: LogRequest, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: LogBatch?, _ error: ErrorResponse?) -> Void)) {
        logsWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get logs
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/logs
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "offset" : 0,
  "rowCount" : 2,
  "logs" : "logs"
}}]
     - parameter body: (body) the the log request 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<LogBatch> 
     */
    open class func logsWithRequestBuilder(body: LogRequest, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<LogBatch> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logs"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LogBatch>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     this method can be used to get the meta data for the current model which set to the server
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func metaGet(deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: MetaData?, _ error: ErrorResponse?) -> Void)) {
        metaGetWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     this method can be used to get the meta data for the current model which set to the server
     - GET /endpoints/{deploymentName}/model/{modelName}/{versionName}/meta
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={ }}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<MetaData> 
     */
    open class func metaGetWithRequestBuilder(deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<MetaData> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MetaData>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     This method can be used to set meta data for the current model which is set to the server
     - parameter body: (body) the meta data object 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func metaPost(body: MetaData, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: MetaData?, _ error: ErrorResponse?) -> Void)) {
        metaPostWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     This method can be used to set meta data for the current model which is set to the server
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/meta
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={ }}]
     - parameter body: (body) the meta data object 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<MetaData> 
     */
    open class func metaPostWithRequestBuilder(body: MetaData, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<MetaData> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MetaData>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set the model to be served
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter file: (form) The model file to upload (.pb file) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modelset(deploymentName: String, versionName: String, modelName: String, file: URL? = nil, completion: @escaping ((_ data: ModelStatus?, _ error: ErrorResponse?) -> Void)) {
        modelsetWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, modelName: modelName, file: file).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set the model to be served
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "status" : 100
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter file: (form) The model file to upload (.pb file) (optional)
     - returns: RequestBuilder<ModelStatus> 
     */
    open class func modelsetWithRequestBuilder(deploymentName: String, versionName: String, modelName: String, file: URL? = nil) -> RequestBuilder<ModelStatus> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelStatus>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update the model to be served
     - parameter file: (form) The model file to update with (.pb file) 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modelupdate(file: URL, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: ModelStatus?, _ error: ErrorResponse?) -> Void)) {
        modelupdateWithRequestBuilder(file: file, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update the model to be served
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "status" : 100
}}]
     - parameter file: (form) The model file to update with (.pb file) 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<ModelStatus> 
     */
    open class func modelupdateWithRequestBuilder(file: URL, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<ModelStatus> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelStatus>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Represents all of the labels for a given classification
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func multiclassify(body: Prediction, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: MultiClassClassificationResult?, _ error: ErrorResponse?) -> Void)) {
        multiclassifyWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Represents all of the labels for a given classification
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "maxOutcomes" : [ "maxOutcomes", "maxOutcomes" ],
  "rankedOutcomes" : [ [ "rankedOutcomes", "rankedOutcomes" ], [ "rankedOutcomes", "rankedOutcomes" ] ],
  "probabilities" : [ [ 0.4, 0.4 ], [ 0.4, 0.4 ] ]
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<MultiClassClassificationResult> 
     */
    open class func multiclassifyWithRequestBuilder(body: Prediction, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<MultiClassClassificationResult> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MultiClassClassificationResult>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get the output from the network, based on the given INDArray[] input
     - parameter body: (body) The multiple input arrays with mask inputs to run inferences on 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func multipredict(body: MultiPredictRequest, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: MultiPredictResponse?, _ error: ErrorResponse?) -> Void)) {
        multipredictWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the output from the network, based on the given INDArray[] input
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict
     - Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "outputs" : [ {
    "shape" : [ 0, 0 ],
    "data" : [ 6.0274563, 6.0274563 ],
    "array" : "array",
    "ordering" : "f",
    "dataType" : "INT8"
  }, {
    "shape" : [ 0, 0 ],
    "data" : [ 6.0274563, 6.0274563 ],
    "array" : "array",
    "ordering" : "f",
    "dataType" : "INT8"
  } ],
  "needsPreProcessing" : true,
  "id" : "id"
}}]
     - parameter body: (body) The multiple input arrays with mask inputs to run inferences on 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<MultiPredictResponse> 
     */
    open class func multipredictWithRequestBuilder(body: MultiPredictRequest, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<MultiPredictResponse> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MultiPredictResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get the output from the network using the given image file using the /multipredict endpoint's method
     - parameter file: (form) The image file to run the prediction on 
     - parameter id: (form) The id of the request (could be self generated) 
     - parameter needsPreprocessing: (form) Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func multipredictimage(file: URL, id: String, needsPreprocessing: Bool, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: MultiPredictResponse?, _ error: ErrorResponse?) -> Void)) {
        multipredictimageWithRequestBuilder(file: file, id: id, needsPreprocessing: needsPreprocessing, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the output from the network using the given image file using the /multipredict endpoint's method
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage
     - Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "outputs" : [ {
    "shape" : [ 0, 0 ],
    "data" : [ 6.0274563, 6.0274563 ],
    "array" : "array",
    "ordering" : "f",
    "dataType" : "INT8"
  }, {
    "shape" : [ 0, 0 ],
    "data" : [ 6.0274563, 6.0274563 ],
    "array" : "array",
    "ordering" : "f",
    "dataType" : "INT8"
  } ],
  "needsPreProcessing" : true,
  "id" : "id"
}}]
     - parameter file: (form) The image file to run the prediction on 
     - parameter id: (form) The id of the request (could be self generated) 
     - parameter needsPreprocessing: (form) Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<MultiPredictResponse> 
     */
    open class func multipredictimageWithRequestBuilder(file: URL, id: String, needsPreprocessing: Bool, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<MultiPredictResponse> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file,
            "id": id,
            "needs_preprocessing": needsPreprocessing
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MultiPredictResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Run inference on the input array.
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predict(body: Prediction, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: Prediction?, _ error: ErrorResponse?) -> Void)) {
        predictWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Run inference on the input array.
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/predict
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "needsPreProcessing" : true,
  "prediction" : {
    "array" : "array"
  },
  "id" : "id"
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<Prediction> 
     */
    open class func predictWithRequestBuilder(body: Prediction, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<Prediction> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predict"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Prediction>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Run inference on the input array, using input image file from multipart form data.
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter image: (form) The file to upload. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predictimage(deploymentName: String, versionName: String, modelName: String, image: URL? = nil, completion: @escaping ((_ data: Prediction?, _ error: ErrorResponse?) -> Void)) {
        predictimageWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, modelName: modelName, image: image).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Run inference on the input array, using input image file from multipart form data.
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "needsPreProcessing" : true,
  "prediction" : {
    "array" : "array"
  },
  "id" : "id"
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter image: (form) The file to upload. (optional)
     - returns: RequestBuilder<Prediction> 
     */
    open class func predictimageWithRequestBuilder(deploymentName: String, versionName: String, modelName: String, image: URL? = nil) -> RequestBuilder<Prediction> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "image": image
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Prediction>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Preprocesses the input and run inference on it
     - parameter body: (body) The input array 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predictwithpreprocess(body: [String], deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: Prediction?, _ error: ErrorResponse?) -> Void)) {
        predictwithpreprocessWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Preprocesses the input and run inference on it
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "needsPreProcessing" : true,
  "prediction" : {
    "array" : "array"
  },
  "id" : "id"
}}]
     - parameter body: (body) The input array 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<Prediction> 
     */
    open class func predictwithpreprocessWithRequestBuilder(body: [String], deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<Prediction> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Prediction>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     - parameter body: (body) The input array 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predictwithpreprocessjson(body: [String], deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: JsonArrayResponse?, _ error: ErrorResponse?) -> Void)) {
        predictwithpreprocessjsonWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "array" : {
    "array" : "array"
  }
}}]
     - parameter body: (body) The input array 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<JsonArrayResponse> 
     */
    open class func predictwithpreprocessjsonWithRequestBuilder(body: [String], deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<JsonArrayResponse> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonArrayResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
