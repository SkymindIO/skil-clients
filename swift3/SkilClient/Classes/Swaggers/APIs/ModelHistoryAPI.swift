//
// ModelHistoryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ModelHistoryAPI: APIBase {
    /**
     Adds an evaluation result
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter evaluationResultsEntity: (body) The evaluation result entity 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addEvaluationResult(modelHistoryServerId: String, evaluationResultsEntity: EvaluationResultsEntity, completion: @escaping ((_ data: EvaluationResultsEntity?, _ error: ErrorResponse?) -> Void)) {
        addEvaluationResultWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, evaluationResultsEntity: evaluationResultsEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds an evaluation result
     - POST /rpc/{modelHistoryServerId}/model/revisions/evaluations/
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "r2" : 2.027123023002322,
  "binaryThresholds" : "binaryThresholds",
  "created" : 0,
  "precision" : 1.4658129805029452,
  "accuracy" : 5.637376656633329,
  "f1" : 6.027456183070403,
  "meanAbsoluteError" : 9.301444243932576,
  "auc" : 7.061401241503109,
  "evaluation" : "evaluation",
  "evalId" : "evalId",
  "meanRelativeError" : 3.616076749251911,
  "evalVersion" : 4,
  "evalName" : "evalName",
  "modelInstanceId" : "modelInstanceId",
  "recall" : 5.962133916683182,
  "rmse" : 2.3021358869347655,
  "binaryThreshold" : 7.386281948385884
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter evaluationResultsEntity: (body) The evaluation result entity 
     - returns: RequestBuilder<EvaluationResultsEntity> 
     */
    open class func addEvaluationResultWithRequestBuilder(modelHistoryServerId: String, evaluationResultsEntity: EvaluationResultsEntity) -> RequestBuilder<EvaluationResultsEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = evaluationResultsEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationResultsEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a number of examples to a minibatch ID given an AddExampleRequest.
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter addExampleRequest: (body) The add example request, encapsulating minibatch details and examples batch size 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addExampleForBatch(modelHistoryServerId: String, addExampleRequest: AddExampleRequest, completion: @escaping ((_ data: AddExampleRequest?, _ error: ErrorResponse?) -> Void)) {
        addExampleForBatchWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, addExampleRequest: addExampleRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a number of examples to a minibatch ID given an AddExampleRequest.
     - POST /rpc/{modelHistoryServerId}/model/exampleForBatch
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "minibatch" : {
    "evalId" : "evalId",
    "batchVersion" : 6,
    "evalVersion" : 0,
    "miniBatchId" : "miniBatchId"
  },
  "batchSize" : 0
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter addExampleRequest: (body) The add example request, encapsulating minibatch details and examples batch size 
     - returns: RequestBuilder<AddExampleRequest> 
     */
    open class func addExampleForBatchWithRequestBuilder(modelHistoryServerId: String, addExampleRequest: AddExampleRequest) -> RequestBuilder<AddExampleRequest> {
        var path = "/rpc/{modelHistoryServerId}/model/exampleForBatch"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = addExampleRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AddExampleRequest>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds an example to a minibatch
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter exampleEntity: (body) The example to add to the minibatch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addExampleToMinibatch(modelHistoryServerId: String, exampleEntity: ExampleEntity, completion: @escaping ((_ data: ExampleEntity?, _ error: ErrorResponse?) -> Void)) {
        addExampleToMinibatchWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, exampleEntity: exampleEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds an example to a minibatch
     - POST /rpc/{modelHistoryServerId}/model/example
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "exampleId" : "exampleId",
  "created" : 1,
  "miniBatchId" : "miniBatchId",
  "miniBatchVersion" : 5,
  "rowNumber" : 6,
  "exampleVersion" : 0
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter exampleEntity: (body) The example to add to the minibatch 
     - returns: RequestBuilder<ExampleEntity> 
     */
    open class func addExampleToMinibatchWithRequestBuilder(modelHistoryServerId: String, exampleEntity: ExampleEntity) -> RequestBuilder<ExampleEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/example"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = exampleEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExampleEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add an experiment, given an experiment entity
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentEntity: (body) The experiment entity to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addExperiment(modelHistoryServerId: String, experimentEntity: ExperimentEntity, completion: @escaping ((_ data: ExperimentEntity?, _ error: ErrorResponse?) -> Void)) {
        addExperimentWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, experimentEntity: experimentEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add an experiment, given an experiment entity
     - POST /rpc/{modelHistoryServerId}/experiment
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentEntity: (body) The experiment entity to add 
     - returns: RequestBuilder<ExperimentEntity> 
     */
    open class func addExperimentWithRequestBuilder(modelHistoryServerId: String, experimentEntity: ExperimentEntity) -> RequestBuilder<ExperimentEntity> {
        var path = "/rpc/{modelHistoryServerId}/experiment"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = experimentEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExperimentEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a minibatch
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter minibatchEntity: (body) The minibatch entity to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addMinibatch(modelHistoryServerId: String, minibatchEntity: MinibatchEntity, completion: @escaping ((_ data: MinibatchEntity?, _ error: ErrorResponse?) -> Void)) {
        addMinibatchWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, minibatchEntity: minibatchEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a minibatch
     - POST /rpc/{modelHistoryServerId}/model/minibatch
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "evalId" : "evalId",
  "batchVersion" : 6,
  "evalVersion" : 0,
  "miniBatchId" : "miniBatchId"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter minibatchEntity: (body) The minibatch entity to add 
     - returns: RequestBuilder<MinibatchEntity> 
     */
    open class func addMinibatchWithRequestBuilder(modelHistoryServerId: String, minibatchEntity: MinibatchEntity) -> RequestBuilder<MinibatchEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/minibatch"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = minibatchEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MinibatchEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds an evaluation feedback to the model against a given minibatch id.
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelFeedBackRequest: (body) The model feedback request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addModelFeedback(modelHistoryServerId: String, modelFeedBackRequest: ModelFeedBackRequest, completion: @escaping ((_ data: ModelFeedBackRequest?, _ error: ErrorResponse?) -> Void)) {
        addModelFeedbackWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelFeedBackRequest: modelFeedBackRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds an evaluation feedback to the model against a given minibatch id.
     - POST /rpc/{modelHistoryServerId}/model/feedback
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "correct" : "[\"0\", \"0\", \"2\"]",
  "guesses" : "[\"0\", \"1\", \"2\"]",
  "batchId" : "batchId"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelFeedBackRequest: (body) The model feedback request object 
     - returns: RequestBuilder<ModelFeedBackRequest> 
     */
    open class func addModelFeedbackWithRequestBuilder(modelHistoryServerId: String, modelFeedBackRequest: ModelFeedBackRequest) -> RequestBuilder<ModelFeedBackRequest> {
        var path = "/rpc/{modelHistoryServerId}/model/feedback"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = modelFeedBackRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelFeedBackRequest>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add a model history / workspace
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter addModelHistoryRequest: (body) The model history request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addModelHistory(modelHistoryServerId: String, addModelHistoryRequest: AddModelHistoryRequest, completion: @escaping ((_ data: ModelHistoryEntity?, _ error: ErrorResponse?) -> Void)) {
        addModelHistoryWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, addModelHistoryRequest: addModelHistoryRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a model history / workspace
     - POST /rpc/{modelHistoryServerId}/modelhistory
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modelName" : "modelName",
  "modelHistoryId" : "modelHistoryId",
  "created" : 0,
  "modelLabels" : "modelLabels"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter addModelHistoryRequest: (body) The model history request object 
     - returns: RequestBuilder<ModelHistoryEntity> 
     */
    open class func addModelHistoryWithRequestBuilder(modelHistoryServerId: String, addModelHistoryRequest: AddModelHistoryRequest) -> RequestBuilder<ModelHistoryEntity> {
        var path = "/rpc/{modelHistoryServerId}/modelhistory"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = addModelHistoryRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelHistoryEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a model
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceEntity: (body) The object encapsulating the model instance id and evaluation type to aggregate 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addModelInstance(modelHistoryServerId: String, modelInstanceEntity: ModelInstanceEntity, completion: @escaping ((_ data: ModelInstanceEntity?, _ error: ErrorResponse?) -> Void)) {
        addModelInstanceWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelInstanceEntity: modelInstanceEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a model
     - POST /rpc/{modelHistoryServerId}/model
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "evalId" : "evalId",
  "modelName" : "modelName",
  "originalModelId" : "originalModelId",
  "modelId" : "modelId",
  "created" : 0,
  "modelVersion" : "modelVersion",
  "modelLabels" : "modelLabels",
  "etlJson" : "etlJson",
  "experimentId" : "experimentId",
  "inputFormats" : "inputFormats",
  "uri" : "http://example.com/aeiou",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceEntity: (body) The object encapsulating the model instance id and evaluation type to aggregate 
     - returns: RequestBuilder<ModelInstanceEntity> 
     */
    open class func addModelInstanceWithRequestBuilder(modelHistoryServerId: String, modelInstanceEntity: ModelInstanceEntity) -> RequestBuilder<ModelInstanceEntity> {
        var path = "/rpc/{modelHistoryServerId}/model"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = modelInstanceEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelInstanceEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Aggregates the evaluaition results of a model instance, based on the evaluation type
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter aggregatePrediction: (body) The object encapsulating the model instance id and evaluation type to aggregate 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func aggregateModelResults(modelHistoryServerId: String, aggregatePrediction: AggregatePrediction, completion: @escaping ((_ data: EvaluationResultsEntity?, _ error: ErrorResponse?) -> Void)) {
        aggregateModelResultsWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, aggregatePrediction: aggregatePrediction).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Aggregates the evaluaition results of a model instance, based on the evaluation type
     - POST /rpc/{modelHistoryServerId}/model/aggregateresults
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "r2" : 2.027123023002322,
  "binaryThresholds" : "binaryThresholds",
  "created" : 0,
  "precision" : 1.4658129805029452,
  "accuracy" : 5.637376656633329,
  "f1" : 6.027456183070403,
  "meanAbsoluteError" : 9.301444243932576,
  "auc" : 7.061401241503109,
  "evaluation" : "evaluation",
  "evalId" : "evalId",
  "meanRelativeError" : 3.616076749251911,
  "evalVersion" : 4,
  "evalName" : "evalName",
  "modelInstanceId" : "modelInstanceId",
  "recall" : 5.962133916683182,
  "rmse" : 2.3021358869347655,
  "binaryThreshold" : 7.386281948385884
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter aggregatePrediction: (body) The object encapsulating the model instance id and evaluation type to aggregate 
     - returns: RequestBuilder<EvaluationResultsEntity> 
     */
    open class func aggregateModelResultsWithRequestBuilder(modelHistoryServerId: String, aggregatePrediction: AggregatePrediction) -> RequestBuilder<EvaluationResultsEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/aggregateresults"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = aggregatePrediction.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationResultsEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Creates model History
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryEntity: (body) The model history entity 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createModelHistory(modelHistoryServerId: String, modelHistoryEntity: ModelHistoryEntity, completion: @escaping ((_ data: ModelHistoryEntity?, _ error: ErrorResponse?) -> Void)) {
        createModelHistoryWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelHistoryEntity: modelHistoryEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates model History
     - POST /rpc/{modelHistoryServerId}/model/revisions
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modelName" : "modelName",
  "modelHistoryId" : "modelHistoryId",
  "created" : 0,
  "modelLabels" : "modelLabels"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryEntity: (body) The model history entity 
     - returns: RequestBuilder<ModelHistoryEntity> 
     */
    open class func createModelHistoryWithRequestBuilder(modelHistoryServerId: String, modelHistoryEntity: ModelHistoryEntity) -> RequestBuilder<ModelHistoryEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/revisions"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = modelHistoryEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelHistoryEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Deletes an experiment, given an experiment entity
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExperiment(modelHistoryServerId: String, experimentID: String, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        deleteExperimentWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, experimentID: experimentID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deletes an experiment, given an experiment entity
     - DELETE /rpc/{modelHistoryServerId}/experiment/{experimentID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "status" : "status"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment to delete 
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func deleteExperimentWithRequestBuilder(modelHistoryServerId: String, experimentID: String) -> RequestBuilder<InlineResponse200> {
        var path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let experimentIDPreEscape = "\(experimentID)"
        let experimentIDPostEscape = experimentIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{experimentID}", with: experimentIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deletes a model history / workspace, given its ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) the GUID of the model history / workspace to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteModelHistory(modelHistoryServerId: String, modelHistoryID: String, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        deleteModelHistoryWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelHistoryID: modelHistoryID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deletes a model history / workspace, given its ID
     - DELETE /rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "status" : "status"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) the GUID of the model history / workspace to delete 
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func deleteModelHistoryWithRequestBuilder(modelHistoryServerId: String, modelHistoryID: String) -> RequestBuilder<InlineResponse200> {
        var path = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelHistoryIDPreEscape = "\(modelHistoryID)"
        let modelHistoryIDPostEscape = modelHistoryIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryID}", with: modelHistoryIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deletes a model instance, given its ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceID: (path) GUID of the model instance to delete. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteModelInstance(modelHistoryServerId: String, modelInstanceID: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteModelInstanceWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelInstanceID: modelInstanceID).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Deletes a model instance, given its ID
     - DELETE /rpc/{modelHistoryServerId}/model/{modelInstanceID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceID: (path) GUID of the model instance to delete. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteModelInstanceWithRequestBuilder(modelHistoryServerId: String, modelInstanceID: String) -> RequestBuilder<Void> {
        var path = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelInstanceIDPreEscape = "\(modelInstanceID)"
        let modelInstanceIDPostEscape = modelInstanceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelInstanceID}", with: modelInstanceIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the best model among the given model instance IDs, based on the evaluation type and column metric
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter bestModel: (body) Object encapsulating the model ids, eval type and column metric name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBestModelAmongModelIds(modelHistoryServerId: String, bestModel: BestModel, completion: @escaping ((_ data: ModelInstanceEntity?, _ error: ErrorResponse?) -> Void)) {
        getBestModelAmongModelIdsWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, bestModel: bestModel).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the best model among the given model instance IDs, based on the evaluation type and column metric
     - POST /rpc/{modelHistoryServerId}/model/best
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "evalId" : "evalId",
  "modelName" : "modelName",
  "originalModelId" : "originalModelId",
  "modelId" : "modelId",
  "created" : 0,
  "modelVersion" : "modelVersion",
  "modelLabels" : "modelLabels",
  "etlJson" : "etlJson",
  "experimentId" : "experimentId",
  "inputFormats" : "inputFormats",
  "uri" : "http://example.com/aeiou",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter bestModel: (body) Object encapsulating the model ids, eval type and column metric name 
     - returns: RequestBuilder<ModelInstanceEntity> 
     */
    open class func getBestModelAmongModelIdsWithRequestBuilder(modelHistoryServerId: String, bestModel: BestModel) -> RequestBuilder<ModelInstanceEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/best"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = bestModel.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelInstanceEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Gets the list of evaluation results entity, given a model instance ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceID: (path) GUID of the model instance to get evaluation results for. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEvaluationForModelID(modelHistoryServerId: String, modelInstanceID: String, completion: @escaping ((_ data: [EvaluationResultsEntity]?, _ error: ErrorResponse?) -> Void)) {
        getEvaluationForModelIDWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelInstanceID: modelInstanceID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the list of evaluation results entity, given a model instance ID
     - GET /rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "r2" : 2.027123023002322,
  "binaryThresholds" : "binaryThresholds",
  "created" : 0,
  "precision" : 1.4658129805029452,
  "accuracy" : 5.637376656633329,
  "f1" : 6.027456183070403,
  "meanAbsoluteError" : 9.301444243932576,
  "auc" : 7.061401241503109,
  "evaluation" : "evaluation",
  "evalId" : "evalId",
  "meanRelativeError" : 3.616076749251911,
  "evalVersion" : 4,
  "evalName" : "evalName",
  "modelInstanceId" : "modelInstanceId",
  "recall" : 5.962133916683182,
  "rmse" : 2.3021358869347655,
  "binaryThreshold" : 7.386281948385884
}, {
  "r2" : 2.027123023002322,
  "binaryThresholds" : "binaryThresholds",
  "created" : 0,
  "precision" : 1.4658129805029452,
  "accuracy" : 5.637376656633329,
  "f1" : 6.027456183070403,
  "meanAbsoluteError" : 9.301444243932576,
  "auc" : 7.061401241503109,
  "evaluation" : "evaluation",
  "evalId" : "evalId",
  "meanRelativeError" : 3.616076749251911,
  "evalVersion" : 4,
  "evalName" : "evalName",
  "modelInstanceId" : "modelInstanceId",
  "recall" : 5.962133916683182,
  "rmse" : 2.3021358869347655,
  "binaryThreshold" : 7.386281948385884
} ]}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceID: (path) GUID of the model instance to get evaluation results for. 
     - returns: RequestBuilder<[EvaluationResultsEntity]> 
     */
    open class func getEvaluationForModelIDWithRequestBuilder(modelHistoryServerId: String, modelInstanceID: String) -> RequestBuilder<[EvaluationResultsEntity]> {
        var path = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelInstanceIDPreEscape = "\(modelInstanceID)"
        let modelInstanceIDPostEscape = modelInstanceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelInstanceID}", with: modelInstanceIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EvaluationResultsEntity]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets all the examples for a minibatch ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter minibatchId: (path) The GUID of the minibatch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExamplesForMinibatch(modelHistoryServerId: String, minibatchId: String, completion: @escaping ((_ data: [ExampleEntity]?, _ error: ErrorResponse?) -> Void)) {
        getExamplesForMinibatchWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, minibatchId: minibatchId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets all the examples for a minibatch ID
     - GET /rpc/{modelHistoryServerId}/model/example/{minibatchId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "exampleId" : "exampleId",
  "created" : 1,
  "miniBatchId" : "miniBatchId",
  "miniBatchVersion" : 5,
  "rowNumber" : 6,
  "exampleVersion" : 0
}, {
  "exampleId" : "exampleId",
  "created" : 1,
  "miniBatchId" : "miniBatchId",
  "miniBatchVersion" : 5,
  "rowNumber" : 6,
  "exampleVersion" : 0
} ]}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter minibatchId: (path) The GUID of the minibatch 
     - returns: RequestBuilder<[ExampleEntity]> 
     */
    open class func getExamplesForMinibatchWithRequestBuilder(modelHistoryServerId: String, minibatchId: String) -> RequestBuilder<[ExampleEntity]> {
        var path = "/rpc/{modelHistoryServerId}/model/example/{minibatchId}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let minibatchIdPreEscape = "\(minibatchId)"
        let minibatchIdPostEscape = minibatchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minibatchId}", with: minibatchIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ExampleEntity]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Obtain an experiment's details, given its ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment to obtain 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExperiment(modelHistoryServerId: String, experimentID: String, completion: @escaping ((_ data: ExperimentEntity?, _ error: ErrorResponse?) -> Void)) {
        getExperimentWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, experimentID: experimentID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Obtain an experiment's details, given its ID
     - GET /rpc/{modelHistoryServerId}/experiment/{experimentID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment to obtain 
     - returns: RequestBuilder<ExperimentEntity> 
     */
    open class func getExperimentWithRequestBuilder(modelHistoryServerId: String, experimentID: String) -> RequestBuilder<ExperimentEntity> {
        var path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let experimentIDPreEscape = "\(experimentID)"
        let experimentIDPostEscape = experimentIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{experimentID}", with: experimentIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExperimentEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Obtain all experiments for a model history / workspace
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) the GUID of the model history / workspace 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExperimentsForModelHistory(modelHistoryServerId: String, modelHistoryID: String, completion: @escaping ((_ data: ExperimentEntity?, _ error: ErrorResponse?) -> Void)) {
        getExperimentsForModelHistoryWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelHistoryID: modelHistoryID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Obtain all experiments for a model history / workspace
     - GET /rpc/{modelHistoryServerId}/experiments/{modelHistoryID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) the GUID of the model history / workspace 
     - returns: RequestBuilder<ExperimentEntity> 
     */
    open class func getExperimentsForModelHistoryWithRequestBuilder(modelHistoryServerId: String, modelHistoryID: String) -> RequestBuilder<ExperimentEntity> {
        var path = "/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelHistoryIDPreEscape = "\(modelHistoryID)"
        let modelHistoryIDPostEscape = modelHistoryIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryID}", with: modelHistoryIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExperimentEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a minibatch for the model
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter minibatchId: (path) The GUID of the minibatch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMinibatch(modelHistoryServerId: String, minibatchId: String, completion: @escaping ((_ data: MinibatchEntity?, _ error: ErrorResponse?) -> Void)) {
        getMinibatchWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, minibatchId: minibatchId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a minibatch for the model
     - GET /rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "evalId" : "evalId",
  "batchVersion" : 6,
  "evalVersion" : 0,
  "miniBatchId" : "miniBatchId"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter minibatchId: (path) The GUID of the minibatch 
     - returns: RequestBuilder<MinibatchEntity> 
     */
    open class func getMinibatchWithRequestBuilder(modelHistoryServerId: String, minibatchId: String) -> RequestBuilder<MinibatchEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let minibatchIdPreEscape = "\(minibatchId)"
        let minibatchIdPostEscape = minibatchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minibatchId}", with: minibatchIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MinibatchEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a model history, given its ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) GUID of the model history to get information of. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getModelHistory(modelHistoryServerId: String, modelHistoryID: String, completion: @escaping ((_ data: ModelHistoryEntity?, _ error: ErrorResponse?) -> Void)) {
        getModelHistoryWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelHistoryID: modelHistoryID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a model history, given its ID
     - GET /rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modelName" : "modelName",
  "modelHistoryId" : "modelHistoryId",
  "created" : 0,
  "modelLabels" : "modelLabels"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) GUID of the model history to get information of. 
     - returns: RequestBuilder<ModelHistoryEntity> 
     */
    open class func getModelHistoryWithRequestBuilder(modelHistoryServerId: String, modelHistoryID: String) -> RequestBuilder<ModelHistoryEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelHistoryIDPreEscape = "\(modelHistoryID)"
        let modelHistoryIDPostEscape = modelHistoryIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryID}", with: modelHistoryIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelHistoryEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a model instance, given its ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceID: (path) GUID of the model instance to get information of. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getModelInstance(modelHistoryServerId: String, modelInstanceID: String, completion: @escaping ((_ data: ModelInstanceEntity?, _ error: ErrorResponse?) -> Void)) {
        getModelInstanceWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelInstanceID: modelInstanceID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a model instance, given its ID
     - GET /rpc/{modelHistoryServerId}/model/{modelInstanceID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "evalId" : "evalId",
  "modelName" : "modelName",
  "originalModelId" : "originalModelId",
  "modelId" : "modelId",
  "created" : 0,
  "modelVersion" : "modelVersion",
  "modelLabels" : "modelLabels",
  "etlJson" : "etlJson",
  "experimentId" : "experimentId",
  "inputFormats" : "inputFormats",
  "uri" : "http://example.com/aeiou",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceID: (path) GUID of the model instance to get information of. 
     - returns: RequestBuilder<ModelInstanceEntity> 
     */
    open class func getModelInstanceWithRequestBuilder(modelHistoryServerId: String, modelInstanceID: String) -> RequestBuilder<ModelInstanceEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelInstanceIDPreEscape = "\(modelInstanceID)"
        let modelInstanceIDPostEscape = modelInstanceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelInstanceID}", with: modelInstanceIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelInstanceEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Obtain a list of all the models for an experiment
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getModelsForExperiment(modelHistoryServerId: String, experimentID: String, completion: @escaping ((_ data: [ModelInstanceEntity]?, _ error: ErrorResponse?) -> Void)) {
        getModelsForExperimentWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, experimentID: experimentID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Obtain a list of all the models for an experiment
     - GET /rpc/{modelHistoryServerId}/experiment/{experimentID}/models
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "evalId" : "evalId",
  "modelName" : "modelName",
  "originalModelId" : "originalModelId",
  "modelId" : "modelId",
  "created" : 0,
  "modelVersion" : "modelVersion",
  "modelLabels" : "modelLabels",
  "etlJson" : "etlJson",
  "experimentId" : "experimentId",
  "inputFormats" : "inputFormats",
  "uri" : "http://example.com/aeiou",
  "notebookJson" : "notebookJson"
}, {
  "evalId" : "evalId",
  "modelName" : "modelName",
  "originalModelId" : "originalModelId",
  "modelId" : "modelId",
  "created" : 0,
  "modelVersion" : "modelVersion",
  "modelLabels" : "modelLabels",
  "etlJson" : "etlJson",
  "experimentId" : "experimentId",
  "inputFormats" : "inputFormats",
  "uri" : "http://example.com/aeiou",
  "notebookJson" : "notebookJson"
} ]}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment 
     - returns: RequestBuilder<[ModelInstanceEntity]> 
     */
    open class func getModelsForExperimentWithRequestBuilder(modelHistoryServerId: String, experimentID: String) -> RequestBuilder<[ModelInstanceEntity]> {
        var path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}/models"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let experimentIDPreEscape = "\(experimentID)"
        let experimentIDPostEscape = experimentIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{experimentID}", with: experimentIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ModelInstanceEntity]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all of the experiments in every model history / workspace
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAllExperiments(modelHistoryServerId: String, completion: @escaping ((_ data: [ExperimentEntity]?, _ error: ErrorResponse?) -> Void)) {
        listAllExperimentsWithRequestBuilder(modelHistoryServerId: modelHistoryServerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all of the experiments in every model history / workspace
     - GET /rpc/{modelHistoryServerId}/experiments
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
}, {
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
} ]}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - returns: RequestBuilder<[ExperimentEntity]> 
     */
    open class func listAllExperimentsWithRequestBuilder(modelHistoryServerId: String) -> RequestBuilder<[ExperimentEntity]> {
        var path = "/rpc/{modelHistoryServerId}/experiments"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ExperimentEntity]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Updates the best model for an experiment
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter updateBestModel: (body) Model encapsulating the experiment id to update and the best model id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateBestModelForExperiment(modelHistoryServerId: String, updateBestModel: UpdateBestModel, completion: @escaping ((_ data: ExperimentEntity?, _ error: ErrorResponse?) -> Void)) {
        updateBestModelForExperimentWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, updateBestModel: updateBestModel).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates the best model for an experiment
     - POST /rpc/{modelHistoryServerId}/experiment/best
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter updateBestModel: (body) Model encapsulating the experiment id to update and the best model id. 
     - returns: RequestBuilder<ExperimentEntity> 
     */
    open class func updateBestModelForExperimentWithRequestBuilder(modelHistoryServerId: String, updateBestModel: UpdateBestModel) -> RequestBuilder<ExperimentEntity> {
        var path = "/rpc/{modelHistoryServerId}/experiment/best"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = updateBestModel.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExperimentEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Updates an experiment, given an experiment entity
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment to update 
     - parameter experimentEntity: (body) The experiment entity to update with 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateExperiment(modelHistoryServerId: String, experimentID: String, experimentEntity: ExperimentEntity, completion: @escaping ((_ data: ExperimentEntity?, _ error: ErrorResponse?) -> Void)) {
        updateExperimentWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, experimentID: experimentID, experimentEntity: experimentEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates an experiment, given an experiment entity
     - PUT /rpc/{modelHistoryServerId}/experiment/{experimentID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment to update 
     - parameter experimentEntity: (body) The experiment entity to update with 
     - returns: RequestBuilder<ExperimentEntity> 
     */
    open class func updateExperimentWithRequestBuilder(modelHistoryServerId: String, experimentID: String, experimentEntity: ExperimentEntity) -> RequestBuilder<ExperimentEntity> {
        var path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let experimentIDPreEscape = "\(experimentID)"
        let experimentIDPostEscape = experimentIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{experimentID}", with: experimentIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = experimentEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExperimentEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a model history / workspace
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) the GUID of the model history / workspace to update 
     - parameter updateModelHistoryRequest: (body) The model history request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateModelHistory(modelHistoryServerId: String, modelHistoryID: String, updateModelHistoryRequest: AddModelHistoryRequest, completion: @escaping ((_ data: ModelHistoryEntity?, _ error: ErrorResponse?) -> Void)) {
        updateModelHistoryWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelHistoryID: modelHistoryID, updateModelHistoryRequest: updateModelHistoryRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a model history / workspace
     - POST /rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modelName" : "modelName",
  "modelHistoryId" : "modelHistoryId",
  "created" : 0,
  "modelLabels" : "modelLabels"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) the GUID of the model history / workspace to update 
     - parameter updateModelHistoryRequest: (body) The model history request object 
     - returns: RequestBuilder<ModelHistoryEntity> 
     */
    open class func updateModelHistoryWithRequestBuilder(modelHistoryServerId: String, modelHistoryID: String, updateModelHistoryRequest: AddModelHistoryRequest) -> RequestBuilder<ModelHistoryEntity> {
        var path = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelHistoryIDPreEscape = "\(modelHistoryID)"
        let modelHistoryIDPostEscape = modelHistoryIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryID}", with: modelHistoryIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = updateModelHistoryRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelHistoryEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
