//
// JobAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class JobAPI: APIBase {
    /**
     * enum for parameter jobIdOrType
     */
    public enum JobIdOrType_createJob: String { 
        case training = "TRAINING"
        case inference = "INFERENCE"
    }

    /**
     Create a job
     - parameter jobIdOrType: (path) Job Type 
     - parameter createJobRequest: (body) Create job request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createJob(jobIdOrType: JobIdOrType_createJob, createJobRequest: CreateJobRequest, completion: @escaping ((_ data: JobEntity?, _ error: ErrorResponse?) -> Void)) {
        createJobWithRequestBuilder(jobIdOrType: jobIdOrType, createJobRequest: createJobRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a job
     - POST /jobs/{jobIdOrType}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "storageResourceId" : 1,
  "jobId" : 0,
  "outputFileName" : "outputFileName",
  "jobArgs" : "jobArgs",
  "runId" : "runId",
  "jobType" : "TRAINING",
  "computeResourceId" : 6,
  "status" : "PENDING"
}}]
     - parameter jobIdOrType: (path) Job Type 
     - parameter createJobRequest: (body) Create job request object 
     - returns: RequestBuilder<JobEntity> 
     */
    open class func createJobWithRequestBuilder(jobIdOrType: JobIdOrType_createJob, createJobRequest: CreateJobRequest) -> RequestBuilder<JobEntity> {
        var path = "/jobs/{jobIdOrType}"
        let jobIdOrTypePreEscape = "\(jobIdOrType.rawValue)"
        let jobIdOrTypePostEscape = jobIdOrTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobIdOrType}", with: jobIdOrTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = createJobRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JobEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Deletes a job given its ID
     - parameter jobIdOrType: (path) Job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteJobById(jobIdOrType: Int64, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteJobByIdWithRequestBuilder(jobIdOrType: jobIdOrType).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Deletes a job given its ID
     - DELETE /jobs/{jobIdOrType}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter jobIdOrType: (path) Job ID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteJobByIdWithRequestBuilder(jobIdOrType: Int64) -> RequestBuilder<Void> {
        var path = "/jobs/{jobIdOrType}"
        let jobIdOrTypePreEscape = "\(jobIdOrType)"
        let jobIdOrTypePostEscape = jobIdOrTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobIdOrType}", with: jobIdOrTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Download the output file from the job's execution. This will ONLY work if the job's run status is 'COMPLETE'.
     - parameter jobId: (path) Job ID 
     - parameter downloadOutputFileRequest: (body) Download output file request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func downloadJobOutputFile(jobId: Int64, downloadOutputFileRequest: DownloadOutputFileRequest, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        downloadJobOutputFileWithRequestBuilder(jobId: jobId, downloadOutputFileRequest: downloadOutputFileRequest).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Download the output file from the job's execution. This will ONLY work if the job's run status is 'COMPLETE'.
     - POST /jobs/{jobId}/outputfile
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter jobId: (path) Job ID 
     - parameter downloadOutputFileRequest: (body) Download output file request object 
     - returns: RequestBuilder<Void> 
     */
    open class func downloadJobOutputFileWithRequestBuilder(jobId: Int64, downloadOutputFileRequest: DownloadOutputFileRequest) -> RequestBuilder<Void> {
        var path = "/jobs/{jobId}/outputfile"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = downloadOutputFileRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get a list of all available jobs
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllJobs(completion: @escaping ((_ data: [JobEntity]?, _ error: ErrorResponse?) -> Void)) {
        getAllJobsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list of all available jobs
     - GET /jobs
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "storageResourceId" : 1,
  "jobId" : 0,
  "outputFileName" : "outputFileName",
  "jobArgs" : "jobArgs",
  "runId" : "runId",
  "jobType" : "TRAINING",
  "computeResourceId" : 6,
  "status" : "PENDING"
}, {
  "storageResourceId" : 1,
  "jobId" : 0,
  "outputFileName" : "outputFileName",
  "jobArgs" : "jobArgs",
  "runId" : "runId",
  "jobType" : "TRAINING",
  "computeResourceId" : 6,
  "status" : "PENDING"
} ]}]
     - returns: RequestBuilder<[JobEntity]> 
     */
    open class func getAllJobsWithRequestBuilder() -> RequestBuilder<[JobEntity]> {
        let path = "/jobs"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[JobEntity]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a job by its ID
     - parameter jobIdOrType: (path) Job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJobById(jobIdOrType: Int64, completion: @escaping ((_ data: JobEntity?, _ error: ErrorResponse?) -> Void)) {
        getJobByIdWithRequestBuilder(jobIdOrType: jobIdOrType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a job by its ID
     - GET /jobs/{jobIdOrType}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "storageResourceId" : 1,
  "jobId" : 0,
  "outputFileName" : "outputFileName",
  "jobArgs" : "jobArgs",
  "runId" : "runId",
  "jobType" : "TRAINING",
  "computeResourceId" : 6,
  "status" : "PENDING"
}}]
     - parameter jobIdOrType: (path) Job ID 
     - returns: RequestBuilder<JobEntity> 
     */
    open class func getJobByIdWithRequestBuilder(jobIdOrType: Int64) -> RequestBuilder<JobEntity> {
        var path = "/jobs/{jobIdOrType}"
        let jobIdOrTypePreEscape = "\(jobIdOrType)"
        let jobIdOrTypePostEscape = jobIdOrTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobIdOrType}", with: jobIdOrTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JobEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Refresh the remote job status. Can be used for monitoring.
     - parameter jobId: (path) Job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func refreshJobStatus(jobId: Int64, completion: @escaping ((_ data: JobEntity?, _ error: ErrorResponse?) -> Void)) {
        refreshJobStatusWithRequestBuilder(jobId: jobId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Refresh the remote job status. Can be used for monitoring.
     - GET /jobs/{jobId}/refresh
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "storageResourceId" : 1,
  "jobId" : 0,
  "outputFileName" : "outputFileName",
  "jobArgs" : "jobArgs",
  "runId" : "runId",
  "jobType" : "TRAINING",
  "computeResourceId" : 6,
  "status" : "PENDING"
}}]
     - parameter jobId: (path) Job ID 
     - returns: RequestBuilder<JobEntity> 
     */
    open class func refreshJobStatusWithRequestBuilder(jobId: Int64) -> RequestBuilder<JobEntity> {
        var path = "/jobs/{jobId}/refresh"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JobEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Start running an (already created) job on the remote resource
     - parameter jobId: (path) Job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func runAJob(jobId: Int64, completion: @escaping ((_ data: JobEntity?, _ error: ErrorResponse?) -> Void)) {
        runAJobWithRequestBuilder(jobId: jobId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Start running an (already created) job on the remote resource
     - POST /jobs/{jobId}/run
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "storageResourceId" : 1,
  "jobId" : 0,
  "outputFileName" : "outputFileName",
  "jobArgs" : "jobArgs",
  "runId" : "runId",
  "jobType" : "TRAINING",
  "computeResourceId" : 6,
  "status" : "PENDING"
}}]
     - parameter jobId: (path) Job ID 
     - returns: RequestBuilder<JobEntity> 
     */
    open class func runAJobWithRequestBuilder(jobId: Int64) -> RequestBuilder<JobEntity> {
        var path = "/jobs/{jobId}/run"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JobEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
