//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI: APIBase {
    /**
     Tells how many retraining examples have labels associated with them.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accumulatedResults(completion: @escaping ((_ data: AccumulatedResults?, _ error: ErrorResponse?) -> Void)) {
        accumulatedResultsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Tells how many retraining examples have labels associated with them.
     - GET /accumulatedresults
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "accumulatedDataWithLabels" : 0,
  "accumulatedDataWithOutLabels" : 6
}}]
     - returns: RequestBuilder<AccumulatedResults> 
     */
    open class func accumulatedResultsWithRequestBuilder() -> RequestBuilder<AccumulatedResults> {
        let path = "/accumulatedresults"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AccumulatedResults>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Adds credentials
     - parameter addCredentialsRequest: (body) Add credentials request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addCredentials(addCredentialsRequest: AddCredentialsRequest, completion: @escaping ((_ data: ResourceCredentials?, _ error: ErrorResponse?) -> Void)) {
        addCredentialsWithRequestBuilder(addCredentialsRequest: addCredentialsRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds credentials
     - POST /resources/credentials
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "credentialId" : 0,
  "type" : "AWS",
  "uri" : "uri"
}}]
     - parameter addCredentialsRequest: (body) Add credentials request object 
     - returns: RequestBuilder<ResourceCredentials> 
     */
    open class func addCredentialsWithRequestBuilder(addCredentialsRequest: AddCredentialsRequest) -> RequestBuilder<ResourceCredentials> {
        let path = "/resources/credentials"
        let URLString = SkilClientAPI.basePath + path
        let parameters = addCredentialsRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResourceCredentials>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds an evaluation result
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter evaluationResultsEntity: (body) The evaluation result entity 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addEvaluationResult(modelHistoryServerId: String, evaluationResultsEntity: EvaluationResultsEntity, completion: @escaping ((_ data: EvaluationResultsEntity?, _ error: ErrorResponse?) -> Void)) {
        addEvaluationResultWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, evaluationResultsEntity: evaluationResultsEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds an evaluation result
     - POST /rpc/{modelHistoryServerId}/model/revisions/evaluations/
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "r2" : 2.027123023002322,
  "binaryThresholds" : "binaryThresholds",
  "created" : 0,
  "precision" : 1.4658129805029452,
  "accuracy" : 5.637376656633329,
  "f1" : 6.027456183070403,
  "meanAbsoluteError" : 9.301444243932576,
  "auc" : 7.061401241503109,
  "evaluation" : "evaluation",
  "evalId" : "evalId",
  "meanRelativeError" : 3.616076749251911,
  "evalVersion" : 4,
  "evalName" : "evalName",
  "modelInstanceId" : "modelInstanceId",
  "recall" : 5.962133916683182,
  "rmse" : 2.3021358869347655,
  "binaryThreshold" : 7.386281948385884
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter evaluationResultsEntity: (body) The evaluation result entity 
     - returns: RequestBuilder<EvaluationResultsEntity> 
     */
    open class func addEvaluationResultWithRequestBuilder(modelHistoryServerId: String, evaluationResultsEntity: EvaluationResultsEntity) -> RequestBuilder<EvaluationResultsEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = evaluationResultsEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationResultsEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a number of examples to a minibatch ID given an AddExampleRequest.
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter addExampleRequest: (body) The add example request, encapsulating minibatch details and examples batch size 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addExampleForBatch(modelHistoryServerId: String, addExampleRequest: AddExampleRequest, completion: @escaping ((_ data: AddExampleRequest?, _ error: ErrorResponse?) -> Void)) {
        addExampleForBatchWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, addExampleRequest: addExampleRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a number of examples to a minibatch ID given an AddExampleRequest.
     - POST /rpc/{modelHistoryServerId}/model/exampleForBatch
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "minibatch" : {
    "evalId" : "evalId",
    "batchVersion" : 6,
    "evalVersion" : 0,
    "miniBatchId" : "miniBatchId"
  },
  "batchSize" : 0
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter addExampleRequest: (body) The add example request, encapsulating minibatch details and examples batch size 
     - returns: RequestBuilder<AddExampleRequest> 
     */
    open class func addExampleForBatchWithRequestBuilder(modelHistoryServerId: String, addExampleRequest: AddExampleRequest) -> RequestBuilder<AddExampleRequest> {
        var path = "/rpc/{modelHistoryServerId}/model/exampleForBatch"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = addExampleRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AddExampleRequest>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds an example to a minibatch
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter exampleEntity: (body) The example to add to the minibatch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addExampleToMinibatch(modelHistoryServerId: String, exampleEntity: ExampleEntity, completion: @escaping ((_ data: ExampleEntity?, _ error: ErrorResponse?) -> Void)) {
        addExampleToMinibatchWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, exampleEntity: exampleEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds an example to a minibatch
     - POST /rpc/{modelHistoryServerId}/model/example
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "exampleId" : "exampleId",
  "created" : 1,
  "miniBatchId" : "miniBatchId",
  "miniBatchVersion" : 5,
  "rowNumber" : 6,
  "exampleVersion" : 0
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter exampleEntity: (body) The example to add to the minibatch 
     - returns: RequestBuilder<ExampleEntity> 
     */
    open class func addExampleToMinibatchWithRequestBuilder(modelHistoryServerId: String, exampleEntity: ExampleEntity) -> RequestBuilder<ExampleEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/example"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = exampleEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExampleEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add an experiment, given an experiment entity
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentEntity: (body) The experiment entity to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addExperiment(modelHistoryServerId: String, experimentEntity: ExperimentEntity, completion: @escaping ((_ data: ExperimentEntity?, _ error: ErrorResponse?) -> Void)) {
        addExperimentWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, experimentEntity: experimentEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add an experiment, given an experiment entity
     - POST /rpc/{modelHistoryServerId}/experiment
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentEntity: (body) The experiment entity to add 
     - returns: RequestBuilder<ExperimentEntity> 
     */
    open class func addExperimentWithRequestBuilder(modelHistoryServerId: String, experimentEntity: ExperimentEntity) -> RequestBuilder<ExperimentEntity> {
        var path = "/rpc/{modelHistoryServerId}/experiment"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = experimentEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExperimentEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_addFeedbackBinary: String { 
        case numpy = "numpy"
        case nd4j = "nd4j"
    }

    /**
     - parameter id: (path) Batch ID to retrain the model with and get feedback for. 
     - parameter type: (path) The type of the labels array. 
     - parameter file: (form) The labels file to upload. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addFeedbackBinary(id: String, type: ModelType_addFeedbackBinary, file: URL? = nil, completion: @escaping ((_ data: FeedbackResponse?, _ error: ErrorResponse?) -> Void)) {
        addFeedbackBinaryWithRequestBuilder(id: id, type: type, file: file).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /feedback/{id}/{type}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "accumulatedSoFar" : 6,
  "retrainThreshold" : 0
}}]
     - parameter id: (path) Batch ID to retrain the model with and get feedback for. 
     - parameter type: (path) The type of the labels array. 
     - parameter file: (form) The labels file to upload. (optional)
     - returns: RequestBuilder<FeedbackResponse> 
     */
    open class func addFeedbackBinaryWithRequestBuilder(id: String, type: ModelType_addFeedbackBinary, file: URL? = nil) -> RequestBuilder<FeedbackResponse> {
        var path = "/feedback/{id}/{type}"
        let idPreEscape = "\(id)"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FeedbackResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the retraining feedback for the given batch ID.
     - parameter id: (path) Batch ID to retrain the model with and get feedback for. 
     - parameter labels: (body) The associated labels (one-hot vectors) with the batch for retraining. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addFeedbackJson(id: String, labels: [[Double]]? = nil, completion: @escaping ((_ data: FeedbackResponse?, _ error: ErrorResponse?) -> Void)) {
        addFeedbackJsonWithRequestBuilder(id: id, labels: labels).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the retraining feedback for the given batch ID.
     - POST /feedback/{id}/json
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "accumulatedSoFar" : 6,
  "retrainThreshold" : 0
}}]
     - parameter id: (path) Batch ID to retrain the model with and get feedback for. 
     - parameter labels: (body) The associated labels (one-hot vectors) with the batch for retraining. (optional)
     - returns: RequestBuilder<FeedbackResponse> 
     */
    open class func addFeedbackJsonWithRequestBuilder(id: String, labels: [[Double]]? = nil) -> RequestBuilder<FeedbackResponse> {
        var path = "/feedback/{id}/json"
        let idPreEscape = "\(id)"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = labels?.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FeedbackResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a minibatch
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter minibatchEntity: (body) The minibatch entity to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addMinibatch(modelHistoryServerId: String, minibatchEntity: MinibatchEntity, completion: @escaping ((_ data: MinibatchEntity?, _ error: ErrorResponse?) -> Void)) {
        addMinibatchWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, minibatchEntity: minibatchEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a minibatch
     - POST /rpc/{modelHistoryServerId}/model/minibatch
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "evalId" : "evalId",
  "batchVersion" : 6,
  "evalVersion" : 0,
  "miniBatchId" : "miniBatchId"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter minibatchEntity: (body) The minibatch entity to add 
     - returns: RequestBuilder<MinibatchEntity> 
     */
    open class func addMinibatchWithRequestBuilder(modelHistoryServerId: String, minibatchEntity: MinibatchEntity) -> RequestBuilder<MinibatchEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/minibatch"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = minibatchEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MinibatchEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds an evaluation feedback to the model against a given minibatch id.
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelFeedBackRequest: (body) The model feedback request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addModelFeedback(modelHistoryServerId: String, modelFeedBackRequest: ModelFeedBackRequest, completion: @escaping ((_ data: ModelFeedBackRequest?, _ error: ErrorResponse?) -> Void)) {
        addModelFeedbackWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelFeedBackRequest: modelFeedBackRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds an evaluation feedback to the model against a given minibatch id.
     - POST /rpc/{modelHistoryServerId}/model/feedback
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "correct" : "[\"0\", \"0\", \"2\"]",
  "guesses" : "[\"0\", \"1\", \"2\"]",
  "batchId" : "batchId"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelFeedBackRequest: (body) The model feedback request object 
     - returns: RequestBuilder<ModelFeedBackRequest> 
     */
    open class func addModelFeedbackWithRequestBuilder(modelHistoryServerId: String, modelFeedBackRequest: ModelFeedBackRequest) -> RequestBuilder<ModelFeedBackRequest> {
        var path = "/rpc/{modelHistoryServerId}/model/feedback"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = modelFeedBackRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelFeedBackRequest>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add a model history / workspace
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter addModelHistoryRequest: (body) The model history request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addModelHistory(modelHistoryServerId: String, addModelHistoryRequest: AddModelHistoryRequest, completion: @escaping ((_ data: ModelHistoryEntity?, _ error: ErrorResponse?) -> Void)) {
        addModelHistoryWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, addModelHistoryRequest: addModelHistoryRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a model history / workspace
     - POST /rpc/{modelHistoryServerId}/modelhistory
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modelName" : "modelName",
  "modelHistoryId" : "modelHistoryId",
  "created" : 0,
  "modelLabels" : "modelLabels"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter addModelHistoryRequest: (body) The model history request object 
     - returns: RequestBuilder<ModelHistoryEntity> 
     */
    open class func addModelHistoryWithRequestBuilder(modelHistoryServerId: String, addModelHistoryRequest: AddModelHistoryRequest) -> RequestBuilder<ModelHistoryEntity> {
        var path = "/rpc/{modelHistoryServerId}/modelhistory"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = addModelHistoryRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelHistoryEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a model
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceEntity: (body) The object encapsulating the model instance id and evaluation type to aggregate 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addModelInstance(modelHistoryServerId: String, modelInstanceEntity: ModelInstanceEntity, completion: @escaping ((_ data: ModelInstanceEntity?, _ error: ErrorResponse?) -> Void)) {
        addModelInstanceWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelInstanceEntity: modelInstanceEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a model
     - POST /rpc/{modelHistoryServerId}/model
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "evalId" : "evalId",
  "modelName" : "modelName",
  "originalModelId" : "originalModelId",
  "modelId" : "modelId",
  "created" : 0,
  "modelVersion" : "modelVersion",
  "modelLabels" : "modelLabels",
  "etlJson" : "etlJson",
  "experimentId" : "experimentId",
  "inputFormats" : "inputFormats",
  "uri" : "http://example.com/aeiou",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceEntity: (body) The object encapsulating the model instance id and evaluation type to aggregate 
     - returns: RequestBuilder<ModelInstanceEntity> 
     */
    open class func addModelInstanceWithRequestBuilder(modelHistoryServerId: String, modelInstanceEntity: ModelInstanceEntity) -> RequestBuilder<ModelInstanceEntity> {
        var path = "/rpc/{modelHistoryServerId}/model"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = modelInstanceEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelInstanceEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a resource
     - parameter addResourceRequest: (body) The Add resource request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addResource(addResourceRequest: AddResourceRequest, completion: @escaping ((_ data: Any?, _ error: ErrorResponse?) -> Void)) {
        addResourceWithRequestBuilder(addResourceRequest: addResourceRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a resource
     - POST /resources/add/resource
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example="{}"}]
     - parameter addResourceRequest: (body) The Add resource request object 
     - returns: RequestBuilder<Any> 
     */
    open class func addResourceWithRequestBuilder(addResourceRequest: AddResourceRequest) -> RequestBuilder<Any> {
        let path = "/resources/add/resource"
        let URLString = SkilClientAPI.basePath + path
        let parameters = addResourceRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a resource group
     - parameter groupName: (body) Name of the resource group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addResourceGroup(groupName: String, completion: @escaping ((_ data: ResourceGroup?, _ error: ErrorResponse?) -> Void)) {
        addResourceGroupWithRequestBuilder(groupName: groupName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a resource group
     - POST /resources/add/group
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "groupName" : "groupName",
  "added" : 6,
  "groupId" : 0,
  "updated" : 1
}}]
     - parameter groupName: (body) Name of the resource group 
     - returns: RequestBuilder<ResourceGroup> 
     */
    open class func addResourceGroupWithRequestBuilder(groupName: String) -> RequestBuilder<ResourceGroup> {
        let path = "/resources/add/group"
        let URLString = SkilClientAPI.basePath + path
        let parameters = groupName.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResourceGroup>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a resource to a resource group
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter resourceId: (path) ID of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addResourceToGroup(resourceGroupId: Int64, resourceId: Int64, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        addResourceToGroupWithRequestBuilder(resourceGroupId: resourceGroupId, resourceId: resourceId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Adds a resource to a resource group
     - GET /resources/add/resourcetogroup/{resourceGroupId}/{resourceId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter resourceId: (path) ID of the resource 
     - returns: RequestBuilder<Void> 
     */
    open class func addResourceToGroupWithRequestBuilder(resourceGroupId: Int64, resourceId: Int64) -> RequestBuilder<Void> {
        var path = "/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}"
        let resourceGroupIdPreEscape = "\(resourceGroupId)"
        let resourceGroupIdPostEscape = resourceGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceGroupId}", with: resourceGroupIdPostEscape, options: .literal, range: nil)
        let resourceIdPreEscape = "\(resourceId)"
        let resourceIdPostEscape = resourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceId}", with: resourceIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Aggregates the evaluaition results of a model instance, based on the evaluation type
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter aggregatePrediction: (body) The object encapsulating the model instance id and evaluation type to aggregate 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func aggregateModelResults(modelHistoryServerId: String, aggregatePrediction: AggregatePrediction, completion: @escaping ((_ data: EvaluationResultsEntity?, _ error: ErrorResponse?) -> Void)) {
        aggregateModelResultsWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, aggregatePrediction: aggregatePrediction).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Aggregates the evaluaition results of a model instance, based on the evaluation type
     - POST /rpc/{modelHistoryServerId}/model/aggregateresults
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "r2" : 2.027123023002322,
  "binaryThresholds" : "binaryThresholds",
  "created" : 0,
  "precision" : 1.4658129805029452,
  "accuracy" : 5.637376656633329,
  "f1" : 6.027456183070403,
  "meanAbsoluteError" : 9.301444243932576,
  "auc" : 7.061401241503109,
  "evaluation" : "evaluation",
  "evalId" : "evalId",
  "meanRelativeError" : 3.616076749251911,
  "evalVersion" : 4,
  "evalName" : "evalName",
  "modelInstanceId" : "modelInstanceId",
  "recall" : 5.962133916683182,
  "rmse" : 2.3021358869347655,
  "binaryThreshold" : 7.386281948385884
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter aggregatePrediction: (body) The object encapsulating the model instance id and evaluation type to aggregate 
     - returns: RequestBuilder<EvaluationResultsEntity> 
     */
    open class func aggregateModelResultsWithRequestBuilder(modelHistoryServerId: String, aggregatePrediction: AggregatePrediction) -> RequestBuilder<EvaluationResultsEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/aggregateresults"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = aggregatePrediction.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationResultsEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Change user's password
     - parameter userId: (path) User&#39;s ID 
     - parameter changePasswordRequest: (body) Password details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changeUserPassword(userId: String, changePasswordRequest: ChangePasswordRequest, completion: @escaping ((_ data: User?, _ error: ErrorResponse?) -> Void)) {
        changeUserPasswordWithRequestBuilder(userId: userId, changePasswordRequest: changePasswordRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Change user's password
     - POST /user/{userId}/password
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "password" : "password",
  "role" : "role",
  "scope" : "scope",
  "userName" : "userName",
  "userId" : "userId"
}}]
     - parameter userId: (path) User&#39;s ID 
     - parameter changePasswordRequest: (body) Password details. 
     - returns: RequestBuilder<User> 
     */
    open class func changeUserPasswordWithRequestBuilder(userId: String, changePasswordRequest: ChangePasswordRequest) -> RequestBuilder<User> {
        var path = "/user/{userId}/password"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = changePasswordRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Use the deployed model to classify the input
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func classify(body: Prediction, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: ClassificationResult?, _ error: ErrorResponse?) -> Void)) {
        classifyWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Use the deployed model to classify the input
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/classify
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "minibatchId" : "minibatchId",
  "results" : [ 0, 0 ],
  "probabilities" : [ 0.452, 0.452 ]
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<ClassificationResult> 
     */
    open class func classifyWithRequestBuilder(body: Prediction, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<ClassificationResult> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classify"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ClassificationResult>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Same as /classify but returns the output as Base64NDArrayBody
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func classifyarray(body: Prediction, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: Base64NDArrayBody?, _ error: ErrorResponse?) -> Void)) {
        classifyarrayWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Same as /classify but returns the output as Base64NDArrayBody
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "ndarray" : "ndarray"
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<Base64NDArrayBody> 
     */
    open class func classifyarrayWithRequestBuilder(body: Prediction, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<Base64NDArrayBody> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Base64NDArrayBody>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Use the deployed model to classify the input, using input image file from multipart form data.
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter image: (form) The file to upload. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func classifyimage(deploymentName: String, versionName: String, modelName: String, image: URL? = nil, completion: @escaping ((_ data: ClassificationResult?, _ error: ErrorResponse?) -> Void)) {
        classifyimageWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, modelName: modelName, image: image).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Use the deployed model to classify the input, using input image file from multipart form data.
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "minibatchId" : "minibatchId",
  "results" : [ 0, 0 ],
  "probabilities" : [ 0.452, 0.452 ]
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter image: (form) The file to upload. (optional)
     - returns: RequestBuilder<ClassificationResult> 
     */
    open class func classifyimageWithRequestBuilder(deploymentName: String, versionName: String, modelName: String, image: URL? = nil) -> RequestBuilder<ClassificationResult> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "image": image
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ClassificationResult>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Clears the accumulated data for retraining.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clearState(completion: @escaping ((_ data: FeedbackResponse?, _ error: ErrorResponse?) -> Void)) {
        clearStateWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Clears the accumulated data for retraining.
     - POST /clear
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "accumulatedSoFar" : 6,
  "retrainThreshold" : 0
}}]
     - returns: RequestBuilder<FeedbackResponse> 
     */
    open class func clearStateWithRequestBuilder() -> RequestBuilder<FeedbackResponse> {
        let path = "/clear"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FeedbackResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter jobIdOrType
     */
    public enum JobIdOrType_createJob: String { 
        case training = "TRAINING"
        case inference = "INFERENCE"
    }

    /**
     Create a job
     - parameter jobIdOrType: (path) Job Type 
     - parameter createJobRequest: (body) Create job request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createJob(jobIdOrType: JobIdOrType_createJob, createJobRequest: CreateJobRequest, completion: @escaping ((_ data: JobEntity?, _ error: ErrorResponse?) -> Void)) {
        createJobWithRequestBuilder(jobIdOrType: jobIdOrType, createJobRequest: createJobRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a job
     - POST /jobs/{jobIdOrType}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "storageResourceId" : 1,
  "jobId" : 0,
  "outputFileName" : "outputFileName",
  "jobArgs" : "jobArgs",
  "runId" : "runId",
  "jobType" : "TRAINING",
  "computeResourceId" : 6,
  "status" : "PENDING"
}}]
     - parameter jobIdOrType: (path) Job Type 
     - parameter createJobRequest: (body) Create job request object 
     - returns: RequestBuilder<JobEntity> 
     */
    open class func createJobWithRequestBuilder(jobIdOrType: JobIdOrType_createJob, createJobRequest: CreateJobRequest) -> RequestBuilder<JobEntity> {
        var path = "/jobs/{jobIdOrType}"
        let jobIdOrTypePreEscape = "\(jobIdOrType.rawValue)"
        let jobIdOrTypePostEscape = jobIdOrTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobIdOrType}", with: jobIdOrTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = createJobRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JobEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Creates model History
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryEntity: (body) The model history entity 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createModelHistory(modelHistoryServerId: String, modelHistoryEntity: ModelHistoryEntity, completion: @escaping ((_ data: ModelHistoryEntity?, _ error: ErrorResponse?) -> Void)) {
        createModelHistoryWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelHistoryEntity: modelHistoryEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates model History
     - POST /rpc/{modelHistoryServerId}/model/revisions
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modelName" : "modelName",
  "modelHistoryId" : "modelHistoryId",
  "created" : 0,
  "modelLabels" : "modelLabels"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryEntity: (body) The model history entity 
     - returns: RequestBuilder<ModelHistoryEntity> 
     */
    open class func createModelHistoryWithRequestBuilder(modelHistoryServerId: String, modelHistoryEntity: ModelHistoryEntity) -> RequestBuilder<ModelHistoryEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/revisions"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = modelHistoryEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelHistoryEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete credentials given an ID
     - parameter credentialId: (path) Credentials ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCredentialsById(credentialId: Int64, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteCredentialsByIdWithRequestBuilder(credentialId: credentialId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Delete credentials given an ID
     - DELETE /resources/credentials/{credentialId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter credentialId: (path) Credentials ID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteCredentialsByIdWithRequestBuilder(credentialId: Int64) -> RequestBuilder<Void> {
        var path = "/resources/credentials/{credentialId}"
        let credentialIdPreEscape = "\(credentialId)"
        let credentialIdPostEscape = credentialIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{credentialId}", with: credentialIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deletes an experiment, given an experiment entity
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExperiment(modelHistoryServerId: String, experimentID: String, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        deleteExperimentWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, experimentID: experimentID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deletes an experiment, given an experiment entity
     - DELETE /rpc/{modelHistoryServerId}/experiment/{experimentID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "status" : "status"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment to delete 
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func deleteExperimentWithRequestBuilder(modelHistoryServerId: String, experimentID: String) -> RequestBuilder<InlineResponse200> {
        var path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let experimentIDPreEscape = "\(experimentID)"
        let experimentIDPostEscape = experimentIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{experimentID}", with: experimentIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deletes a job given its ID
     - parameter jobIdOrType: (path) Job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteJobById(jobIdOrType: Int64, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteJobByIdWithRequestBuilder(jobIdOrType: jobIdOrType).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Deletes a job given its ID
     - DELETE /jobs/{jobIdOrType}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter jobIdOrType: (path) Job ID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteJobByIdWithRequestBuilder(jobIdOrType: Int64) -> RequestBuilder<Void> {
        var path = "/jobs/{jobIdOrType}"
        let jobIdOrTypePreEscape = "\(jobIdOrType)"
        let jobIdOrTypePostEscape = jobIdOrTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobIdOrType}", with: jobIdOrTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a model by deployment and model id
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteModel(deploymentId: String, modelId: String, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        deleteModelWithRequestBuilder(deploymentId: deploymentId, modelId: modelId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete a model by deployment and model id
     - DELETE /deployment/{deploymentId}/model/{modelId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "status" : "status"
}}]
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func deleteModelWithRequestBuilder(deploymentId: String, modelId: String) -> RequestBuilder<InlineResponse200> {
        var path = "/deployment/{deploymentId}/model/{modelId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let modelIdPreEscape = "\(modelId)"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deletes a model history / workspace, given its ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) the GUID of the model history / workspace to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteModelHistory(modelHistoryServerId: String, modelHistoryID: String, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        deleteModelHistoryWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelHistoryID: modelHistoryID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deletes a model history / workspace, given its ID
     - DELETE /rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "status" : "status"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) the GUID of the model history / workspace to delete 
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func deleteModelHistoryWithRequestBuilder(modelHistoryServerId: String, modelHistoryID: String) -> RequestBuilder<InlineResponse200> {
        var path = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelHistoryIDPreEscape = "\(modelHistoryID)"
        let modelHistoryIDPostEscape = modelHistoryIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryID}", with: modelHistoryIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deletes a model instance, given its ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceID: (path) GUID of the model instance to delete. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteModelInstance(modelHistoryServerId: String, modelInstanceID: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteModelInstanceWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelInstanceID: modelInstanceID).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Deletes a model instance, given its ID
     - DELETE /rpc/{modelHistoryServerId}/model/{modelInstanceID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceID: (path) GUID of the model instance to delete. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteModelInstanceWithRequestBuilder(modelHistoryServerId: String, modelInstanceID: String) -> RequestBuilder<Void> {
        var path = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelInstanceIDPreEscape = "\(modelInstanceID)"
        let modelInstanceIDPostEscape = modelInstanceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelInstanceID}", with: modelInstanceIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete the resource with the specified resource ID
     - parameter resourceId: (path) ID of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteResourceById(resourceId: Int64, completion: @escaping ((_ data: Resource?, _ error: ErrorResponse?) -> Void)) {
        deleteResourceByIdWithRequestBuilder(resourceId: resourceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete the resource with the specified resource ID
     - DELETE /resources/remove/resource/{resourceId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
}}]
     - parameter resourceId: (path) ID of the resource 
     - returns: RequestBuilder<Resource> 
     */
    open class func deleteResourceByIdWithRequestBuilder(resourceId: Int64) -> RequestBuilder<Resource> {
        var path = "/resources/remove/resource/{resourceId}"
        let resourceIdPreEscape = "\(resourceId)"
        let resourceIdPostEscape = resourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceId}", with: resourceIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Resource>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Removes a resource from a resource group
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter resourceId: (path) ID of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteResourceFromGroup(resourceGroupId: Int64, resourceId: Int64, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteResourceFromGroupWithRequestBuilder(resourceGroupId: resourceGroupId, resourceId: resourceId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Removes a resource from a resource group
     - GET /resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter resourceId: (path) ID of the resource 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteResourceFromGroupWithRequestBuilder(resourceGroupId: Int64, resourceId: Int64) -> RequestBuilder<Void> {
        var path = "/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}"
        let resourceGroupIdPreEscape = "\(resourceGroupId)"
        let resourceGroupIdPostEscape = resourceGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceGroupId}", with: resourceGroupIdPostEscape, options: .literal, range: nil)
        let resourceIdPreEscape = "\(resourceId)"
        let resourceIdPostEscape = resourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceId}", with: resourceIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete the resource group with the specified resource group ID
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteResourceGroupById(resourceGroupId: Int64, completion: @escaping ((_ data: ResourceGroup?, _ error: ErrorResponse?) -> Void)) {
        deleteResourceGroupByIdWithRequestBuilder(resourceGroupId: resourceGroupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete the resource group with the specified resource group ID
     - DELETE /resources/remove/group/{resourceGroupId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "groupName" : "groupName",
  "added" : 6,
  "groupId" : 0,
  "updated" : 1
}}]
     - parameter resourceGroupId: (path) ID of the resource group 
     - returns: RequestBuilder<ResourceGroup> 
     */
    open class func deleteResourceGroupByIdWithRequestBuilder(resourceGroupId: Int64) -> RequestBuilder<ResourceGroup> {
        var path = "/resources/remove/group/{resourceGroupId}"
        let resourceGroupIdPreEscape = "\(resourceGroupId)"
        let resourceGroupIdPostEscape = resourceGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceGroupId}", with: resourceGroupIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResourceGroup>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deploy a model in a deployment group.
     - parameter deploymentId: (path) ID deployment group 
     - parameter body: (body) the model import request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deployModel(deploymentId: String, body: ImportModelRequest, completion: @escaping ((_ data: ModelEntity?, _ error: ErrorResponse?) -> Void)) {
        deployModelWithRequestBuilder(deploymentId: deploymentId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deploy a model in a deployment group.
     - POST /deployment/{deploymentId}/model
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "launchPolicy" : "{}",
  "created" : 6,
  "modelState" : "CREATED",
  "scale" : 5.63737665663332876420099637471139430999755859375,
  "modelType" : "transform",
  "fileLocation" : "fileLocation",
  "jvmArgs" : "jvmArgs",
  "labelsFileLocation" : "labelsFileLocation",
  "extraArgs" : "extraArgs",
  "deploymentId" : 5,
  "name" : "name",
  "subType" : "subType",
  "id" : 0,
  "state" : "created",
  "updated" : 1
}}]
     - parameter deploymentId: (path) ID deployment group 
     - parameter body: (body) the model import request 
     - returns: RequestBuilder<ModelEntity> 
     */
    open class func deployModelWithRequestBuilder(deploymentId: String, body: ImportModelRequest) -> RequestBuilder<ModelEntity> {
        var path = "/deployment/{deploymentId}/model"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a new deployment group.
     - parameter body: (body) the deployment request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deploymentCreate(body: CreateDeploymentRequest, completion: @escaping ((_ data: DeploymentResponse?, _ error: ErrorResponse?) -> Void)) {
        deploymentCreateWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a new deployment group.
     - POST /deployment
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "id" : "id",
  "body" : {
    "models" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "transforms" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "knn" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ]
  },
  "deploymentSlug" : "deploymentSlug",
  "status" : "status"
}}]
     - parameter body: (body) the deployment request 
     - returns: RequestBuilder<DeploymentResponse> 
     */
    open class func deploymentCreateWithRequestBuilder(body: CreateDeploymentRequest) -> RequestBuilder<DeploymentResponse> {
        let path = "/deployment"
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeploymentResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a deployment by id
     - parameter deploymentId: (path) Id of the deployment group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deploymentDelete(deploymentId: String, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        deploymentDeleteWithRequestBuilder(deploymentId: deploymentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete a deployment by id
     - DELETE /deployment/{deploymentId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "status" : "status"
}}]
     - parameter deploymentId: (path) Id of the deployment group 
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func deploymentDeleteWithRequestBuilder(deploymentId: String) -> RequestBuilder<InlineResponse200> {
        var path = "/deployment/{deploymentId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a deployment details by id
     - parameter deploymentId: (path) Id of the deployment group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deploymentGet(deploymentId: String, completion: @escaping ((_ data: DeploymentResponse?, _ error: ErrorResponse?) -> Void)) {
        deploymentGetWithRequestBuilder(deploymentId: deploymentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a deployment details by id
     - GET /deployment/{deploymentId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "id" : "id",
  "body" : {
    "models" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "transforms" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "knn" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ]
  },
  "deploymentSlug" : "deploymentSlug",
  "status" : "status"
}}]
     - parameter deploymentId: (path) Id of the deployment group 
     - returns: RequestBuilder<DeploymentResponse> 
     */
    open class func deploymentGetWithRequestBuilder(deploymentId: String) -> RequestBuilder<DeploymentResponse> {
        var path = "/deployment/{deploymentId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeploymentResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a list of deployments
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deployments(completion: @escaping ((_ data: [DeploymentResponse]?, _ error: ErrorResponse?) -> Void)) {
        deploymentsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list of deployments
     - GET /deployments
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "id" : "id",
  "body" : {
    "models" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "transforms" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "knn" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ]
  },
  "deploymentSlug" : "deploymentSlug",
  "status" : "status"
}, {
  "name" : "name",
  "id" : "id",
  "body" : {
    "models" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "transforms" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "knn" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ]
  },
  "deploymentSlug" : "deploymentSlug",
  "status" : "status"
} ]}]
     - returns: RequestBuilder<[DeploymentResponse]> 
     */
    open class func deploymentsWithRequestBuilder() -> RequestBuilder<[DeploymentResponse]> {
        let path = "/deployments"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[DeploymentResponse]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Detect the objects, given a (input) prediction request
     - parameter id: (form) the GUID for mapping the results in the detections 
     - parameter needsPreprocessing: (form) (true) if the image needs preprocessing 
     - parameter threshold: (form) A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. 
     - parameter file: (form) the image file to detect objects from 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func detectobjects(id: String, needsPreprocessing: Bool, threshold: Float, file: URL, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: DetectionResult?, _ error: ErrorResponse?) -> Void)) {
        detectobjectsWithRequestBuilder(id: id, needsPreprocessing: needsPreprocessing, threshold: threshold, file: file, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Detect the objects, given a (input) prediction request
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "objects" : [ {
    "centerY" : 6.0274563,
    "centerX" : 0.8008282,
    "predictedClasses" : [ "predictedClasses", "predictedClasses" ],
    "confidences" : [ 5.637377, 5.637377 ],
    "width" : 1.4658129,
    "height" : 5.962134
  }, {
    "centerY" : 6.0274563,
    "centerX" : 0.8008282,
    "predictedClasses" : [ "predictedClasses", "predictedClasses" ],
    "confidences" : [ 5.637377, 5.637377 ],
    "width" : 1.4658129,
    "height" : 5.962134
  } ],
  "id" : "id"
}}]
     - parameter id: (form) the GUID for mapping the results in the detections 
     - parameter needsPreprocessing: (form) (true) if the image needs preprocessing 
     - parameter threshold: (form) A threshold, indicating the required surety for detecting a bounding box. For example, a threshold of 0.1 might give thousand bounding boxes for an image and a threshold of 0.99 might give none. 
     - parameter file: (form) the image file to detect objects from 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<DetectionResult> 
     */
    open class func detectobjectsWithRequestBuilder(id: String, needsPreprocessing: Bool, threshold: Float, file: URL, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<DetectionResult> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "id": id,
            "needsPreprocessing": needsPreprocessing,
            "threshold": threshold,
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DetectionResult>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Download the output file from the job's execution. This will ONLY work if the job's run status is 'COMPLETE'.
     - parameter jobId: (path) Job ID 
     - parameter downloadOutputFileRequest: (body) Download output file request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func downloadJobOutputFile(jobId: Int64, downloadOutputFileRequest: DownloadOutputFileRequest, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        downloadJobOutputFileWithRequestBuilder(jobId: jobId, downloadOutputFileRequest: downloadOutputFileRequest).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Download the output file from the job's execution. This will ONLY work if the job's run status is 'COMPLETE'.
     - POST /jobs/{jobId}/outputfile
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter jobId: (path) Job ID 
     - parameter downloadOutputFileRequest: (body) Download output file request object 
     - returns: RequestBuilder<Void> 
     */
    open class func downloadJobOutputFileWithRequestBuilder(jobId: Int64, downloadOutputFileRequest: DownloadOutputFileRequest) -> RequestBuilder<Void> {
        var path = "/jobs/{jobId}/outputfile"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = downloadOutputFileRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Generate new auth token
     - parameter tokenGenerateRequest: (body) Auth token details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func generateAuthToken(tokenGenerateRequest: TokenGenerateRequest, completion: @escaping ((_ data: Token?, _ error: ErrorResponse?) -> Void)) {
        generateAuthTokenWithRequestBuilder(tokenGenerateRequest: tokenGenerateRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Generate new auth token
     - POST /auth/token
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "isRevoked" : 5,
  "tokenId" : 0,
  "expire" : 1,
  "issued" : 6,
  "userId" : "userId",
  "token" : "token"
}}]
     - parameter tokenGenerateRequest: (body) Auth token details. 
     - returns: RequestBuilder<Token> 
     */
    open class func generateAuthTokenWithRequestBuilder(tokenGenerateRequest: TokenGenerateRequest) -> RequestBuilder<Token> {
        let path = "/auth/token"
        let URLString = SkilClientAPI.basePath + path
        let parameters = tokenGenerateRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Token>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get a list of all available jobs
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllJobs(completion: @escaping ((_ data: [JobEntity]?, _ error: ErrorResponse?) -> Void)) {
        getAllJobsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list of all available jobs
     - GET /jobs
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "storageResourceId" : 1,
  "jobId" : 0,
  "outputFileName" : "outputFileName",
  "jobArgs" : "jobArgs",
  "runId" : "runId",
  "jobType" : "TRAINING",
  "computeResourceId" : 6,
  "status" : "PENDING"
}, {
  "storageResourceId" : 1,
  "jobId" : 0,
  "outputFileName" : "outputFileName",
  "jobArgs" : "jobArgs",
  "runId" : "runId",
  "jobType" : "TRAINING",
  "computeResourceId" : 6,
  "status" : "PENDING"
} ]}]
     - returns: RequestBuilder<[JobEntity]> 
     */
    open class func getAllJobsWithRequestBuilder() -> RequestBuilder<[JobEntity]> {
        let path = "/jobs"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[JobEntity]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter accept
     */
    public enum Accept_getArray: String { 
        case json = "application/json"
        case octetStream = "application/octet-stream"
    }

    /**
     * enum for parameter arrayType
     */
    public enum ArrayType_getArray: String { 
        case json = "json"
        case numpy = "numpy"
        case nd4j = "nd4j"
    }

    /**
     Get the memory mapped array based on the array type.
     - parameter accept: (header)  
     - parameter arrayType: (path) The format in which the memory mapped array is returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArray(accept: Accept_getArray, arrayType: ArrayType_getArray, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        getArrayWithRequestBuilder(accept: accept, arrayType: arrayType).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Get the memory mapped array based on the array type.
     - POST /array/{arrayType}
     - The array is specified through a file path, in the configuration object, during model server deployment.
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter accept: (header)  
     - parameter arrayType: (path) The format in which the memory mapped array is returned. 
     - returns: RequestBuilder<Void> 
     */
    open class func getArrayWithRequestBuilder(accept: Accept_getArray, arrayType: ArrayType_getArray) -> RequestBuilder<Void> {
        var path = "/array/{arrayType}"
        let arrayTypePreEscape = "\(arrayType.rawValue)"
        let arrayTypePostEscape = arrayTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{arrayType}", with: arrayTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "accept": accept.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_getArrayIndices: String { 
        case applicationJson = "application/json"
    }

    /**
     * enum for parameter accept
     */
    public enum Accept_getArrayIndices: String { 
        case json = "application/json"
        case octetStream = "application/octet-stream"
    }

    /**
     * enum for parameter arrayType
     */
    public enum ArrayType_getArrayIndices: String { 
        case json = "json"
        case numpy = "numpy"
        case nd4j = "nd4j"
    }

    /**
     Get the memory mapped array indices based on the array type.
     - parameter contentType: (header) The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. 
     - parameter accept: (header)  
     - parameter arrayType: (path) Format in which the memory mapped array is returned in. 
     - parameter input: (body) Input indices array (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArrayIndices(contentType: ContentType_getArrayIndices, accept: Accept_getArrayIndices, arrayType: ArrayType_getArrayIndices, input: String? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        getArrayIndicesWithRequestBuilder(contentType: contentType, accept: accept, arrayType: arrayType, input: input).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Get the memory mapped array indices based on the array type.
     - POST /array/indices/{arrayType}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter contentType: (header) The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. 
     - parameter accept: (header)  
     - parameter arrayType: (path) Format in which the memory mapped array is returned in. 
     - parameter input: (body) Input indices array (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getArrayIndicesWithRequestBuilder(contentType: ContentType_getArrayIndices, accept: Accept_getArrayIndices, arrayType: ArrayType_getArrayIndices, input: String? = nil) -> RequestBuilder<Void> {
        var path = "/array/indices/{arrayType}"
        let arrayTypePreEscape = "\(arrayType.rawValue)"
        let arrayTypePostEscape = arrayTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{arrayType}", with: arrayTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = input?.encodeToJSON()

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.rawValue,
            "accept": accept.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     * enum for parameter accept
     */
    public enum Accept_getArrayRange: String { 
        case json = "application/json"
        case octetStream = "application/octet-stream"
    }

    /**
     * enum for parameter arrayType
     */
    public enum ArrayType_getArrayRange: String { 
        case json = "json"
        case numpy = "numpy"
        case nd4j = "nd4j"
    }

    /**
     Get the memory mapped array within a range based on the array type.
     - parameter accept: (header)  
     - parameter arrayType: (path) Format in which the memory mapped array is returned in. 
     - parameter from: (path)  
     - parameter to: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArrayRange(accept: Accept_getArrayRange, arrayType: ArrayType_getArrayRange, from: Int32, to: Int32, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        getArrayRangeWithRequestBuilder(accept: accept, arrayType: arrayType, from: from, to: to).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Get the memory mapped array within a range based on the array type.
     - POST /array/range/{from}/{to}/{arrayType}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter accept: (header)  
     - parameter arrayType: (path) Format in which the memory mapped array is returned in. 
     - parameter from: (path)  
     - parameter to: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func getArrayRangeWithRequestBuilder(accept: Accept_getArrayRange, arrayType: ArrayType_getArrayRange, from: Int32, to: Int32) -> RequestBuilder<Void> {
        var path = "/array/range/{from}/{to}/{arrayType}"
        let arrayTypePreEscape = "\(arrayType.rawValue)"
        let arrayTypePostEscape = arrayTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{arrayType}", with: arrayTypePostEscape, options: .literal, range: nil)
        let fromPreEscape = "\(from)"
        let fromPostEscape = fromPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{from}", with: fromPostEscape, options: .literal, range: nil)
        let toPreEscape = "\(to)"
        let toPostEscape = toPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{to}", with: toPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "accept": accept.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get auth policy
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthPolicy(completion: @escaping ((_ data: AuthPolicy?, _ error: ErrorResponse?) -> Void)) {
        getAuthPolicyWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get auth policy
     - GET /auth/policy
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "@class" : "SimpleAuthPolicy"
}}]
     - returns: RequestBuilder<AuthPolicy> 
     */
    open class func getAuthPolicyWithRequestBuilder() -> RequestBuilder<AuthPolicy> {
        let path = "/auth/policy"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthPolicy>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the best model among the given model instance IDs, based on the evaluation type and column metric
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter bestModel: (body) Object encapsulating the model ids, eval type and column metric name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBestModelAmongModelIds(modelHistoryServerId: String, bestModel: BestModel, completion: @escaping ((_ data: ModelInstanceEntity?, _ error: ErrorResponse?) -> Void)) {
        getBestModelAmongModelIdsWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, bestModel: bestModel).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the best model among the given model instance IDs, based on the evaluation type and column metric
     - POST /rpc/{modelHistoryServerId}/model/best
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "evalId" : "evalId",
  "modelName" : "modelName",
  "originalModelId" : "originalModelId",
  "modelId" : "modelId",
  "created" : 0,
  "modelVersion" : "modelVersion",
  "modelLabels" : "modelLabels",
  "etlJson" : "etlJson",
  "experimentId" : "experimentId",
  "inputFormats" : "inputFormats",
  "uri" : "http://example.com/aeiou",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter bestModel: (body) Object encapsulating the model ids, eval type and column metric name 
     - returns: RequestBuilder<ModelInstanceEntity> 
     */
    open class func getBestModelAmongModelIdsWithRequestBuilder(modelHistoryServerId: String, bestModel: BestModel) -> RequestBuilder<ModelInstanceEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/best"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = bestModel.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelInstanceEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get credentials given an ID
     - parameter credentialId: (path) Credentials ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCredentialsById(credentialId: Int64, completion: @escaping ((_ data: ResourceCredentials?, _ error: ErrorResponse?) -> Void)) {
        getCredentialsByIdWithRequestBuilder(credentialId: credentialId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get credentials given an ID
     - GET /resources/credentials/{credentialId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "credentialId" : 0,
  "type" : "AWS",
  "uri" : "uri"
}}]
     - parameter credentialId: (path) Credentials ID 
     - returns: RequestBuilder<ResourceCredentials> 
     */
    open class func getCredentialsByIdWithRequestBuilder(credentialId: Int64) -> RequestBuilder<ResourceCredentials> {
        var path = "/resources/credentials/{credentialId}"
        let credentialIdPreEscape = "\(credentialId)"
        let credentialIdPostEscape = credentialIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{credentialId}", with: credentialIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResourceCredentials>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the current model being used for retraining.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentModel(completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        getCurrentModelWithRequestBuilder().execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Returns the current model being used for retraining.
     - GET /model
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - returns: RequestBuilder<Void> 
     */
    open class func getCurrentModelWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/model"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the list of evaluation results entity, given a model instance ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceID: (path) GUID of the model instance to get evaluation results for. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEvaluationForModelID(modelHistoryServerId: String, modelInstanceID: String, completion: @escaping ((_ data: [EvaluationResultsEntity]?, _ error: ErrorResponse?) -> Void)) {
        getEvaluationForModelIDWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelInstanceID: modelInstanceID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the list of evaluation results entity, given a model instance ID
     - GET /rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "r2" : 2.027123023002322,
  "binaryThresholds" : "binaryThresholds",
  "created" : 0,
  "precision" : 1.4658129805029452,
  "accuracy" : 5.637376656633329,
  "f1" : 6.027456183070403,
  "meanAbsoluteError" : 9.301444243932576,
  "auc" : 7.061401241503109,
  "evaluation" : "evaluation",
  "evalId" : "evalId",
  "meanRelativeError" : 3.616076749251911,
  "evalVersion" : 4,
  "evalName" : "evalName",
  "modelInstanceId" : "modelInstanceId",
  "recall" : 5.962133916683182,
  "rmse" : 2.3021358869347655,
  "binaryThreshold" : 7.386281948385884
}, {
  "r2" : 2.027123023002322,
  "binaryThresholds" : "binaryThresholds",
  "created" : 0,
  "precision" : 1.4658129805029452,
  "accuracy" : 5.637376656633329,
  "f1" : 6.027456183070403,
  "meanAbsoluteError" : 9.301444243932576,
  "auc" : 7.061401241503109,
  "evaluation" : "evaluation",
  "evalId" : "evalId",
  "meanRelativeError" : 3.616076749251911,
  "evalVersion" : 4,
  "evalName" : "evalName",
  "modelInstanceId" : "modelInstanceId",
  "recall" : 5.962133916683182,
  "rmse" : 2.3021358869347655,
  "binaryThreshold" : 7.386281948385884
} ]}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceID: (path) GUID of the model instance to get evaluation results for. 
     - returns: RequestBuilder<[EvaluationResultsEntity]> 
     */
    open class func getEvaluationForModelIDWithRequestBuilder(modelHistoryServerId: String, modelInstanceID: String) -> RequestBuilder<[EvaluationResultsEntity]> {
        var path = "/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelInstanceIDPreEscape = "\(modelInstanceID)"
        let modelInstanceIDPostEscape = modelInstanceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelInstanceID}", with: modelInstanceIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EvaluationResultsEntity]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets all the examples for a minibatch ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter minibatchId: (path) The GUID of the minibatch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExamplesForMinibatch(modelHistoryServerId: String, minibatchId: String, completion: @escaping ((_ data: [ExampleEntity]?, _ error: ErrorResponse?) -> Void)) {
        getExamplesForMinibatchWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, minibatchId: minibatchId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets all the examples for a minibatch ID
     - GET /rpc/{modelHistoryServerId}/model/example/{minibatchId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "exampleId" : "exampleId",
  "created" : 1,
  "miniBatchId" : "miniBatchId",
  "miniBatchVersion" : 5,
  "rowNumber" : 6,
  "exampleVersion" : 0
}, {
  "exampleId" : "exampleId",
  "created" : 1,
  "miniBatchId" : "miniBatchId",
  "miniBatchVersion" : 5,
  "rowNumber" : 6,
  "exampleVersion" : 0
} ]}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter minibatchId: (path) The GUID of the minibatch 
     - returns: RequestBuilder<[ExampleEntity]> 
     */
    open class func getExamplesForMinibatchWithRequestBuilder(modelHistoryServerId: String, minibatchId: String) -> RequestBuilder<[ExampleEntity]> {
        var path = "/rpc/{modelHistoryServerId}/model/example/{minibatchId}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let minibatchIdPreEscape = "\(minibatchId)"
        let minibatchIdPostEscape = minibatchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minibatchId}", with: minibatchIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ExampleEntity]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Obtain an experiment's details, given its ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment to obtain 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExperiment(modelHistoryServerId: String, experimentID: String, completion: @escaping ((_ data: ExperimentEntity?, _ error: ErrorResponse?) -> Void)) {
        getExperimentWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, experimentID: experimentID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Obtain an experiment's details, given its ID
     - GET /rpc/{modelHistoryServerId}/experiment/{experimentID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment to obtain 
     - returns: RequestBuilder<ExperimentEntity> 
     */
    open class func getExperimentWithRequestBuilder(modelHistoryServerId: String, experimentID: String) -> RequestBuilder<ExperimentEntity> {
        var path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let experimentIDPreEscape = "\(experimentID)"
        let experimentIDPostEscape = experimentIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{experimentID}", with: experimentIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExperimentEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Obtain all experiments for a model history / workspace
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) the GUID of the model history / workspace 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExperimentsForModelHistory(modelHistoryServerId: String, modelHistoryID: String, completion: @escaping ((_ data: ExperimentEntity?, _ error: ErrorResponse?) -> Void)) {
        getExperimentsForModelHistoryWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelHistoryID: modelHistoryID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Obtain all experiments for a model history / workspace
     - GET /rpc/{modelHistoryServerId}/experiments/{modelHistoryID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) the GUID of the model history / workspace 
     - returns: RequestBuilder<ExperimentEntity> 
     */
    open class func getExperimentsForModelHistoryWithRequestBuilder(modelHistoryServerId: String, modelHistoryID: String) -> RequestBuilder<ExperimentEntity> {
        var path = "/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelHistoryIDPreEscape = "\(modelHistoryID)"
        let modelHistoryIDPostEscape = modelHistoryIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryID}", with: modelHistoryIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExperimentEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a job by its ID
     - parameter jobIdOrType: (path) Job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJobById(jobIdOrType: Int64, completion: @escaping ((_ data: JobEntity?, _ error: ErrorResponse?) -> Void)) {
        getJobByIdWithRequestBuilder(jobIdOrType: jobIdOrType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a job by its ID
     - GET /jobs/{jobIdOrType}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "storageResourceId" : 1,
  "jobId" : 0,
  "outputFileName" : "outputFileName",
  "jobArgs" : "jobArgs",
  "runId" : "runId",
  "jobType" : "TRAINING",
  "computeResourceId" : 6,
  "status" : "PENDING"
}}]
     - parameter jobIdOrType: (path) Job ID 
     - returns: RequestBuilder<JobEntity> 
     */
    open class func getJobByIdWithRequestBuilder(jobIdOrType: Int64) -> RequestBuilder<JobEntity> {
        var path = "/jobs/{jobIdOrType}"
        let jobIdOrTypePreEscape = "\(jobIdOrType)"
        let jobIdOrTypePostEscape = jobIdOrTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobIdOrType}", with: jobIdOrTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JobEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the last evaluation specifications from the current model.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLastEvaluation(completion: @escaping ((_ data: EvaluationResultsEntity?, _ error: ErrorResponse?) -> Void)) {
        getLastEvaluationWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the last evaluation specifications from the current model.
     - GET /lastevaluation
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "r2" : 2.027123023002322,
  "binaryThresholds" : "binaryThresholds",
  "created" : 0,
  "precision" : 1.4658129805029452,
  "accuracy" : 5.637376656633329,
  "f1" : 6.027456183070403,
  "meanAbsoluteError" : 9.301444243932576,
  "auc" : 7.061401241503109,
  "evaluation" : "evaluation",
  "evalId" : "evalId",
  "meanRelativeError" : 3.616076749251911,
  "evalVersion" : 4,
  "evalName" : "evalName",
  "modelInstanceId" : "modelInstanceId",
  "recall" : 5.962133916683182,
  "rmse" : 2.3021358869347655,
  "binaryThreshold" : 7.386281948385884
}}]
     - returns: RequestBuilder<EvaluationResultsEntity> 
     */
    open class func getLastEvaluationWithRequestBuilder() -> RequestBuilder<EvaluationResultsEntity> {
        let path = "/lastevaluation"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationResultsEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a minibatch for the model
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter minibatchId: (path) The GUID of the minibatch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMinibatch(modelHistoryServerId: String, minibatchId: String, completion: @escaping ((_ data: MinibatchEntity?, _ error: ErrorResponse?) -> Void)) {
        getMinibatchWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, minibatchId: minibatchId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a minibatch for the model
     - GET /rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "evalId" : "evalId",
  "batchVersion" : 6,
  "evalVersion" : 0,
  "miniBatchId" : "miniBatchId"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter minibatchId: (path) The GUID of the minibatch 
     - returns: RequestBuilder<MinibatchEntity> 
     */
    open class func getMinibatchWithRequestBuilder(modelHistoryServerId: String, minibatchId: String) -> RequestBuilder<MinibatchEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let minibatchIdPreEscape = "\(minibatchId)"
        let minibatchIdPostEscape = minibatchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minibatchId}", with: minibatchIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MinibatchEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get model details
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getModelDetails(deploymentId: String, modelId: String, completion: @escaping ((_ data: ModelEntity?, _ error: ErrorResponse?) -> Void)) {
        getModelDetailsWithRequestBuilder(deploymentId: deploymentId, modelId: modelId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get model details
     - GET /deployment/{deploymentId}/model/{modelId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "launchPolicy" : "{}",
  "created" : 6,
  "modelState" : "CREATED",
  "scale" : 5.63737665663332876420099637471139430999755859375,
  "modelType" : "transform",
  "fileLocation" : "fileLocation",
  "jvmArgs" : "jvmArgs",
  "labelsFileLocation" : "labelsFileLocation",
  "extraArgs" : "extraArgs",
  "deploymentId" : 5,
  "name" : "name",
  "subType" : "subType",
  "id" : 0,
  "state" : "created",
  "updated" : 1
}}]
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - returns: RequestBuilder<ModelEntity> 
     */
    open class func getModelDetailsWithRequestBuilder(deploymentId: String, modelId: String) -> RequestBuilder<ModelEntity> {
        var path = "/deployment/{deploymentId}/model/{modelId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let modelIdPreEscape = "\(modelId)"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a model history, given its ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) GUID of the model history to get information of. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getModelHistory(modelHistoryServerId: String, modelHistoryID: String, completion: @escaping ((_ data: ModelHistoryEntity?, _ error: ErrorResponse?) -> Void)) {
        getModelHistoryWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelHistoryID: modelHistoryID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a model history, given its ID
     - GET /rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modelName" : "modelName",
  "modelHistoryId" : "modelHistoryId",
  "created" : 0,
  "modelLabels" : "modelLabels"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) GUID of the model history to get information of. 
     - returns: RequestBuilder<ModelHistoryEntity> 
     */
    open class func getModelHistoryWithRequestBuilder(modelHistoryServerId: String, modelHistoryID: String) -> RequestBuilder<ModelHistoryEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelHistoryIDPreEscape = "\(modelHistoryID)"
        let modelHistoryIDPostEscape = modelHistoryIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryID}", with: modelHistoryIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelHistoryEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets a model instance, given its ID
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceID: (path) GUID of the model instance to get information of. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getModelInstance(modelHistoryServerId: String, modelInstanceID: String, completion: @escaping ((_ data: ModelInstanceEntity?, _ error: ErrorResponse?) -> Void)) {
        getModelInstanceWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelInstanceID: modelInstanceID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a model instance, given its ID
     - GET /rpc/{modelHistoryServerId}/model/{modelInstanceID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "evalId" : "evalId",
  "modelName" : "modelName",
  "originalModelId" : "originalModelId",
  "modelId" : "modelId",
  "created" : 0,
  "modelVersion" : "modelVersion",
  "modelLabels" : "modelLabels",
  "etlJson" : "etlJson",
  "experimentId" : "experimentId",
  "inputFormats" : "inputFormats",
  "uri" : "http://example.com/aeiou",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelInstanceID: (path) GUID of the model instance to get information of. 
     - returns: RequestBuilder<ModelInstanceEntity> 
     */
    open class func getModelInstanceWithRequestBuilder(modelHistoryServerId: String, modelInstanceID: String) -> RequestBuilder<ModelInstanceEntity> {
        var path = "/rpc/{modelHistoryServerId}/model/{modelInstanceID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelInstanceIDPreEscape = "\(modelInstanceID)"
        let modelInstanceIDPostEscape = modelInstanceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelInstanceID}", with: modelInstanceIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelInstanceEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Obtain a list of all the models for an experiment
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getModelsForExperiment(modelHistoryServerId: String, experimentID: String, completion: @escaping ((_ data: [ModelInstanceEntity]?, _ error: ErrorResponse?) -> Void)) {
        getModelsForExperimentWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, experimentID: experimentID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Obtain a list of all the models for an experiment
     - GET /rpc/{modelHistoryServerId}/experiment/{experimentID}/models
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "evalId" : "evalId",
  "modelName" : "modelName",
  "originalModelId" : "originalModelId",
  "modelId" : "modelId",
  "created" : 0,
  "modelVersion" : "modelVersion",
  "modelLabels" : "modelLabels",
  "etlJson" : "etlJson",
  "experimentId" : "experimentId",
  "inputFormats" : "inputFormats",
  "uri" : "http://example.com/aeiou",
  "notebookJson" : "notebookJson"
}, {
  "evalId" : "evalId",
  "modelName" : "modelName",
  "originalModelId" : "originalModelId",
  "modelId" : "modelId",
  "created" : 0,
  "modelVersion" : "modelVersion",
  "modelLabels" : "modelLabels",
  "etlJson" : "etlJson",
  "experimentId" : "experimentId",
  "inputFormats" : "inputFormats",
  "uri" : "http://example.com/aeiou",
  "notebookJson" : "notebookJson"
} ]}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment 
     - returns: RequestBuilder<[ModelInstanceEntity]> 
     */
    open class func getModelsForExperimentWithRequestBuilder(modelHistoryServerId: String, experimentID: String) -> RequestBuilder<[ModelInstanceEntity]> {
        var path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}/models"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let experimentIDPreEscape = "\(experimentID)"
        let experimentIDPostEscape = experimentIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{experimentID}", with: experimentIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ModelInstanceEntity]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the resource with the specified resource ID
     - parameter resourceId: (path) ID of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourceById(resourceId: Int64, completion: @escaping ((_ data: Resource?, _ error: ErrorResponse?) -> Void)) {
        getResourceByIdWithRequestBuilder(resourceId: resourceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the resource with the specified resource ID
     - GET /resources/resource/{resourceId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
}}]
     - parameter resourceId: (path) ID of the resource 
     - returns: RequestBuilder<Resource> 
     */
    open class func getResourceByIdWithRequestBuilder(resourceId: Int64) -> RequestBuilder<Resource> {
        var path = "/resources/resource/{resourceId}"
        let resourceIdPreEscape = "\(resourceId)"
        let resourceIdPostEscape = resourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceId}", with: resourceIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Resource>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter resourceSubType
     */
    public enum ResourceSubType_getResourceBySubType: String { 
        case emr = "EMR"
        case s3 = "S3"
        case googleStorage = "GoogleStorage"
        case dataProc = "DataProc"
        case hdinsight = "HDInsight"
        case azureStorage = "AzureStorage"
        case hdfs = "HDFS"
        case yarn = "YARN"
    }

    /**
     Get all the resources with the specified resource subtype
     - parameter resourceSubType: (path) Subtype of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourceBySubType(resourceSubType: ResourceSubType_getResourceBySubType, completion: @escaping ((_ data: [Resource]?, _ error: ErrorResponse?) -> Void)) {
        getResourceBySubTypeWithRequestBuilder(resourceSubType: resourceSubType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all the resources with the specified resource subtype
     - GET /resources/resources/subtype/{resourceSubType}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
}, {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
} ]}]
     - parameter resourceSubType: (path) Subtype of the resource 
     - returns: RequestBuilder<[Resource]> 
     */
    open class func getResourceBySubTypeWithRequestBuilder(resourceSubType: ResourceSubType_getResourceBySubType) -> RequestBuilder<[Resource]> {
        var path = "/resources/resources/subtype/{resourceSubType}"
        let resourceSubTypePreEscape = "\(resourceSubType.rawValue)"
        let resourceSubTypePostEscape = resourceSubTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceSubType}", with: resourceSubTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Resource]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter resourceType
     */
    public enum ResourceType_getResourceByType: String { 
        case compute = "COMPUTE"
        case storage = "STORAGE"
    }

    /**
     Get all the resources with the specified resource type
     - parameter resourceType: (path) Type of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourceByType(resourceType: ResourceType_getResourceByType, completion: @escaping ((_ data: [Resource]?, _ error: ErrorResponse?) -> Void)) {
        getResourceByTypeWithRequestBuilder(resourceType: resourceType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all the resources with the specified resource type
     - GET /resources/resources/type/{resourceType}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
}, {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
} ]}]
     - parameter resourceType: (path) Type of the resource 
     - returns: RequestBuilder<[Resource]> 
     */
    open class func getResourceByTypeWithRequestBuilder(resourceType: ResourceType_getResourceByType) -> RequestBuilder<[Resource]> {
        var path = "/resources/resources/type/{resourceType}"
        let resourceTypePreEscape = "\(resourceType.rawValue)"
        let resourceTypePostEscape = resourceTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceType}", with: resourceTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Resource]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the resource details with the specified resource ID
     - parameter resourceId: (path) ID of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourceDetailsById(resourceId: Int64, completion: @escaping ((_ data: Any?, _ error: ErrorResponse?) -> Void)) {
        getResourceDetailsByIdWithRequestBuilder(resourceId: resourceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the resource details with the specified resource ID
     - GET /resources/details/{resourceId}
     - Get the details for the resource, for the given ID. Note that a 'ResourceDetails' object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the 'Resource' object contains only general information (name, id, type, subtype). 
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example="{}"}]
     - parameter resourceId: (path) ID of the resource 
     - returns: RequestBuilder<Any> 
     */
    open class func getResourceDetailsByIdWithRequestBuilder(resourceId: Int64) -> RequestBuilder<Any> {
        var path = "/resources/details/{resourceId}"
        let resourceIdPreEscape = "\(resourceId)"
        let resourceIdPostEscape = resourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceId}", with: resourceIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the resource group with the specified resource group ID
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourceGroupById(resourceGroupId: Int64, completion: @escaping ((_ data: ResourceGroup?, _ error: ErrorResponse?) -> Void)) {
        getResourceGroupByIdWithRequestBuilder(resourceGroupId: resourceGroupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the resource group with the specified resource group ID
     - GET /resources/group/{resourceGroupId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "groupName" : "groupName",
  "added" : 6,
  "groupId" : 0,
  "updated" : 1
}}]
     - parameter resourceGroupId: (path) ID of the resource group 
     - returns: RequestBuilder<ResourceGroup> 
     */
    open class func getResourceGroupByIdWithRequestBuilder(resourceGroupId: Int64) -> RequestBuilder<ResourceGroup> {
        var path = "/resources/group/{resourceGroupId}"
        let resourceGroupIdPreEscape = "\(resourceGroupId)"
        let resourceGroupIdPostEscape = resourceGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceGroupId}", with: resourceGroupIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResourceGroup>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a list of all the resource groups
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourceGroups(completion: @escaping ((_ data: [ResourceGroup]?, _ error: ErrorResponse?) -> Void)) {
        getResourceGroupsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list of all the resource groups
     - GET /resources/groups
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "groupName" : "groupName",
  "added" : 6,
  "groupId" : 0,
  "updated" : 1
}, {
  "groupName" : "groupName",
  "added" : 6,
  "groupId" : 0,
  "updated" : 1
} ]}]
     - returns: RequestBuilder<[ResourceGroup]> 
     */
    open class func getResourceGroupsWithRequestBuilder() -> RequestBuilder<[ResourceGroup]> {
        let path = "/resources/groups"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ResourceGroup]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all known/registered resources, of all types
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResources(completion: @escaping ((_ data: [Resource]?, _ error: ErrorResponse?) -> Void)) {
        getResourcesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all known/registered resources, of all types
     - GET /resources/resources
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
}, {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
} ]}]
     - returns: RequestBuilder<[Resource]> 
     */
    open class func getResourcesWithRequestBuilder() -> RequestBuilder<[Resource]> {
        let path = "/resources/resources"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Resource]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all resources from a resource group
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourcesFromGroup(resourceGroupId: Int64, completion: @escaping ((_ data: [Resource]?, _ error: ErrorResponse?) -> Void)) {
        getResourcesFromGroupWithRequestBuilder(resourceGroupId: resourceGroupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all resources from a resource group
     - GET /resources/group/{resourceGroupId}/resources
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
}, {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
} ]}]
     - parameter resourceGroupId: (path) ID of the resource group 
     - returns: RequestBuilder<[Resource]> 
     */
    open class func getResourcesFromGroupWithRequestBuilder(resourceGroupId: Int64) -> RequestBuilder<[Resource]> {
        var path = "/resources/group/{resourceGroupId}/resources"
        let resourceGroupIdPreEscape = "\(resourceGroupId)"
        let resourceGroupIdPostEscape = resourceGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceGroupId}", with: resourceGroupIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Resource]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all roles.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoles(completion: @escaping ((_ data: [Role]?, _ error: ErrorResponse?) -> Void)) {
        getRolesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all roles.
     - GET /security/roles
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "roleId" : "roleId",
  "roleName" : "roleName"
}, {
  "roleId" : "roleId",
  "roleName" : "roleName"
} ]}]
     - returns: RequestBuilder<[Role]> 
     */
    open class func getRolesWithRequestBuilder() -> RequestBuilder<[Role]> {
        let path = "/security/roles"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Role]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a user by user ID
     - parameter userId: (path) User&#39;s ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUser(userId: String, completion: @escaping ((_ data: User?, _ error: ErrorResponse?) -> Void)) {
        getUserWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a user by user ID
     - GET /user/{userId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "password" : "password",
  "role" : "role",
  "scope" : "scope",
  "userName" : "userName",
  "userId" : "userId"
}}]
     - parameter userId: (path) User&#39;s ID 
     - returns: RequestBuilder<User> 
     */
    open class func getUserWithRequestBuilder(userId: String) -> RequestBuilder<User> {
        var path = "/user/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get auth tokens for a user.
     - parameter userId: (path) User&#39;s ID 
     - parameter onlyValid: (query) True if you only want the valid tokens. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserAuthTokens(userId: String, onlyValid: Bool? = nil, completion: @escaping ((_ data: [Token]?, _ error: ErrorResponse?) -> Void)) {
        getUserAuthTokensWithRequestBuilder(userId: userId, onlyValid: onlyValid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get auth tokens for a user.
     - GET /auth/{userId}/tokens
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "isRevoked" : 5,
  "tokenId" : 0,
  "expire" : 1,
  "issued" : 6,
  "userId" : "userId",
  "token" : "token"
}, {
  "isRevoked" : 5,
  "tokenId" : 0,
  "expire" : 1,
  "issued" : 6,
  "userId" : "userId",
  "token" : "token"
} ]}]
     - parameter userId: (path) User&#39;s ID 
     - parameter onlyValid: (query) True if you only want the valid tokens. (optional)
     - returns: RequestBuilder<[Token]> 
     */
    open class func getUserAuthTokensWithRequestBuilder(userId: String, onlyValid: Bool? = nil) -> RequestBuilder<[Token]> {
        var path = "/auth/{userId}/tokens"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "onlyValid": onlyValid
        ])

        let requestBuilder: RequestBuilder<[Token]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all users.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsers(completion: @escaping ((_ data: [User]?, _ error: ErrorResponse?) -> Void)) {
        getUsersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all users.
     - GET /security/users
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "password" : "password",
  "role" : "role",
  "scope" : "scope",
  "userName" : "userName",
  "userId" : "userId"
}, {
  "password" : "password",
  "role" : "role",
  "scope" : "scope",
  "userName" : "userName",
  "userId" : "userId"
} ]}]
     - returns: RequestBuilder<[User]> 
     */
    open class func getUsersWithRequestBuilder() -> RequestBuilder<[User]> {
        let path = "/security/users"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the retraining status
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func isTraining(completion: @escaping ((_ data: RetrainingStatus?, _ error: ErrorResponse?) -> Void)) {
        isTrainingWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the retraining status
     - GET /istraining
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "istraining" : true
}}]
     - returns: RequestBuilder<RetrainingStatus> 
     */
    open class func isTrainingWithRequestBuilder() -> RequestBuilder<RetrainingStatus> {
        let path = "/istraining"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RetrainingStatus>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Run inference on the input and returns it as a JsonArrayResponse
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func jsonarray(body: Prediction, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: JsonArrayResponse?, _ error: ErrorResponse?) -> Void)) {
        jsonarrayWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Run inference on the input and returns it as a JsonArrayResponse
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "array" : {
    "array" : "array"
  }
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<JsonArrayResponse> 
     */
    open class func jsonarrayWithRequestBuilder(body: Prediction, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<JsonArrayResponse> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonArrayResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Runs knn on the given index with the given k
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter knnName: (path) ID or name of the deployed knn 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func knn(deploymentName: String, versionName: String, knnName: String, body: NearestNeighborRequest, completion: @escaping ((_ data: NearestNeighborsResults?, _ error: ErrorResponse?) -> Void)) {
        knnWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, knnName: knnName, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Runs knn on the given index with the given k
     - POST /endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn
     - Runs knn on the given index with the given k (note that this is for data already within the existing dataset not new data)
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "distance" : 1.0,
    "index" : 0,
    "label" : "label"
  }, {
    "distance" : 1.0,
    "index" : 0,
    "label" : "label"
  } ]
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter knnName: (path) ID or name of the deployed knn 
     - parameter body: (body)  
     - returns: RequestBuilder<NearestNeighborsResults> 
     */
    open class func knnWithRequestBuilder(deploymentName: String, versionName: String, knnName: String, body: NearestNeighborRequest) -> RequestBuilder<NearestNeighborsResults> {
        var path = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let knnNamePreEscape = "\(knnName)"
        let knnNamePostEscape = knnNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knnName}", with: knnNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NearestNeighborsResults>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Run a k nearest neighbors search on a NEW data point
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter knnName: (path) ID or name of the deployed knn 
     - parameter body: (body) The input NDArray 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func knnnew(deploymentName: String, versionName: String, knnName: String, body: Base64NDArrayBodyKNN, completion: @escaping ((_ data: NearestNeighborsResults?, _ error: ErrorResponse?) -> Void)) {
        knnnewWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, knnName: knnName, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Run a k nearest neighbors search on a NEW data point
     - POST /endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "distance" : 1.0,
    "index" : 0,
    "label" : "label"
  }, {
    "distance" : 1.0,
    "index" : 0,
    "label" : "label"
  } ]
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter knnName: (path) ID or name of the deployed knn 
     - parameter body: (body) The input NDArray 
     - returns: RequestBuilder<NearestNeighborsResults> 
     */
    open class func knnnewWithRequestBuilder(deploymentName: String, versionName: String, knnName: String, body: Base64NDArrayBodyKNN) -> RequestBuilder<NearestNeighborsResults> {
        var path = "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let knnNamePreEscape = "\(knnName)"
        let knnNamePostEscape = knnNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knnName}", with: knnNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NearestNeighborsResults>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     List all of the experiments in every model history / workspace
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAllExperiments(modelHistoryServerId: String, completion: @escaping ((_ data: [ExperimentEntity]?, _ error: ErrorResponse?) -> Void)) {
        listAllExperimentsWithRequestBuilder(modelHistoryServerId: modelHistoryServerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all of the experiments in every model history / workspace
     - GET /rpc/{modelHistoryServerId}/experiments
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
}, {
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
} ]}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - returns: RequestBuilder<[ExperimentEntity]> 
     */
    open class func listAllExperimentsWithRequestBuilder(modelHistoryServerId: String) -> RequestBuilder<[ExperimentEntity]> {
        var path = "/rpc/{modelHistoryServerId}/experiments"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ExperimentEntity]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get logs file path
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logfilepath(deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        logfilepathWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get logs file path
     - GET /endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{output=none}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<String> 
     */
    open class func logfilepathWithRequestBuilder(deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<String> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Post JSON credentials and obtain a JWT authorization token.
     - parameter loginRequest: (body) Login credentials. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func login(loginRequest: LoginRequest, completion: @escaping ((_ data: LoginResponse?, _ error: ErrorResponse?) -> Void)) {
        loginWithRequestBuilder(loginRequest: loginRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Post JSON credentials and obtain a JWT authorization token.
     - POST /login

     - examples: [{contentType=application/json, example={
  "token" : "xxxxxxx.yyyyyyy.zzzzzz"
}}]
     - parameter loginRequest: (body) Login credentials. 
     - returns: RequestBuilder<LoginResponse> 
     */
    open class func loginWithRequestBuilder(loginRequest: LoginRequest) -> RequestBuilder<LoginResponse> {
        let path = "/login"
        let URLString = SkilClientAPI.basePath + path
        let parameters = loginRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LoginResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get logs
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter logRequest: (body) The log object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logs(deploymentName: String, versionName: String, modelName: String, logRequest: LogRequest, completion: @escaping ((_ data: LogBatch?, _ error: ErrorResponse?) -> Void)) {
        logsWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, modelName: modelName, logRequest: logRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get logs
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/logs
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "offset" : 0,
  "rowCount" : 2,
  "logs" : "logs"
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter logRequest: (body) The log object 
     - returns: RequestBuilder<LogBatch> 
     */
    open class func logsWithRequestBuilder(deploymentName: String, versionName: String, modelName: String, logRequest: LogRequest) -> RequestBuilder<LogBatch> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logs"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = logRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LogBatch>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     this method can be used to get the meta data for the current model which set to the server
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func metaGet(deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: MetaData?, _ error: ErrorResponse?) -> Void)) {
        metaGetWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     this method can be used to get the meta data for the current model which set to the server
     - GET /endpoints/{deploymentName}/model/{modelName}/{versionName}/meta
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={ }}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<MetaData> 
     */
    open class func metaGetWithRequestBuilder(deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<MetaData> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MetaData>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_metaPost: String { 
        case applicationJson = "application/json"
    }

    /**
     This method can be used to set meta data for the current model which is set to the server
     - parameter contentType: (header) The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60; 
     - parameter body: (body) the meta data object 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func metaPost(contentType: ContentType_metaPost, body: String, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: MetaData?, _ error: ErrorResponse?) -> Void)) {
        metaPostWithRequestBuilder(contentType: contentType, body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     This method can be used to set meta data for the current model which is set to the server
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/meta
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={ }}]
     - parameter contentType: (header) The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60; 
     - parameter body: (body) the meta data object 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<MetaData> 
     */
    open class func metaPostWithRequestBuilder(contentType: ContentType_metaPost, body: String, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<MetaData> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MetaData>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Modify the state (start/stop) of a deployed model
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - parameter body: (body) the model state object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modelStateChange(deploymentId: String, modelId: String, body: SetState, completion: @escaping ((_ data: ModelEntity?, _ error: ErrorResponse?) -> Void)) {
        modelStateChangeWithRequestBuilder(deploymentId: deploymentId, modelId: modelId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Modify the state (start/stop) of a deployed model
     - POST /deployment/{deploymentId}/model/{modelId}/state
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "launchPolicy" : "{}",
  "created" : 6,
  "modelState" : "CREATED",
  "scale" : 5.63737665663332876420099637471139430999755859375,
  "modelType" : "transform",
  "fileLocation" : "fileLocation",
  "jvmArgs" : "jvmArgs",
  "labelsFileLocation" : "labelsFileLocation",
  "extraArgs" : "extraArgs",
  "deploymentId" : 5,
  "name" : "name",
  "subType" : "subType",
  "id" : 0,
  "state" : "created",
  "updated" : 1
}}]
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - parameter body: (body) the model state object 
     - returns: RequestBuilder<ModelEntity> 
     */
    open class func modelStateChangeWithRequestBuilder(deploymentId: String, modelId: String, body: SetState) -> RequestBuilder<ModelEntity> {
        var path = "/deployment/{deploymentId}/model/{modelId}/state"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let modelIdPreEscape = "\(modelId)"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Retrieve a list of all the deployed models given a deployment id
     - parameter deploymentId: (path) ID deployment group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func models(deploymentId: String, completion: @escaping ((_ data: [ModelEntity]?, _ error: ErrorResponse?) -> Void)) {
        modelsWithRequestBuilder(deploymentId: deploymentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve a list of all the deployed models given a deployment id
     - GET /deployment/{deploymentId}/models
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "launchPolicy" : "{}",
  "created" : 6,
  "modelState" : "CREATED",
  "scale" : 5.63737665663332876420099637471139430999755859375,
  "modelType" : "transform",
  "fileLocation" : "fileLocation",
  "jvmArgs" : "jvmArgs",
  "labelsFileLocation" : "labelsFileLocation",
  "extraArgs" : "extraArgs",
  "deploymentId" : 5,
  "name" : "name",
  "subType" : "subType",
  "id" : 0,
  "state" : "created",
  "updated" : 1
}, {
  "launchPolicy" : "{}",
  "created" : 6,
  "modelState" : "CREATED",
  "scale" : 5.63737665663332876420099637471139430999755859375,
  "modelType" : "transform",
  "fileLocation" : "fileLocation",
  "jvmArgs" : "jvmArgs",
  "labelsFileLocation" : "labelsFileLocation",
  "extraArgs" : "extraArgs",
  "deploymentId" : 5,
  "name" : "name",
  "subType" : "subType",
  "id" : 0,
  "state" : "created",
  "updated" : 1
} ]}]
     - parameter deploymentId: (path) ID deployment group 
     - returns: RequestBuilder<[ModelEntity]> 
     */
    open class func modelsWithRequestBuilder(deploymentId: String) -> RequestBuilder<[ModelEntity]> {
        var path = "/deployment/{deploymentId}/models"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ModelEntity]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set the model to be served
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter file: (form) The model file to upload (.pb file) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modelset(deploymentName: String, versionName: String, modelName: String, file: URL? = nil, completion: @escaping ((_ data: ModelStatus?, _ error: ErrorResponse?) -> Void)) {
        modelsetWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, modelName: modelName, file: file).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set the model to be served
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "status" : 100
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter file: (form) The model file to upload (.pb file) (optional)
     - returns: RequestBuilder<ModelStatus> 
     */
    open class func modelsetWithRequestBuilder(deploymentName: String, versionName: String, modelName: String, file: URL? = nil) -> RequestBuilder<ModelStatus> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelStatus>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update the model to be served
     - parameter file: (form) The model file to update with (.pb file) 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modelupdate(file: URL, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: ModelStatus?, _ error: ErrorResponse?) -> Void)) {
        modelupdateWithRequestBuilder(file: file, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update the model to be served
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "status" : 100
}}]
     - parameter file: (form) The model file to update with (.pb file) 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<ModelStatus> 
     */
    open class func modelupdateWithRequestBuilder(file: URL, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<ModelStatus> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelStatus>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Represents all of the labels for a given classification
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func multiclassify(body: Prediction, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: MultiClassClassificationResult?, _ error: ErrorResponse?) -> Void)) {
        multiclassifyWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Represents all of the labels for a given classification
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "maxOutcomes" : [ "maxOutcomes", "maxOutcomes" ],
  "rankedOutcomes" : [ [ "rankedOutcomes", "rankedOutcomes" ], [ "rankedOutcomes", "rankedOutcomes" ] ],
  "probabilities" : [ [ 0.4, 0.4 ], [ 0.4, 0.4 ] ]
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<MultiClassClassificationResult> 
     */
    open class func multiclassifyWithRequestBuilder(body: Prediction, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<MultiClassClassificationResult> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MultiClassClassificationResult>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get the output from the network, based on the given INDArray[] input
     - parameter body: (body) The multiple input arrays with mask inputs to run inferences on 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func multipredict(body: MultiPredictRequest, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: MultiPredictResponse?, _ error: ErrorResponse?) -> Void)) {
        multipredictWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the output from the network, based on the given INDArray[] input
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict
     - Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "outputs" : [ {
    "shape" : [ 0, 0 ],
    "data" : [ 6.0274563, 6.0274563 ],
    "array" : "array",
    "ordering" : "f",
    "dataType" : "INT8"
  }, {
    "shape" : [ 0, 0 ],
    "data" : [ 6.0274563, 6.0274563 ],
    "array" : "array",
    "ordering" : "f",
    "dataType" : "INT8"
  } ],
  "needsPreProcessing" : true,
  "id" : "id"
}}]
     - parameter body: (body) The multiple input arrays with mask inputs to run inferences on 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<MultiPredictResponse> 
     */
    open class func multipredictWithRequestBuilder(body: MultiPredictRequest, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<MultiPredictResponse> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MultiPredictResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get the output from the network using the given image file using the /multipredict endpoint's method
     - parameter file: (form) The image file to run the prediction on 
     - parameter id: (form) The id of the request (could be self generated) 
     - parameter needsPreprocessing: (form) Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func multipredictimage(file: URL, id: String, needsPreprocessing: Bool, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: MultiPredictResponse?, _ error: ErrorResponse?) -> Void)) {
        multipredictimageWithRequestBuilder(file: file, id: id, needsPreprocessing: needsPreprocessing, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the output from the network using the given image file using the /multipredict endpoint's method
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage
     - Networks with multiple input/output are supported via this method. A Normalizer will be used if needsPreProcessing is set to true. The output/returned array of INDArray will be the raw predictions, and consequently this method can be used for classification or regression networks, with any type of output layer (standard, time series / RnnOutputLayer, etc).
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "outputs" : [ {
    "shape" : [ 0, 0 ],
    "data" : [ 6.0274563, 6.0274563 ],
    "array" : "array",
    "ordering" : "f",
    "dataType" : "INT8"
  }, {
    "shape" : [ 0, 0 ],
    "data" : [ 6.0274563, 6.0274563 ],
    "array" : "array",
    "ordering" : "f",
    "dataType" : "INT8"
  } ],
  "needsPreProcessing" : true,
  "id" : "id"
}}]
     - parameter file: (form) The image file to run the prediction on 
     - parameter id: (form) The id of the request (could be self generated) 
     - parameter needsPreprocessing: (form) Whether or not the preprocessing is required (either &#39;true&#39; or &#39;false&#39;) 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<MultiPredictResponse> 
     */
    open class func multipredictimageWithRequestBuilder(file: URL, id: String, needsPreprocessing: Bool, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<MultiPredictResponse> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file,
            "id": id,
            "needs_preprocessing": needsPreprocessing
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MultiPredictResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the number of retrained models written with retraining.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func numRevisions(completion: @escaping ((_ data: RevisionsWritten?, _ error: ErrorResponse?) -> Void)) {
        numRevisionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the number of retrained models written with retraining.
     - GET /numrevisions
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "numRevisions" : 0
}}]
     - returns: RequestBuilder<RevisionsWritten> 
     */
    open class func numRevisionsWithRequestBuilder() -> RequestBuilder<RevisionsWritten> {
        let path = "/numrevisions"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RevisionsWritten>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Run inference on the input array.
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predict(body: Prediction, deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: Prediction?, _ error: ErrorResponse?) -> Void)) {
        predictWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Run inference on the input array.
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/predict
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "needsPreProcessing" : true,
  "prediction" : {
    "array" : "array"
  },
  "id" : "id"
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<Prediction> 
     */
    open class func predictWithRequestBuilder(body: Prediction, deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<Prediction> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predict"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Prediction>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_predictError: String { 
        case applicationJson = "application/json"
    }

    /**
     * enum for parameter operation
     */
    public enum Operation_predictError: String { 
        case regression = "REGRESSION"
        case classification = "CLASSIFICATION"
        case raw = "RAW"
    }

    /**
     * enum for parameter inputType
     */
    public enum InputType_predictError: String { 
        case csv = "CSV"
        case dictionary = "DICTIONARY"
        case csvpubsub = "CSVPUBSUB"
        case dictionarypubsub = "DICTIONARYPUBSUB"
    }

    /**
     Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
     - parameter contentType: (header) The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. 
     - parameter operation: (path) Operation to perform on the input data. 
     - parameter inputType: (path) Type of the input data. 
     - parameter inputData: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predictError(contentType: ContentType_predictError, operation: Operation_predictError, inputType: InputType_predictError, inputData: String? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        predictErrorWithRequestBuilder(contentType: contentType, operation: operation, inputType: inputType, inputData: inputData).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Runs inference and find invalid rows based on the input data. Output is defined relative to the output adapter specified.
     - POST /{operation}/{inputType}/error
     - These \"error\" endpoints are slower for inference, but will also ignore invalid rows that are found. They will output skipped rows where errors were encountered so users can fix problems with input data pipelines. 
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter contentType: (header) The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. 
     - parameter operation: (path) Operation to perform on the input data. 
     - parameter inputType: (path) Type of the input data. 
     - parameter inputData: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func predictErrorWithRequestBuilder(contentType: ContentType_predictError, operation: Operation_predictError, inputType: InputType_predictError, inputData: String? = nil) -> RequestBuilder<Void> {
        var path = "/{operation}/{inputType}/error"
        let operationPreEscape = "\(operation.rawValue)"
        let operationPostEscape = operationPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{operation}", with: operationPostEscape, options: .literal, range: nil)
        let inputTypePreEscape = "\(inputType.rawValue)"
        let inputTypePostEscape = inputTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inputType}", with: inputTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = inputData?.encodeToJSON()

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     * enum for parameter operation
     */
    public enum Operation_predictV2File: String { 
        case regression = "REGRESSION"
        case classification = "CLASSIFICATION"
        case raw = "RAW"
        case yolo = "YOLO"
        case ssd = "SSD"
        case rcnn = "RCNN"
    }

    /**
     * enum for parameter inputTypeFile
     */
    public enum InputTypeFile_predictV2File: String { 
        case image = "IMAGE"
        case numpy = "NUMPY"
        case ndarray = "NDARRAY"
        case json = "JSON"
    }

    /**
     Runs inference based on the input data. Output is defined relative to the output adapter specified.
     - parameter operation: (path) The operation to perform on the input data.  
     - parameter inputTypeFile: (path) Type of the input data.  
     - parameter inputData: (form) The input data to run inference on. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predictV2File(operation: Operation_predictV2File, inputTypeFile: InputTypeFile_predictV2File, inputData: URL, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        predictV2FileWithRequestBuilder(operation: operation, inputTypeFile: inputTypeFile, inputData: inputData).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Runs inference based on the input data. Output is defined relative to the output adapter specified.
     - POST /{operation}/{inputTypeFile}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter operation: (path) The operation to perform on the input data.  
     - parameter inputTypeFile: (path) Type of the input data.  
     - parameter inputData: (form) The input data to run inference on. 
     - returns: RequestBuilder<Void> 
     */
    open class func predictV2FileWithRequestBuilder(operation: Operation_predictV2File, inputTypeFile: InputTypeFile_predictV2File, inputData: URL) -> RequestBuilder<Void> {
        var path = "/{operation}/{inputTypeFile}"
        let operationPreEscape = "\(operation.rawValue)"
        let operationPostEscape = operationPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{operation}", with: operationPostEscape, options: .literal, range: nil)
        let inputTypeFilePreEscape = "\(inputTypeFile.rawValue)"
        let inputTypeFilePostEscape = inputTypeFilePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inputTypeFile}", with: inputTypeFilePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "inputData": inputData
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_predictV2Json: String { 
        case applicationJson = "application/json"
    }

    /**
     * enum for parameter operation
     */
    public enum Operation_predictV2Json: String { 
        case regression = "REGRESSION"
        case classification = "CLASSIFICATION"
        case raw = "RAW"
    }

    /**
     * enum for parameter inputTypeJson
     */
    public enum InputTypeJson_predictV2Json: String { 
        case csv = "CSV"
        case dictionary = "DICTIONARY"
        case csvpubsub = "CSVPUBSUB"
        case dictionarypubsub = "DICTIONARYPUBSUB"
    }

    /**
     Runs inference based on the input data. Output is defined relative to the output adapter specified.
     - parameter contentType: (header) The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. 
     - parameter operation: (path) The operation to perform on the input data.  
     - parameter inputTypeJson: (path) Type of the input data.  
     - parameter inputData: (body) The input data to run inference on. (Specify a JSON string here) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predictV2Json(contentType: ContentType_predictV2Json, operation: Operation_predictV2Json, inputTypeJson: InputTypeJson_predictV2Json, inputData: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        predictV2JsonWithRequestBuilder(contentType: contentType, operation: operation, inputTypeJson: inputTypeJson, inputData: inputData).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Runs inference based on the input data. Output is defined relative to the output adapter specified.
     - POST /{operation}/{inputTypeJson}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter contentType: (header) The &#x60;Content-Type&#x60; should always be &#x60;application/json&#x60;. 
     - parameter operation: (path) The operation to perform on the input data.  
     - parameter inputTypeJson: (path) Type of the input data.  
     - parameter inputData: (body) The input data to run inference on. (Specify a JSON string here) 
     - returns: RequestBuilder<Void> 
     */
    open class func predictV2JsonWithRequestBuilder(contentType: ContentType_predictV2Json, operation: Operation_predictV2Json, inputTypeJson: InputTypeJson_predictV2Json, inputData: String) -> RequestBuilder<Void> {
        var path = "/{operation}/{inputTypeJson}"
        let operationPreEscape = "\(operation.rawValue)"
        let operationPostEscape = operationPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{operation}", with: operationPostEscape, options: .literal, range: nil)
        let inputTypeJsonPreEscape = "\(inputTypeJson.rawValue)"
        let inputTypeJsonPostEscape = inputTypeJsonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inputTypeJson}", with: inputTypeJsonPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = inputData.encodeToJSON()

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Run inference on the input array, using input image file from multipart form data.
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter image: (form) The file to upload. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predictimage(deploymentName: String, versionName: String, modelName: String, image: URL? = nil, completion: @escaping ((_ data: Prediction?, _ error: ErrorResponse?) -> Void)) {
        predictimageWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, modelName: modelName, image: image).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Run inference on the input array, using input image file from multipart form data.
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "needsPreProcessing" : true,
  "prediction" : {
    "array" : "array"
  },
  "id" : "id"
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter image: (form) The file to upload. (optional)
     - returns: RequestBuilder<Prediction> 
     */
    open class func predictimageWithRequestBuilder(deploymentName: String, versionName: String, modelName: String, image: URL? = nil) -> RequestBuilder<Prediction> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "image": image
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Prediction>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Preprocesses the input and run inference on it
     - parameter body: (body) The input array 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predictwithpreprocess(body: [String], deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: Prediction?, _ error: ErrorResponse?) -> Void)) {
        predictwithpreprocessWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Preprocesses the input and run inference on it
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "needsPreProcessing" : true,
  "prediction" : {
    "array" : "array"
  },
  "id" : "id"
}}]
     - parameter body: (body) The input array 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<Prediction> 
     */
    open class func predictwithpreprocessWithRequestBuilder(body: [String], deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<Prediction> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Prediction>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     - parameter body: (body) The input array 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predictwithpreprocessjson(body: [String], deploymentName: String, versionName: String, modelName: String, completion: @escaping ((_ data: JsonArrayResponse?, _ error: ErrorResponse?) -> Void)) {
        predictwithpreprocessjsonWithRequestBuilder(body: body, deploymentName: deploymentName, versionName: versionName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     - POST /endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "array" : {
    "array" : "array"
  }
}}]
     - parameter body: (body) The input array 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<JsonArrayResponse> 
     */
    open class func predictwithpreprocessjsonWithRequestBuilder(body: [String], deploymentName: String, versionName: String, modelName: String) -> RequestBuilder<JsonArrayResponse> {
        var path = "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonArrayResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     * enum for parameter inputType
     */
    public enum InputType_rawPredictBinary: String { 
        case image = "IMAGE"
        case numpy = "NUMPY"
        case ndarray = "NDARRAY"
        case json = "JSON"
    }

    /**
     * enum for parameter outputType
     */
    public enum OutputType_rawPredictBinary: String { 
        case nd4j = "ND4J"
        case numpy = "NUMPY"
        case arrow = "ARROW"
        case json = "JSON"
    }

    /**
     Runs inference based on the input data. Output is defined relative to the output adapter specified.
     - parameter inputType: (path) Input data type. 
     - parameter outputType: (path) Binary output data type. 
     - parameter inputData: (form) The input file to upload. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rawPredictBinary(inputType: InputType_rawPredictBinary, outputType: OutputType_rawPredictBinary, inputData: URL? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        rawPredictBinaryWithRequestBuilder(inputType: inputType, outputType: outputType, inputData: inputData).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Runs inference based on the input data. Output is defined relative to the output adapter specified.
     - POST /raw/{inputType}/{outputType}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter inputType: (path) Input data type. 
     - parameter outputType: (path) Binary output data type. 
     - parameter inputData: (form) The input file to upload. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func rawPredictBinaryWithRequestBuilder(inputType: InputType_rawPredictBinary, outputType: OutputType_rawPredictBinary, inputData: URL? = nil) -> RequestBuilder<Void> {
        var path = "/raw/{inputType}/{outputType}"
        let inputTypePreEscape = "\(inputType.rawValue)"
        let inputTypePostEscape = inputTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inputType}", with: inputTypePostEscape, options: .literal, range: nil)
        let outputTypePreEscape = "\(outputType.rawValue)"
        let outputTypePostEscape = outputTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{outputType}", with: outputTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "inputData": inputData
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Refresh the remote job status. Can be used for monitoring.
     - parameter jobId: (path) Job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func refreshJobStatus(jobId: Int64, completion: @escaping ((_ data: JobEntity?, _ error: ErrorResponse?) -> Void)) {
        refreshJobStatusWithRequestBuilder(jobId: jobId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Refresh the remote job status. Can be used for monitoring.
     - GET /jobs/{jobId}/refresh
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "storageResourceId" : 1,
  "jobId" : 0,
  "outputFileName" : "outputFileName",
  "jobArgs" : "jobArgs",
  "runId" : "runId",
  "jobType" : "TRAINING",
  "computeResourceId" : 6,
  "status" : "PENDING"
}}]
     - parameter jobId: (path) Job ID 
     - returns: RequestBuilder<JobEntity> 
     */
    open class func refreshJobStatusWithRequestBuilder(jobId: Int64) -> RequestBuilder<JobEntity> {
        var path = "/jobs/{jobId}/refresh"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JobEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Register a new user
     - parameter user: (body) User details 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerUser(user: User, completion: @escaping ((_ data: User?, _ error: ErrorResponse?) -> Void)) {
        registerUserWithRequestBuilder(user: user).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Register a new user
     - POST /user/register
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "password" : "password",
  "role" : "role",
  "scope" : "scope",
  "userName" : "userName",
  "userId" : "userId"
}}]
     - parameter user: (body) User details 
     - returns: RequestBuilder<User> 
     */
    open class func registerUserWithRequestBuilder(user: User) -> RequestBuilder<User> {
        let path = "/user/register"
        let URLString = SkilClientAPI.basePath + path
        let parameters = user.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Reimport a model to a previous deployed model in a deployment
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - parameter body: (body) the deployment request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reimportModel(deploymentId: String, modelId: String, body: ImportModelRequest, completion: @escaping ((_ data: ModelEntity?, _ error: ErrorResponse?) -> Void)) {
        reimportModelWithRequestBuilder(deploymentId: deploymentId, modelId: modelId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Reimport a model to a previous deployed model in a deployment
     - POST /deployment/{deploymentId}/model/{modelId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "launchPolicy" : "{}",
  "created" : 6,
  "modelState" : "CREATED",
  "scale" : 5.63737665663332876420099637471139430999755859375,
  "modelType" : "transform",
  "fileLocation" : "fileLocation",
  "jvmArgs" : "jvmArgs",
  "labelsFileLocation" : "labelsFileLocation",
  "extraArgs" : "extraArgs",
  "deploymentId" : 5,
  "name" : "name",
  "subType" : "subType",
  "id" : 0,
  "state" : "created",
  "updated" : 1
}}]
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - parameter body: (body) the deployment request 
     - returns: RequestBuilder<ModelEntity> 
     */
    open class func reimportModelWithRequestBuilder(deploymentId: String, modelId: String, body: ImportModelRequest) -> RequestBuilder<ModelEntity> {
        var path = "/deployment/{deploymentId}/model/{modelId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let modelIdPreEscape = "\(modelId)"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Revoke a user token.
     - parameter tokenId: (path) Token ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revokeUserToken(tokenId: Int64, completion: @escaping ((_ data: Token?, _ error: ErrorResponse?) -> Void)) {
        revokeUserTokenWithRequestBuilder(tokenId: tokenId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Revoke a user token.
     - DELETE /auth/token/{tokenId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "isRevoked" : 5,
  "tokenId" : 0,
  "expire" : 1,
  "issued" : 6,
  "userId" : "userId",
  "token" : "token"
}}]
     - parameter tokenId: (path) Token ID 
     - returns: RequestBuilder<Token> 
     */
    open class func revokeUserTokenWithRequestBuilder(tokenId: Int64) -> RequestBuilder<Token> {
        var path = "/auth/token/{tokenId}"
        let tokenIdPreEscape = "\(tokenId)"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tokenId}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Token>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Rollback to a previous revision of the model.
     - parameter index: (path) Model revision index. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rollback(index: Int32, completion: @escaping ((_ data: RollbackStatus?, _ error: ErrorResponse?) -> Void)) {
        rollbackWithRequestBuilder(index: index).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Rollback to a previous revision of the model.
     - POST /rollback/{index}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "status" : "status"
}}]
     - parameter index: (path) Model revision index. 
     - returns: RequestBuilder<RollbackStatus> 
     */
    open class func rollbackWithRequestBuilder(index: Int32) -> RequestBuilder<RollbackStatus> {
        var path = "/rollback/{index}"
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RollbackStatus>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Start running an (already created) job on the remote resource
     - parameter jobId: (path) Job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func runAJob(jobId: Int64, completion: @escaping ((_ data: JobEntity?, _ error: ErrorResponse?) -> Void)) {
        runAJobWithRequestBuilder(jobId: jobId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Start running an (already created) job on the remote resource
     - POST /jobs/{jobId}/run
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "storageResourceId" : 1,
  "jobId" : 0,
  "outputFileName" : "outputFileName",
  "jobArgs" : "jobArgs",
  "runId" : "runId",
  "jobType" : "TRAINING",
  "computeResourceId" : 6,
  "status" : "PENDING"
}}]
     - parameter jobId: (path) Job ID 
     - returns: RequestBuilder<JobEntity> 
     */
    open class func runAJobWithRequestBuilder(jobId: Int64) -> RequestBuilder<JobEntity> {
        var path = "/jobs/{jobId}/run"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JobEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter batchCSVRecord: (body) The input batch of record arrays (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformCsv(deploymentName: String, versionName: String, transformName: String, batchCSVRecord: BatchCSVRecord? = nil, completion: @escaping ((_ data: BatchCSVRecord?, _ error: ErrorResponse?) -> Void)) {
        transformCsvWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, transformName: transformName, batchCSVRecord: batchCSVRecord).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
     - POST /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform
     - Takes a batch of SingleCSVRecord object and transforms it into the desired format
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "records" : [ {
    "values" : [ "values", "values" ]
  }, {
    "values" : [ "values", "values" ]
  } ]
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter batchCSVRecord: (body) The input batch of record arrays (optional)
     - returns: RequestBuilder<BatchCSVRecord> 
     */
    open class func transformCsvWithRequestBuilder(deploymentName: String, versionName: String, transformName: String, batchCSVRecord: BatchCSVRecord? = nil) -> RequestBuilder<BatchCSVRecord> {
        var path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let transformNamePreEscape = "\(transformName)"
        let transformNamePostEscape = transformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transformName}", with: transformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = batchCSVRecord?.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BatchCSVRecord>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Takes a batch input arrays and transforms it
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter batchRecord: (body) The input batch of record arrays (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformarray(deploymentName: String, versionName: String, transformName: String, batchRecord: BatchRecord? = nil, completion: @escaping ((_ data: Base64NDArrayBody?, _ error: ErrorResponse?) -> Void)) {
        transformarrayWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, transformName: transformName, batchRecord: batchRecord).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Takes a batch input arrays and transforms it
     - POST /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "ndarray" : "ndarray"
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter batchRecord: (body) The input batch of record arrays (optional)
     - returns: RequestBuilder<Base64NDArrayBody> 
     */
    open class func transformarrayWithRequestBuilder(deploymentName: String, versionName: String, transformName: String, batchRecord: BatchRecord? = nil) -> RequestBuilder<Base64NDArrayBody> {
        var path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let transformNamePreEscape = "\(transformName)"
        let transformNamePostEscape = transformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transformName}", with: transformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = batchRecord?.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Base64NDArrayBody>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Takes multiple multipart image file to transform and returns Base64NDArrayBody
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter imageTransformName: (path) ID or name of the deployed image transform 
     - parameter files: (form) The image files to upload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformimage(deploymentName: String, versionName: String, imageTransformName: String, files: [Data], completion: @escaping ((_ data: Base64NDArrayBody?, _ error: ErrorResponse?) -> Void)) {
        transformimageWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, imageTransformName: imageTransformName, files: files).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Takes multiple multipart image file to transform and returns Base64NDArrayBody
     - POST /endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage
     - Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "ndarray" : "ndarray"
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter imageTransformName: (path) ID or name of the deployed image transform 
     - parameter files: (form) The image files to upload 
     - returns: RequestBuilder<Base64NDArrayBody> 
     */
    open class func transformimageWithRequestBuilder(deploymentName: String, versionName: String, imageTransformName: String, files: [Data]) -> RequestBuilder<Base64NDArrayBody> {
        var path = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let imageTransformNamePreEscape = "\(imageTransformName)"
        let imageTransformNamePostEscape = imageTransformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageTransformName}", with: imageTransformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "files": files
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Base64NDArrayBody>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter singleCSVRecord: (body) The input record array (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformincrementalCsv(deploymentName: String, versionName: String, transformName: String, singleCSVRecord: SingleCSVRecord? = nil, completion: @escaping ((_ data: SingleCSVRecord?, _ error: ErrorResponse?) -> Void)) {
        transformincrementalCsvWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, transformName: transformName, singleCSVRecord: singleCSVRecord).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
     - POST /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental
     - Takes a SingleCSVRecord object and transforms it into the desired format
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "values" : [ "values", "values" ]
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter singleCSVRecord: (body) The input record array (optional)
     - returns: RequestBuilder<SingleCSVRecord> 
     */
    open class func transformincrementalCsvWithRequestBuilder(deploymentName: String, versionName: String, transformName: String, singleCSVRecord: SingleCSVRecord? = nil) -> RequestBuilder<SingleCSVRecord> {
        var path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let transformNamePreEscape = "\(transformName)"
        let transformNamePostEscape = transformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transformName}", with: transformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = singleCSVRecord?.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SingleCSVRecord>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Same as /transformincremental but returns Base64NDArrayBody.
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter singleRecord: (body) The input record array (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformincrementalarray(deploymentName: String, versionName: String, transformName: String, singleRecord: SingleRecord? = nil, completion: @escaping ((_ data: Base64NDArrayBody?, _ error: ErrorResponse?) -> Void)) {
        transformincrementalarrayWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, transformName: transformName, singleRecord: singleRecord).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Same as /transformincremental but returns Base64NDArrayBody.
     - POST /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "ndarray" : "ndarray"
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter singleRecord: (body) The input record array (optional)
     - returns: RequestBuilder<Base64NDArrayBody> 
     */
    open class func transformincrementalarrayWithRequestBuilder(deploymentName: String, versionName: String, transformName: String, singleRecord: SingleRecord? = nil) -> RequestBuilder<Base64NDArrayBody> {
        var path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let transformNamePreEscape = "\(transformName)"
        let transformNamePostEscape = transformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transformName}", with: transformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = singleRecord?.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Base64NDArrayBody>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Takes a single multipart image file to transform and returns Base64NDArrayBody
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter imageTransformName: (path) ID or name of the deployed image transform 
     - parameter file: (form) The image file to upload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformincrementalimage(deploymentName: String, versionName: String, imageTransformName: String, file: URL, completion: @escaping ((_ data: Base64NDArrayBody?, _ error: ErrorResponse?) -> Void)) {
        transformincrementalimageWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, imageTransformName: imageTransformName, file: file).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Takes a single multipart image file to transform and returns Base64NDArrayBody
     - POST /endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage
     - Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "ndarray" : "ndarray"
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter imageTransformName: (path) ID or name of the deployed image transform 
     - parameter file: (form) The image file to upload 
     - returns: RequestBuilder<Base64NDArrayBody> 
     */
    open class func transformincrementalimageWithRequestBuilder(deploymentName: String, versionName: String, imageTransformName: String, file: URL) -> RequestBuilder<Base64NDArrayBody> {
        var path = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let imageTransformNamePreEscape = "\(imageTransformName)"
        let imageTransformNamePostEscape = imageTransformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageTransformName}", with: imageTransformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Base64NDArrayBody>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the JSON string of the deployed transform process (CSV or Image)
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformprocessGet(deploymentName: String, versionName: String, transformName: String, completion: @escaping ((_ data: Any?, _ error: ErrorResponse?) -> Void)) {
        transformprocessGetWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, transformName: transformName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the JSON string of the deployed transform process (CSV or Image)
     - GET /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example="{}"}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - returns: RequestBuilder<Any> 
     */
    open class func transformprocessGetWithRequestBuilder(deploymentName: String, versionName: String, transformName: String) -> RequestBuilder<Any> {
        var path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let transformNamePreEscape = "\(transformName)"
        let transformNamePostEscape = transformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transformName}", with: transformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_transformprocessPost: String { 
        case applicationJson = "application/json"
    }

    /**
     Sets the deployed (CSV or Image) transform process through the provided JSON string
     - parameter contentType: (header) The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;. 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter transformProcess: (body) The transform process to set (Specify a JSON string here). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformprocessPost(contentType: ContentType_transformprocessPost, deploymentName: String, versionName: String, transformName: String, transformProcess: String? = nil, completion: @escaping ((_ data: Any?, _ error: ErrorResponse?) -> Void)) {
        transformprocessPostWithRequestBuilder(contentType: contentType, deploymentName: deploymentName, versionName: versionName, transformName: transformName, transformProcess: transformProcess).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Sets the deployed (CSV or Image) transform process through the provided JSON string
     - POST /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example="{}"}]
     - parameter contentType: (header) The &#x60;Content-Type&#x60; should be &#x60;application/json&#x60;. 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter transformProcess: (body) The transform process to set (Specify a JSON string here). (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func transformprocessPostWithRequestBuilder(contentType: ContentType_transformprocessPost, deploymentName: String, versionName: String, transformName: String, transformProcess: String? = nil) -> RequestBuilder<Any> {
        var path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let transformNamePreEscape = "\(transformName)"
        let transformNamePostEscape = transformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transformName}", with: transformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = transformProcess?.encodeToJSON()

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Any>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update auth policy
     - parameter authPolicy: (body) Auth policy object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAuthPolicy(authPolicy: AuthPolicy, completion: @escaping ((_ data: AuthPolicy?, _ error: ErrorResponse?) -> Void)) {
        updateAuthPolicyWithRequestBuilder(authPolicy: authPolicy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update auth policy
     - PUT /auth/policy
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "@class" : "SimpleAuthPolicy"
}}]
     - parameter authPolicy: (body) Auth policy object 
     - returns: RequestBuilder<AuthPolicy> 
     */
    open class func updateAuthPolicyWithRequestBuilder(authPolicy: AuthPolicy) -> RequestBuilder<AuthPolicy> {
        let path = "/auth/policy"
        let URLString = SkilClientAPI.basePath + path
        let parameters = authPolicy.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthPolicy>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Updates the best model for an experiment
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter updateBestModel: (body) Model encapsulating the experiment id to update and the best model id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateBestModelForExperiment(modelHistoryServerId: String, updateBestModel: UpdateBestModel, completion: @escaping ((_ data: ExperimentEntity?, _ error: ErrorResponse?) -> Void)) {
        updateBestModelForExperimentWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, updateBestModel: updateBestModel).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates the best model for an experiment
     - POST /rpc/{modelHistoryServerId}/experiment/best
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter updateBestModel: (body) Model encapsulating the experiment id to update and the best model id. 
     - returns: RequestBuilder<ExperimentEntity> 
     */
    open class func updateBestModelForExperimentWithRequestBuilder(modelHistoryServerId: String, updateBestModel: UpdateBestModel) -> RequestBuilder<ExperimentEntity> {
        var path = "/rpc/{modelHistoryServerId}/experiment/best"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = updateBestModel.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExperimentEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Updates an experiment, given an experiment entity
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment to update 
     - parameter experimentEntity: (body) The experiment entity to update with 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateExperiment(modelHistoryServerId: String, experimentID: String, experimentEntity: ExperimentEntity, completion: @escaping ((_ data: ExperimentEntity?, _ error: ErrorResponse?) -> Void)) {
        updateExperimentWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, experimentID: experimentID, experimentEntity: experimentEntity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates an experiment, given an experiment entity
     - PUT /rpc/{modelHistoryServerId}/experiment/{experimentID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "experimentDescription" : "experimentDescription",
  "lastUpdated" : 0,
  "modelHistoryId" : "modelHistoryId",
  "notebookUrl" : "notebookUrl",
  "bestModelId" : "bestModelId",
  "inputDataUri" : "inputDataUri",
  "zeppelinId" : "zeppelinId",
  "experimentId" : "experimentId",
  "experimentName" : "experimentName",
  "notebookJson" : "notebookJson"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter experimentID: (path) the GUID of the experiment to update 
     - parameter experimentEntity: (body) The experiment entity to update with 
     - returns: RequestBuilder<ExperimentEntity> 
     */
    open class func updateExperimentWithRequestBuilder(modelHistoryServerId: String, experimentID: String, experimentEntity: ExperimentEntity) -> RequestBuilder<ExperimentEntity> {
        var path = "/rpc/{modelHistoryServerId}/experiment/{experimentID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let experimentIDPreEscape = "\(experimentID)"
        let experimentIDPostEscape = experimentIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{experimentID}", with: experimentIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = experimentEntity.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExperimentEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a model history / workspace
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) the GUID of the model history / workspace to update 
     - parameter updateModelHistoryRequest: (body) The model history request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateModelHistory(modelHistoryServerId: String, modelHistoryID: String, updateModelHistoryRequest: AddModelHistoryRequest, completion: @escaping ((_ data: ModelHistoryEntity?, _ error: ErrorResponse?) -> Void)) {
        updateModelHistoryWithRequestBuilder(modelHistoryServerId: modelHistoryServerId, modelHistoryID: modelHistoryID, updateModelHistoryRequest: updateModelHistoryRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a model history / workspace
     - POST /rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modelName" : "modelName",
  "modelHistoryId" : "modelHistoryId",
  "created" : 0,
  "modelLabels" : "modelLabels"
}}]
     - parameter modelHistoryServerId: (path) Process GUID of the model history server. Run &#x60;$SKIL_HOME/sbin/skil services&#x60; in a console to find out the model history server GUID. 
     - parameter modelHistoryID: (path) the GUID of the model history / workspace to update 
     - parameter updateModelHistoryRequest: (body) The model history request object 
     - returns: RequestBuilder<ModelHistoryEntity> 
     */
    open class func updateModelHistoryWithRequestBuilder(modelHistoryServerId: String, modelHistoryID: String, updateModelHistoryRequest: AddModelHistoryRequest) -> RequestBuilder<ModelHistoryEntity> {
        var path = "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}"
        let modelHistoryServerIdPreEscape = "\(modelHistoryServerId)"
        let modelHistoryServerIdPostEscape = modelHistoryServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryServerId}", with: modelHistoryServerIdPostEscape, options: .literal, range: nil)
        let modelHistoryIDPreEscape = "\(modelHistoryID)"
        let modelHistoryIDPostEscape = modelHistoryIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelHistoryID}", with: modelHistoryIDPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = updateModelHistoryRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelHistoryEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a user
     - parameter user: (body) User details 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUser(user: User, completion: @escaping ((_ data: User?, _ error: ErrorResponse?) -> Void)) {
        updateUserWithRequestBuilder(user: user).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a user
     - PUT /user
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "password" : "password",
  "role" : "role",
  "scope" : "scope",
  "userName" : "userName",
  "userId" : "userId"
}}]
     - parameter user: (body) User details 
     - returns: RequestBuilder<User> 
     */
    open class func updateUserWithRequestBuilder(user: User) -> RequestBuilder<User> {
        let path = "/user"
        let URLString = SkilClientAPI.basePath + path
        let parameters = user.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Upload a model file to SKIL for import.
     - parameter file: (form) The file to upload. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func upload(file: URL? = nil, completion: @escaping ((_ data: FileUploadList?, _ error: ErrorResponse?) -> Void)) {
        uploadWithRequestBuilder(file: file).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Upload a model file to SKIL for import.
     - POST /api/upload/model
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "fileUploadResponseList" : [ {
    "path" : "path",
    "fileName" : "fileName",
    "type" : "type",
    "key" : "key",
    "fileContent" : "fileContent",
    "status" : "status"
  }, {
    "path" : "path",
    "fileName" : "fileName",
    "type" : "type",
    "key" : "key",
    "fileContent" : "fileContent",
    "status" : "status"
  } ]
}}]
     - parameter file: (form) The file to upload. (optional)
     - returns: RequestBuilder<FileUploadList> 
     */
    open class func uploadWithRequestBuilder(file: URL? = nil) -> RequestBuilder<FileUploadList> {
        let path = "/api/upload/model"
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FileUploadList>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
