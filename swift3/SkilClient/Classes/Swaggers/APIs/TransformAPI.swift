//
// TransformAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class TransformAPI: APIBase {
    /**
     Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter batchCSVRecord: (body) The input batch of record arrays (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformCsv(deploymentName: String, versionName: String, transformName: String, batchCSVRecord: BatchCSVRecord? = nil, completion: @escaping ((_ data: BatchCSVRecord?, _ error: ErrorResponse?) -> Void)) {
        transformCsvWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, transformName: transformName, batchCSVRecord: batchCSVRecord).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Takes a BatchCSVRecord and returns the transformed array as BatchCSVRecord
     - POST /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform
     - Takes a batch of SingleCSVRecord object and transforms it into the desired format
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "records" : [ {
    "values" : [ "values", "values" ]
  }, {
    "values" : [ "values", "values" ]
  } ]
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter batchCSVRecord: (body) The input batch of record arrays (optional)
     - returns: RequestBuilder<BatchCSVRecord> 
     */
    open class func transformCsvWithRequestBuilder(deploymentName: String, versionName: String, transformName: String, batchCSVRecord: BatchCSVRecord? = nil) -> RequestBuilder<BatchCSVRecord> {
        var path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let transformNamePreEscape = "\(transformName)"
        let transformNamePostEscape = transformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transformName}", with: transformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = batchCSVRecord?.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BatchCSVRecord>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Takes a batch input arrays and transforms it
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter batchRecord: (body) The input batch of record arrays (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformarray(deploymentName: String, versionName: String, transformName: String, batchRecord: Any? = nil, completion: @escaping ((_ data: Base64NDArrayBody?, _ error: ErrorResponse?) -> Void)) {
        transformarrayWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, transformName: transformName, batchRecord: batchRecord).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Takes a batch input arrays and transforms it
     - POST /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "ndarray" : "ndarray"
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter batchRecord: (body) The input batch of record arrays (optional)
     - returns: RequestBuilder<Base64NDArrayBody> 
     */
    open class func transformarrayWithRequestBuilder(deploymentName: String, versionName: String, transformName: String, batchRecord: Any? = nil) -> RequestBuilder<Base64NDArrayBody> {
        var path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let transformNamePreEscape = "\(transformName)"
        let transformNamePostEscape = transformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transformName}", with: transformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = batchRecord?.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Base64NDArrayBody>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Takes multiple multipart image file to transform and returns Base64NDArrayBody
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter imageTransformName: (path) ID or name of the deployed image transform 
     - parameter files: (form) The image files to upload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformimage(deploymentName: String, versionName: String, imageTransformName: String, files: [Data], completion: @escaping ((_ data: Base64NDArrayBody?, _ error: ErrorResponse?) -> Void)) {
        transformimageWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, imageTransformName: imageTransformName, files: files).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Takes multiple multipart image file to transform and returns Base64NDArrayBody
     - POST /endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage
     - Takes multiple multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "ndarray" : "ndarray"
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter imageTransformName: (path) ID or name of the deployed image transform 
     - parameter files: (form) The image files to upload 
     - returns: RequestBuilder<Base64NDArrayBody> 
     */
    open class func transformimageWithRequestBuilder(deploymentName: String, versionName: String, imageTransformName: String, files: [Data]) -> RequestBuilder<Base64NDArrayBody> {
        var path = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let imageTransformNamePreEscape = "\(imageTransformName)"
        let imageTransformNamePostEscape = imageTransformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageTransformName}", with: imageTransformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "files": files
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Base64NDArrayBody>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter singleCSVRecord: (body) The input record array (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformincrementalCsv(deploymentName: String, versionName: String, transformName: String, singleCSVRecord: SingleCSVRecord? = nil, completion: @escaping ((_ data: SingleCSVRecord?, _ error: ErrorResponse?) -> Void)) {
        transformincrementalCsvWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, transformName: transformName, singleCSVRecord: singleCSVRecord).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Takes SingleCSVRecord as input and returns the transformed array as SingleCSVRecord
     - POST /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental
     - Takes a SingleCSVRecord object and transforms it into the desired format
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "values" : [ "values", "values" ]
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter singleCSVRecord: (body) The input record array (optional)
     - returns: RequestBuilder<SingleCSVRecord> 
     */
    open class func transformincrementalCsvWithRequestBuilder(deploymentName: String, versionName: String, transformName: String, singleCSVRecord: SingleCSVRecord? = nil) -> RequestBuilder<SingleCSVRecord> {
        var path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let transformNamePreEscape = "\(transformName)"
        let transformNamePostEscape = transformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transformName}", with: transformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = singleCSVRecord?.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SingleCSVRecord>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Same as /transformincremental but returns Base64NDArrayBody.
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter singleRecord: (body) The input record array (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformincrementalarray(deploymentName: String, versionName: String, transformName: String, singleRecord: Any? = nil, completion: @escaping ((_ data: Base64NDArrayBody?, _ error: ErrorResponse?) -> Void)) {
        transformincrementalarrayWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, transformName: transformName, singleRecord: singleRecord).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Same as /transformincremental but returns Base64NDArrayBody.
     - POST /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "ndarray" : "ndarray"
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter singleRecord: (body) The input record array (optional)
     - returns: RequestBuilder<Base64NDArrayBody> 
     */
    open class func transformincrementalarrayWithRequestBuilder(deploymentName: String, versionName: String, transformName: String, singleRecord: Any? = nil) -> RequestBuilder<Base64NDArrayBody> {
        var path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let transformNamePreEscape = "\(transformName)"
        let transformNamePostEscape = transformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transformName}", with: transformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = singleRecord?.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Base64NDArrayBody>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Takes a single multipart image file to transform and returns Base64NDArrayBody
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter imageTransformName: (path) ID or name of the deployed image transform 
     - parameter file: (form) The image file to upload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformincrementalimage(deploymentName: String, versionName: String, imageTransformName: String, file: URL, completion: @escaping ((_ data: Base64NDArrayBody?, _ error: ErrorResponse?) -> Void)) {
        transformincrementalimageWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, imageTransformName: imageTransformName, file: file).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Takes a single multipart image file to transform and returns Base64NDArrayBody
     - POST /endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage
     - Takes a single multipart image file and transforms it into the desired format and returns it in the form of Base64NDArrayBody
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "ndarray" : "ndarray"
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter imageTransformName: (path) ID or name of the deployed image transform 
     - parameter file: (form) The image file to upload 
     - returns: RequestBuilder<Base64NDArrayBody> 
     */
    open class func transformincrementalimageWithRequestBuilder(deploymentName: String, versionName: String, imageTransformName: String, file: URL) -> RequestBuilder<Base64NDArrayBody> {
        var path = "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let imageTransformNamePreEscape = "\(imageTransformName)"
        let imageTransformNamePostEscape = imageTransformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageTransformName}", with: imageTransformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Base64NDArrayBody>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Gets the JSON string of the deployed transform process (CSV or Image)
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformprocessGet(deploymentName: String, versionName: String, transformName: String, completion: @escaping ((_ data: Any?, _ error: ErrorResponse?) -> Void)) {
        transformprocessGetWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, transformName: transformName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the JSON string of the deployed transform process (CSV or Image)
     - GET /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example="{}"}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - returns: RequestBuilder<Any> 
     */
    open class func transformprocessGetWithRequestBuilder(deploymentName: String, versionName: String, transformName: String) -> RequestBuilder<Any> {
        var path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let transformNamePreEscape = "\(transformName)"
        let transformNamePostEscape = transformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transformName}", with: transformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Sets the deployed (CSV or Image) transform process through the provided JSON string
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter transformProcess: (body) The transform process to set (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transformprocessPost(deploymentName: String, versionName: String, transformName: String, transformProcess: Any? = nil, completion: @escaping ((_ data: Any?, _ error: ErrorResponse?) -> Void)) {
        transformprocessPostWithRequestBuilder(deploymentName: deploymentName, versionName: versionName, transformName: transformName, transformProcess: transformProcess).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Sets the deployed (CSV or Image) transform process through the provided JSON string
     - POST /endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example="{}"}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter versionName: (path) Version name of the endpoint. The default value is \&quot;default\&quot; 
     - parameter transformName: (path) ID or name of the deployed transform 
     - parameter transformProcess: (body) The transform process to set (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func transformprocessPostWithRequestBuilder(deploymentName: String, versionName: String, transformName: String, transformProcess: Any? = nil) -> RequestBuilder<Any> {
        var path = "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let versionNamePreEscape = "\(versionName)"
        let versionNamePostEscape = versionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionName}", with: versionNamePostEscape, options: .literal, range: nil)
        let transformNamePreEscape = "\(transformName)"
        let transformNamePostEscape = transformNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transformName}", with: transformNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = transformProcess?.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
