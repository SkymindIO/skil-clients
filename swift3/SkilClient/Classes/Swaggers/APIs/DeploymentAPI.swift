//
// DeploymentAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DeploymentAPI: APIBase {
    /**
     Delete a model by deployment and model id
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteModel(deploymentId: String, modelId: String, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        deleteModelWithRequestBuilder(deploymentId: deploymentId, modelId: modelId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete a model by deployment and model id
     - DELETE /deployment/{deploymentId}/model/{modelId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "status" : "status"
}}]
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func deleteModelWithRequestBuilder(deploymentId: String, modelId: String) -> RequestBuilder<InlineResponse200> {
        var path = "/deployment/{deploymentId}/model/{modelId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let modelIdPreEscape = "\(modelId)"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deploy a model in a deployment group.
     - parameter deploymentId: (path) ID deployment group 
     - parameter body: (body) the model import request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deployModel(deploymentId: String, body: ImportModelRequest, completion: @escaping ((_ data: ModelEntity?, _ error: ErrorResponse?) -> Void)) {
        deployModelWithRequestBuilder(deploymentId: deploymentId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deploy a model in a deployment group.
     - POST /deployment/{deploymentId}/model
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "launchPolicy" : "{}",
  "created" : 6,
  "modelState" : "CREATED",
  "scale" : 5.63737665663332876420099637471139430999755859375,
  "modelType" : "transform",
  "fileLocation" : "fileLocation",
  "jvmArgs" : "jvmArgs",
  "labelsFileLocation" : "labelsFileLocation",
  "extraArgs" : "extraArgs",
  "deploymentId" : 5,
  "name" : "name",
  "subType" : "subType",
  "id" : 0,
  "state" : "created",
  "updated" : 1
}}]
     - parameter deploymentId: (path) ID deployment group 
     - parameter body: (body) the model import request 
     - returns: RequestBuilder<ModelEntity> 
     */
    open class func deployModelWithRequestBuilder(deploymentId: String, body: ImportModelRequest) -> RequestBuilder<ModelEntity> {
        var path = "/deployment/{deploymentId}/model"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a new deployment group.
     - parameter body: (body) the deployment request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deploymentCreate(body: CreateDeploymentRequest, completion: @escaping ((_ data: DeploymentResponse?, _ error: ErrorResponse?) -> Void)) {
        deploymentCreateWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a new deployment group.
     - POST /deployment
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "id" : "id",
  "body" : {
    "models" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "transforms" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "knn" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ]
  },
  "deploymentSlug" : "deploymentSlug",
  "status" : "status"
}}]
     - parameter body: (body) the deployment request 
     - returns: RequestBuilder<DeploymentResponse> 
     */
    open class func deploymentCreateWithRequestBuilder(body: CreateDeploymentRequest) -> RequestBuilder<DeploymentResponse> {
        let path = "/deployment"
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeploymentResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a deployment by id
     - parameter deploymentId: (path) Id of the deployment group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deploymentDelete(deploymentId: String, completion: @escaping ((_ data: InlineResponse200?, _ error: ErrorResponse?) -> Void)) {
        deploymentDeleteWithRequestBuilder(deploymentId: deploymentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete a deployment by id
     - DELETE /deployment/{deploymentId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "status" : "status"
}}]
     - parameter deploymentId: (path) Id of the deployment group 
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func deploymentDeleteWithRequestBuilder(deploymentId: String) -> RequestBuilder<InlineResponse200> {
        var path = "/deployment/{deploymentId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a deployment details by id
     - parameter deploymentId: (path) Id of the deployment group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deploymentGet(deploymentId: String, completion: @escaping ((_ data: DeploymentResponse?, _ error: ErrorResponse?) -> Void)) {
        deploymentGetWithRequestBuilder(deploymentId: deploymentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a deployment details by id
     - GET /deployment/{deploymentId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "id" : "id",
  "body" : {
    "models" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "transforms" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "knn" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ]
  },
  "deploymentSlug" : "deploymentSlug",
  "status" : "status"
}}]
     - parameter deploymentId: (path) Id of the deployment group 
     - returns: RequestBuilder<DeploymentResponse> 
     */
    open class func deploymentGetWithRequestBuilder(deploymentId: String) -> RequestBuilder<DeploymentResponse> {
        var path = "/deployment/{deploymentId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeploymentResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a list of deployments
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deployments(completion: @escaping ((_ data: [DeploymentResponse]?, _ error: ErrorResponse?) -> Void)) {
        deploymentsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list of deployments
     - GET /deployments
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "id" : "id",
  "body" : {
    "models" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "transforms" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "knn" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ]
  },
  "deploymentSlug" : "deploymentSlug",
  "status" : "status"
}, {
  "name" : "name",
  "id" : "id",
  "body" : {
    "models" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "transforms" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ],
    "knn" : [ {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    }, {
      "name" : "name",
      "scale" : 0,
      "id" : "id",
      "uri" : [ "uri", "uri" ],
      "status" : "status"
    } ]
  },
  "deploymentSlug" : "deploymentSlug",
  "status" : "status"
} ]}]
     - returns: RequestBuilder<[DeploymentResponse]> 
     */
    open class func deploymentsWithRequestBuilder() -> RequestBuilder<[DeploymentResponse]> {
        let path = "/deployments"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[DeploymentResponse]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Modify the state (start/stop) of a deployed model
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - parameter body: (body) the model state object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modelStateChange(deploymentId: String, modelId: String, body: SetState, completion: @escaping ((_ data: ModelEntity?, _ error: ErrorResponse?) -> Void)) {
        modelStateChangeWithRequestBuilder(deploymentId: deploymentId, modelId: modelId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Modify the state (start/stop) of a deployed model
     - POST /deployment/{deploymentId}/model/{modelId}/state
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "launchPolicy" : "{}",
  "created" : 6,
  "modelState" : "CREATED",
  "scale" : 5.63737665663332876420099637471139430999755859375,
  "modelType" : "transform",
  "fileLocation" : "fileLocation",
  "jvmArgs" : "jvmArgs",
  "labelsFileLocation" : "labelsFileLocation",
  "extraArgs" : "extraArgs",
  "deploymentId" : 5,
  "name" : "name",
  "subType" : "subType",
  "id" : 0,
  "state" : "created",
  "updated" : 1
}}]
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - parameter body: (body) the model state object 
     - returns: RequestBuilder<ModelEntity> 
     */
    open class func modelStateChangeWithRequestBuilder(deploymentId: String, modelId: String, body: SetState) -> RequestBuilder<ModelEntity> {
        var path = "/deployment/{deploymentId}/model/{modelId}/state"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let modelIdPreEscape = "\(modelId)"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Retrieve a list of all the deployed models given a deployment id
     - parameter deploymentId: (path) ID deployment group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func models(deploymentId: String, completion: @escaping ((_ data: [ModelEntity]?, _ error: ErrorResponse?) -> Void)) {
        modelsWithRequestBuilder(deploymentId: deploymentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve a list of all the deployed models given a deployment id
     - GET /deployment/{deploymentId}/models
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "launchPolicy" : "{}",
  "created" : 6,
  "modelState" : "CREATED",
  "scale" : 5.63737665663332876420099637471139430999755859375,
  "modelType" : "transform",
  "fileLocation" : "fileLocation",
  "jvmArgs" : "jvmArgs",
  "labelsFileLocation" : "labelsFileLocation",
  "extraArgs" : "extraArgs",
  "deploymentId" : 5,
  "name" : "name",
  "subType" : "subType",
  "id" : 0,
  "state" : "created",
  "updated" : 1
}, {
  "launchPolicy" : "{}",
  "created" : 6,
  "modelState" : "CREATED",
  "scale" : 5.63737665663332876420099637471139430999755859375,
  "modelType" : "transform",
  "fileLocation" : "fileLocation",
  "jvmArgs" : "jvmArgs",
  "labelsFileLocation" : "labelsFileLocation",
  "extraArgs" : "extraArgs",
  "deploymentId" : 5,
  "name" : "name",
  "subType" : "subType",
  "id" : 0,
  "state" : "created",
  "updated" : 1
} ]}]
     - parameter deploymentId: (path) ID deployment group 
     - returns: RequestBuilder<[ModelEntity]> 
     */
    open class func modelsWithRequestBuilder(deploymentId: String) -> RequestBuilder<[ModelEntity]> {
        var path = "/deployment/{deploymentId}/models"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ModelEntity]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Reimport a model to a previous deployed model in a deployment
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - parameter body: (body) the deployment request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reimportModel(deploymentId: String, modelId: String, body: ImportModelRequest, completion: @escaping ((_ data: ModelEntity?, _ error: ErrorResponse?) -> Void)) {
        reimportModelWithRequestBuilder(deploymentId: deploymentId, modelId: modelId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Reimport a model to a previous deployed model in a deployment
     - POST /deployment/{deploymentId}/model/{modelId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "launchPolicy" : "{}",
  "created" : 6,
  "modelState" : "CREATED",
  "scale" : 5.63737665663332876420099637471139430999755859375,
  "modelType" : "transform",
  "fileLocation" : "fileLocation",
  "jvmArgs" : "jvmArgs",
  "labelsFileLocation" : "labelsFileLocation",
  "extraArgs" : "extraArgs",
  "deploymentId" : 5,
  "name" : "name",
  "subType" : "subType",
  "id" : 0,
  "state" : "created",
  "updated" : 1
}}]
     - parameter deploymentId: (path) ID deployment group 
     - parameter modelId: (path) the id of the deployed model 
     - parameter body: (body) the deployment request 
     - returns: RequestBuilder<ModelEntity> 
     */
    open class func reimportModelWithRequestBuilder(deploymentId: String, modelId: String, body: ImportModelRequest) -> RequestBuilder<ModelEntity> {
        var path = "/deployment/{deploymentId}/model/{modelId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let modelIdPreEscape = "\(modelId)"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelEntity>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
