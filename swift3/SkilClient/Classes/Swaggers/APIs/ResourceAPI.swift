//
// ResourceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ResourceAPI: APIBase {
    /**
     Adds credentials
     - parameter addCredentialsRequest: (body) Add credentials request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addCredentials(addCredentialsRequest: AddCredentialsRequest, completion: @escaping ((_ data: ResourceCredentials?, _ error: ErrorResponse?) -> Void)) {
        addCredentialsWithRequestBuilder(addCredentialsRequest: addCredentialsRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds credentials
     - POST /resources/credentials
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "credentialId" : 0,
  "type" : "AWS",
  "uri" : "uri"
}}]
     - parameter addCredentialsRequest: (body) Add credentials request object 
     - returns: RequestBuilder<ResourceCredentials> 
     */
    open class func addCredentialsWithRequestBuilder(addCredentialsRequest: AddCredentialsRequest) -> RequestBuilder<ResourceCredentials> {
        let path = "/resources/credentials"
        let URLString = SkilClientAPI.basePath + path
        let parameters = addCredentialsRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResourceCredentials>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a resource
     - parameter addResourceRequest: (body) The Add resource request object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addResource(addResourceRequest: AddResourceRequest, completion: @escaping ((_ data: Any?, _ error: ErrorResponse?) -> Void)) {
        addResourceWithRequestBuilder(addResourceRequest: addResourceRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a resource
     - POST /resources/add/resource
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example="{}"}]
     - parameter addResourceRequest: (body) The Add resource request object 
     - returns: RequestBuilder<Any> 
     */
    open class func addResourceWithRequestBuilder(addResourceRequest: AddResourceRequest) -> RequestBuilder<Any> {
        let path = "/resources/add/resource"
        let URLString = SkilClientAPI.basePath + path
        let parameters = addResourceRequest.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a resource group
     - parameter groupName: (body) Name of the resource group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addResourceGroup(groupName: String, completion: @escaping ((_ data: ResourceGroup?, _ error: ErrorResponse?) -> Void)) {
        addResourceGroupWithRequestBuilder(groupName: groupName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a resource group
     - POST /resources/add/group
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "groupName" : "groupName",
  "added" : 6,
  "groupId" : 0,
  "updated" : 1
}}]
     - parameter groupName: (body) Name of the resource group 
     - returns: RequestBuilder<ResourceGroup> 
     */
    open class func addResourceGroupWithRequestBuilder(groupName: String) -> RequestBuilder<ResourceGroup> {
        let path = "/resources/add/group"
        let URLString = SkilClientAPI.basePath + path
        let parameters = groupName.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResourceGroup>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Adds a resource to a resource group
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter resourceId: (path) ID of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addResourceToGroup(resourceGroupId: Int64, resourceId: Int64, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        addResourceToGroupWithRequestBuilder(resourceGroupId: resourceGroupId, resourceId: resourceId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Adds a resource to a resource group
     - GET /resources/add/resourcetogroup/{resourceGroupId}/{resourceId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter resourceId: (path) ID of the resource 
     - returns: RequestBuilder<Void> 
     */
    open class func addResourceToGroupWithRequestBuilder(resourceGroupId: Int64, resourceId: Int64) -> RequestBuilder<Void> {
        var path = "/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}"
        let resourceGroupIdPreEscape = "\(resourceGroupId)"
        let resourceGroupIdPostEscape = resourceGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceGroupId}", with: resourceGroupIdPostEscape, options: .literal, range: nil)
        let resourceIdPreEscape = "\(resourceId)"
        let resourceIdPostEscape = resourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceId}", with: resourceIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete credentials given an ID
     - parameter credentialId: (path) Credentials ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCredentialsById(credentialId: Int64, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteCredentialsByIdWithRequestBuilder(credentialId: credentialId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Delete credentials given an ID
     - DELETE /resources/credentials/{credentialId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter credentialId: (path) Credentials ID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteCredentialsByIdWithRequestBuilder(credentialId: Int64) -> RequestBuilder<Void> {
        var path = "/resources/credentials/{credentialId}"
        let credentialIdPreEscape = "\(credentialId)"
        let credentialIdPostEscape = credentialIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{credentialId}", with: credentialIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete the resource with the specified resource ID
     - parameter resourceId: (path) ID of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteResourceById(resourceId: Int64, completion: @escaping ((_ data: Resource?, _ error: ErrorResponse?) -> Void)) {
        deleteResourceByIdWithRequestBuilder(resourceId: resourceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete the resource with the specified resource ID
     - DELETE /resources/remove/resource/{resourceId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
}}]
     - parameter resourceId: (path) ID of the resource 
     - returns: RequestBuilder<Resource> 
     */
    open class func deleteResourceByIdWithRequestBuilder(resourceId: Int64) -> RequestBuilder<Resource> {
        var path = "/resources/remove/resource/{resourceId}"
        let resourceIdPreEscape = "\(resourceId)"
        let resourceIdPostEscape = resourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceId}", with: resourceIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Resource>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Removes a resource from a resource group
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter resourceId: (path) ID of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteResourceFromGroup(resourceGroupId: Int64, resourceId: Int64, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteResourceFromGroupWithRequestBuilder(resourceGroupId: resourceGroupId, resourceId: resourceId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Removes a resource from a resource group
     - GET /resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter resourceId: (path) ID of the resource 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteResourceFromGroupWithRequestBuilder(resourceGroupId: Int64, resourceId: Int64) -> RequestBuilder<Void> {
        var path = "/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}"
        let resourceGroupIdPreEscape = "\(resourceGroupId)"
        let resourceGroupIdPostEscape = resourceGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceGroupId}", with: resourceGroupIdPostEscape, options: .literal, range: nil)
        let resourceIdPreEscape = "\(resourceId)"
        let resourceIdPostEscape = resourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceId}", with: resourceIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete the resource group with the specified resource group ID
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteResourceGroupById(resourceGroupId: Int64, completion: @escaping ((_ data: ResourceGroup?, _ error: ErrorResponse?) -> Void)) {
        deleteResourceGroupByIdWithRequestBuilder(resourceGroupId: resourceGroupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete the resource group with the specified resource group ID
     - DELETE /resources/remove/group/{resourceGroupId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "groupName" : "groupName",
  "added" : 6,
  "groupId" : 0,
  "updated" : 1
}}]
     - parameter resourceGroupId: (path) ID of the resource group 
     - returns: RequestBuilder<ResourceGroup> 
     */
    open class func deleteResourceGroupByIdWithRequestBuilder(resourceGroupId: Int64) -> RequestBuilder<ResourceGroup> {
        var path = "/resources/remove/group/{resourceGroupId}"
        let resourceGroupIdPreEscape = "\(resourceGroupId)"
        let resourceGroupIdPostEscape = resourceGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceGroupId}", with: resourceGroupIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResourceGroup>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get credentials given an ID
     - parameter credentialId: (path) Credentials ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCredentialsById(credentialId: Int64, completion: @escaping ((_ data: ResourceCredentials?, _ error: ErrorResponse?) -> Void)) {
        getCredentialsByIdWithRequestBuilder(credentialId: credentialId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get credentials given an ID
     - GET /resources/credentials/{credentialId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "credentialId" : 0,
  "type" : "AWS",
  "uri" : "uri"
}}]
     - parameter credentialId: (path) Credentials ID 
     - returns: RequestBuilder<ResourceCredentials> 
     */
    open class func getCredentialsByIdWithRequestBuilder(credentialId: Int64) -> RequestBuilder<ResourceCredentials> {
        var path = "/resources/credentials/{credentialId}"
        let credentialIdPreEscape = "\(credentialId)"
        let credentialIdPostEscape = credentialIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{credentialId}", with: credentialIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResourceCredentials>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the resource with the specified resource ID
     - parameter resourceId: (path) ID of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourceById(resourceId: Int64, completion: @escaping ((_ data: Resource?, _ error: ErrorResponse?) -> Void)) {
        getResourceByIdWithRequestBuilder(resourceId: resourceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the resource with the specified resource ID
     - GET /resources/resource/{resourceId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
}}]
     - parameter resourceId: (path) ID of the resource 
     - returns: RequestBuilder<Resource> 
     */
    open class func getResourceByIdWithRequestBuilder(resourceId: Int64) -> RequestBuilder<Resource> {
        var path = "/resources/resource/{resourceId}"
        let resourceIdPreEscape = "\(resourceId)"
        let resourceIdPostEscape = resourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceId}", with: resourceIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Resource>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter resourceSubType
     */
    public enum ResourceSubType_getResourceBySubType: String { 
        case emr = "EMR"
        case s3 = "S3"
        case googleStorage = "GoogleStorage"
        case dataProc = "DataProc"
        case hdinsight = "HDInsight"
        case azureStorage = "AzureStorage"
        case hdfs = "HDFS"
        case yarn = "YARN"
    }

    /**
     Get all the resources with the specified resource subtype
     - parameter resourceSubType: (path) Subtype of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourceBySubType(resourceSubType: ResourceSubType_getResourceBySubType, completion: @escaping ((_ data: [Resource]?, _ error: ErrorResponse?) -> Void)) {
        getResourceBySubTypeWithRequestBuilder(resourceSubType: resourceSubType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all the resources with the specified resource subtype
     - GET /resources/resources/subtype/{resourceSubType}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
}, {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
} ]}]
     - parameter resourceSubType: (path) Subtype of the resource 
     - returns: RequestBuilder<[Resource]> 
     */
    open class func getResourceBySubTypeWithRequestBuilder(resourceSubType: ResourceSubType_getResourceBySubType) -> RequestBuilder<[Resource]> {
        var path = "/resources/resources/subtype/{resourceSubType}"
        let resourceSubTypePreEscape = "\(resourceSubType.rawValue)"
        let resourceSubTypePostEscape = resourceSubTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceSubType}", with: resourceSubTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Resource]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter resourceType
     */
    public enum ResourceType_getResourceByType: String { 
        case compute = "COMPUTE"
        case storage = "STORAGE"
    }

    /**
     Get all the resources with the specified resource type
     - parameter resourceType: (path) Type of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourceByType(resourceType: ResourceType_getResourceByType, completion: @escaping ((_ data: [Resource]?, _ error: ErrorResponse?) -> Void)) {
        getResourceByTypeWithRequestBuilder(resourceType: resourceType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all the resources with the specified resource type
     - GET /resources/resources/type/{resourceType}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
}, {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
} ]}]
     - parameter resourceType: (path) Type of the resource 
     - returns: RequestBuilder<[Resource]> 
     */
    open class func getResourceByTypeWithRequestBuilder(resourceType: ResourceType_getResourceByType) -> RequestBuilder<[Resource]> {
        var path = "/resources/resources/type/{resourceType}"
        let resourceTypePreEscape = "\(resourceType.rawValue)"
        let resourceTypePostEscape = resourceTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceType}", with: resourceTypePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Resource]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the resource details with the specified resource ID
     - parameter resourceId: (path) ID of the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourceDetailsById(resourceId: Int64, completion: @escaping ((_ data: Any?, _ error: ErrorResponse?) -> Void)) {
        getResourceDetailsByIdWithRequestBuilder(resourceId: resourceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the resource details with the specified resource ID
     - GET /resources/details/{resourceId}
     - Get the details for the resource, for the given ID. Note that a 'ResourceDetails' object contains specific information about the resource (such as region for an AWS resource, or URI for a HDFS resource), where as the 'Resource' object contains only general information (name, id, type, subtype). 
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example="{}"}]
     - parameter resourceId: (path) ID of the resource 
     - returns: RequestBuilder<Any> 
     */
    open class func getResourceDetailsByIdWithRequestBuilder(resourceId: Int64) -> RequestBuilder<Any> {
        var path = "/resources/details/{resourceId}"
        let resourceIdPreEscape = "\(resourceId)"
        let resourceIdPostEscape = resourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceId}", with: resourceIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the resource group with the specified resource group ID
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourceGroupById(resourceGroupId: Int64, completion: @escaping ((_ data: ResourceGroup?, _ error: ErrorResponse?) -> Void)) {
        getResourceGroupByIdWithRequestBuilder(resourceGroupId: resourceGroupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the resource group with the specified resource group ID
     - GET /resources/group/{resourceGroupId}
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "groupName" : "groupName",
  "added" : 6,
  "groupId" : 0,
  "updated" : 1
}}]
     - parameter resourceGroupId: (path) ID of the resource group 
     - returns: RequestBuilder<ResourceGroup> 
     */
    open class func getResourceGroupByIdWithRequestBuilder(resourceGroupId: Int64) -> RequestBuilder<ResourceGroup> {
        var path = "/resources/group/{resourceGroupId}"
        let resourceGroupIdPreEscape = "\(resourceGroupId)"
        let resourceGroupIdPostEscape = resourceGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceGroupId}", with: resourceGroupIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResourceGroup>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a list of all the resource groups
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourceGroups(completion: @escaping ((_ data: [ResourceGroup]?, _ error: ErrorResponse?) -> Void)) {
        getResourceGroupsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list of all the resource groups
     - GET /resources/groups
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "groupName" : "groupName",
  "added" : 6,
  "groupId" : 0,
  "updated" : 1
}, {
  "groupName" : "groupName",
  "added" : 6,
  "groupId" : 0,
  "updated" : 1
} ]}]
     - returns: RequestBuilder<[ResourceGroup]> 
     */
    open class func getResourceGroupsWithRequestBuilder() -> RequestBuilder<[ResourceGroup]> {
        let path = "/resources/groups"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ResourceGroup]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all known/registered resources, of all types
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResources(completion: @escaping ((_ data: [Resource]?, _ error: ErrorResponse?) -> Void)) {
        getResourcesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all known/registered resources, of all types
     - GET /resources/resources
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
}, {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
} ]}]
     - returns: RequestBuilder<[Resource]> 
     */
    open class func getResourcesWithRequestBuilder() -> RequestBuilder<[Resource]> {
        let path = "/resources/resources"
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Resource]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all resources from a resource group
     - parameter resourceGroupId: (path) ID of the resource group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResourcesFromGroup(resourceGroupId: Int64, completion: @escaping ((_ data: [Resource]?, _ error: ErrorResponse?) -> Void)) {
        getResourcesFromGroupWithRequestBuilder(resourceGroupId: resourceGroupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all resources from a resource group
     - GET /resources/group/{resourceGroupId}/resources
     - API Key:
       - type: apiKey authorization 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
}, {
  "resourceId" : 0,
  "name" : "name",
  "credentialId" : "credentialId",
  "subType" : "EMR",
  "type" : "COMPUTE"
} ]}]
     - parameter resourceGroupId: (path) ID of the resource group 
     - returns: RequestBuilder<[Resource]> 
     */
    open class func getResourcesFromGroupWithRequestBuilder(resourceGroupId: Int64) -> RequestBuilder<[Resource]> {
        var path = "/resources/group/{resourceGroupId}/resources"
        let resourceGroupIdPreEscape = "\(resourceGroupId)"
        let resourceGroupIdPostEscape = resourceGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceGroupId}", with: resourceGroupIdPostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Resource]>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
