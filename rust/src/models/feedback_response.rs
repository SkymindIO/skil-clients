/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FeedbackResponse {
  /// The number of examples required to start the retraining process.
  #[serde(rename = "retrainThreshold")]
  retrain_threshold: Option<i32>,
  /// The number of retraining examples accumulated so far.
  #[serde(rename = "accumulatedSoFar")]
  accumulated_so_far: Option<i32>
}

impl FeedbackResponse {
  pub fn new() -> FeedbackResponse {
    FeedbackResponse {
      retrain_threshold: None,
      accumulated_so_far: None
    }
  }

  pub fn set_retrain_threshold(&mut self, retrain_threshold: i32) {
    self.retrain_threshold = Some(retrain_threshold);
  }

  pub fn with_retrain_threshold(mut self, retrain_threshold: i32) -> FeedbackResponse {
    self.retrain_threshold = Some(retrain_threshold);
    self
  }

  pub fn retrain_threshold(&self) -> Option<&i32> {
    self.retrain_threshold.as_ref()
  }

  pub fn reset_retrain_threshold(&mut self) {
    self.retrain_threshold = None;
  }

  pub fn set_accumulated_so_far(&mut self, accumulated_so_far: i32) {
    self.accumulated_so_far = Some(accumulated_so_far);
  }

  pub fn with_accumulated_so_far(mut self, accumulated_so_far: i32) -> FeedbackResponse {
    self.accumulated_so_far = Some(accumulated_so_far);
    self
  }

  pub fn accumulated_so_far(&self) -> Option<&i32> {
    self.accumulated_so_far.as_ref()
  }

  pub fn reset_accumulated_so_far(&mut self) {
    self.accumulated_so_far = None;
  }

}



