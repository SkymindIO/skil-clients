/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DeploymentResponse {
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "deploymentSlug")]
  deployment_slug: Option<String>,
  #[serde(rename = "status")]
  status: Option<String>,
  #[serde(rename = "body")]
  body: Option<::models::DeploymentObjects>
}

impl DeploymentResponse {
  pub fn new() -> DeploymentResponse {
    DeploymentResponse {
      id: None,
      name: None,
      deployment_slug: None,
      status: None,
      body: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> DeploymentResponse {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> DeploymentResponse {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_deployment_slug(&mut self, deployment_slug: String) {
    self.deployment_slug = Some(deployment_slug);
  }

  pub fn with_deployment_slug(mut self, deployment_slug: String) -> DeploymentResponse {
    self.deployment_slug = Some(deployment_slug);
    self
  }

  pub fn deployment_slug(&self) -> Option<&String> {
    self.deployment_slug.as_ref()
  }

  pub fn reset_deployment_slug(&mut self) {
    self.deployment_slug = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> DeploymentResponse {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_body(&mut self, body: ::models::DeploymentObjects) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: ::models::DeploymentObjects) -> DeploymentResponse {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&::models::DeploymentObjects> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

}



