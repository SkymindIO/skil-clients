/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogBatch {
  #[serde(rename = "offset")]
  offset: Option<i32>,
  #[serde(rename = "rowCount")]
  row_count: Option<i32>,
  #[serde(rename = "logs")]
  logs: Option<String>
}

impl LogBatch {
  pub fn new() -> LogBatch {
    LogBatch {
      offset: None,
      row_count: None,
      logs: None
    }
  }

  pub fn set_offset(&mut self, offset: i32) {
    self.offset = Some(offset);
  }

  pub fn with_offset(mut self, offset: i32) -> LogBatch {
    self.offset = Some(offset);
    self
  }

  pub fn offset(&self) -> Option<&i32> {
    self.offset.as_ref()
  }

  pub fn reset_offset(&mut self) {
    self.offset = None;
  }

  pub fn set_row_count(&mut self, row_count: i32) {
    self.row_count = Some(row_count);
  }

  pub fn with_row_count(mut self, row_count: i32) -> LogBatch {
    self.row_count = Some(row_count);
    self
  }

  pub fn row_count(&self) -> Option<&i32> {
    self.row_count.as_ref()
  }

  pub fn reset_row_count(&mut self) {
    self.row_count = None;
  }

  pub fn set_logs(&mut self, logs: String) {
    self.logs = Some(logs);
  }

  pub fn with_logs(mut self, logs: String) -> LogBatch {
    self.logs = Some(logs);
    self
  }

  pub fn logs(&self) -> Option<&String> {
    self.logs.as_ref()
  }

  pub fn reset_logs(&mut self) {
    self.logs = None;
  }

}



