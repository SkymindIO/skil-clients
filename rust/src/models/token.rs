/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Token {
  #[serde(rename = "tokenId")]
  token_id: Option<i64>,
  #[serde(rename = "issued")]
  issued: Option<i64>,
  #[serde(rename = "expire")]
  expire: Option<i64>,
  #[serde(rename = "token")]
  token: Option<String>,
  #[serde(rename = "userId")]
  user_id: Option<String>,
  #[serde(rename = "isRevoked")]
  is_revoked: Option<i32>
}

impl Token {
  pub fn new() -> Token {
    Token {
      token_id: None,
      issued: None,
      expire: None,
      token: None,
      user_id: None,
      is_revoked: None
    }
  }

  pub fn set_token_id(&mut self, token_id: i64) {
    self.token_id = Some(token_id);
  }

  pub fn with_token_id(mut self, token_id: i64) -> Token {
    self.token_id = Some(token_id);
    self
  }

  pub fn token_id(&self) -> Option<&i64> {
    self.token_id.as_ref()
  }

  pub fn reset_token_id(&mut self) {
    self.token_id = None;
  }

  pub fn set_issued(&mut self, issued: i64) {
    self.issued = Some(issued);
  }

  pub fn with_issued(mut self, issued: i64) -> Token {
    self.issued = Some(issued);
    self
  }

  pub fn issued(&self) -> Option<&i64> {
    self.issued.as_ref()
  }

  pub fn reset_issued(&mut self) {
    self.issued = None;
  }

  pub fn set_expire(&mut self, expire: i64) {
    self.expire = Some(expire);
  }

  pub fn with_expire(mut self, expire: i64) -> Token {
    self.expire = Some(expire);
    self
  }

  pub fn expire(&self) -> Option<&i64> {
    self.expire.as_ref()
  }

  pub fn reset_expire(&mut self) {
    self.expire = None;
  }

  pub fn set_token(&mut self, token: String) {
    self.token = Some(token);
  }

  pub fn with_token(mut self, token: String) -> Token {
    self.token = Some(token);
    self
  }

  pub fn token(&self) -> Option<&String> {
    self.token.as_ref()
  }

  pub fn reset_token(&mut self) {
    self.token = None;
  }

  pub fn set_user_id(&mut self, user_id: String) {
    self.user_id = Some(user_id);
  }

  pub fn with_user_id(mut self, user_id: String) -> Token {
    self.user_id = Some(user_id);
    self
  }

  pub fn user_id(&self) -> Option<&String> {
    self.user_id.as_ref()
  }

  pub fn reset_user_id(&mut self) {
    self.user_id = None;
  }

  pub fn set_is_revoked(&mut self, is_revoked: i32) {
    self.is_revoked = Some(is_revoked);
  }

  pub fn with_is_revoked(mut self, is_revoked: i32) -> Token {
    self.is_revoked = Some(is_revoked);
    self
  }

  pub fn is_revoked(&self) -> Option<&i32> {
    self.is_revoked.as_ref()
  }

  pub fn reset_is_revoked(&mut self) {
    self.is_revoked = None;
  }

}



