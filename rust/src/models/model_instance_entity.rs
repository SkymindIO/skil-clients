/*
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;


#[derive(Debug, Serialize, Deserialize)]
pub struct ModelInstanceEntity {
    /// The model URI
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// The json string for the ETL (Extract, Transform and Load)
    #[serde(rename = "etlJson", skip_serializing_if = "Option::is_none")]
    pub etl_json: Option<String>,
    /// GUID of the model.
    #[serde(rename = "modelId", skip_serializing_if = "Option::is_none")]
    pub model_id: Option<String>,
    /// Comma-separated labels string for the model
    #[serde(rename = "modelLabels", skip_serializing_if = "Option::is_none")]
    pub model_labels: Option<String>,
    /// Format for the model input
    #[serde(rename = "inputFormats", skip_serializing_if = "Option::is_none")]
    pub input_formats: Option<String>,
    /// When the model was created
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<i64>,
    /// JSON string of the associated Zeppelin Notebook
    #[serde(rename = "notebookJson", skip_serializing_if = "Option::is_none")]
    pub notebook_json: Option<String>,
    /// GUID for the model evaluation
    #[serde(rename = "evalId", skip_serializing_if = "Option::is_none")]
    pub eval_id: Option<String>,
    /// Model's name
    #[serde(rename = "modelName", skip_serializing_if = "Option::is_none")]
    pub model_name: Option<String>,
    /// Original GUID of the model (used for maintaining revisions of a particular model)
    #[serde(rename = "originalModelId", skip_serializing_if = "Option::is_none")]
    pub original_model_id: Option<String>,
    /// Model version
    #[serde(rename = "modelVersion", skip_serializing_if = "Option::is_none")]
    pub model_version: Option<String>,
    /// GUID of the Experiment which is associated with the model.
    #[serde(rename = "experimentId", skip_serializing_if = "Option::is_none")]
    pub experiment_id: Option<String>,
}

impl ModelInstanceEntity {
    pub fn new() -> ModelInstanceEntity {
        ModelInstanceEntity {
            uri: None,
            etl_json: None,
            model_id: None,
            model_labels: None,
            input_formats: None,
            created: None,
            notebook_json: None,
            eval_id: None,
            model_name: None,
            original_model_id: None,
            model_version: None,
            experiment_id: None,
        }
    }
}


