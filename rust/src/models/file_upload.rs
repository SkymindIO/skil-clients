/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FileUpload {
  #[serde(rename = "key")]
  key: Option<String>,
  #[serde(rename = "fileName")]
  file_name: Option<String>,
  #[serde(rename = "status")]
  status: Option<String>,
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "path")]
  path: Option<String>,
  #[serde(rename = "fileContent")]
  file_content: Option<String>
}

impl FileUpload {
  pub fn new() -> FileUpload {
    FileUpload {
      key: None,
      file_name: None,
      status: None,
      _type: None,
      path: None,
      file_content: None
    }
  }

  pub fn set_key(&mut self, key: String) {
    self.key = Some(key);
  }

  pub fn with_key(mut self, key: String) -> FileUpload {
    self.key = Some(key);
    self
  }

  pub fn key(&self) -> Option<&String> {
    self.key.as_ref()
  }

  pub fn reset_key(&mut self) {
    self.key = None;
  }

  pub fn set_file_name(&mut self, file_name: String) {
    self.file_name = Some(file_name);
  }

  pub fn with_file_name(mut self, file_name: String) -> FileUpload {
    self.file_name = Some(file_name);
    self
  }

  pub fn file_name(&self) -> Option<&String> {
    self.file_name.as_ref()
  }

  pub fn reset_file_name(&mut self) {
    self.file_name = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> FileUpload {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> FileUpload {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> FileUpload {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_file_content(&mut self, file_content: String) {
    self.file_content = Some(file_content);
  }

  pub fn with_file_content(mut self, file_content: String) -> FileUpload {
    self.file_content = Some(file_content);
    self
  }

  pub fn file_content(&self) -> Option<&String> {
    self.file_content.as_ref()
  }

  pub fn reset_file_content(&mut self) {
    self.file_content = None;
  }

}



