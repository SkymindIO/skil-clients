/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelFeedBackRequest {
  /// The GUID of the minibatch this feedback corresponds to
  #[serde(rename = "batchId")]
  batch_id: Option<String>,
  /// The guessed label IDs by the model
  #[serde(rename = "guesses")]
  guesses: Option<Vec<String>>,
  /// The actual label IDs
  #[serde(rename = "correct")]
  correct: Option<Vec<String>>
}

impl ModelFeedBackRequest {
  pub fn new() -> ModelFeedBackRequest {
    ModelFeedBackRequest {
      batch_id: None,
      guesses: None,
      correct: None
    }
  }

  pub fn set_batch_id(&mut self, batch_id: String) {
    self.batch_id = Some(batch_id);
  }

  pub fn with_batch_id(mut self, batch_id: String) -> ModelFeedBackRequest {
    self.batch_id = Some(batch_id);
    self
  }

  pub fn batch_id(&self) -> Option<&String> {
    self.batch_id.as_ref()
  }

  pub fn reset_batch_id(&mut self) {
    self.batch_id = None;
  }

  pub fn set_guesses(&mut self, guesses: Vec<String>) {
    self.guesses = Some(guesses);
  }

  pub fn with_guesses(mut self, guesses: Vec<String>) -> ModelFeedBackRequest {
    self.guesses = Some(guesses);
    self
  }

  pub fn guesses(&self) -> Option<&Vec<String>> {
    self.guesses.as_ref()
  }

  pub fn reset_guesses(&mut self) {
    self.guesses = None;
  }

  pub fn set_correct(&mut self, correct: Vec<String>) {
    self.correct = Some(correct);
  }

  pub fn with_correct(mut self, correct: Vec<String>) -> ModelFeedBackRequest {
    self.correct = Some(correct);
    self
  }

  pub fn correct(&self) -> Option<&Vec<String>> {
    self.correct.as_ref()
  }

  pub fn reset_correct(&mut self) {
    self.correct = None;
  }

}



