/*
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;


#[derive(Debug, Serialize, Deserialize)]
pub struct ModelFeedBackRequest {
    /// The GUID of the minibatch this feedback corresponds to
    #[serde(rename = "batchId", skip_serializing_if = "Option::is_none")]
    pub batch_id: Option<String>,
    /// The guessed label IDs by the model
    #[serde(rename = "guesses", skip_serializing_if = "Option::is_none")]
    pub guesses: Option<Vec<String>>,
    /// The actual label IDs
    #[serde(rename = "correct", skip_serializing_if = "Option::is_none")]
    pub correct: Option<Vec<String>>,
}

impl ModelFeedBackRequest {
    pub fn new() -> ModelFeedBackRequest {
        ModelFeedBackRequest {
            batch_id: None,
            guesses: None,
            correct: None,
        }
    }
}


