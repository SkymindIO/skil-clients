/*
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;


#[derive(Debug, Serialize, Deserialize)]
pub struct AddResourceRequest {
    /// Name of the new resource
    #[serde(rename = "resourceName", skip_serializing_if = "Option::is_none")]
    pub resource_name: Option<String>,
    /// One of the resource details objects
    #[serde(rename = "resourceDetails", skip_serializing_if = "Option::is_none")]
    pub resource_details: Option<Value>,
    /// URI of the credentials. If this is present, you can leave out the 'credentialId'
    #[serde(rename = "credentialUri", skip_serializing_if = "Option::is_none")]
    pub credential_uri: Option<String>,
    /// Resource type (whether COMPUTE or STORAGE)
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    /// Resource subtype (COMPUTE -> [EMR, DataProc, HDInsight, YARN] | STORAGE -> [S3, GoogleStorage, AzureStorage, HDFS])
    #[serde(rename = "subType", skip_serializing_if = "Option::is_none")]
    pub sub_type: Option<String>,
    /// ID of the credentials. If this is given then you can leave out the 'credentialsUri'
    #[serde(rename = "credentialId", skip_serializing_if = "Option::is_none")]
    pub credential_id: Option<i64>,
}

impl AddResourceRequest {
    pub fn new() -> AddResourceRequest {
        AddResourceRequest {
            resource_name: None,
            resource_details: None,
            credential_uri: None,
            _type: None,
            sub_type: None,
            credential_id: None,
        }
    }
}

/// Resource type (whether COMPUTE or STORAGE)
#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "COMPUTE")]
    COMPUTE,
    #[serde(rename = "STORAGE")]
    STORAGE,
}
/// Resource subtype (COMPUTE -> [EMR, DataProc, HDInsight, YARN] | STORAGE -> [S3, GoogleStorage, AzureStorage, HDFS])
#[derive(Debug, Serialize, Deserialize)]
pub enum SubType {
    #[serde(rename = "EMR")]
    EMR,
    #[serde(rename = "S3")]
    S3,
    #[serde(rename = "GoogleStorage")]
    GoogleStorage,
    #[serde(rename = "DataProc")]
    DataProc,
    #[serde(rename = "HDInsight")]
    HDInsight,
    #[serde(rename = "AzureStorage")]
    AzureStorage,
    #[serde(rename = "HDFS")]
    HDFS,
    #[serde(rename = "YARN")]
    YARN,
}

