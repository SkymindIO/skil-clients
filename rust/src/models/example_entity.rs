/*
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;


#[derive(Debug, Serialize, Deserialize)]
pub struct ExampleEntity {
    /// the GUID of the example
    #[serde(rename = "exampleId", skip_serializing_if = "Option::is_none")]
    pub example_id: Option<String>,
    /// Example version
    #[serde(rename = "exampleVersion", skip_serializing_if = "Option::is_none")]
    pub example_version: Option<i32>,
    /// Row Number
    #[serde(rename = "rowNumber", skip_serializing_if = "Option::is_none")]
    pub row_number: Option<i32>,
    /// when the example was created
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<i64>,
    /// The GUID of the minibatch
    #[serde(rename = "miniBatchId", skip_serializing_if = "Option::is_none")]
    pub mini_batch_id: Option<String>,
    /// minibatch version
    #[serde(rename = "miniBatchVersion", skip_serializing_if = "Option::is_none")]
    pub mini_batch_version: Option<i32>,
}

impl ExampleEntity {
    pub fn new() -> ExampleEntity {
        ExampleEntity {
            example_id: None,
            example_version: None,
            row_number: None,
            created: None,
            mini_batch_id: None,
            mini_batch_version: None,
        }
    }
}


