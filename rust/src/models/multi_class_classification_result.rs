/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// MultiClassClassificationResult : Represents all of the labels for a given classification

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MultiClassClassificationResult {
  #[serde(rename = "rankedOutcomes")]
  ranked_outcomes: Option<Vec<Vec<String>>>,
  #[serde(rename = "maxOutcomes")]
  max_outcomes: Option<Vec<String>>,
  #[serde(rename = "probabilities")]
  probabilities: Option<Vec<Vec<f32>>>
}

impl MultiClassClassificationResult {
  /// Represents all of the labels for a given classification
  pub fn new() -> MultiClassClassificationResult {
    MultiClassClassificationResult {
      ranked_outcomes: None,
      max_outcomes: None,
      probabilities: None
    }
  }

  pub fn set_ranked_outcomes(&mut self, ranked_outcomes: Vec<Vec<String>>) {
    self.ranked_outcomes = Some(ranked_outcomes);
  }

  pub fn with_ranked_outcomes(mut self, ranked_outcomes: Vec<Vec<String>>) -> MultiClassClassificationResult {
    self.ranked_outcomes = Some(ranked_outcomes);
    self
  }

  pub fn ranked_outcomes(&self) -> Option<&Vec<Vec<String>>> {
    self.ranked_outcomes.as_ref()
  }

  pub fn reset_ranked_outcomes(&mut self) {
    self.ranked_outcomes = None;
  }

  pub fn set_max_outcomes(&mut self, max_outcomes: Vec<String>) {
    self.max_outcomes = Some(max_outcomes);
  }

  pub fn with_max_outcomes(mut self, max_outcomes: Vec<String>) -> MultiClassClassificationResult {
    self.max_outcomes = Some(max_outcomes);
    self
  }

  pub fn max_outcomes(&self) -> Option<&Vec<String>> {
    self.max_outcomes.as_ref()
  }

  pub fn reset_max_outcomes(&mut self) {
    self.max_outcomes = None;
  }

  pub fn set_probabilities(&mut self, probabilities: Vec<Vec<f32>>) {
    self.probabilities = Some(probabilities);
  }

  pub fn with_probabilities(mut self, probabilities: Vec<Vec<f32>>) -> MultiClassClassificationResult {
    self.probabilities = Some(probabilities);
    self
  }

  pub fn probabilities(&self) -> Option<&Vec<Vec<f32>>> {
    self.probabilities.as_ref()
  }

  pub fn reset_probabilities(&mut self) {
    self.probabilities = None;
  }

}



