/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct EvaluationResultsEntity {
  #[serde(rename = "evaluation")]
  evaluation: Option<String>,
  #[serde(rename = "evalName")]
  eval_name: Option<String>,
  #[serde(rename = "modelInstanceId")]
  model_instance_id: Option<String>,
  /// When the evaluation result was created
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "f1")]
  f1: Option<f64>,
  #[serde(rename = "precision")]
  precision: Option<f64>,
  #[serde(rename = "recall")]
  recall: Option<f64>,
  #[serde(rename = "accuracy")]
  accuracy: Option<f64>,
  #[serde(rename = "rmse")]
  rmse: Option<f64>,
  #[serde(rename = "auc")]
  auc: Option<f64>,
  #[serde(rename = "meanAbsoluteError")]
  mean_absolute_error: Option<f64>,
  #[serde(rename = "meanRelativeError")]
  mean_relative_error: Option<f64>,
  #[serde(rename = "r2")]
  r2: Option<f64>,
  /// GUID of the evaluation
  #[serde(rename = "evalId")]
  eval_id: Option<String>,
  #[serde(rename = "evalVersion")]
  eval_version: Option<i32>,
  #[serde(rename = "binaryThreshold")]
  binary_threshold: Option<f64>,
  #[serde(rename = "binaryThresholds")]
  binary_thresholds: Option<String>
}

impl EvaluationResultsEntity {
  pub fn new() -> EvaluationResultsEntity {
    EvaluationResultsEntity {
      evaluation: None,
      eval_name: None,
      model_instance_id: None,
      created: None,
      f1: None,
      precision: None,
      recall: None,
      accuracy: None,
      rmse: None,
      auc: None,
      mean_absolute_error: None,
      mean_relative_error: None,
      r2: None,
      eval_id: None,
      eval_version: None,
      binary_threshold: None,
      binary_thresholds: None
    }
  }

  pub fn set_evaluation(&mut self, evaluation: String) {
    self.evaluation = Some(evaluation);
  }

  pub fn with_evaluation(mut self, evaluation: String) -> EvaluationResultsEntity {
    self.evaluation = Some(evaluation);
    self
  }

  pub fn evaluation(&self) -> Option<&String> {
    self.evaluation.as_ref()
  }

  pub fn reset_evaluation(&mut self) {
    self.evaluation = None;
  }

  pub fn set_eval_name(&mut self, eval_name: String) {
    self.eval_name = Some(eval_name);
  }

  pub fn with_eval_name(mut self, eval_name: String) -> EvaluationResultsEntity {
    self.eval_name = Some(eval_name);
    self
  }

  pub fn eval_name(&self) -> Option<&String> {
    self.eval_name.as_ref()
  }

  pub fn reset_eval_name(&mut self) {
    self.eval_name = None;
  }

  pub fn set_model_instance_id(&mut self, model_instance_id: String) {
    self.model_instance_id = Some(model_instance_id);
  }

  pub fn with_model_instance_id(mut self, model_instance_id: String) -> EvaluationResultsEntity {
    self.model_instance_id = Some(model_instance_id);
    self
  }

  pub fn model_instance_id(&self) -> Option<&String> {
    self.model_instance_id.as_ref()
  }

  pub fn reset_model_instance_id(&mut self) {
    self.model_instance_id = None;
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> EvaluationResultsEntity {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_f1(&mut self, f1: f64) {
    self.f1 = Some(f1);
  }

  pub fn with_f1(mut self, f1: f64) -> EvaluationResultsEntity {
    self.f1 = Some(f1);
    self
  }

  pub fn f1(&self) -> Option<&f64> {
    self.f1.as_ref()
  }

  pub fn reset_f1(&mut self) {
    self.f1 = None;
  }

  pub fn set_precision(&mut self, precision: f64) {
    self.precision = Some(precision);
  }

  pub fn with_precision(mut self, precision: f64) -> EvaluationResultsEntity {
    self.precision = Some(precision);
    self
  }

  pub fn precision(&self) -> Option<&f64> {
    self.precision.as_ref()
  }

  pub fn reset_precision(&mut self) {
    self.precision = None;
  }

  pub fn set_recall(&mut self, recall: f64) {
    self.recall = Some(recall);
  }

  pub fn with_recall(mut self, recall: f64) -> EvaluationResultsEntity {
    self.recall = Some(recall);
    self
  }

  pub fn recall(&self) -> Option<&f64> {
    self.recall.as_ref()
  }

  pub fn reset_recall(&mut self) {
    self.recall = None;
  }

  pub fn set_accuracy(&mut self, accuracy: f64) {
    self.accuracy = Some(accuracy);
  }

  pub fn with_accuracy(mut self, accuracy: f64) -> EvaluationResultsEntity {
    self.accuracy = Some(accuracy);
    self
  }

  pub fn accuracy(&self) -> Option<&f64> {
    self.accuracy.as_ref()
  }

  pub fn reset_accuracy(&mut self) {
    self.accuracy = None;
  }

  pub fn set_rmse(&mut self, rmse: f64) {
    self.rmse = Some(rmse);
  }

  pub fn with_rmse(mut self, rmse: f64) -> EvaluationResultsEntity {
    self.rmse = Some(rmse);
    self
  }

  pub fn rmse(&self) -> Option<&f64> {
    self.rmse.as_ref()
  }

  pub fn reset_rmse(&mut self) {
    self.rmse = None;
  }

  pub fn set_auc(&mut self, auc: f64) {
    self.auc = Some(auc);
  }

  pub fn with_auc(mut self, auc: f64) -> EvaluationResultsEntity {
    self.auc = Some(auc);
    self
  }

  pub fn auc(&self) -> Option<&f64> {
    self.auc.as_ref()
  }

  pub fn reset_auc(&mut self) {
    self.auc = None;
  }

  pub fn set_mean_absolute_error(&mut self, mean_absolute_error: f64) {
    self.mean_absolute_error = Some(mean_absolute_error);
  }

  pub fn with_mean_absolute_error(mut self, mean_absolute_error: f64) -> EvaluationResultsEntity {
    self.mean_absolute_error = Some(mean_absolute_error);
    self
  }

  pub fn mean_absolute_error(&self) -> Option<&f64> {
    self.mean_absolute_error.as_ref()
  }

  pub fn reset_mean_absolute_error(&mut self) {
    self.mean_absolute_error = None;
  }

  pub fn set_mean_relative_error(&mut self, mean_relative_error: f64) {
    self.mean_relative_error = Some(mean_relative_error);
  }

  pub fn with_mean_relative_error(mut self, mean_relative_error: f64) -> EvaluationResultsEntity {
    self.mean_relative_error = Some(mean_relative_error);
    self
  }

  pub fn mean_relative_error(&self) -> Option<&f64> {
    self.mean_relative_error.as_ref()
  }

  pub fn reset_mean_relative_error(&mut self) {
    self.mean_relative_error = None;
  }

  pub fn set_r2(&mut self, r2: f64) {
    self.r2 = Some(r2);
  }

  pub fn with_r2(mut self, r2: f64) -> EvaluationResultsEntity {
    self.r2 = Some(r2);
    self
  }

  pub fn r2(&self) -> Option<&f64> {
    self.r2.as_ref()
  }

  pub fn reset_r2(&mut self) {
    self.r2 = None;
  }

  pub fn set_eval_id(&mut self, eval_id: String) {
    self.eval_id = Some(eval_id);
  }

  pub fn with_eval_id(mut self, eval_id: String) -> EvaluationResultsEntity {
    self.eval_id = Some(eval_id);
    self
  }

  pub fn eval_id(&self) -> Option<&String> {
    self.eval_id.as_ref()
  }

  pub fn reset_eval_id(&mut self) {
    self.eval_id = None;
  }

  pub fn set_eval_version(&mut self, eval_version: i32) {
    self.eval_version = Some(eval_version);
  }

  pub fn with_eval_version(mut self, eval_version: i32) -> EvaluationResultsEntity {
    self.eval_version = Some(eval_version);
    self
  }

  pub fn eval_version(&self) -> Option<&i32> {
    self.eval_version.as_ref()
  }

  pub fn reset_eval_version(&mut self) {
    self.eval_version = None;
  }

  pub fn set_binary_threshold(&mut self, binary_threshold: f64) {
    self.binary_threshold = Some(binary_threshold);
  }

  pub fn with_binary_threshold(mut self, binary_threshold: f64) -> EvaluationResultsEntity {
    self.binary_threshold = Some(binary_threshold);
    self
  }

  pub fn binary_threshold(&self) -> Option<&f64> {
    self.binary_threshold.as_ref()
  }

  pub fn reset_binary_threshold(&mut self) {
    self.binary_threshold = None;
  }

  pub fn set_binary_thresholds(&mut self, binary_thresholds: String) {
    self.binary_thresholds = Some(binary_thresholds);
  }

  pub fn with_binary_thresholds(mut self, binary_thresholds: String) -> EvaluationResultsEntity {
    self.binary_thresholds = Some(binary_thresholds);
    self
  }

  pub fn binary_thresholds(&self) -> Option<&String> {
    self.binary_thresholds.as_ref()
  }

  pub fn reset_binary_thresholds(&mut self) {
    self.binary_thresholds = None;
  }

}



