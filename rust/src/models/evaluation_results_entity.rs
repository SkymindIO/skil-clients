/*
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;


#[derive(Debug, Serialize, Deserialize)]
pub struct EvaluationResultsEntity {
    #[serde(rename = "evaluation", skip_serializing_if = "Option::is_none")]
    pub evaluation: Option<String>,
    #[serde(rename = "evalName", skip_serializing_if = "Option::is_none")]
    pub eval_name: Option<String>,
    #[serde(rename = "modelInstanceId", skip_serializing_if = "Option::is_none")]
    pub model_instance_id: Option<String>,
    /// When the evaluation result was created
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<i64>,
    #[serde(rename = "f1", skip_serializing_if = "Option::is_none")]
    pub f1: Option<f64>,
    #[serde(rename = "precision", skip_serializing_if = "Option::is_none")]
    pub precision: Option<f64>,
    #[serde(rename = "recall", skip_serializing_if = "Option::is_none")]
    pub recall: Option<f64>,
    #[serde(rename = "accuracy", skip_serializing_if = "Option::is_none")]
    pub accuracy: Option<f64>,
    #[serde(rename = "rmse", skip_serializing_if = "Option::is_none")]
    pub rmse: Option<f64>,
    #[serde(rename = "auc", skip_serializing_if = "Option::is_none")]
    pub auc: Option<f64>,
    #[serde(rename = "meanAbsoluteError", skip_serializing_if = "Option::is_none")]
    pub mean_absolute_error: Option<f64>,
    #[serde(rename = "meanRelativeError", skip_serializing_if = "Option::is_none")]
    pub mean_relative_error: Option<f64>,
    #[serde(rename = "r2", skip_serializing_if = "Option::is_none")]
    pub r2: Option<f64>,
    /// GUID of the evaluation
    #[serde(rename = "evalId", skip_serializing_if = "Option::is_none")]
    pub eval_id: Option<String>,
    #[serde(rename = "evalVersion", skip_serializing_if = "Option::is_none")]
    pub eval_version: Option<i32>,
    #[serde(rename = "binaryThreshold", skip_serializing_if = "Option::is_none")]
    pub binary_threshold: Option<f64>,
    #[serde(rename = "binaryThresholds", skip_serializing_if = "Option::is_none")]
    pub binary_thresholds: Option<String>,
}

impl EvaluationResultsEntity {
    pub fn new() -> EvaluationResultsEntity {
        EvaluationResultsEntity {
            evaluation: None,
            eval_name: None,
            model_instance_id: None,
            created: None,
            f1: None,
            precision: None,
            recall: None,
            accuracy: None,
            rmse: None,
            auc: None,
            mean_absolute_error: None,
            mean_relative_error: None,
            r2: None,
            eval_id: None,
            eval_version: None,
            binary_threshold: None,
            binary_thresholds: None,
        }
    }
}


