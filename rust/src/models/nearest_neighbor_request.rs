/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NearestNeighborRequest {
  /// the number of results
  #[serde(rename = "k")]
  k: Option<i32>,
  /// the index of the EXISTING ndarray to run a search on
  #[serde(rename = "inputIndex")]
  input_index: Option<i32>
}

impl NearestNeighborRequest {
  pub fn new() -> NearestNeighborRequest {
    NearestNeighborRequest {
      k: None,
      input_index: None
    }
  }

  pub fn set_k(&mut self, k: i32) {
    self.k = Some(k);
  }

  pub fn with_k(mut self, k: i32) -> NearestNeighborRequest {
    self.k = Some(k);
    self
  }

  pub fn k(&self) -> Option<&i32> {
    self.k.as_ref()
  }

  pub fn reset_k(&mut self) {
    self.k = None;
  }

  pub fn set_input_index(&mut self, input_index: i32) {
    self.input_index = Some(input_index);
  }

  pub fn with_input_index(mut self, input_index: i32) -> NearestNeighborRequest {
    self.input_index = Some(input_index);
    self
  }

  pub fn input_index(&self) -> Option<&i32> {
    self.input_index.as_ref()
  }

  pub fn reset_input_index(&mut self) {
    self.input_index = None;
  }

}



