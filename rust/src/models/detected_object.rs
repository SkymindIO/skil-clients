/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DetectedObject {
  #[serde(rename = "centerX")]
  center_x: Option<f32>,
  #[serde(rename = "centerY")]
  center_y: Option<f32>,
  #[serde(rename = "width")]
  width: Option<f32>,
  #[serde(rename = "height")]
  height: Option<f32>,
  #[serde(rename = "predictedClasses")]
  predicted_classes: Option<Vec<String>>,
  #[serde(rename = "confidences")]
  confidences: Option<Vec<f32>>
}

impl DetectedObject {
  pub fn new() -> DetectedObject {
    DetectedObject {
      center_x: None,
      center_y: None,
      width: None,
      height: None,
      predicted_classes: None,
      confidences: None
    }
  }

  pub fn set_center_x(&mut self, center_x: f32) {
    self.center_x = Some(center_x);
  }

  pub fn with_center_x(mut self, center_x: f32) -> DetectedObject {
    self.center_x = Some(center_x);
    self
  }

  pub fn center_x(&self) -> Option<&f32> {
    self.center_x.as_ref()
  }

  pub fn reset_center_x(&mut self) {
    self.center_x = None;
  }

  pub fn set_center_y(&mut self, center_y: f32) {
    self.center_y = Some(center_y);
  }

  pub fn with_center_y(mut self, center_y: f32) -> DetectedObject {
    self.center_y = Some(center_y);
    self
  }

  pub fn center_y(&self) -> Option<&f32> {
    self.center_y.as_ref()
  }

  pub fn reset_center_y(&mut self) {
    self.center_y = None;
  }

  pub fn set_width(&mut self, width: f32) {
    self.width = Some(width);
  }

  pub fn with_width(mut self, width: f32) -> DetectedObject {
    self.width = Some(width);
    self
  }

  pub fn width(&self) -> Option<&f32> {
    self.width.as_ref()
  }

  pub fn reset_width(&mut self) {
    self.width = None;
  }

  pub fn set_height(&mut self, height: f32) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: f32) -> DetectedObject {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&f32> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

  pub fn set_predicted_classes(&mut self, predicted_classes: Vec<String>) {
    self.predicted_classes = Some(predicted_classes);
  }

  pub fn with_predicted_classes(mut self, predicted_classes: Vec<String>) -> DetectedObject {
    self.predicted_classes = Some(predicted_classes);
    self
  }

  pub fn predicted_classes(&self) -> Option<&Vec<String>> {
    self.predicted_classes.as_ref()
  }

  pub fn reset_predicted_classes(&mut self) {
    self.predicted_classes = None;
  }

  pub fn set_confidences(&mut self, confidences: Vec<f32>) {
    self.confidences = Some(confidences);
  }

  pub fn with_confidences(mut self, confidences: Vec<f32>) -> DetectedObject {
    self.confidences = Some(confidences);
    self
  }

  pub fn confidences(&self) -> Option<&Vec<f32>> {
    self.confidences.as_ref()
  }

  pub fn reset_confidences(&mut self) {
    self.confidences = None;
  }

}



