/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-rc1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MultiPredictRequest {
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "needsPreProcessing")]
  needs_pre_processing: Option<bool>,
  #[serde(rename = "inputs")]
  inputs: Option<Vec<::models::IndArray>>,
  #[serde(rename = "inputMasks")]
  input_masks: Option<Vec<::models::IndArray>>
}

impl MultiPredictRequest {
  pub fn new() -> MultiPredictRequest {
    MultiPredictRequest {
      id: None,
      needs_pre_processing: None,
      inputs: None,
      input_masks: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> MultiPredictRequest {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_needs_pre_processing(&mut self, needs_pre_processing: bool) {
    self.needs_pre_processing = Some(needs_pre_processing);
  }

  pub fn with_needs_pre_processing(mut self, needs_pre_processing: bool) -> MultiPredictRequest {
    self.needs_pre_processing = Some(needs_pre_processing);
    self
  }

  pub fn needs_pre_processing(&self) -> Option<&bool> {
    self.needs_pre_processing.as_ref()
  }

  pub fn reset_needs_pre_processing(&mut self) {
    self.needs_pre_processing = None;
  }

  pub fn set_inputs(&mut self, inputs: Vec<::models::IndArray>) {
    self.inputs = Some(inputs);
  }

  pub fn with_inputs(mut self, inputs: Vec<::models::IndArray>) -> MultiPredictRequest {
    self.inputs = Some(inputs);
    self
  }

  pub fn inputs(&self) -> Option<&Vec<::models::IndArray>> {
    self.inputs.as_ref()
  }

  pub fn reset_inputs(&mut self) {
    self.inputs = None;
  }

  pub fn set_input_masks(&mut self, input_masks: Vec<::models::IndArray>) {
    self.input_masks = Some(input_masks);
  }

  pub fn with_input_masks(mut self, input_masks: Vec<::models::IndArray>) -> MultiPredictRequest {
    self.input_masks = Some(input_masks);
    self
  }

  pub fn input_masks(&self) -> Option<&Vec<::models::IndArray>> {
    self.input_masks.as_ref()
  }

  pub fn reset_input_masks(&mut self) {
    self.input_masks = None;
  }

}



