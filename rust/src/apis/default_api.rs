/*
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * The version of the OpenAPI document: 1.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct DefaultApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> DefaultApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DefaultApiClient<C> {
        DefaultApiClient {
            configuration: configuration,
        }
    }
}

pub trait DefaultApi {
    fn accumulated_results(&self, ) -> Box<Future<Item = ::models::AccumulatedResults, Error = Error<serde_json::Value>>>;
    fn add_credentials(&self, add_credentials_request: ::models::AddCredentialsRequest) -> Box<Future<Item = ::models::ResourceCredentials, Error = Error<serde_json::Value>>>;
    fn add_evaluation_result(&self, model_history_server_id: &str, evaluation_results_entity: ::models::EvaluationResultsEntity) -> Box<Future<Item = ::models::EvaluationResultsEntity, Error = Error<serde_json::Value>>>;
    fn add_example_for_batch(&self, model_history_server_id: &str, add_example_request: ::models::AddExampleRequest) -> Box<Future<Item = ::models::AddExampleRequest, Error = Error<serde_json::Value>>>;
    fn add_example_to_minibatch(&self, model_history_server_id: &str, example_entity: ::models::ExampleEntity) -> Box<Future<Item = ::models::ExampleEntity, Error = Error<serde_json::Value>>>;
    fn add_experiment(&self, model_history_server_id: &str, experiment_entity: ::models::ExperimentEntity) -> Box<Future<Item = ::models::ExperimentEntity, Error = Error<serde_json::Value>>>;
    fn add_feedback_binary(&self, id: &str, _type: &str, file: std::path::PathBuf) -> Box<Future<Item = ::models::FeedbackResponse, Error = Error<serde_json::Value>>>;
    fn add_feedback_json(&self, id: &str, labels: Vec<Vec<f64>>) -> Box<Future<Item = ::models::FeedbackResponse, Error = Error<serde_json::Value>>>;
    fn add_minibatch(&self, model_history_server_id: &str, minibatch_entity: ::models::MinibatchEntity) -> Box<Future<Item = ::models::MinibatchEntity, Error = Error<serde_json::Value>>>;
    fn add_model_feedback(&self, model_history_server_id: &str, model_feed_back_request: ::models::ModelFeedBackRequest) -> Box<Future<Item = ::models::ModelFeedBackRequest, Error = Error<serde_json::Value>>>;
    fn add_model_history(&self, model_history_server_id: &str, add_model_history_request: ::models::AddModelHistoryRequest) -> Box<Future<Item = ::models::ModelHistoryEntity, Error = Error<serde_json::Value>>>;
    fn add_model_instance(&self, model_history_server_id: &str, model_instance_entity: ::models::ModelInstanceEntity) -> Box<Future<Item = ::models::ModelInstanceEntity, Error = Error<serde_json::Value>>>;
    fn add_resource(&self, add_resource_request: ::models::AddResourceRequest) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn add_resource_group(&self, group_name: &str) -> Box<Future<Item = ::models::ResourceGroup, Error = Error<serde_json::Value>>>;
    fn add_resource_to_group(&self, resource_group_id: i64, resource_id: i64) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn aggregate_model_results(&self, model_history_server_id: &str, aggregate_prediction: ::models::AggregatePrediction) -> Box<Future<Item = ::models::EvaluationResultsEntity, Error = Error<serde_json::Value>>>;
    fn change_user_password(&self, user_id: &str, change_password_request: ::models::ChangePasswordRequest) -> Box<Future<Item = ::models::User, Error = Error<serde_json::Value>>>;
    fn classify(&self, deployment_name: &str, version_name: &str, model_name: &str, body: ::models::Prediction) -> Box<Future<Item = ::models::ClassificationResult, Error = Error<serde_json::Value>>>;
    fn classifyarray(&self, deployment_name: &str, version_name: &str, model_name: &str, body: ::models::Prediction) -> Box<Future<Item = ::models::Base64NdArrayBody, Error = Error<serde_json::Value>>>;
    fn classifyimage(&self, deployment_name: &str, version_name: &str, model_name: &str, image: std::path::PathBuf) -> Box<Future<Item = ::models::ClassificationResult, Error = Error<serde_json::Value>>>;
    fn clear_state(&self, ) -> Box<Future<Item = ::models::FeedbackResponse, Error = Error<serde_json::Value>>>;
    fn create_job(&self, job_id_or_type: &str, create_job_request: ::models::CreateJobRequest) -> Box<Future<Item = ::models::JobEntity, Error = Error<serde_json::Value>>>;
    fn create_model_history(&self, model_history_server_id: &str, model_history_entity: ::models::ModelHistoryEntity) -> Box<Future<Item = ::models::ModelHistoryEntity, Error = Error<serde_json::Value>>>;
    fn delete_credentials_by_id(&self, credential_id: i64) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_experiment(&self, model_history_server_id: &str, experiment_id: &str) -> Box<Future<Item = ::models::InlineResponse200, Error = Error<serde_json::Value>>>;
    fn delete_job_by_id(&self, job_id_or_type: i64) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_model(&self, deployment_id: &str, model_id: &str) -> Box<Future<Item = ::models::InlineResponse200, Error = Error<serde_json::Value>>>;
    fn delete_model_history(&self, model_history_server_id: &str, model_history_id: &str) -> Box<Future<Item = ::models::InlineResponse200, Error = Error<serde_json::Value>>>;
    fn delete_model_instance(&self, model_history_server_id: &str, model_instance_id: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_resource_by_id(&self, resource_id: i64) -> Box<Future<Item = ::models::Resource, Error = Error<serde_json::Value>>>;
    fn delete_resource_from_group(&self, resource_group_id: i64, resource_id: i64) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_resource_group_by_id(&self, resource_group_id: i64) -> Box<Future<Item = ::models::ResourceGroup, Error = Error<serde_json::Value>>>;
    fn deploy_model(&self, deployment_id: &str, body: ::models::ImportModelRequest) -> Box<Future<Item = ::models::ModelEntity, Error = Error<serde_json::Value>>>;
    fn deployment_create(&self, body: ::models::CreateDeploymentRequest) -> Box<Future<Item = ::models::DeploymentResponse, Error = Error<serde_json::Value>>>;
    fn deployment_delete(&self, deployment_id: &str) -> Box<Future<Item = ::models::InlineResponse200, Error = Error<serde_json::Value>>>;
    fn deployment_get(&self, deployment_id: &str) -> Box<Future<Item = ::models::DeploymentResponse, Error = Error<serde_json::Value>>>;
    fn deployments(&self, ) -> Box<Future<Item = Vec<::models::DeploymentResponse>, Error = Error<serde_json::Value>>>;
    fn detectobjects(&self, deployment_name: &str, version_name: &str, model_name: &str, id: &str, needs_preprocessing: bool, threshold: f32, file: std::path::PathBuf) -> Box<Future<Item = ::models::DetectionResult, Error = Error<serde_json::Value>>>;
    fn download_job_output_file(&self, job_id: i64, download_output_file_request: ::models::DownloadOutputFileRequest) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn generate_auth_token(&self, token_generate_request: ::models::TokenGenerateRequest) -> Box<Future<Item = ::models::Token, Error = Error<serde_json::Value>>>;
    fn get_all_jobs(&self, ) -> Box<Future<Item = Vec<::models::JobEntity>, Error = Error<serde_json::Value>>>;
    fn get_array(&self, accept: &str, array_type: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_array_indices(&self, content_type: &str, accept: &str, array_type: &str, input: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_array_range(&self, accept: &str, array_type: &str, from: i32, to: i32) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_auth_policy(&self, ) -> Box<Future<Item = ::models::AuthPolicy, Error = Error<serde_json::Value>>>;
    fn get_best_model_among_model_ids(&self, model_history_server_id: &str, best_model: ::models::BestModel) -> Box<Future<Item = ::models::ModelInstanceEntity, Error = Error<serde_json::Value>>>;
    fn get_credentials_by_id(&self, credential_id: i64) -> Box<Future<Item = ::models::ResourceCredentials, Error = Error<serde_json::Value>>>;
    fn get_current_model(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_evaluation_for_model_id(&self, model_history_server_id: &str, model_instance_id: &str) -> Box<Future<Item = Vec<::models::EvaluationResultsEntity>, Error = Error<serde_json::Value>>>;
    fn get_examples_for_minibatch(&self, model_history_server_id: &str, minibatch_id: &str) -> Box<Future<Item = Vec<::models::ExampleEntity>, Error = Error<serde_json::Value>>>;
    fn get_experiment(&self, model_history_server_id: &str, experiment_id: &str) -> Box<Future<Item = ::models::ExperimentEntity, Error = Error<serde_json::Value>>>;
    fn get_experiments_for_model_history(&self, model_history_server_id: &str, model_history_id: &str) -> Box<Future<Item = Vec<::models::ExperimentEntity>, Error = Error<serde_json::Value>>>;
    fn get_job_by_id(&self, job_id_or_type: i64) -> Box<Future<Item = ::models::JobEntity, Error = Error<serde_json::Value>>>;
    fn get_last_evaluation(&self, ) -> Box<Future<Item = ::models::EvaluationResultsEntity, Error = Error<serde_json::Value>>>;
    fn get_minibatch(&self, model_history_server_id: &str, minibatch_id: &str) -> Box<Future<Item = ::models::MinibatchEntity, Error = Error<serde_json::Value>>>;
    fn get_model_details(&self, deployment_id: &str, model_id: &str) -> Box<Future<Item = ::models::ModelEntity, Error = Error<serde_json::Value>>>;
    fn get_model_history(&self, model_history_server_id: &str, model_history_id: &str) -> Box<Future<Item = ::models::ModelHistoryEntity, Error = Error<serde_json::Value>>>;
    fn get_model_instance(&self, model_history_server_id: &str, model_instance_id: &str) -> Box<Future<Item = ::models::ModelInstanceEntity, Error = Error<serde_json::Value>>>;
    fn get_models_for_experiment(&self, model_history_server_id: &str, experiment_id: &str) -> Box<Future<Item = Vec<::models::ModelInstanceEntity>, Error = Error<serde_json::Value>>>;
    fn get_resource_by_id(&self, resource_id: i64) -> Box<Future<Item = ::models::Resource, Error = Error<serde_json::Value>>>;
    fn get_resource_by_sub_type(&self, resource_sub_type: &str) -> Box<Future<Item = Vec<::models::Resource>, Error = Error<serde_json::Value>>>;
    fn get_resource_by_type(&self, resource_type: &str) -> Box<Future<Item = Vec<::models::Resource>, Error = Error<serde_json::Value>>>;
    fn get_resource_details_by_id(&self, resource_id: i64) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_resource_group_by_id(&self, resource_group_id: i64) -> Box<Future<Item = ::models::ResourceGroup, Error = Error<serde_json::Value>>>;
    fn get_resource_groups(&self, ) -> Box<Future<Item = Vec<::models::ResourceGroup>, Error = Error<serde_json::Value>>>;
    fn get_resources(&self, ) -> Box<Future<Item = Vec<::models::Resource>, Error = Error<serde_json::Value>>>;
    fn get_resources_from_group(&self, resource_group_id: i64) -> Box<Future<Item = Vec<::models::Resource>, Error = Error<serde_json::Value>>>;
    fn get_roles(&self, ) -> Box<Future<Item = Vec<::models::Role>, Error = Error<serde_json::Value>>>;
    fn get_user(&self, user_id: &str) -> Box<Future<Item = ::models::User, Error = Error<serde_json::Value>>>;
    fn get_user_auth_tokens(&self, user_id: &str, only_valid: bool) -> Box<Future<Item = Vec<::models::Token>, Error = Error<serde_json::Value>>>;
    fn get_users(&self, ) -> Box<Future<Item = Vec<::models::User>, Error = Error<serde_json::Value>>>;
    fn is_training(&self, ) -> Box<Future<Item = ::models::RetrainingStatus, Error = Error<serde_json::Value>>>;
    fn jsonarray(&self, deployment_name: &str, version_name: &str, model_name: &str, body: ::models::Prediction) -> Box<Future<Item = ::models::JsonArrayResponse, Error = Error<serde_json::Value>>>;
    fn knn(&self, deployment_name: &str, version_name: &str, knn_name: &str, body: ::models::NearestNeighborRequest) -> Box<Future<Item = ::models::NearestNeighborsResults, Error = Error<serde_json::Value>>>;
    fn knnnew(&self, deployment_name: &str, version_name: &str, knn_name: &str, body: ::models::Base64NdArrayBodyKnn) -> Box<Future<Item = ::models::NearestNeighborsResults, Error = Error<serde_json::Value>>>;
    fn list_all_experiments(&self, model_history_server_id: &str) -> Box<Future<Item = Vec<::models::ExperimentEntity>, Error = Error<serde_json::Value>>>;
    fn logfilepath(&self, deployment_name: &str, version_name: &str, model_name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn login(&self, login_request: ::models::LoginRequest) -> Box<Future<Item = ::models::LoginResponse, Error = Error<serde_json::Value>>>;
    fn logs(&self, deployment_name: &str, version_name: &str, model_name: &str, log_request: ::models::LogRequest) -> Box<Future<Item = ::models::LogBatch, Error = Error<serde_json::Value>>>;
    fn meta_get(&self, deployment_name: &str, version_name: &str, model_name: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn meta_post(&self, content_type: &str, deployment_name: &str, version_name: &str, model_name: &str, body: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn model_state_change(&self, deployment_id: &str, model_id: &str, body: ::models::SetState) -> Box<Future<Item = ::models::ModelEntity, Error = Error<serde_json::Value>>>;
    fn models(&self, deployment_id: &str) -> Box<Future<Item = Vec<::models::ModelEntity>, Error = Error<serde_json::Value>>>;
    fn modelset(&self, deployment_name: &str, version_name: &str, model_name: &str, file: std::path::PathBuf) -> Box<Future<Item = ::models::ModelStatus, Error = Error<serde_json::Value>>>;
    fn modelupdate(&self, deployment_name: &str, version_name: &str, model_name: &str, file: std::path::PathBuf) -> Box<Future<Item = ::models::ModelStatus, Error = Error<serde_json::Value>>>;
    fn multiclassify(&self, deployment_name: &str, version_name: &str, model_name: &str, body: ::models::Prediction) -> Box<Future<Item = ::models::MultiClassClassificationResult, Error = Error<serde_json::Value>>>;
    fn multipredict(&self, deployment_name: &str, version_name: &str, model_name: &str, body: ::models::MultiPredictRequest) -> Box<Future<Item = ::models::MultiPredictResponse, Error = Error<serde_json::Value>>>;
    fn multipredictimage(&self, deployment_name: &str, version_name: &str, model_name: &str, file: std::path::PathBuf, id: &str, needs_preprocessing: bool) -> Box<Future<Item = ::models::MultiPredictResponse, Error = Error<serde_json::Value>>>;
    fn num_revisions(&self, ) -> Box<Future<Item = ::models::RevisionsWritten, Error = Error<serde_json::Value>>>;
    fn predict(&self, deployment_name: &str, version_name: &str, model_name: &str, body: ::models::Prediction) -> Box<Future<Item = ::models::Prediction, Error = Error<serde_json::Value>>>;
    fn predict_error(&self, content_type: &str, operation: &str, input_type: &str, input_data: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn predict_v2_file(&self, operation: &str, input_type_file: &str, input_data: std::path::PathBuf) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn predict_v2_json(&self, content_type: &str, operation: &str, input_type_json: &str, input_data: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn predictimage(&self, deployment_name: &str, version_name: &str, model_name: &str, image: std::path::PathBuf) -> Box<Future<Item = ::models::Prediction, Error = Error<serde_json::Value>>>;
    fn predictwithpreprocess(&self, deployment_name: &str, version_name: &str, model_name: &str, body: Vec<String>) -> Box<Future<Item = ::models::Prediction, Error = Error<serde_json::Value>>>;
    fn predictwithpreprocessjson(&self, deployment_name: &str, version_name: &str, model_name: &str, body: Vec<String>) -> Box<Future<Item = ::models::JsonArrayResponse, Error = Error<serde_json::Value>>>;
    fn raw_predict_binary(&self, input_type: &str, output_type: &str, input_data: std::path::PathBuf) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn refresh_job_status(&self, job_id: i64) -> Box<Future<Item = ::models::JobEntity, Error = Error<serde_json::Value>>>;
    fn register_user(&self, user: ::models::User) -> Box<Future<Item = ::models::User, Error = Error<serde_json::Value>>>;
    fn reimport_model(&self, deployment_id: &str, model_id: &str, body: ::models::ImportModelRequest) -> Box<Future<Item = ::models::ModelEntity, Error = Error<serde_json::Value>>>;
    fn revoke_user_token(&self, token_id: i64) -> Box<Future<Item = ::models::Token, Error = Error<serde_json::Value>>>;
    fn rollback(&self, index: i32) -> Box<Future<Item = ::models::RollbackStatus, Error = Error<serde_json::Value>>>;
    fn run_a_job(&self, job_id: i64) -> Box<Future<Item = ::models::JobEntity, Error = Error<serde_json::Value>>>;
    fn transform_csv(&self, deployment_name: &str, version_name: &str, transform_name: &str, batch_csv_record: ::models::BatchCsvRecord) -> Box<Future<Item = ::models::BatchCsvRecord, Error = Error<serde_json::Value>>>;
    fn transformarray(&self, deployment_name: &str, version_name: &str, transform_name: &str, batch_record: ::models::BatchRecord) -> Box<Future<Item = ::models::Base64NdArrayBody, Error = Error<serde_json::Value>>>;
    fn transformimage(&self, deployment_name: &str, version_name: &str, image_transform_name: &str, files: Vec<std::path::PathBuf>) -> Box<Future<Item = ::models::Base64NdArrayBody, Error = Error<serde_json::Value>>>;
    fn transformincremental_csv(&self, deployment_name: &str, version_name: &str, transform_name: &str, single_csv_record: ::models::SingleCsvRecord) -> Box<Future<Item = ::models::SingleCsvRecord, Error = Error<serde_json::Value>>>;
    fn transformincrementalarray(&self, deployment_name: &str, version_name: &str, transform_name: &str, single_record: ::models::SingleRecord) -> Box<Future<Item = ::models::Base64NdArrayBody, Error = Error<serde_json::Value>>>;
    fn transformincrementalimage(&self, deployment_name: &str, version_name: &str, image_transform_name: &str, file: std::path::PathBuf) -> Box<Future<Item = ::models::Base64NdArrayBody, Error = Error<serde_json::Value>>>;
    fn transformprocess_get(&self, deployment_name: &str, version_name: &str, transform_name: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn transformprocess_post(&self, content_type: &str, deployment_name: &str, version_name: &str, transform_name: &str, transform_process: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn update_auth_policy(&self, auth_policy: ::models::AuthPolicy) -> Box<Future<Item = ::models::AuthPolicy, Error = Error<serde_json::Value>>>;
    fn update_best_model_for_experiment(&self, model_history_server_id: &str, update_best_model: ::models::UpdateBestModel) -> Box<Future<Item = ::models::ExperimentEntity, Error = Error<serde_json::Value>>>;
    fn update_experiment(&self, model_history_server_id: &str, experiment_id: &str, experiment_entity: ::models::ExperimentEntity) -> Box<Future<Item = ::models::ExperimentEntity, Error = Error<serde_json::Value>>>;
    fn update_model_history(&self, model_history_server_id: &str, model_history_id: &str, update_model_history_request: ::models::AddModelHistoryRequest) -> Box<Future<Item = ::models::ModelHistoryEntity, Error = Error<serde_json::Value>>>;
    fn update_user(&self, user: ::models::User) -> Box<Future<Item = ::models::User, Error = Error<serde_json::Value>>>;
    fn upload(&self, file: std::path::PathBuf) -> Box<Future<Item = ::models::FileUploadList, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>DefaultApi for DefaultApiClient<C> {
    fn accumulated_results(&self, ) -> Box<Future<Item = ::models::AccumulatedResults, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/accumulatedresults".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn add_credentials(&self, add_credentials_request: ::models::AddCredentialsRequest) -> Box<Future<Item = ::models::ResourceCredentials, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/resources/credentials".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_body_param(add_credentials_request)
            .execute(self.configuration.borrow())
    }

    fn add_evaluation_result(&self, model_history_server_id: &str, evaluation_results_entity: ::models::EvaluationResultsEntity) -> Box<Future<Item = ::models::EvaluationResultsEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rpc/{modelHistoryServerId}/model/revisions/evaluations/".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_body_param(evaluation_results_entity)
            .execute(self.configuration.borrow())
    }

    fn add_example_for_batch(&self, model_history_server_id: &str, add_example_request: ::models::AddExampleRequest) -> Box<Future<Item = ::models::AddExampleRequest, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rpc/{modelHistoryServerId}/model/exampleForBatch".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_body_param(add_example_request)
            .execute(self.configuration.borrow())
    }

    fn add_example_to_minibatch(&self, model_history_server_id: &str, example_entity: ::models::ExampleEntity) -> Box<Future<Item = ::models::ExampleEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rpc/{modelHistoryServerId}/model/example".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_body_param(example_entity)
            .execute(self.configuration.borrow())
    }

    fn add_experiment(&self, model_history_server_id: &str, experiment_entity: ::models::ExperimentEntity) -> Box<Future<Item = ::models::ExperimentEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rpc/{modelHistoryServerId}/experiment".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_body_param(experiment_entity)
            .execute(self.configuration.borrow())
    }

    fn add_feedback_binary(&self, id: &str, _type: &str, file: std::path::PathBuf) -> Box<Future<Item = ::models::FeedbackResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/feedback/{id}/{type}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("id".to_string(), id.to_string())
            .with_path_param("type".to_string(), _type.to_string())
            .with_form_param("file".to_string(), unimplemented!())
            .execute(self.configuration.borrow())
    }

    fn add_feedback_json(&self, id: &str, labels: Vec<Vec<f64>>) -> Box<Future<Item = ::models::FeedbackResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/feedback/{id}/json".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("id".to_string(), id.to_string())
            .with_body_param(labels)
            .execute(self.configuration.borrow())
    }

    fn add_minibatch(&self, model_history_server_id: &str, minibatch_entity: ::models::MinibatchEntity) -> Box<Future<Item = ::models::MinibatchEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rpc/{modelHistoryServerId}/model/minibatch".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_body_param(minibatch_entity)
            .execute(self.configuration.borrow())
    }

    fn add_model_feedback(&self, model_history_server_id: &str, model_feed_back_request: ::models::ModelFeedBackRequest) -> Box<Future<Item = ::models::ModelFeedBackRequest, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rpc/{modelHistoryServerId}/model/feedback".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_body_param(model_feed_back_request)
            .execute(self.configuration.borrow())
    }

    fn add_model_history(&self, model_history_server_id: &str, add_model_history_request: ::models::AddModelHistoryRequest) -> Box<Future<Item = ::models::ModelHistoryEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rpc/{modelHistoryServerId}/modelhistory".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_body_param(add_model_history_request)
            .execute(self.configuration.borrow())
    }

    fn add_model_instance(&self, model_history_server_id: &str, model_instance_entity: ::models::ModelInstanceEntity) -> Box<Future<Item = ::models::ModelInstanceEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rpc/{modelHistoryServerId}/model".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_body_param(model_instance_entity)
            .execute(self.configuration.borrow())
    }

    fn add_resource(&self, add_resource_request: ::models::AddResourceRequest) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/resources/add/resource".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_body_param(add_resource_request)
            .execute(self.configuration.borrow())
    }

    fn add_resource_group(&self, group_name: &str) -> Box<Future<Item = ::models::ResourceGroup, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/resources/add/group".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_body_param(group_name)
            .execute(self.configuration.borrow())
    }

    fn add_resource_to_group(&self, resource_group_id: i64, resource_id: i64) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/resources/add/resourcetogroup/{resourceGroupId}/{resourceId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("resourceGroupId".to_string(), resource_group_id.to_string())
            .with_path_param("resourceId".to_string(), resource_id.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn aggregate_model_results(&self, model_history_server_id: &str, aggregate_prediction: ::models::AggregatePrediction) -> Box<Future<Item = ::models::EvaluationResultsEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rpc/{modelHistoryServerId}/model/aggregateresults".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_body_param(aggregate_prediction)
            .execute(self.configuration.borrow())
    }

    fn change_user_password(&self, user_id: &str, change_password_request: ::models::ChangePasswordRequest) -> Box<Future<Item = ::models::User, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/user/{userId}/password".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("userId".to_string(), user_id.to_string())
            .with_body_param(change_password_request)
            .execute(self.configuration.borrow())
    }

    fn classify(&self, deployment_name: &str, version_name: &str, model_name: &str, body: ::models::Prediction) -> Box<Future<Item = ::models::ClassificationResult, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classify".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn classifyarray(&self, deployment_name: &str, version_name: &str, model_name: &str, body: ::models::Prediction) -> Box<Future<Item = ::models::Base64NdArrayBody, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyarray".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn classifyimage(&self, deployment_name: &str, version_name: &str, model_name: &str, image: std::path::PathBuf) -> Box<Future<Item = ::models::ClassificationResult, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/classifyimage".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_form_param("image".to_string(), unimplemented!())
            .execute(self.configuration.borrow())
    }

    fn clear_state(&self, ) -> Box<Future<Item = ::models::FeedbackResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/clear".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn create_job(&self, job_id_or_type: &str, create_job_request: ::models::CreateJobRequest) -> Box<Future<Item = ::models::JobEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/jobs/{jobIdOrType}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("jobIdOrType".to_string(), job_id_or_type.to_string())
            .with_body_param(create_job_request)
            .execute(self.configuration.borrow())
    }

    fn create_model_history(&self, model_history_server_id: &str, model_history_entity: ::models::ModelHistoryEntity) -> Box<Future<Item = ::models::ModelHistoryEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rpc/{modelHistoryServerId}/model/revisions".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_body_param(model_history_entity)
            .execute(self.configuration.borrow())
    }

    fn delete_credentials_by_id(&self, credential_id: i64) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/resources/credentials/{credentialId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("credentialId".to_string(), credential_id.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn delete_experiment(&self, model_history_server_id: &str, experiment_id: &str) -> Box<Future<Item = ::models::InlineResponse200, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/rpc/{modelHistoryServerId}/experiment/{experimentID}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_path_param("experimentID".to_string(), experiment_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_job_by_id(&self, job_id_or_type: i64) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/jobs/{jobIdOrType}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("jobIdOrType".to_string(), job_id_or_type.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn delete_model(&self, deployment_id: &str, model_id: &str) -> Box<Future<Item = ::models::InlineResponse200, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/deployment/{deploymentId}/model/{modelId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentId".to_string(), deployment_id.to_string())
            .with_path_param("modelId".to_string(), model_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_model_history(&self, model_history_server_id: &str, model_history_id: &str) -> Box<Future<Item = ::models::InlineResponse200, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_path_param("modelHistoryID".to_string(), model_history_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_model_instance(&self, model_history_server_id: &str, model_instance_id: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/rpc/{modelHistoryServerId}/model/{modelInstanceID}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_path_param("modelInstanceID".to_string(), model_instance_id.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn delete_resource_by_id(&self, resource_id: i64) -> Box<Future<Item = ::models::Resource, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/resources/remove/resource/{resourceId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("resourceId".to_string(), resource_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn delete_resource_from_group(&self, resource_group_id: i64, resource_id: i64) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/resources/remove/resourcefromgroup/{resourceGroupId}/{resourceId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("resourceGroupId".to_string(), resource_group_id.to_string())
            .with_path_param("resourceId".to_string(), resource_id.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn delete_resource_group_by_id(&self, resource_group_id: i64) -> Box<Future<Item = ::models::ResourceGroup, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/resources/remove/group/{resourceGroupId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("resourceGroupId".to_string(), resource_group_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn deploy_model(&self, deployment_id: &str, body: ::models::ImportModelRequest) -> Box<Future<Item = ::models::ModelEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/deployment/{deploymentId}/model".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentId".to_string(), deployment_id.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn deployment_create(&self, body: ::models::CreateDeploymentRequest) -> Box<Future<Item = ::models::DeploymentResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/deployment".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn deployment_delete(&self, deployment_id: &str) -> Box<Future<Item = ::models::InlineResponse200, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/deployment/{deploymentId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentId".to_string(), deployment_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn deployment_get(&self, deployment_id: &str) -> Box<Future<Item = ::models::DeploymentResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/deployment/{deploymentId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentId".to_string(), deployment_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn deployments(&self, ) -> Box<Future<Item = Vec<::models::DeploymentResponse>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/deployments".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn detectobjects(&self, deployment_name: &str, version_name: &str, model_name: &str, id: &str, needs_preprocessing: bool, threshold: f32, file: std::path::PathBuf) -> Box<Future<Item = ::models::DetectionResult, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/detectobjects".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_form_param("id".to_string(), id.to_string())
            .with_form_param("needsPreprocessing".to_string(), needs_preprocessing.to_string())
            .with_form_param("threshold".to_string(), threshold.to_string())
            .with_form_param("file".to_string(), unimplemented!())
            .execute(self.configuration.borrow())
    }

    fn download_job_output_file(&self, job_id: i64, download_output_file_request: ::models::DownloadOutputFileRequest) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/jobs/{jobId}/outputfile".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("jobId".to_string(), job_id.to_string())
            .with_body_param(download_output_file_request)
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn generate_auth_token(&self, token_generate_request: ::models::TokenGenerateRequest) -> Box<Future<Item = ::models::Token, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/auth/token".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_body_param(token_generate_request)
            .execute(self.configuration.borrow())
    }

    fn get_all_jobs(&self, ) -> Box<Future<Item = Vec<::models::JobEntity>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/jobs".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn get_array(&self, accept: &str, array_type: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/array/{arrayType}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("arrayType".to_string(), array_type.to_string())
            .with_header_param("accept".to_string(), accept.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_array_indices(&self, content_type: &str, accept: &str, array_type: &str, input: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/array/indices/{arrayType}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("arrayType".to_string(), array_type.to_string())
            .with_header_param("Content-Type".to_string(), content_type.to_string())
            .with_header_param("accept".to_string(), accept.to_string())
            .with_body_param(input)
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_array_range(&self, accept: &str, array_type: &str, from: i32, to: i32) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/array/range/{from}/{to}/{arrayType}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("arrayType".to_string(), array_type.to_string())
            .with_path_param("from".to_string(), from.to_string())
            .with_path_param("to".to_string(), to.to_string())
            .with_header_param("accept".to_string(), accept.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_auth_policy(&self, ) -> Box<Future<Item = ::models::AuthPolicy, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/auth/policy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn get_best_model_among_model_ids(&self, model_history_server_id: &str, best_model: ::models::BestModel) -> Box<Future<Item = ::models::ModelInstanceEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rpc/{modelHistoryServerId}/model/best".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_body_param(best_model)
            .execute(self.configuration.borrow())
    }

    fn get_credentials_by_id(&self, credential_id: i64) -> Box<Future<Item = ::models::ResourceCredentials, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/resources/credentials/{credentialId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("credentialId".to_string(), credential_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_current_model(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/model".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_evaluation_for_model_id(&self, model_history_server_id: &str, model_instance_id: &str) -> Box<Future<Item = Vec<::models::EvaluationResultsEntity>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/rpc/{modelHistoryServerId}/model/revisions/evaluations/{modelInstanceID}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_path_param("modelInstanceID".to_string(), model_instance_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_examples_for_minibatch(&self, model_history_server_id: &str, minibatch_id: &str) -> Box<Future<Item = Vec<::models::ExampleEntity>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/rpc/{modelHistoryServerId}/model/example/{minibatchId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_path_param("minibatchId".to_string(), minibatch_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_experiment(&self, model_history_server_id: &str, experiment_id: &str) -> Box<Future<Item = ::models::ExperimentEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/rpc/{modelHistoryServerId}/experiment/{experimentID}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_path_param("experimentID".to_string(), experiment_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_experiments_for_model_history(&self, model_history_server_id: &str, model_history_id: &str) -> Box<Future<Item = Vec<::models::ExperimentEntity>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/rpc/{modelHistoryServerId}/experiments/{modelHistoryID}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_path_param("modelHistoryID".to_string(), model_history_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_job_by_id(&self, job_id_or_type: i64) -> Box<Future<Item = ::models::JobEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/jobs/{jobIdOrType}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("jobIdOrType".to_string(), job_id_or_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_last_evaluation(&self, ) -> Box<Future<Item = ::models::EvaluationResultsEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/lastevaluation".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn get_minibatch(&self, model_history_server_id: &str, minibatch_id: &str) -> Box<Future<Item = ::models::MinibatchEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/rpc/{modelHistoryServerId}/model/minibatch/{minibatchId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_path_param("minibatchId".to_string(), minibatch_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_model_details(&self, deployment_id: &str, model_id: &str) -> Box<Future<Item = ::models::ModelEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/deployment/{deploymentId}/model/{modelId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentId".to_string(), deployment_id.to_string())
            .with_path_param("modelId".to_string(), model_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_model_history(&self, model_history_server_id: &str, model_history_id: &str) -> Box<Future<Item = ::models::ModelHistoryEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/rpc/{modelHistoryServerId}/model/revision/{modelHistoryID}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_path_param("modelHistoryID".to_string(), model_history_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_model_instance(&self, model_history_server_id: &str, model_instance_id: &str) -> Box<Future<Item = ::models::ModelInstanceEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/rpc/{modelHistoryServerId}/model/{modelInstanceID}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_path_param("modelInstanceID".to_string(), model_instance_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_models_for_experiment(&self, model_history_server_id: &str, experiment_id: &str) -> Box<Future<Item = Vec<::models::ModelInstanceEntity>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/rpc/{modelHistoryServerId}/experiment/{experimentID}/models".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_path_param("experimentID".to_string(), experiment_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_resource_by_id(&self, resource_id: i64) -> Box<Future<Item = ::models::Resource, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/resources/resource/{resourceId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("resourceId".to_string(), resource_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_resource_by_sub_type(&self, resource_sub_type: &str) -> Box<Future<Item = Vec<::models::Resource>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/resources/resources/subtype/{resourceSubType}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("resourceSubType".to_string(), resource_sub_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_resource_by_type(&self, resource_type: &str) -> Box<Future<Item = Vec<::models::Resource>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/resources/resources/type/{resourceType}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("resourceType".to_string(), resource_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_resource_details_by_id(&self, resource_id: i64) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/resources/details/{resourceId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("resourceId".to_string(), resource_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_resource_group_by_id(&self, resource_group_id: i64) -> Box<Future<Item = ::models::ResourceGroup, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/resources/group/{resourceGroupId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("resourceGroupId".to_string(), resource_group_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_resource_groups(&self, ) -> Box<Future<Item = Vec<::models::ResourceGroup>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/resources/groups".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn get_resources(&self, ) -> Box<Future<Item = Vec<::models::Resource>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/resources/resources".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn get_resources_from_group(&self, resource_group_id: i64) -> Box<Future<Item = Vec<::models::Resource>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/resources/group/{resourceGroupId}/resources".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("resourceGroupId".to_string(), resource_group_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_roles(&self, ) -> Box<Future<Item = Vec<::models::Role>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/security/roles".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn get_user(&self, user_id: &str) -> Box<Future<Item = ::models::User, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/user/{userId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("userId".to_string(), user_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_user_auth_tokens(&self, user_id: &str, only_valid: bool) -> Box<Future<Item = Vec<::models::Token>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/auth/{userId}/tokens".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_query_param("onlyValid".to_string(), only_valid.to_string())
            .with_path_param("userId".to_string(), user_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_users(&self, ) -> Box<Future<Item = Vec<::models::User>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/security/users".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn is_training(&self, ) -> Box<Future<Item = ::models::RetrainingStatus, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/istraining".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn jsonarray(&self, deployment_name: &str, version_name: &str, model_name: &str, body: ::models::Prediction) -> Box<Future<Item = ::models::JsonArrayResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/jsonarray".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn knn(&self, deployment_name: &str, version_name: &str, knn_name: &str, body: ::models::NearestNeighborRequest) -> Box<Future<Item = ::models::NearestNeighborsResults, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knn".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("knnName".to_string(), knn_name.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn knnnew(&self, deployment_name: &str, version_name: &str, knn_name: &str, body: ::models::Base64NdArrayBodyKnn) -> Box<Future<Item = ::models::NearestNeighborsResults, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/knn/{knnName}/{versionName}/knnnew".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("knnName".to_string(), knn_name.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn list_all_experiments(&self, model_history_server_id: &str) -> Box<Future<Item = Vec<::models::ExperimentEntity>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/rpc/{modelHistoryServerId}/experiments".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn logfilepath(&self, deployment_name: &str, version_name: &str, model_name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logfilepath".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn login(&self, login_request: ::models::LoginRequest) -> Box<Future<Item = ::models::LoginResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/login".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_body_param(login_request)
            .execute(self.configuration.borrow())
    }

    fn logs(&self, deployment_name: &str, version_name: &str, model_name: &str, log_request: ::models::LogRequest) -> Box<Future<Item = ::models::LogBatch, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/logs".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_body_param(log_request)
            .execute(self.configuration.borrow())
    }

    fn meta_get(&self, deployment_name: &str, version_name: &str, model_name: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn meta_post(&self, content_type: &str, deployment_name: &str, version_name: &str, model_name: &str, body: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/meta".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_header_param("Content-Type".to_string(), content_type.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn model_state_change(&self, deployment_id: &str, model_id: &str, body: ::models::SetState) -> Box<Future<Item = ::models::ModelEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/deployment/{deploymentId}/model/{modelId}/state".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentId".to_string(), deployment_id.to_string())
            .with_path_param("modelId".to_string(), model_id.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn models(&self, deployment_id: &str) -> Box<Future<Item = Vec<::models::ModelEntity>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/deployment/{deploymentId}/models".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentId".to_string(), deployment_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn modelset(&self, deployment_name: &str, version_name: &str, model_name: &str, file: std::path::PathBuf) -> Box<Future<Item = ::models::ModelStatus, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelset".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_form_param("file".to_string(), unimplemented!())
            .execute(self.configuration.borrow())
    }

    fn modelupdate(&self, deployment_name: &str, version_name: &str, model_name: &str, file: std::path::PathBuf) -> Box<Future<Item = ::models::ModelStatus, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/modelupdate".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_form_param("file".to_string(), unimplemented!())
            .execute(self.configuration.borrow())
    }

    fn multiclassify(&self, deployment_name: &str, version_name: &str, model_name: &str, body: ::models::Prediction) -> Box<Future<Item = ::models::MultiClassClassificationResult, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multiclassify".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn multipredict(&self, deployment_name: &str, version_name: &str, model_name: &str, body: ::models::MultiPredictRequest) -> Box<Future<Item = ::models::MultiPredictResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredict".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn multipredictimage(&self, deployment_name: &str, version_name: &str, model_name: &str, file: std::path::PathBuf, id: &str, needs_preprocessing: bool) -> Box<Future<Item = ::models::MultiPredictResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/multipredictimage".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_form_param("file".to_string(), unimplemented!())
            .with_form_param("id".to_string(), id.to_string())
            .with_form_param("needs_preprocessing".to_string(), needs_preprocessing.to_string())
            .execute(self.configuration.borrow())
    }

    fn num_revisions(&self, ) -> Box<Future<Item = ::models::RevisionsWritten, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/numrevisions".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

    fn predict(&self, deployment_name: &str, version_name: &str, model_name: &str, body: ::models::Prediction) -> Box<Future<Item = ::models::Prediction, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predict".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn predict_error(&self, content_type: &str, operation: &str, input_type: &str, input_data: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/{operation}/{inputType}/error".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("operation".to_string(), operation.to_string())
            .with_path_param("inputType".to_string(), input_type.to_string())
            .with_header_param("Content-Type".to_string(), content_type.to_string())
            .with_body_param(input_data)
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn predict_v2_file(&self, operation: &str, input_type_file: &str, input_data: std::path::PathBuf) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/{operation}/{inputTypeFile}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("operation".to_string(), operation.to_string())
            .with_path_param("inputTypeFile".to_string(), input_type_file.to_string())
            .with_form_param("inputData".to_string(), unimplemented!())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn predict_v2_json(&self, content_type: &str, operation: &str, input_type_json: &str, input_data: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/{operation}/{inputTypeJson}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("operation".to_string(), operation.to_string())
            .with_path_param("inputTypeJson".to_string(), input_type_json.to_string())
            .with_header_param("Content-Type".to_string(), content_type.to_string())
            .with_body_param(input_data)
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn predictimage(&self, deployment_name: &str, version_name: &str, model_name: &str, image: std::path::PathBuf) -> Box<Future<Item = ::models::Prediction, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictimage".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_form_param("image".to_string(), unimplemented!())
            .execute(self.configuration.borrow())
    }

    fn predictwithpreprocess(&self, deployment_name: &str, version_name: &str, model_name: &str, body: Vec<String>) -> Box<Future<Item = ::models::Prediction, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocess".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn predictwithpreprocessjson(&self, deployment_name: &str, version_name: &str, model_name: &str, body: Vec<String>) -> Box<Future<Item = ::models::JsonArrayResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/model/{modelName}/{versionName}/predictwithpreprocessjson".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("modelName".to_string(), model_name.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn raw_predict_binary(&self, input_type: &str, output_type: &str, input_data: std::path::PathBuf) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/raw/{inputType}/{outputType}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("inputType".to_string(), input_type.to_string())
            .with_path_param("outputType".to_string(), output_type.to_string())
            .with_form_param("inputData".to_string(), unimplemented!())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn refresh_job_status(&self, job_id: i64) -> Box<Future<Item = ::models::JobEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/jobs/{jobId}/refresh".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("jobId".to_string(), job_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn register_user(&self, user: ::models::User) -> Box<Future<Item = ::models::User, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/user/register".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_body_param(user)
            .execute(self.configuration.borrow())
    }

    fn reimport_model(&self, deployment_id: &str, model_id: &str, body: ::models::ImportModelRequest) -> Box<Future<Item = ::models::ModelEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/deployment/{deploymentId}/model/{modelId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentId".to_string(), deployment_id.to_string())
            .with_path_param("modelId".to_string(), model_id.to_string())
            .with_body_param(body)
            .execute(self.configuration.borrow())
    }

    fn revoke_user_token(&self, token_id: i64) -> Box<Future<Item = ::models::Token, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/auth/token/{tokenId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("tokenId".to_string(), token_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn rollback(&self, index: i32) -> Box<Future<Item = ::models::RollbackStatus, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rollback/{index}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("index".to_string(), index.to_string())
            .execute(self.configuration.borrow())
    }

    fn run_a_job(&self, job_id: i64) -> Box<Future<Item = ::models::JobEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/jobs/{jobId}/run".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("jobId".to_string(), job_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn transform_csv(&self, deployment_name: &str, version_name: &str, transform_name: &str, batch_csv_record: ::models::BatchCsvRecord) -> Box<Future<Item = ::models::BatchCsvRecord, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transform".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("transformName".to_string(), transform_name.to_string())
            .with_body_param(batch_csv_record)
            .execute(self.configuration.borrow())
    }

    fn transformarray(&self, deployment_name: &str, version_name: &str, transform_name: &str, batch_record: ::models::BatchRecord) -> Box<Future<Item = ::models::Base64NdArrayBody, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformarray".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("transformName".to_string(), transform_name.to_string())
            .with_body_param(batch_record)
            .execute(self.configuration.borrow())
    }

    fn transformimage(&self, deployment_name: &str, version_name: &str, image_transform_name: &str, files: Vec<std::path::PathBuf>) -> Box<Future<Item = ::models::Base64NdArrayBody, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformimage".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("imageTransformName".to_string(), image_transform_name.to_string())
            .with_form_param("files".to_string(), unimplemented!())
            .execute(self.configuration.borrow())
    }

    fn transformincremental_csv(&self, deployment_name: &str, version_name: &str, transform_name: &str, single_csv_record: ::models::SingleCsvRecord) -> Box<Future<Item = ::models::SingleCsvRecord, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincremental".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("transformName".to_string(), transform_name.to_string())
            .with_body_param(single_csv_record)
            .execute(self.configuration.borrow())
    }

    fn transformincrementalarray(&self, deployment_name: &str, version_name: &str, transform_name: &str, single_record: ::models::SingleRecord) -> Box<Future<Item = ::models::Base64NdArrayBody, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformincrementalarray".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("transformName".to_string(), transform_name.to_string())
            .with_body_param(single_record)
            .execute(self.configuration.borrow())
    }

    fn transformincrementalimage(&self, deployment_name: &str, version_name: &str, image_transform_name: &str, file: std::path::PathBuf) -> Box<Future<Item = ::models::Base64NdArrayBody, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/datavec/{imageTransformName}/{versionName}/transformincrementalimage".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("imageTransformName".to_string(), image_transform_name.to_string())
            .with_form_param("file".to_string(), unimplemented!())
            .execute(self.configuration.borrow())
    }

    fn transformprocess_get(&self, deployment_name: &str, version_name: &str, transform_name: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("transformName".to_string(), transform_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn transformprocess_post(&self, content_type: &str, deployment_name: &str, version_name: &str, transform_name: &str, transform_process: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/endpoints/{deploymentName}/datavec/{transformName}/{versionName}/transformprocess".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("deploymentName".to_string(), deployment_name.to_string())
            .with_path_param("versionName".to_string(), version_name.to_string())
            .with_path_param("transformName".to_string(), transform_name.to_string())
            .with_header_param("Content-Type".to_string(), content_type.to_string())
            .with_body_param(transform_process)
            .execute(self.configuration.borrow())
    }

    fn update_auth_policy(&self, auth_policy: ::models::AuthPolicy) -> Box<Future<Item = ::models::AuthPolicy, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/auth/policy".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_body_param(auth_policy)
            .execute(self.configuration.borrow())
    }

    fn update_best_model_for_experiment(&self, model_history_server_id: &str, update_best_model: ::models::UpdateBestModel) -> Box<Future<Item = ::models::ExperimentEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rpc/{modelHistoryServerId}/experiment/best".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_body_param(update_best_model)
            .execute(self.configuration.borrow())
    }

    fn update_experiment(&self, model_history_server_id: &str, experiment_id: &str, experiment_entity: ::models::ExperimentEntity) -> Box<Future<Item = ::models::ExperimentEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/rpc/{modelHistoryServerId}/experiment/{experimentID}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_path_param("experimentID".to_string(), experiment_id.to_string())
            .with_body_param(experiment_entity)
            .execute(self.configuration.borrow())
    }

    fn update_model_history(&self, model_history_server_id: &str, model_history_id: &str, update_model_history_request: ::models::AddModelHistoryRequest) -> Box<Future<Item = ::models::ModelHistoryEntity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/rpc/{modelHistoryServerId}/modelhistory/{modelHistoryID}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_path_param("modelHistoryServerId".to_string(), model_history_server_id.to_string())
            .with_path_param("modelHistoryID".to_string(), model_history_id.to_string())
            .with_body_param(update_model_history_request)
            .execute(self.configuration.borrow())
    }

    fn update_user(&self, user: ::models::User) -> Box<Future<Item = ::models::User, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/user".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_body_param(user)
            .execute(self.configuration.borrow())
    }

    fn upload(&self, file: std::path::PathBuf) -> Box<Future<Item = ::models::FileUploadList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/api/upload/model".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Key".to_owned(),
            }))
            .with_form_param("file".to_string(), unimplemented!())
            .execute(self.configuration.borrow())
    }

}
